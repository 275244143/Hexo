<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PlantUML画结构图</title>
      <link href="/2021/03/11/PlantUML%E7%94%BB%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
      <url>/2021/03/11/PlantUML%E7%94%BB%E7%BB%93%E6%9E%84%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">@startuml<br>skinparam handwritten true<br>skinparam package  &#123;<br>BackgroundColor #00ff00<br>&#125;<br><br>package &quot;LDPC-TOP&quot; &#123;<br><br><br>[LDPC CSR port]<br>package &quot;TX-DMA-0~3&quot; #red &#123;<br>   [LDPC TX-DMA port]<br>&#125;<br>package &quot;RX-DMA-0~1&quot; #red &#123;<br>   [LDPC RX-DMA port]<br>&#125;<br>[LDPC CRG port] <br>[LDPC DDR4 port] <br>[LDPC Registers]<br><br>&#125;<br>package &quot;TX-DMA-Agent-0~3&quot; #1199AA &#123;<br>    [LDPC TX-DMA port] &lt;-down-&gt; [TX-DMA-Agent]<br>&#125;<br>package &quot;RX-DMA-Agent-0~1&quot; #1199AA &#123;<br>    [LDPC RX-DMA port] &lt;-down-&gt; [RX-DMA-Agent]<br>&#125;<br>  [LDPC CSR port] &lt;-down-&gt; [CSR-Agent]<br>  [LDPC CRG port]  &lt;-down- [CRG-Agent]<br>  [LDPC DDR4 port] &lt;-down-&gt; [DDR4-Memory-Model]<br>  [LDPC Registers] &lt;-right-&gt; [UVM-RAL]<br><br>@enduml<br></code></pre></td></tr></table></figure><p><img src="/2021/03/11/PlantUML画结构图/plantuml.png" alt="p1"></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">@startuml<br><br>start<br>:启动相关时钟及复位信号;<br>:启动4通道TXDMA-RD进程;<br>fork<br><br>:获得TXDMA-RD发送报文队列0;<br>while (DDR4校验成功 &amp;&amp; DDR4 DataReady) is (false)<br>endwhile (true)<br><br>while (TXDMA-RD发送报文队列0非空) is (true)<br>:@等待TXDMA-WR结束标志以及记录相关标志计数器;<br>:TXDMA-RD SEQUENCE读取激励数据发送DMA 读ITEM;<br>:-&gt;触发结束发送标志以及记录相关标志计数器;<br>endwhile (true)<br>fork again<br>:获得TXDMA-RD发送报文队列1;<br>while (DDR4校验成功 &amp;&amp; DDR4 DataReady) is (false)<br>endwhile (true)<br><br>while (TXDMA-RD发送报文队列1非空) is (true)<br>:@等待TXDMA-WR结束标志以及记录相关标志计数器;<br>:TXDMA-RD SEQUENCE读取激励数据发送DMA 读ITEM;<br>:-&gt;触发结束发送标志以及记录相关标志计数器;<br>endwhile (true)<br>fork again<br>:获得TXDMA-RD发送报文队列2;<br><br>while (DDR4校验成功 &amp;&amp; DDR4 DataReady) is (false)<br>endwhile (true)<br><br>while (TXDMA-RD发送报文队列2非空) is (true)<br>:@等待TXDMA-WR结束标志以及记录相关标志计数器;<br>:TXDMA-RD SEQUENCE读取激励数据发送DMA 读ITEM;<br>:-&gt;触发结束发送标志以及记录相关标志计数器;<br>endwhile (true)<br><br>fork again<br>:获得TXDMA-RD发送报文队列3;<br>while (DDR4校验成功 &amp;&amp; DDR4 DataReady) is (false)<br>endwhile (true)<br><br>while (TXDMA-RD发送报文队列3非空) is (true)<br>:@等待TXDMA-WR结束标志以及记录相关标志计数器;<br>:TXDMA-RD SEQUENCE读取激励数据发送DMA 读ITEM;<br>:-&gt;触发结束发送标志以及记录相关标志计数器;<br>endwhile (false)<br><br>end fork<br><br>:进入自动比对进程;<br><br>stop<br><br>@enduml<br></code></pre></td></tr></table></figure><p><img src="/2021/03/11/PlantUML画结构图/plantuml1.png" alt="p1"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uvm:finish_on_completion</title>
      <link href="/2021/03/11/uvm-finish-on-completion/"/>
      <url>/2021/03/11/uvm-finish-on-completion/</url>
      
        <content type="html"><![CDATA[<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>I observed a code in TB ::</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">initial  begin<br> <br>   run_test(&quot;sanity_test&quot;) ; <br>   $display(&quot; test finishes&quot;);<br> <br>end<br></code></pre></td></tr></table></figure><p>The $display() statement after run_test() doesn’t get displayed due to Implicit call to $finish</p><p>So just for coding purpose I decided to have the display statement executed ::</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_pkg.sv"</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_macros.svh" </span><br> <br><span class="hljs-keyword">import</span> uvm_pkg::*;<br> <br><span class="hljs-keyword">module</span>  top_tb ;<br> <br> <br>    <span class="hljs-keyword">class</span> test1 <span class="hljs-keyword">extends</span> uvm_test ;<br>       <span class="hljs-meta">`uvm_component_utils (test1)</span><br> <br>       <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name , uvm_component parent );<br>          <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span> (name, parent);<br>       <span class="hljs-keyword">endfunction</span><br> <br>       <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase (uvm_phase phase);<br> <br>          <span class="hljs-meta">`uvm_info(get_name,$sformatf(" In build_phase() of test1 "),UVM_NONE)</span><br> <br>       <span class="hljs-keyword">endfunction</span><br> <br>    <span class="hljs-keyword">endclass</span><br> <br>     <span class="hljs-keyword">initial</span>  <span class="hljs-keyword">begin</span><br> <br>         uvm_top<span class="hljs-variable">.finish_on_completion</span> = <span class="hljs-number">0</span>  ;<br> <br>         run_test(<span class="hljs-string">"test1"</span>);<br> <br>         <span class="hljs-built_in">$display</span>(<span class="hljs-string">" I want  to   Observe  this "</span>) ;<br> <br>         <span class="hljs-built_in">$finish</span> ;<br> <br>     <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>But I still don’t observe the display</p><p><strong>UVM_INFO @ 0: reporter [RNTST] Running test test1…UVM_INFO @ 0: uvm_test_top [uvm_test_top] In build_phase() of test1</strong></p><p><strong>Any thoughts why I don’t see the display statement ?</strong></p><h3 id="ANS"><a href="#ANS" class="headerlink" title="ANS"></a>ANS</h3><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">initial</span>  <span class="hljs-keyword">begin</span><br> <br>         uvm_root top;<br> <br>         top = uvm_root::get();<br> <br>         top<span class="hljs-variable">.finish_on_completion</span> = <span class="hljs-number">0</span>  ;<br> <br>         run_test(<span class="hljs-string">"test1"</span>);<br> <br>         <span class="hljs-built_in">$display</span>(<span class="hljs-string">" I want  to   Observe  this "</span>) ;<br> <br>         <span class="hljs-built_in">$finish</span> ;<br> <br>     <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set byte_en in register read/write</title>
      <link href="/2021/02/25/set-byte-en-in-register-read-write/"/>
      <url>/2021/02/25/set-byte-en-in-register-read-write/</url>
      
        <content type="html"><![CDATA[<h3 id="How-can-i-set-byte-en-in-register-read-write"><a href="#How-can-i-set-byte-en-in-register-read-write" class="headerlink" title="How can i set byte_en in register read/write?"></a>How can i set byte_en in register read/write?</h3><h4 id="ANS"><a href="#ANS" class="headerlink" title="ANS"></a>ANS</h4><p>You have to set the corresponding field in the configure method. The last argument has to be set to ‘1’ like this<br><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">configure(<span class="hljs-keyword">this</span>, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-string">"RO"</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> );<br></code></pre></td></tr></table></figure></p><p>And you have to specify this in the reg2bus function of the adapter like this:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_sequence_item reg2bus(<span class="hljs-keyword">const</span> <span class="hljs-keyword">ref</span> uvm_reg_bus_op rw);<br>....<br><span class="hljs-keyword">foreach</span> (rw<span class="hljs-variable">.byte_en</span>[i])<br>      trans<span class="hljs-variable">.byte_enable</span>[i] = rw<span class="hljs-variable">.byte_en</span>[i];<br></code></pre></td></tr></table></figure><p>In the constructor of the adapter you have to set the corresponding bit</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">this</span><span class="hljs-variable">.supports_byte_enable</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux新手学习</title>
      <link href="/2021/02/04/Linux%E6%96%B0%E6%89%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/02/04/Linux%E6%96%B0%E6%89%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://mp.weixin.qq.com/s/ZralWEfG2WJfZ-G-x9biow" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ZralWEfG2WJfZ-G-x9biow</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLo8ZzT5QI3VAWgWvoYCrnib8UUIMdcty6J23T4mHVaM3keAia827VATQz3BM3w7rpJY9icya5Q2bxjiaw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simulation delay after UVM_MAX_QUIT_COUNT</title>
      <link href="/2021/02/02/simulation-delay-after-UVM-MAX-QUIT-COUNT/"/>
      <url>/2021/02/02/simulation-delay-after-UVM-MAX-QUIT-COUNT/</url>
      
        <content type="html"><![CDATA[<h3 id="add-simulation-delay-after-UVM-MAX-QUIT-COUNT-reached"><a href="#add-simulation-delay-after-UVM-MAX-QUIT-COUNT-reached" class="headerlink" title="add simulation delay after UVM_MAX_QUIT_COUNT reached"></a>add simulation delay after UVM_MAX_QUIT_COUNT reached</h3><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_report_catcher <span class="hljs-keyword">extends</span> uvm_report_catcher;<br>  <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> max_error = <span class="hljs-number">1</span>; <span class="hljs-comment">// limit</span><br>  <span class="hljs-keyword">time</span> fatal_timeout = <span class="hljs-number">20</span>ns; <span class="hljs-comment">// amount to delay before exiting</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name = <span class="hljs-string">""</span>); <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name); <span class="hljs-keyword">endfunction</span><br>  <span class="hljs-keyword">function</span> action_e catch; <br>    <span class="hljs-keyword">if</span> (get_severity() == UVM_ERROR  &amp;&amp; --max_error == <span class="hljs-number">0</span>) <span class="hljs-comment">// short-circuit &amp;&amp; operator</span><br>      <span class="hljs-keyword">fork</span> <br>        #fatal_timeout get_client()<span class="hljs-variable">.die</span>();<br>      <span class="hljs-keyword">join_none</span><br>    <span class="hljs-keyword">return</span> THROW;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span> : my_report_catcher<br></code></pre></td></tr></table></figure><p>Then in your test</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">my_report_catcher rc_h;<br>rc_h = <span class="hljs-keyword">new</span>(<span class="hljs-string">"rc"</span>);<br>rc_h<span class="hljs-variable">.max_error</span> = <span class="hljs-number">10</span>;<br>rc_h<span class="hljs-variable">.fatal_timeout</span> = <span class="hljs-number">100</span>ms;<br>uvm_report_cb::add(<span class="hljs-literal">null</span>, rc_h); <span class="hljs-comment">// all errors in all contexts</span><br></code></pre></td></tr></table></figure><p>P.S. UVM calls die() when reaching MAX_QUIT_COUNT.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV&amp;C&amp;PYTHON</title>
      <link href="/2021/01/29/SV-C-PYTHON/"/>
      <url>/2021/01/29/SV-C-PYTHON/</url>
      
        <content type="html"><![CDATA[<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>We built a high level model in python, we made use of the scipy library to quickly test some things. Now we’re building a verification environment in SystemVerilog using the OVM. We would like to use the python implementation as a golden model. Therefor we need to cosimulate python and SystemVerilog, but I couldn’t find any documentation whether this is possible? (We’re using Questa). Any ideas?</p><h3 id="ANS"><a href="#ANS" class="headerlink" title="ANS"></a>ANS</h3><p>@@@</p><p>EXAMPLE<br><strong>SV-CODE</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined"> ////////////////////////////////////////////////////////////////////////<br> //IMPORT FUNCTION DPI DECLARATION FROM C<br> ////////////////////////////////////////////////////////////////////////            <br>import &quot;DPI-C&quot; function void python_sign_msg(string key_file_name, string msg_file_name, string signed_file_name );<br>import &quot;DPI-C&quot; function string return_string_in_c(string text, inout string output_txt);    <br> <br> <br>typedef class keycontrol_seq_handles;<br>//-----------------------<br>class keycontrol_predictor#(int PARAM_PLACEHOLDER = 1) extends pve_predictor#(keycontrol_seq_handles);//extends uvm_component;<br>………..<br>//////////////////////<br>//USE OF DPI<br>//////////////////////<br>string output_c,output2_c;<br>output_c = return_string_in_c(&quot;This text&quot;,output2_c); <br>python_sign_msg(&quot;file.txt&quot;,&quot;bla&quot;,&quot;blo&quot;);<br> <br>endclass<br></code></pre></td></tr></table></figure><p><strong>C-CODE</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs undefined">//include DPI<br>#include &quot;svdpi.h&quot;<br>//include the IO files<br>#include &lt;stdio.h&gt;<br>//include string functions<br>#include &lt;string.h&gt;<br>//include use of malloc<br>#include &lt;stdlib.h&gt;<br>//include Phyton embed lib<br>#include &lt;Python.h&gt;<br> <br> <br>//to add the ability to use printf<br>// same inputs as defined in SV with python path which is the defined surrounded by double quotes &quot;&quot;<br> <br>#ifndef PYTHON_PATH<br>#error You must define the path to the python file in gcc compiler with -D &apos;PYTHON_PATH=&quot;&apos;$PYTHON_DIR&apos;&quot;&apos; or vlog with -ccflags &quot;-I/usr/include/python2.6/ -D &apos;PYTHON_PATH=\&quot;$PYTHON_DIR\&quot;&apos;&quot;<br>#endif<br> <br> /* function declaration */<br>void python_sign_msg( char *key_file_name, char *msg_file_name, char *signed_file_name ) &#123;<br> <br> <br>          char *append_path = malloc(sizeof(char) * 1000);<br>          append_path = PYTHON_PATH&quot;:.&quot;;<br>          printf(&quot;Append to path is:\n%s\n&quot;, append_path);           <br>          setenv(&quot;PYTHONPATH&quot;,append_path,1);//Set PYTHONPATH TO working directory                 char *path = Py_GetPath();<br>          printf(&quot;Python search path is:\n%s\n&quot;, path);<br> <br>          int argc;<br>          char * argv[2];<br>          char *phyton_script_name = malloc(sizeof(char) * 100);<br>          phyton_script_name = &quot;test&quot;;//don&apos;t use the .py extension here<br> <br> <br>          argc = 3;//argument count is 3 arguments<br>          argv[0] = phyton_script_name;//key_file_name;//&quot;mymod&quot;;//the argument value vector is<br>          argv[1] = &quot;4&quot;;<br>          argv[2] = &quot;3&quot;;<br> <br>           Py_Initialize();// Initialize the Python Interpreter<br> <br>           //First import python script module name<br> <br>           PySys_SetArgv(argc, argv);//set the previous arguments as calling arguments of the import module<br>           //PyObject* myPmodule = PyImport_ImportModule(&quot;sign_hmac-sha256&quot;);//don&apos;t put the .py extension here<br>           PyObject* myPmodule = PyImport_ImportModule(phyton_script_name);//IMPORTANT THE MAIN MODULE IS EXECUTED here with the PySys_SetArgv arguments<br>           if(myPmodule==NULL)<br>           &#123;<br>               printf(&quot;Not able to load&amp;execute main phyton script:\n%s\n&quot;, phyton_script_name);<br>               PyErr_Print();<br>           &#125;<br>           ///////////////////////////////<br>           //Extract variables through dict<br>           //////////////////////////////<br>           //retrieve all variables and functions of the module in a namespace or dict<br>           PyObject *module_dict   = PyModule_GetDict(myPmodule);<br> <br>           char *function_name = malloc(sizeof(char) * 100);<br>           function_name = &quot;suma&quot;;//don&apos;t use the .py extension here<br>           //getting the reference to the specific python function you want from the python script<br>           PyObject* myPfunction = PyObject_GetAttrString(myPmodule, function_name);<br> <br>           if (PyCallable_Check(myPfunction))<br>           &#123;<br>               //EXAMPLE CREATE arguments in Python <br>               //PyObject* myPargs=Py_BuildValue(&quot;(z)&quot;,(char*)&quot;something&quot;);<br>               //PyObject* myPargs = PyTuple_Pack(1,PyFloat_FromDouble(2.0));<br>               //ok = PyArg_ParseTuple(args, &quot;lls&quot;, &amp;k, &amp;l, &amp;s); /* Two longs and a string */<br>               //PyObject* myPargs = Py_BuildValue(&quot;sss&quot;,key_file_name,msg_file_name,signed_file_name); /* Three strings */<br>               //Execute the function with arguments directly<br>               //PyObject* result = PyObject_CallObject(myPfunction, (char*)&quot;something&quot;, (char*)&quot;something&quot;, (char*)&quot;something&quot;);/* Three strings */               <br>               //PyObject* myPargs = Py_BuildValue(&quot;zz&quot;,&quot;4&quot; ,&quot;3&quot;);<br>               PyObject* myPargs = Py_BuildValue(&quot;ii&quot;,4 ,3);<br>               PyObject* item=PyTuple_GetItem(myPargs,0);//get the item of the tuple position 0 <br>               printf(&quot;Python tuple: %d\n&quot;, (int)PyInt_AsSsize_t(item)); /*incase an integer*/<br>               //printf(&quot;Python tuple: %s\n&quot;, PyString_AsString(item));<br>               PyErr_Print();               <br>               PyObject* result = PyObject_CallObject(myPfunction, myPargs);//the myPargs must be always be a Pyobject               <br> <br>               PyErr_Print();<br>               Py_DECREF(myPargs);<br>               Py_DECREF(item);<br>               Py_DECREF(result);<br>           &#125; else <br>           &#123;<br>               printf(&quot;The function:\n%s\n&quot;, function_name);<br>               //Pring errors comming from Python<br>               PyErr_Print();<br>           &#125;<br> <br> <br>           ////////////////////////////////////////<br>           // Clean up phase<br>           ////////////////////////////////////////<br>           Py_DECREF(myPmodule);<br>           Py_DECREF(myPfunction);<br> <br> <br> <br>           Py_Finalize();// Finish the Python Interpreter<br>&#125;<br> <br> /* function declaration text char stream passed as pointer value and text2 passed as pointer reference */<br>  char * return_string_in_c( char *text,  char **text2) &#123;<br>    char *fix=&quot;This variable cannot be changed although it is a pointer, just as example&quot;;/*fix allocation and constant*/<br>    char dest[50]=&quot;Variable array created in a function:&quot;;/* String array max 50 chars allocated*/<br>    char *out = malloc(sizeof(char) * 100);/* Dynamic string max 100 chars allocated*/<br>    /* Concatenate input text and put in out of strcat*/<br>    //strcat(out, text);/* initialize out using text string*/<br>    snprintf(out, sizeof(char) * 100, &quot;%s%s&quot;, out,text);<br>    printf(&quot;fix : |%s|,dest : |%s|,text : |%s|,out : |%s|\n&quot;, fix,dest,text,out);<br>    *text2=dest;/* allocate pointer value with dest*/<br>    *text2=out;/* allocate pointer value with out*/<br>    return out;<br>&#125;<br> <br> /* main */<br> void main() &#123;<br>    char text[100]=&quot;from_main_text_variable&quot;;/*max 100 chars allocated*/<br>    char *text2;/* pointer not allocated*/<br>    char *point = return_string_in_c(text, &amp;text2);/* &amp;text2 passing by reference*/<br>    printf(&quot;Final destination string : |%s|\n&quot;, text2);<br>    printf(&quot;point output : |%s|\n&quot;, point);       <br> <br>    printf(&quot;DEFINED PYTHON_PATH: |%s|\n&quot;, PYTHON_PATH);<br>    python_sign_msg(&quot;&quot;,&quot;&quot;,&quot;&quot;);<br>    printf(&quot;Finished python\n&quot;);<br> <br> &#125;<br></code></pre></td></tr></table></figure><p><strong>PYTHON SCRIPT - TEST.py,</strong><br>very important to remove TABS!!!!!!</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#!/usr/bin/python<br># This program adds two numbers<br>import sys<br> <br>if( len( sys.argv ) &lt; 3 ) :<br>    raise( Exception( &quot;Usage: test.py number1 number2&quot; ) )<br> <br>num1 = int(sys.argv[ 1 ])<br>print &quot;sys.argv[ 1 ] : &quot;,int(sys.argv[ 1 ])<br>num2 = int(sys.argv[ 2 ])<br>print &quot;sys.argv[ 2 ] : &quot;, int(sys.argv[ 2 ])<br> <br>#the suma function definition<br>def suma( arg1, arg2 ):<br>    # Add both the parameters and return them.&quot;<br>    total = arg1 + arg2; # Here total is local variable.<br>    print &quot;Inside the function local total : &quot;, total<br>    return total;<br> <br># Display the suma<br>print(&apos;The sum using suma function of &#123;0&#125; and &#123;1&#125; is &#123;2&#125;&apos;.format(num1, num2, suma(num1,num2)))<br> <br>#num1 = 1.5<br>#num2 = 6.3<br># Add two numbers<br>sum = float(num1) + float(num2)<br># Display the sum<br>print(&apos;The sum of &#123;0&#125; and &#123;1&#125; is &#123;2&#125;&apos;.format(num1, num2, sum))<br> <br> <br>#a dummy function definition<br>def multiply():<br>   c = 12345*6789<br>   print &apos;The result of 12345 x 6789 :&apos;, c<br>   return c<br></code></pre></td></tr></table></figure><p>Lastly, you have to compile the files using your vendor flow.<br>For example,<br><strong>Questa</strong><br>1) You <strong>compile the C code</strong> using ccflags and introducing the defines you want to add.<br>In our case our C code need the define PYTHON_PATH</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">vlog $DUT_VLOG_ARGS $&#123;TB_DIR&#125;/your_C_code.c -ccflags &quot;-I/usr/include/python2.6/  -D &apos;PYTHON_PATH=\&quot;$PYTHON_DIR\&quot;&apos;&quot;<br></code></pre></td></tr></table></figure><p>2) In Questa if you have python you have to call  including </p><p>You can also use the external DPI flow<br>-        Compile : gcc -g -c -I&lt;&gt;/questasim/include -o tmp.o<br>-        Link :      gcc -shared -fPIC -Bsymbolic -o  .so tmp.o</p><p>Example<br><code>gcc -g -D &#39;PYTHON_PATH=&quot;&#39;$PYTHON_DIR&#39;&quot;&#39; -I/usr/include/python2.6/ -lpython2.6 -fPIC  -I/usr/local/Mentor/Questasim103e/questasim/include/ -o tmp.o   -c ${TB_DIR}/your_C_code.c</code><br><code>gcc -shared -fPIC -Bsymbolic -g -lpython2.6 -o output.so tmp.o</code></p><p>And then load the .so shared file in QUESTA using <strong>-sv_lib</strong>:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">vsim -c -sv_lib output  -ldflags &apos;-lpython2.6&apos; -voptargs=&quot;+acc&quot;  -onfinish stop +UVM_TESTNAME=yourtest    &lt;yourtop&gt; -do &quot;run -all&quot;<br></code></pre></td></tr></table></figure><p><strong>Synopsys VCS</strong><br>1) You <strong>compile the C code</strong> using ccflags and introducing the defines you want to add.<br>In our case our C code need the define PYTHON_PATH</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#GCC in two steps for shared object<br>gcc -g -D &apos;PYTHON_PATH=&quot;&apos;$PYTHON_DIR&apos;&quot;&apos;  -fPIC -Wall -I$&#123;VCS_HOME&#125;/include -I/usr/include/python2.6/ -lpython2.6 -c $&#123;PROJECTDIR&#125;/verification/PVE/keycontrol/tb/keycontrol_C_code_wrapper.c <br>gcc -fPIC -shared -o keycontrol_C_code_wrapper.so  keycontrol_C_code_wrapper.o<br></code></pre></td></tr></table></figure><p>2) You do the VCS elaboration linking the python lybrary with -LDFLAGS ‘-lpython2.6’<code>vcs -timescale=1ps/1ps -ntb_opts uvm -lca -kdb -full64 keycontrol_tb_top -debug_access+all+reverse  -LDFLAGS &#39;-lpython2.6&#39;</code>3) You run the created simulation file. You call b]simv[/b] including  to import the C shared object.</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#RUN C CODE<br>./simv -gui -ucli +DVE +UVM_NO_RELNOTES  -l simv.log  +UVM_TESTNAME=keycontrol_basic_test -do ../../verification/PVE/keycontrol/tools/keycontrol_ucli_init.synopsys -sv_lib keycontrol_C_code_wrapper<br></code></pre></td></tr></table></figure><p>Another tools would have another flow.</p><p>Embedding python is a solution that is <strong>more efficient</strong> than FILE IO in your python script.</p><p>If your python script reads inputs and outputs from files, then the easiest way to call python from Systemverilog is just by doing a <strong>system call</strong>.</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$system(&quot;python yourscript.py filenamein filenameout &quot;)<br></code></pre></td></tr></table></figure><p>You have of course to write in systemverilog your input file and read in systemverilog the output file for comparison.</p><p>@@@</p><p>Hi, i want to provide a <strong>second example</strong>. The example is also doing DPI with Phyton, just to spare time to the verification community :).</p><p>This time i export a dynamic array from Python to C and then to Systemverilog.<br>In order to resize the Systemverilog dynamic array there is a well defined procedure in DPI.<br>This can be seen in the example folder of many EDA tools.<br>The resize of a systemverilog dynamic array requires 2 import DPI function and one export DPI function. We need two DPI import functions because the “C side” needs the correct size for the dynamic array before it is called from SV.</p><p>I have found another example (easier), to do the resize of dynamic arrays in another web, see <a href="https://community.cadence.com/cadence_technology_forums/f/30/t/19377" target="_blank" rel="noopener">https://community.cadence.com/cadence_technology_forums/f/30/t/19377</a>. However, the example on that web will not work for all EDA tools.</p><p>–&gt;EDIT: I have included to the dpi import call an <em>input int select_output_array</em> to select on which dynamic array we want to have/fetch the output of the C calculation. This is useful if you have to call the same DPI function from different places in your test bench parallely and one single output is not enough (could be overwritten).</p><p>EXAMPLE<br><strong>SV-CODE</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs undefined">    ////////////////////////////////////////////////////////////////////////<br>    //IMPORT FUNCTION DPI DECLARATION FROM C<br>    ////////////////////////////////////////////////////////////////////////            <br>    import &quot;DPI-C&quot; context function void python_signature_msg(input byte dpi_data_bytes[],input byte dpi_key_bytes[], input int select_output_array);<br>        // Fetch C data and initialize the SV dynamic array elements with C data.<br>        import &quot;DPI-C&quot; context function void fetch_sv_dynarray_data_from_C(chandle cdata, inout byte dpi_output_signature [], input int size);   <br> <br>        export &quot;DPI-C&quot; function reallocate_size_of_output_openSVarray;<br>        // Define global dynamic array for DPI<br>        byte dpi_output_bytes[];<br>        byte dpi_testcase_out_bytes[];// This is an output for a second DPI call in other part of the testbench<br>        function void reallocate_size_of_output_openSVarray ( input int size, input chandle cdata, input int select_output_array);//chandle is a C pointer type of any type<br>        $display(&quot;SV: allocating new SV DA of size %0d bytes&quot;, size);<br> <br>        if (select_output_array==0) begin<br>            dpi_output_bytes = new[size];<br>            fetch_sv_dynarray_data_from_C(cdata, dpi_output_bytes, size);<br>        end else begin<br>            dpi_testcase_out_bytes = new[size];<br>            fetch_sv_dynarray_data_from_C(cdata, dpi_testcase_out_bytes, size);<br>        end<br>    endfunction<br> <br>//-----------------------<br>class keycontrol_predictor#(int PARAM_PLACEHOLDER = 1) extends pve_predictor#(keycontrol_seq_handles);//extends uvm_component;<br>………..<br>//////////////////////<br>//USE OF DPI<br>//////////////////////<br>dpi_data_bytes = new[10];<br> <br>assert(std::randomize(dpi_data_bytes) with &#123;foreach (dpi_data_bytes[i]) dpi_data_bytes[i] inside  &#123;[0:255]&#125;;&#125;);<br>python_signature_msg(dpi_data_bytes,dpi_data_bytes,0);//execute C code with filling SV dynamic array dpi_output_bytes (select_output_array=0)<br>dpi_output_bytes=dpi_output_bytes;//here we can set a breakpoint to see that the global dynamic array is filled<br> <br>endclass<br></code></pre></td></tr></table></figure><p><strong>C-CODE</strong></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs undefined">//include dpiheader.h<br>//#include &quot;dpiheader.h&quot; //tools are very picky with the type definitions of the DPI functions in C, to avoid autogenerated dpiheader from questa can be used<br>//include the IO files<br>#include &lt;stdio.h&gt;<br>//include DPI<br>#include &quot;svdpi.h&quot;<br>//include strings<br>#include &lt;string.h&gt;<br>//include use of malloc<br>#include &lt;stdlib.h&gt;<br>//include Phyton embed lib<br>#include &lt;Python.h&gt;<br>//this is to support dl function below<br>#include &lt;dlfcn.h&gt;<br>//this is to include prints in the SV transcript using  vpi_printf(&quot;c: Ref model started\n&quot;);<br>#include &quot;vpi_user.h&quot;<br>//to add the ability to use printf<br>// same inputs as defined in SV with default python path<br>#ifndef PYTHON_PATH<br>#error You must define the path to the python file in gcc compiler with -D &apos;PYTHON_PATH=&quot;&apos;$PYTHON_DIR&apos;&quot;&apos; or vlog  with -ccflags &quot;-I/usr/include/python2.6/ -D &apos;PYTHON_PATH=\&quot;$PYTHON_DIR\&quot;&apos;&quot;<br>#endif<br>extern void reallocate_size_of_output_openSVarray(int size, void* cdata, int select_output_array); //this will execute in SV a function that resize the SVopenarray used in the DPI call of python_signature_msg<br> <br> <br>/* function declaration */<br>void fetch_sv_dynarray_data_from_C(void* cdata, const svOpenArrayHandle myopenarray,  int size) &#123;<br>    unsigned char* inputdata = (unsigned  char*) cdata;//input data convert chandle type to char, input the svOpenArrayHandle<br>    int *out = (int *) svGetArrayPtr(myopenarray);//get a pointer to the svOpenArray<br>    memcpy(out, inputdata, sizeof(unsigned char) * size);//allocate to the same memory area of &quot;myopenarray&quot; the content of inputdata. That memory area is the used by the SV tool.<br>&#125;<br> <br>/* function declaration */<br>void python_signature_msg(const svOpenArrayHandle SVopen_vec_data_msg,<br>        const svOpenArrayHandle SVopen_vec_key, int select_output_array) &#123;<br> <br>    //SV_LOGIC_PACKED_ARRAY(8, 8bitsarray); // Implementation specific<br>    //int size = (svHigh(SVopen_vec_data_msg, 1) - svLow(SVopen_vec_data_msg, 1) + 1);<br>    int i;<br>    /////////////////////////////////////////<br>    int nbytes_SV_data_vec = svSizeOfArray(SVopen_vec_data_msg);<br>    printf(&quot;nbytes_SV_data_vec:%0d\n&quot;, nbytes_SV_data_vec);<br> <br>    unsigned char *C_byte_data_msg_vec = malloc(sizeof(unsigned char) * ((nbytes_SV_data_vec *2)+1));/* Dynamic string max nbytes_SV_data_vec chars allocated, data is not converted to hex string but directly sent as binary string*/<br>    /*unsigned char *C_byte_data_msg_vec2 = malloc(sizeof(unsigned char) * (nbytes_SV_data_vec+1));/* Dynamic string max nbytes_SV_data_vec chars allocated, data is not converted to hex string but directly sent as binary string*/<br> <br>    for (i = 0; i &lt; nbytes_SV_data_vec; i++) &#123;<br>       // C_byte_data_msg_vec[i] = *(unsigned char*) svGetArrElemPtr1(SVopen_vec_data_msg, i); //extract the element value of the SV vector and concatenate to double *data = malloc(10 * (sizeof(double))); printf(&quot;%g, &quot;,data[j]);<br>//IMPORTANT: You must use unsigned char and not char for a correct conversion to HEX<br>       // printf(&quot;C_byte_data_msg_vec[%0d]:|%c|\n&quot;, i,C_byte_data_msg_vec[i]);<br>        sprintf(C_byte_data_msg_vec + i * 2, &quot;%02X&quot;, *(unsigned char*) svGetArrElemPtr1(SVopen_vec_data_msg, i)); //convert to hexstr the string byte vector<br>       // sprintf(C_byte_data_msg_vec2+i, &quot;%C&quot;,  *(unsigned char*) svGetArrElemPtr1(SVopen_vec_data_msg, i)); //convert to hexstr the string byte vector<br>    &#125;<br> <br>    ///////////////////////////////////////<br>    /////////////////////////////////////////<br>    int nbytes_SV_key_vec = svSizeOfArray(SVopen_vec_key);<br> <br>    unsigned char *C_byte_key_msg_vec = malloc(sizeof(unsigned char) * ((nbytes_SV_key_vec * 2)+1));/* Dynamic string max nbytes_SV_data_vec unsigned  chars allocated, for hex conversion is 2 characters per byte. we add +1 to the data size because of the end of string character*/<br>    for (i = 0; i &lt; nbytes_SV_key_vec; i++) &#123;<br>        sprintf(C_byte_key_msg_vec + i * 2, &quot;%02X&quot;, *(unsigned char*) svGetArrElemPtr1(SVopen_vec_key, i)); //convert to hexstr the string byte vector<br>    &#125;<br> <br>    ///////////////////////////////////////<br>    //SHOW ME THE PATH<br>    char *append_path = malloc(sizeof(char) * 1000);<br>    append_path = PYTHON_PATH<br>    &quot;:.&quot;;<br>    //append_path = &apos;&quot;&apos;PYTHON_PATH:.&quot;;<br>    setenv(&quot;PYTHONPATH&quot;, append_path, 1); //Set PYTHONPATH TO working directory &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.bpxbd00/setenv.htm<br>&quot; rel=&quot;nofollow&quot;&gt;https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.bpxbd00/setenv.htm<br>&lt;/a&gt;    char *path = Py_GetPath();<br>    //printf(&quot;Python search path is:\n%s\n&quot;, path);<br>    ///////////////////////////////////////<br> <br>    int argc;<br>    char * argv[2];<br>    char *phyton_script_name = malloc(sizeof(char) * 100);<br>    phyton_script_name = &quot;sign_hmac-sha256func&quot;;        //don&apos;t use the .py extension here<br> <br>    argc = 3;        //argument count is 3 arguments<br>    argv[0] = phyton_script_name;        //key_file_name;//&quot;mymod&quot;;//the argument value vector is<br>    //PyObject *byte_array = Py_BuildValue(&quot;s#&quot;, C_byte_data_msg_vec, nbytes_SV_data_vec);<br>    printf(&quot;C_byte_data_msg_vec full:|%s|\n&quot;, C_byte_data_msg_vec);<br>    argv[1] = C_byte_key_msg_vec;<br>    argv[2] = C_byte_data_msg_vec;<br> <br> <br> <br> <br>    Py_Initialize(); // Initialize the Python Interpreter<br>/*<br>    ////////////////////////////////////////<br>    // If you have problems with C segmentation fault calling python, then<br>    // use following code instead of Py_Initialize()<br>    //<br>    //void* const libpython_handle = dlopen(&quot;libpython2.6.so&quot;, RTLD_NOW | RTLD_GLOBAL); <br>    // typedef void (*void_func_t)(void);<br>    //void_func_t MyPy_Initialize = dlsym(libpython_handle, &quot;Py_Initialize&quot;);<br>    //MyPy_Initialize();    <br>    //PyGILState_STATE gstate;<br>    //gstate = PyGILState_Ensure();<br>    ////////////////////////////////////////<br> */   <br>    //First import python script module name<br> <br>    PySys_SetArgv(argc, argv); //set the previous arguments as calling arguments of the import module<br>    //PyObject* myPmodule = PyImport_ImportModule(&quot;sign_hmac-sha256&quot;);//don&apos;t put the .py extension here<br>    PyObject* myPmodule = PyImport_ImportModule(phyton_script_name); //IMPORTANT THE MAIN MODULE IS EXECUTED here with the PySys_SetArgv arguments<br>    if (myPmodule == NULL) &#123;<br>        printf(&quot;Not able to load&amp;execute main phyton script:\n%s\n&quot;, phyton_script_name);<br>        PyErr_Print();<br>    &#125; else &#123;<br>        //the module was executed so the python variables contain valuabe info<br>        //signature<br>        PyObject* Pysignature = PyObject_GetAttrString(myPmodule, &quot;signature&quot;);<br>        PyObject* Pydata = PyObject_GetAttrString(myPmodule, &quot;data&quot;);<br>        PyObject* Pykey = PyObject_GetAttrString(myPmodule, &quot;key&quot;);<br> <br> <br> <br>        int nchar_SV_data_vec = PyString_Size(Pydata);<br>        char *C_Pydata = malloc(sizeof(char) * (nbytes_SV_data_vec+1));/*we add +1 to the data size because of the end of string character*/<br>        C_Pydata = PyString_AsString(Pydata);<br> <br> <br>        int nchar_SV_key_vec = PyString_Size(Pykey);<br>        char *C_Pykey = malloc(sizeof(char) * (nbytes_SV_key_vec+1));/*we add +1 to the data size because of the end of string character*/<br>        C_Pykey = PyString_AsString(Pykey);<br> <br>        ////////////////////////////////////////////////////////<br>        //output of Python signature in binary<br>        int nbytes_SV_signature_vec = PyString_Size(Pysignature);<br>        unsigned char *C_Pysignature_hex = malloc(sizeof(char) * ((nbytes_SV_signature_vec * 2)+1));/*we add +1 to the data size because of the end of string character*/<br>        unsigned char *C_Pysignature_hex2 = malloc(sizeof(char) * ((nbytes_SV_signature_vec * 2)+1));/*we add +1 to the data size because of the end of string character*/<br>        unsigned char *C_Pysignature = malloc(sizeof(char) * (nbytes_SV_signature_vec+1));/*we add +1 to the data size because of the end of string character*/<br>        unsigned char *C_Pysignature2 = malloc(sizeof(char) * (nbytes_SV_signature_vec+1));/*we add +1 to the data size because of the end of string character*/<br>        C_Pysignature = PyString_AsString(Pysignature);<br>        for (i = 0; i &lt; nbytes_SV_signature_vec; i++) &#123;<br>            sprintf(C_Pysignature_hex + i * 2, &quot;%02X&quot;, C_Pysignature[i]); //convert to hexstr the uchar string (byte)<br>        &#125;<br>        reallocate_size_of_output_openSVarray(nbytes_SV_signature_vec, (void*) C_Pysignature, select_output_array); //Here we call a SV function that will resize a dynamic array of SV and put the provided information on it<br>        //See more good DPI examples inside Questa instalation directory /opt/Mentor/Questasim10.6b/questasim/examples/systemverilog/dpi/<br> <br> <br>    &#125;<br> <br>    ////////////////////////////////////////<br>    // Clean up phase<br>    ////////////////////////////////////////<br>    Py_DECREF(myPmodule);<br> <br>    Py_Finalize();           // Finish the Python Interpreter<br> <br>/*<br>    ////////////////////////////////////////<br>    // If you have problems with C segmentation fault calling python, then<br>    // use following code instead of Py_Finalize()<br>    ////////////////////////////////////////<br>    //PyGILState_Release(gstate);<br>    //dlclose(libpython_handle); //We don&apos;t use Python functions directly because of python problems see  &lt;a href=&quot;https://stackoverflow.com/questions/14843408/python-c-embedded-segmentation-fault<br>&quot; rel=&quot;nofollow&quot;&gt;https://stackoverflow.com/questions/14843408/python-c-embedded-segmentation-fault<br>&lt;/a&gt;    // Release the thread. No Python API allowed beyond this point. <br>*/<br> <br>&#125;<br>/*HELPER FUNCTION FOR BIT VECTORS from bv to int*/<br>int bv_to_int(const svBitVecVal* bv, int size) &#123;<br>    int val = 0;<br>    int mask = 1;<br>    int i;<br>    for (i = 0; i &lt; size; i++) &#123;<br>        if (svGetBitselBit(bv, i) == sv_1)<br>            val |= mask;<br>        mask &lt;&lt;= 1;<br>    &#125;<br>    return val;<br>&#125;<br>/*HELPER FUNCTION FOR BIT VECTORS fron int to bv*/<br>void int_to_bv(int val, svBitVecVal* bv, int size) &#123;<br>    int mask = 1;<br>    svBit b;<br>    int i;<br>    for (i = 0; i &lt; size; i++) &#123;<br>        b = (val &amp; mask) ? sv_1 : sv_0;<br>        svPutBitselBit(bv, i, b);           //but b in bv on idx i<br>        mask &lt;&lt;= 1;<br>    &#125;<br>&#125;<br> <br>/* main */<br>int main() &#123;<br>    printf(&quot;DEFINED PYTHON_PATH: |%s|\n&quot;, PYTHON_PATH);<br>    //execute<br>    const svOpenArrayHandle openhandle1 = malloc(sizeof(char) * 10);<br>    const svOpenArrayHandle openhandle2 = malloc(sizeof(char) * 10);<br>    svOpenArrayHandle openhandle3 = malloc(sizeof(char) * 10);<br> <br>    python_signature_msg(openhandle1, openhandle2,0);<br> <br>    printf(&quot;Finished python\n&quot;);<br>    return 1;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PYTHON SCRIPT - TEST.py,</strong><br>very important to remove TABS!!!!!!</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#!/usr/bin/env python<br>import sys<br>import hashlib<br>import hmac<br> <br> <br># check usage<br>if( len( sys.argv ) &lt; 3 ) :<br>    raise( Exception( &quot;Usage: hmac-sha256func.py keyhex datahex&quot; ) )<br>#key is 256bits long. it is a byte array<br>key    = sys.argv[ 1 ]<br>print &quot;key hex : &quot;, key   # is a string in hex<br>#data is (256 x n) bits long. it is a byte array<br>data   = sys.argv[ 2 ]  # is a string in binary<br>#print &quot;data hex : &quot;, data   # is a string in binary<br>#data_binary = bytearray.fromhex(data);<br>data_binary = str(bytearray.fromhex(unicode(data)))<br>#print &quot;data utf : &quot;, data_binary   # is a string in binary<br> <br># generate hmac-sha256<br>signature  = hmac.new( key, data_binary, hashlib.sha256 ).digest()<br>#print &quot;hex_signature : &quot;,&apos;&apos;.join(x.encode(&quot;hex&quot;) for x in signature) <br>#print &quot;signature string byte : &quot;, signature <br>#print &quot;type signature:&quot;, type(signature) <br>#print &quot;is string:&quot;, type(signature) is str<br>#print &quot;is bytearray:&quot;, type(signature) is bytearray<br># signature is a binary string<br>#print &quot;hex_signature : &quot;,&apos;&apos;.join(x.encode(&quot;hex&quot;) for x in signature)  #This doesn&apos;t work with embedded python due to a bug in python<br> <br>hex_signature  = hmac.new( key, data_binary, hashlib.sha256 ).hexdigest()<br>print &quot;hex_signature :  &quot;, hex_signature # is a string in hex<br>#signature is 256 bits long . it is a byte array<br># write result to output file<br>signedDate = bytearray( signature + data_binary )<br>#signedDate which is the boot is 512 bits long. it is a byte array<br>#print &quot;bytesignedDate : &quot;, signedDate<br>#print &quot;hex_signedDate : &quot;, &apos;&apos;.join(format(x, &apos;02x&apos;) for x in signedDate)<br>binary = &apos;&apos;.join(format(x, &apos;08b&apos;) for x in signedDate)<br>#print &quot;bin_signedDate : &quot;, binary<br></code></pre></td></tr></table></figure><p>IMPORTANT REMARK:<br>Unfortunately, i couldnt find out how to link the “svdpi.h” SV-library file inside your_code.c file with the C compiler (gcc).<br>That means, if your your_code.c file imports the “svdpi.h” SV-library, then it is not possible to debug your C code only using gcc i.e. gdb.<br>As i understood, the “svdpi.h” DPI SV-library <strong>is automatically linked inside your EDA vendor tool</strong> in elaboration time.<br>Could somebody correct me if i am wrong?<br>It is a pity, that you <strong>have to use a license</strong> of your EDA tool to debug plain C code, just because it uses the “svdpi.h” SV-library.<br>If somebody knows how to link the svdpi.h library with gcc, then i would appreciate it.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>time unit in the set_timeout()</title>
      <link href="/2021/01/28/time-unit-in-the-set-timeout/"/>
      <url>/2021/01/28/time-unit-in-the-set-timeout/</url>
      
        <content type="html"><![CDATA[<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>Need some clarification on the time value passed to uvm_top.set_timeout() call.<br>I want to use this feature to terminate the sim when it fails to finish before 1ms, and when I add the line,<br>initial uvm_top.set_timeout(1ms); in the top module and run the sim, it terminates at 1000ns instead of 1ms with the fatal error,</p><p>UVM_FATAL @1000.000ns: reporter.*Explicit timeout of 1000.000ns hit, indicating a probable testbench issue.</p><p>If I set the time value in ps unit as in set_timeout(1.0e9), it works. Any idea?</p><p>@@@</p><p>set_timeout() should be sensitive to the time unit provided because it takes the argument as data type “time”.</p><p><em>function void set_timeout(time timeout, bit overridable = 1)</em></p><p>My expectation is if input is provided with a unit(4ms), it should run for that much time irrespective of timescale set in testbench. Am I missing something?</p><p>In my test, set_timeout(4ms) is present. Test bench has timescale of 1fs/1fs. Because of this, 4ms is working as 4us. If I change this to set_timeout(4ms/1ps) as you have suggested, it might work. But, if any other test bench has other timescales, then it needs to be changed again. In this way, it will be test bench timescale dependent. How to make this independent of timescale?</p><p>@@@</p><p>I’ve just tried to use set_global_timeout() in my testbench and noticed some strange behaviour. I was hoping someone could point out the gotcha that I’m missing.</p><p>I assumed that in order to set a watchdog timeout value of 1us, I would need to add the following line to my build() function:<br>set_global_timeout(1us);</p><p>However, this doesn’t have the desired effect. Instead the time units don’t seem to be being obeyed and are out by a factor of 1000.</p><p>set_global_timeout(1s) results in a timeout after 1ms.<br>set_global_timeout(1ms) results in a timeout after 1us. set_global_timeout(1us) results in a timeout after 1ns.<br>set_global_timeout(1ns) results in a timeout after 1ps.<br>set_global_timeout(1000) results in a timeout after 1ns.<br>set_global_timeout(1000000) results in a timeout after 1us.</p><h3 id="ANS"><a href="#ANS" class="headerlink" title="ANS"></a>ANS</h3><p>%%% </p><p>There is nothing special about the time data type; it is just a 64-bit unsigned integer. Please read the link to the other question.</p><p>%%%</p><p>Communicating time values across multiple timescale domains has been a <em>gotcha</em> in Verilog since day one. Timescales only apply to scaling of literal time values, not values of variables or passed arguments. Therefore, you should always use a literal time value in any expression involving time to a normalized time unit.</p><p>Unfortunately, they didn’t do this inside the OVM library. So if your OVM package is compiled with a default of timescale of 1ps, then you should do this to normalize it :</p><p>set_global_timeout(1us/1ps);</p><h3 id="补充一点"><a href="#补充一点" class="headerlink" title="补充一点"></a>补充一点</h3><p>#UVM_RUN_SETTING += +UVM_RUN_SETTING += +UVM_TIMEOUT=1000000000,YES</p><p>   set_report_max_quit_count(50);<br>    uvm_top.set_timeout(1s/1ps, 1);<br>    uvm_top.set_report_max_quit_count(200);</p><p>1ps是UVM/OVM库编译的最小单位~~~</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get_response() with UVM RAL</title>
      <link href="/2021/01/25/get-response-with-UVM-RAL/"/>
      <url>/2021/01/25/get-response-with-UVM-RAL/</url>
      
        <content type="html"><![CDATA[<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>“Response queue overflow, response is dropped”</p><p>Got the above error since my driver was calling seq_item_port.item_done(rsp). The error however goes when I change it to seq_item_port.item_done() in the driver.</p><p>My UVM RAL sequence doesn’t explicitly make a call to get_response(rsp) but the register reads and writes work perfectly. My question is,how does RAL sequence get the response back if we don’t call the get_response() explicitly?</p><h3 id="ANS"><a href="#ANS" class="headerlink" title="ANS"></a>ANS</h3><p>The RAL is supposed to abstract away the accesses to registers with its API. When you call a register access method, it uses the register adapter class to convert to/from a generic register item to a bus specific sequence_item.</p><p>When your driver does a get_next_item(req) call, it then uses the req sequence_item to do a frontdoor register access. When it calls the item_done() method, the sequencer-driver hand-shake completes and the handle to the req sequence_item is used to retrieve the response data. If you call item_done(rsp) you start to push rsp items into a response queue which is not being unloaded by the adapter.</p><p>The adapter has a variable called provides_responses - if this was set to 1, then your item_done(rsp) would not result in an error.</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li>uvm_reg_adapter.svh</li></ul><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// Variable: provides_responses</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Set this bit in extensions of this class if the bus driver provides</span><br><span class="hljs-comment">// separate response items.</span><br><br><span class="hljs-keyword">bit</span> provides_responses;<br></code></pre></td></tr></table></figure><ul><li>uvm_reg_map.svh</li></ul><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">if</span> (adapter<span class="hljs-variable">.provides_responses</span>) <span class="hljs-keyword">begin</span><br>     uvm_sequence_item bus_rsp;<br>     uvm_access_e op;<br>     <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> need to test for right trans type, if not put back in q</span><br>     rw<span class="hljs-variable">.parent</span><span class="hljs-variable">.get_base_response</span>(bus_rsp);<br>     adapter<span class="hljs-variable">.bus2reg</span>(bus_rsp,rw_access);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    adapter<span class="hljs-variable">.bus2reg</span>(bus_req,rw_access);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><ul><li>testcase</li></ul><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>      <span class="hljs-keyword">if</span>(rm == <span class="hljs-literal">null</span>) <span class="hljs-keyword">begin</span><br>          rm = <span class="hljs-meta">`CREATE_CMP(`RAL_BLK,"rm")</span><br>          rm<span class="hljs-variable">.configure</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">""</span>);<br>          rm<span class="hljs-variable">.build</span>();<br>          rm<span class="hljs-variable">.lock_model</span>();<br>          rm<span class="hljs-variable">.reset</span>();<br>      <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endfunction</span>:m_build_phase<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br>      <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>      <span class="hljs-keyword">if</span>(rm<span class="hljs-variable">.get_parent</span>() == <span class="hljs-literal">null</span>) <span class="hljs-keyword">begin</span><br>          m_regs_adapter = <span class="hljs-keyword">new</span>(<span class="hljs-string">"m_regs_adapter"</span>);<br>          m_regs_adapter<span class="hljs-variable">.provides_responses</span> = <span class="hljs-number">1</span>;<br>          <span class="hljs-comment">//m_regs_adapter.supports_byte_enable = 1;</span><br>          rm<span class="hljs-variable">.default_map</span><span class="hljs-variable">.set_sequencer</span>(<span class="hljs-meta">`REG_SQR,m_regs_adapter);</span><br>          rm<span class="hljs-variable">.default_map</span><span class="hljs-variable">.set_auto_predict</span>(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endfunction</span>:connect_phase<br></code></pre></td></tr></table></figure><ul><li>driver</li></ul><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`uvm_info(CLASSID,$sformatf("You get req:\n%0s",req.sprint()),UVM_MEDIUM);</span><br>   <br> <span class="hljs-keyword">fork</span><br>      m_csr_vif<span class="hljs-variable">.sentPkt</span>(req);<br>      m_csr_vif<span class="hljs-variable">.recvPkt</span>(m_item);<br> <span class="hljs-keyword">join</span><br> <span class="hljs-built_in">$cast</span>(m_csr_pkt,m_item);<br> req<span class="hljs-variable">.csr_type</span> = m_csr_pkt<span class="hljs-variable">.csr_type</span>;<br> req<span class="hljs-variable">.csr_data</span> = m_csr_pkt<span class="hljs-variable">.csr_data</span>;<br> req<span class="hljs-variable">.csr_addr</span> = m_csr_pkt<span class="hljs-variable">.csr_addr</span>;<br> <span class="hljs-built_in">$cast</span>(rsp,req<span class="hljs-variable">.clone</span>());<br> rsp<span class="hljs-variable">.set_id_info</span>(req);<br> seq_item_port<span class="hljs-variable">.item_done</span>(rsp);<br></code></pre></td></tr></table></figure><ul><li>sequence</li></ul><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog">csr_pkt csr_req,csr_rsp;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m_pkt_num;i++) <span class="hljs-keyword">begin</span><br>    csr_req = <span class="hljs-meta">`CREATE_OBJ(csr_pkt,"csr_req")</span><br>    csr_rsp = <span class="hljs-meta">`CREATE_OBJ(csr_pkt,"csr_rsp")</span><br>    csr_req<span class="hljs-variable">.csr_type</span> = m_csr_type;<br>    <span class="hljs-keyword">if</span>(m_csr_type == csr_pkt::CSR_WR) <span class="hljs-keyword">begin</span><br>        csr_req<span class="hljs-variable">.csr_addr</span> = m_csr_addr;<br>        csr_req<span class="hljs-variable">.csr_data</span> = m_csr_data;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m_csr_type == csr_pkt::CSR_RD) <span class="hljs-keyword">begin</span><br>        csr_req<span class="hljs-variable">.csr_addr</span> = m_csr_addr;<br>    <span class="hljs-keyword">end</span><br>    start_item(csr_req);<br>    finish_item(csr_req);<br>    get_response(csr_rsp);<br>    <span class="hljs-keyword">if</span>(m_csr_type == csr_pkt::CSR_RD) <span class="hljs-keyword">begin</span><br>        csr_req<span class="hljs-variable">.csr_data</span> = csr_rsp<span class="hljs-variable">.csr_data</span>;<br>        m_csr_data = csr_req<span class="hljs-variable">.csr_data</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="如果没有提供respond-的driver和sequence-就没必要写provides-responses-1"><a href="#如果没有提供respond-的driver和sequence-就没必要写provides-responses-1" class="headerlink" title="如果没有提供respond 的driver和sequence 就没必要写provides_responses = 1"></a>如果没有提供respond 的driver和sequence 就没必要写provides_responses = 1</h3>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> RAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM Instance override for UVM objects</title>
      <link href="/2021/01/25/UVM-Instance-override-for-UVM-objects/"/>
      <url>/2021/01/25/UVM-Instance-override-for-UVM-objects/</url>
      
        <content type="html"><![CDATA[<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>what is the right way to override a uvm_object with instance override?</p><p>I have an extended transaction which will override the original transaction.</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">ext_trans = extended_transaction::type_id::create(<span class="hljs-string">"ext_trans"</span>,,<span class="hljs-string">"hola"</span>);<br></code></pre></td></tr></table></figure><p>In base test, i have this. This doesnt seem to be working. I understand object is not part of UVM TB. It would be great if some one can show me the right syntax for this. Type specific override works fine.</p><h3 id="ANS"><a href="#ANS" class="headerlink" title="ANS"></a>ANS</h3><p>When calling trans = transaction::type_id::create(“trans”); with just one argument, there is no context for an instance override. You can provide a context by adding second argument <strong>this</strong>, which uses the current components path, or provide a third argument which defines an <em>absolute path</em> string.</p><p>In your base_test, you call set_inst_override_by_type(), which is a method of uvm_component. It is expecting to see a relative path from the current component, and the top level test is always “uvm_test_top.</p><p>So you need to coordinate your overrides by whether you want to be setting instances overrides using the existing testbench hierarchy, or some arbitrary path names</p><p>Using existing hierarchy:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">trans = transaction::type_id::create(<span class="hljs-string">"trans"</span>,<span class="hljs-keyword">this</span>);<br>...<br>set_inst_override_by_type (<span class="hljs-string">"env.trans"</span>,transaction::get_type(),extended_transaction::get_type());<br></code></pre></td></tr></table></figure><p>Using absolute path strings:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">trans = transaction::type_id::create(<span class="hljs-string">"trans"</span>,,<span class="hljs-string">"hola"</span>);<br>...<br>transaction::type_id::set_inst_override(extended_transaction::get_type(),<span class="hljs-string">"hola.trans"</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行快速查询</title>
      <link href="/2020/12/24/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2/"/>
      <url>/2020/12/24/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="老了记不住就只能查了"><a href="#老了记不住就只能查了" class="headerlink" title="老了记不住就只能查了"></a>老了记不住就只能查了</h3><ul><li>cheat.sh 是一个网站，更是一个实用的速查工具。</li></ul><p>试想一下，一个理想的速查工具应该具备什么功能？</p><ul><li>简洁：它只包含你需要的东西而不包含其他内容</li><li>快速：用户可以立即使用它</li><li>全面：包含你可能遇到的每个问题的答案</li><li>通用：在任何地方都可以随时可用，无需任何准备</li><li>不显眼：当你使用它时，它不会分散你当前任务的注意力</li></ul><p>而这样的工具确实存在。</p><p>cheat.sh 具有以下这些功能特性：</p><ul><li>简洁的 curl/browser 界面</li><li>涵盖 55 种编程语言，一些 DBMSes 和 1000 多个最重要的 UNIX/Linux 命令</li><li>无需安装，随处可用</li><li>超快，通常在 100 毫秒内即可返回答案</li><li>可以直接在代码编辑器中使用，无需打开浏览器</li><li>……</li></ul><p><img src="/2020/12/24/命令行快速查询/cht.sh.png" alt="cht.sh"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 命令查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python2&amp;3-sv-dpi</title>
      <link href="/2020/11/25/python2-3-sv-dpi/"/>
      <url>/2020/11/25/python2-3-sv-dpi/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> Python2 </tag>
            
            <tag> Python3 </tag>
            
            <tag> DPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slurm分布式资源管理初试用~</title>
      <link href="/2020/11/17/Slurm%E5%88%86%E5%B8%83%E5%BC%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%88%9D%E8%AF%95%E7%94%A8/"/>
      <url>/2020/11/17/Slurm%E5%88%86%E5%B8%83%E5%BC%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%88%9D%E8%AF%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="个人PC已经开玩-只能说牛逼"><a href="#个人PC已经开玩-只能说牛逼" class="headerlink" title="个人PC已经开玩~只能说牛逼~"></a>个人PC已经开玩~只能说牛逼~</h2><p><img src="/2020/11/17/Slurm分布式资源管理初试用/slurm.jpg" alt="slurm"></p><h2 id="编写-SLURM-脚本"><a href="#编写-SLURM-脚本" class="headerlink" title="编写 SLURM 脚本"></a>编写 SLURM 脚本</h2><p>你需要编写一个 SLURM 脚本来完成任务提交的设置。</p><p>SLURM 脚本可以在本地编写后上传， 也可以直接在工作站服务器上编辑。</p><p>一个 SLURM 脚本可设置很多内容，下面的模板列出了常用的选项。</p><p>run.slurm</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">SBATCH -J <span class="hljs-built_in">test</span>                   <span class="hljs-comment"># 作业名为 test</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH -o test.out               <span class="hljs-comment"># 屏幕上的输出文件重定向到 test.out</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH -p gpu                    <span class="hljs-comment"># 作业提交的分区为 cpu</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH --qos=debug               <span class="hljs-comment"># 作业使用的 QoS 为 debug</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH -N 1                      <span class="hljs-comment"># 作业申请 1 个节点</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH --ntasks-per-node=1       <span class="hljs-comment"># 单节点启动的进程数为 1</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH --cpus-per-task=4         <span class="hljs-comment"># 单任务使用的 CPU 核心数为 4</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH -t 1:00:00                <span class="hljs-comment"># 任务运行的最长时间为 1 小时</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCH --gres=gpu:1              <span class="hljs-comment"># 单个节点使用 1 块 GPU 卡</span></span><br><span class="hljs-meta">#</span><span class="bash">SBATCh -w comput6                <span class="hljs-comment"># 指定运行作业的节点是 comput6，若不填写系统自动分配节点</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> 设置运行环境</span><br>module add anaconda/3-5.0.0.1     # 添加 anaconda/3-5.0.0.1 模块<br><span class="hljs-meta"><br>#</span><span class="bash"> 输入要执行的命令，例如 ./hello 或 python test.py 等</span><br>python test.py                    # 执行命令<br></code></pre></td></tr></table></figure><p>其中，第一行是固定的，表示使用 <code>/bin/bash</code> 来执行脚本。其余的说明如下</p><ul><li>申请时请写对分区，由于不同的分区硬件配置不同。</li><li>QoS 的含义是 ‘‘Quality of Service’’，即服务质量。不同的 QoS 对应的优先度和 资源最大值不同。</li><li>申请的资源不要超过当前分区的最大值，建议使用 <code>scontrol</code> 命令查看分区的剩余 资源数。确定申请 CPU 核心数量之前，请确认你的程序是否真的需要这些计算资源。如果 程序的并行程度不高，申请过多的 CPU 核心数会造成资源的浪费（多数 CPU 占用率会较 低），并且会影响他人使用。</li><li>无需<strong>显式指定申请的内存数量</strong>，申请内存的大小和申请 CPU 核心数成正比。如果运行 程序时遇到内存不够的情况请适量增加 CPU 核心数。使用 GPU 的程序无需指定显存数量。</li><li>实际在每个节点上分配的 CPU 数量由 <code>--ntasks-per-node</code> 和 <code>--cpus-per-task</code> 参数共同决定。默认情况下二者都是 1。一般来讲，<strong>多进程</strong>的程序需要更改 <code>--ntasks-per-node</code>，<strong>多线程</strong>的程序需要更改 <code>--cpus-per-task</code>。各位用户请根据 自己需求进行设置。</li><li>任务最长时间的设置格式是 <code>DD-HH:MM:SS</code>，例如一天又 15 小时写作 <code>1-15:00:00</code>。 如果高位为 0 可省略。如果不写任务最长时间，则任务的最长时间默认为对应分区 (Partition) 的默认时间。</li></ul><p>以上的所有 <code>#SBATCH</code> 属性均可以不设置，当缺少某属性时，系统将使用默认值。</p><p>请在使用时估计自己任务的开销，适量申请计算资源，避免造成资源的浪费。</p>]]></content>
      
      
      <categories>
          
          <category> Slurm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> LSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚本化自动插端口延迟</title>
      <link href="/2020/09/18/%E8%84%9A%E6%9C%AC%E5%8C%96%E8%87%AA%E5%8A%A8%E6%8F%92%E7%AB%AF%E5%8F%A3%E5%BB%B6%E8%BF%9F/"/>
      <url>/2020/09/18/%E8%84%9A%E6%9C%AC%E5%8C%96%E8%87%AA%E5%8A%A8%E6%8F%92%E7%AB%AF%E5%8F%A3%E5%BB%B6%E8%BF%9F/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/env perl</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-number">5.010</span>;<br><span class="hljs-keyword">use</span> strict;<br><span class="hljs-keyword">use</span> warnings;<br><span class="hljs-keyword">use</span> autodie;<br><span class="hljs-keyword">use</span> Getopt::Long;<br><span class="hljs-keyword">use</span> List::MoreUtils <span class="hljs-string">qw(any)</span>;<br><span class="hljs-keyword">use</span> Verilog::Netlist;<br><span class="hljs-keyword">use</span> rvp;<span class="hljs-comment">#need revise localparam</span><br><br><br><span class="hljs-keyword">my</span> ($filename, $rstmode, $input_pipe_num, $output_pipe_num, $help) = (<span class="hljs-string">""</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>GetOptions(<br>           <span class="hljs-string">'filename|f=s'</span> =&gt; \$filename,<br>           <span class="hljs-string">'rstmode|r=i'</span> =&gt; \$rstmode,<br>           <span class="hljs-string">'input_pipe_num|i=i'</span> =&gt; \$input_pipe_num,<br>           <span class="hljs-string">'output_pipe_num|o=i'</span> =&gt; \$output_pipe_num,<br>           <span class="hljs-string">'help|h'</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">sub</span> </span>&#123;$help = <span class="hljs-number">1</span>; <span class="hljs-keyword">say</span> <span class="hljs-string">"Usage: $0 -filename(f)=rtl.v [-rstmode(r)=0] [-input_pipe_num(i)=1] [-output_pip_num(o)=1]."</span>&#125;<br>          ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span> $!;<br><span class="hljs-keyword">unless</span>($filename) &#123;<br>  <span class="hljs-keyword">unless</span>($help) &#123;<br>      <span class="hljs-keyword">say</span> <span class="hljs-string">"Usage: $0 -filename(f)=rtl.v [-rstmode(r)=0] [-input_pipe_num(i)=1] [-output_pip_num(o)=1]."</span>;<br>  &#125;<br>  <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><br><span class="hljs-keyword">my</span> $nl = new Verilog::Netlist;<br>$nl-&gt;read_file(<span class="hljs-string">filename=&gt;</span>$filename);<br><span class="hljs-keyword">my</span> $vdata = rvp-&gt;read_verilog([$filename],[],&#123;&#125;,<span class="hljs-number">1</span>,[],[],<span class="hljs-string">''</span>);<br><br><span class="hljs-keyword">open</span> <span class="hljs-keyword">my</span> $fh_wr, <span class="hljs-string">"&gt;"</span>, [<span class="hljs-keyword">split</span>(<span class="hljs-regexp">/\./</span>,$filename)]-&gt;[<span class="hljs-number">0</span>] . <span class="hljs-string">"_pipeline.sv"</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">split_bus</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> ($bus) = @_;<br>    <span class="hljs-keyword">my</span> $re = <span class="hljs-regexp">qr/\[(.*):(.*)\]/o</span>;<br>    <span class="hljs-keyword">my</span> ($msb, $lsb)= $bus =~ <span class="hljs-regexp">m/$re/</span>;<br>    <span class="hljs-keyword">unless</span>($msb) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ($msb, $lsb, <span class="hljs-string">"$msb"</span>.<span class="hljs-string">"-$lsb"</span>.<span class="hljs-string">"+1"</span>);<br>&#125;<br><br><br><span class="hljs-keyword">my</span> $mod_name;<br><span class="hljs-keyword">my</span> $clk_name;<br><span class="hljs-keyword">my</span> $rst_name;<br><span class="hljs-keyword">my</span> %sig_noclkrst_hashof;<br><span class="hljs-keyword">my</span> %sig_clkrst_hashof;<br><br><span class="hljs-keyword">my</span> %mod_parameters;<br><span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $module ($vdata-&gt;get_modules()) &#123;<br>    %mod_parameters = $vdata-&gt;get_modules_parameters($module);<br>&#125;<br><br><br><span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $mod ($nl-&gt;top_modules_sorted) &#123;<br>    $mod_name = $mod-&gt;name;<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig ($mod-&gt;ports_sorted) &#123;<br>        <span class="hljs-keyword">die</span> <span class="hljs-string">"Can't support inout port: "</span> . $sig-&gt;name <span class="hljs-keyword">if</span> $sig-&gt;direction eq <span class="hljs-string">"inout"</span>;<br>        <span class="hljs-keyword">unless</span>($sig-&gt;name =~ <span class="hljs-regexp">m/clk|clock|rst|reset/o</span>) &#123;<br>            $sig_noclkrst_hashof&#123;$sig-&gt;name&#125; = [$sig-&gt;name, $sig-&gt;direction, $sig-&gt;data_type, split_bus($sig-&gt;data_type)];<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            $sig_clkrst_hashof&#123;$sig-&gt;name&#125; = [$sig-&gt;name, $sig-&gt;direction, $sig-&gt;data_type, split_bus($sig-&gt;data_type)];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">keys</span>(%sig_clkrst_hashof) != <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">die</span> <span class="hljs-string">"Must has one clock and one reset: "</span>, <span class="hljs-string">"<span class="hljs-subst">@&#123;[<span class="hljs-keyword">keys</span> %sig_clkrst_hashof]&#125;</span>"</span>;<br>&#125;<br><br><span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig (<span class="hljs-keyword">keys</span> %sig_clkrst_hashof) &#123;<br>    $clk_name = $sig <span class="hljs-keyword">if</span> $sig =~ <span class="hljs-regexp">m/clk|clock/o</span>;<br>    $rst_name = $sig <span class="hljs-keyword">if</span> $sig =~ <span class="hljs-regexp">m/rst|reset/o</span>;<br>&#125;<br><span class="hljs-keyword">die</span> <span class="hljs-string">"No clock port!"</span> <span class="hljs-keyword">unless</span> $clk_name;<br><span class="hljs-keyword">die</span> <span class="hljs-string">"No reset port!"</span> <span class="hljs-keyword">unless</span> $rst_name;<br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">interface_block</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> ($clkrst_hash_ref, $noclkrst_hash_ref) = @_;<br>    <span class="hljs-keyword">my</span> $ret_str;<br><br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig (<span class="hljs-keyword">sort</span> <span class="hljs-keyword">keys</span> %&#123;$clkrst_hash_ref&#125;) &#123;<br>        $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"    %sput  %s %s,\n"</span>, $clkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">1</span>], $clkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">2</span>], $clkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">my</span> $i;<br>    <span class="hljs-keyword">my</span> $size = <span class="hljs-keyword">keys</span>(%&#123;$noclkrst_hash_ref&#125;);<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig (<span class="hljs-keyword">sort</span> <span class="hljs-keyword">keys</span> %&#123;$noclkrst_hash_ref&#125;) &#123;<br>        <span class="hljs-keyword">if</span>(++$i &lt; $size) &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"    %sput  %s %s,\n"</span>, $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">1</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">2</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"    %sput  %s %s"</span>, $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">1</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">2</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> $ret_str;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">wires_block</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> ($noclkrst_hash_ref) = @_;<br>    <span class="hljs-keyword">my</span> $ret_str;<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig (<span class="hljs-keyword">sort</span> <span class="hljs-keyword">keys</span> %&#123;$noclkrst_hash_ref&#125;) &#123;<br>        $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"    wire [%s:%s] %s_ndly;\n"</span>, $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">3</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">4</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> $ret_str;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">pipeline_block</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> ($noclkrst_hash_ref) = @_;<br>    <span class="hljs-keyword">my</span> $ret_str;<br>    <span class="hljs-keyword">my</span> $input_fmt = <span class="hljs-string">"    signal_ndelay #(.RST_MODE($rstmode),.DWIDTH(%s),.PIPE_NUM($input_pipe_num)) IN_NDELAY_%s (<br>        .clk     ($clk_name),<br>        .rst_n   ($rst_name),<br>        .sig_din (%s),<br>        .sig_dout(%s_ndly)<br>        );\n\n"</span>;<br><br>    <span class="hljs-keyword">my</span> $output_fmt = <span class="hljs-string">"    signal_ndelay #(.RST_MODE($rstmode),.DWIDTH(%s),.PIPE_NUM($output_pipe_num)) OUT_NDELAY_%s (<br>        .clk     ($clk_name),<br>        .rst_n   ($rst_name),<br>        .sig_din (%s_ndly),<br>        .sig_dout(%s)<br>        );\n\n"</span>;<br><br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig (<span class="hljs-keyword">sort</span> <span class="hljs-keyword">keys</span> %&#123;$noclkrst_hash_ref&#125;) &#123;<br>        <span class="hljs-keyword">if</span>($noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">1</span>] eq <span class="hljs-string">"in"</span>) &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>($input_fmt, $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">5</span>], <span class="hljs-keyword">uc</span>($sig), $sig, $sig);<br>        &#125;<br>        <span class="hljs-keyword">if</span>($noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">1</span>] eq <span class="hljs-string">"out"</span>) &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>($output_fmt, $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">5</span>], <span class="hljs-keyword">uc</span>($sig), $sig, $sig);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> $ret_str;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">inst_block</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> ($clkrst_hash_ref, $noclkrst_hash_ref) = @_;<br>    <span class="hljs-keyword">my</span> $ret_str;<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig (<span class="hljs-keyword">sort</span> <span class="hljs-keyword">keys</span> %&#123;$clkrst_hash_ref&#125;) &#123;<br>        $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"        .%s(%s), \n"</span>, $clkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>], $clkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">my</span> $i;<br>    <span class="hljs-keyword">my</span> $size = <span class="hljs-keyword">keys</span>(%&#123;$noclkrst_hash_ref&#125;);<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $sig (<span class="hljs-keyword">sort</span> <span class="hljs-keyword">keys</span> %&#123;$noclkrst_hash_ref&#125;) &#123;<br>        <span class="hljs-keyword">if</span>(++$i &lt; $size) &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"        .%s(%s_ndly), \n"</span>, $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"        .%s(%s_ndly)"</span>, $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>], $noclkrst_hash_ref-&gt;&#123;$sig&#125;[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> $ret_str;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">param_block</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> ($param_hash_ref) = @_;<br>    <span class="hljs-keyword">my</span> $ret_str = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">my</span> $i;<br>    <span class="hljs-keyword">my</span> $size = <span class="hljs-keyword">keys</span>(%&#123;$param_hash_ref&#125;);<br>    <span class="hljs-keyword">my</span> @order_keys;<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $unkey (<span class="hljs-keyword">sort</span> <span class="hljs-keyword">keys</span> %&#123;$param_hash_ref&#125;) &#123;<br>        <span class="hljs-keyword">my</span> $value = $param_hash_ref-&gt;&#123;$unkey&#125;;<br>        <span class="hljs-keyword">chomp</span> $value;<br>        <span class="hljs-keyword">if</span>(any &#123;<span class="hljs-keyword">index</span>($value, $_) &gt;= <span class="hljs-number">0</span>&#125; @order_keys) &#123;<br>            <span class="hljs-keyword">push</span> @order_keys, $unkey;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">unshift</span> @order_keys, $unkey;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $p (@order_keys) &#123;<br>        <span class="hljs-keyword">chomp</span> $param_hash_ref-&gt;&#123;$p&#125;;<br>        <span class="hljs-keyword">if</span>(++$i &lt; $size) &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"    parameter %s = %s,\n"</span>, $p, $param_hash_ref-&gt;&#123;$p&#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"    parameter %s = %s"</span>, $p, $param_hash_ref-&gt;&#123;$p&#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> $ret_str;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">param_inst_block</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> ($param_hash_ref) = @_;<br>    <span class="hljs-keyword">my</span> $ret_str;<br>    <span class="hljs-keyword">my</span> $i;<br>    <span class="hljs-keyword">my</span> $size = <span class="hljs-keyword">keys</span>(%&#123;$param_hash_ref&#125;);<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $p (<span class="hljs-keyword">sort</span> &#123;<span class="hljs-keyword">length</span>($a) &lt;=&gt; <span class="hljs-keyword">length</span>($b)&#125; <span class="hljs-keyword">keys</span> %&#123;$param_hash_ref&#125;) &#123;<br>        <span class="hljs-keyword">if</span>(++$i &lt; $size) &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"        .%s(%s), \n"</span>, $p, $p);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            $ret_str .= <span class="hljs-keyword">sprintf</span>(<span class="hljs-string">"        .%s(%s)"</span>, $p, $p);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> $ret_str;<br>&#125;<br><br><br><span class="hljs-keyword">my</span> $interface_decl = interface_block(\%sig_clkrst_hashof, \%sig_noclkrst_hashof);<br><span class="hljs-keyword">my</span> $wires_decl = wires_block(\%sig_noclkrst_hashof);<br><span class="hljs-keyword">my</span> $pipeline_decl = pipeline_block(\%sig_noclkrst_hashof);<br><span class="hljs-keyword">my</span> $inst_decl  = inst_block(\%sig_clkrst_hashof, \%sig_noclkrst_hashof);<br><span class="hljs-keyword">my</span> $param_decl = param_block(\%mod_parameters);<br><span class="hljs-keyword">my</span> $param_inst_decl = param_inst_block(\%mod_parameters);<br><br><span class="hljs-keyword">print</span> $fh_wr &lt;&lt;EOF;<br><span class="hljs-regexp">//</span>-----------------------------------------------------------------------------<br><span class="hljs-regexp">//</span> Project       :<br><span class="hljs-regexp">//</span>-----------------------------------------------------------------------------<br><span class="hljs-regexp">//</span> File          : $&#123;mod_name&#125;_pipeline.sv<br>// Author        :<br><span class="hljs-regexp">//</span>-----------------------------------------------------------------------------<br><span class="hljs-regexp">//</span> Description :<br><span class="hljs-regexp">//</span><br>//-----------------------------------------------------------------------------<br><span class="hljs-regexp">//</span> Copyright (c) <span class="hljs-number">2020</span> by  This model is the confidential <span class="hljs-keyword">and</span><br>// proprietary property of  <span class="hljs-keyword">and</span> the possession <span class="hljs-keyword">or</span> <span class="hljs-keyword">use</span> of this<br>// file requires a written license from .<br>//------------------------------------------------------------------------------<br><span class="hljs-regexp">//</span> Modification history :<br><span class="hljs-regexp">//</span>-----------------------------------------------------------------------------<br><br>module $&#123;mod_name&#125;_pipeline <span class="hljs-comment">#(</span><br>$param_decl<br>)<br>(<br>$interface_decl<br>);<br><br>$wires_decl<br>$pipeline_decl<br>    $&#123;mod_name&#125; <span class="hljs-comment">#(</span><br>$param_inst_decl)<br>    U<span class="hljs-number">_</span>\U$&#123;mod_name&#125;\E (<br>$inst_decl<br>    );<br><br>endmodule<br><br>EOF<br><br><span class="hljs-keyword">close</span> $fh_wr;<br></code></pre></td></tr></table></figure><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">% ./auto_pipe.pl -f match_proc.v -r 0 -i 0 -o 1<br></code></pre></td></tr></table></figure><ul><li><p>原RTL </p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> match_proc(<br>   <span class="hljs-comment">// Global Signals</span><br>    reset_n,<br>    clock,<br><br>    cfg_lut,<br><br>    drm_sink_sop,<br>    drm_sink_eop,<br>    drm_sink_valid,<br>    drm_sink_data,<br>    drm_sink_ready,<br>    drm_sink_channel,<br><br>    drm_source_sop,<br>    drm_source_eop,<br>    drm_source_valid,<br>    drm_source_data,<br>    drm_source_ready,<br>    drm_source_channel,<br>    drm_source_cfg_out<br><br>);<br><br>  <span class="hljs-comment">// --- parameter -------------------------</span><br><br>  <span class="hljs-keyword">parameter</span> SOFT_BIT       = <span class="hljs-number">16'd6</span>;<br>  <span class="hljs-keyword">parameter</span> MAX_QM         = <span class="hljs-number">16'd16</span>;<br>  <span class="hljs-keyword">parameter</span> MAX_QM_2x      = MAX_QM*<span class="hljs-number">2</span>;<br><br>  <span class="hljs-keyword">parameter</span> BUS_WIDTH      = SOFT_BIT*MAX_QM;<br><br>  <span class="hljs-keyword">parameter</span> LLR_ACC_WIDTH  = <span class="hljs-number">16'd6</span>;<br>  <span class="hljs-keyword">parameter</span> BUFFER_WIDTH   = MAX_QM*LLR_ACC_WIDTH;<br><br>  <span class="hljs-keyword">parameter</span> CFG_LEN        = <span class="hljs-number">16'd24</span>;<br>  <span class="hljs-keyword">parameter</span> CFG_WIDTH      = <span class="hljs-number">16'd16</span>;<br>  <span class="hljs-keyword">parameter</span> CFG_BLK        = CFG_LEN*CFG_WIDTH;<br><br>  <span class="hljs-keyword">parameter</span> CHNL_WIDTH     = <span class="hljs-number">8</span>;<br><br>  <span class="hljs-keyword">parameter</span> IDLE           = <span class="hljs-number">4'd0</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_DATA       = <span class="hljs-number">4'd1</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_LAST_DATA  = <span class="hljs-number">4'd2</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_NULL       = <span class="hljs-number">4'd3</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_NULL_DATA  = <span class="hljs-number">4'd4</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_NULL_PEND0 = <span class="hljs-number">4'd5</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_NULL_PEND1 = <span class="hljs-number">4'd6</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_PATCH      = <span class="hljs-number">4'd7</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL = <span class="hljs-number">4'd8</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL_DATA  = <span class="hljs-number">4'd9</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL_PEND0 = <span class="hljs-number">4'd10</span>;<br>  <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL_PEND1 = <span class="hljs-number">4'd11</span>;<br>  <span class="hljs-keyword">parameter</span> PREV_FETCH     = <span class="hljs-number">4'd12</span>;<br><br>  <span class="hljs-keyword">parameter</span> NULL_LLR_VAL   = &#123;<span class="hljs-number">1'b0</span>,&#123;(SOFT_BIT-<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1'b1</span>&#125;&#125;&#125;;<br>  <span class="hljs-keyword">parameter</span> ZERO_LLR_ADDR  = <span class="hljs-number">11'd1599</span>;<br>  <span class="hljs-keyword">parameter</span> NULL_LLR_ADDR  = <span class="hljs-number">11'd1598</span>;<br>  <span class="hljs-keyword">parameter</span> NULL_LLR_DATA  = &#123;MAX_QM&#123;NULL_LLR_VAL&#125;&#125;;<br><br>  <span class="hljs-comment">// --- in and out port -------------------</span><br><br>  <span class="hljs-keyword">input</span>                           clock;<br>  <span class="hljs-keyword">input</span>                           reset_n;<br><br>  <span class="hljs-keyword">input</span>   [CFG_BLK-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]           cfg_lut;<br><br>  <span class="hljs-keyword">input</span>                           drm_sink_sop;<br>  <span class="hljs-keyword">input</span>                           drm_sink_eop;<br>  <span class="hljs-keyword">input</span>                           drm_sink_valid;<br>  <span class="hljs-keyword">input</span>   [BUS_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]         drm_sink_data;<br>  <span class="hljs-keyword">input</span>   [CHNL_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]        drm_sink_channel;<br>  <span class="hljs-keyword">output</span>                          drm_sink_ready;<br><br>  <span class="hljs-keyword">output</span>                          drm_source_sop;<br>  <span class="hljs-keyword">output</span>                          drm_source_eop;<br>  <span class="hljs-keyword">output</span>                          drm_source_valid;<br>  <span class="hljs-keyword">output</span>  [BUS_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]         drm_source_data;<br>  <span class="hljs-keyword">output</span>  [CHNL_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]        drm_source_channel;<br>  <span class="hljs-keyword">output</span>  [<span class="hljs-number">2</span>*CFG_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]       drm_source_cfg_out;<br>  <span class="hljs-keyword">input</span>                           drm_source_ready;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure></li><li><p>生成RTL</p></li></ul><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//-----------------------------------------------------------------------------</span><br><span class="hljs-comment">// Project       :</span><br><span class="hljs-comment">//-----------------------------------------------------------------------------</span><br><span class="hljs-comment">// File          : match_proc_pipeline.sv</span><br><span class="hljs-comment">// Author        :</span><br><span class="hljs-comment">//-----------------------------------------------------------------------------</span><br><span class="hljs-comment">// Description :</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//-----------------------------------------------------------------------------</span><br><span class="hljs-comment">// Copyright (c) 2020 by  This model is the confidential and</span><br><span class="hljs-comment">// proprietary property of  and the possession or use of this</span><br><span class="hljs-comment">// file requires a written license from .</span><br><span class="hljs-comment">//------------------------------------------------------------------------------</span><br><span class="hljs-comment">// Modification history :</span><br><span class="hljs-comment">//-----------------------------------------------------------------------------</span><br><br><span class="hljs-keyword">module</span> match_proc_pipeline #(<br>    <span class="hljs-keyword">parameter</span> ZERO_LLR_ADDR =  <span class="hljs-number">11'd1599</span>,<br>    <span class="hljs-keyword">parameter</span> SOFT_BIT =  <span class="hljs-number">16'd6</span>,<br>    <span class="hljs-keyword">parameter</span> PREV_FETCH =  <span class="hljs-number">4'd12</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL_PEND1 =  <span class="hljs-number">4'd11</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL_PEND0 =  <span class="hljs-number">4'd10</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL_DATA =  <span class="hljs-number">4'd9</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_PATCH_NULL =  <span class="hljs-number">4'd8</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_PATCH =  <span class="hljs-number">4'd7</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_NULL_PEND1 =  <span class="hljs-number">4'd6</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_NULL_PEND0 =  <span class="hljs-number">4'd5</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_NULL_DATA =  <span class="hljs-number">4'd4</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_NULL =  <span class="hljs-number">4'd3</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_LAST_DATA =  <span class="hljs-number">4'd2</span>,<br>    <span class="hljs-keyword">parameter</span> OUT_DATA =  <span class="hljs-number">4'd1</span>,<br>    <span class="hljs-keyword">parameter</span> NULL_LLR_VAL =  &#123;<span class="hljs-number">1'b0</span>,&#123;(SOFT_BIT-<span class="hljs-number">1</span>)&#123;<span class="hljs-number">1'b1</span>&#125;&#125;&#125;,<br>    <span class="hljs-keyword">parameter</span> NULL_LLR_ADDR =  <span class="hljs-number">11'd1598</span>,<br>    <span class="hljs-keyword">parameter</span> MAX_QM =  <span class="hljs-number">16'd16</span>,<br>    <span class="hljs-keyword">parameter</span> LLR_ACC_WIDTH =  <span class="hljs-number">16'd6</span>,<br>    <span class="hljs-keyword">parameter</span> IDLE =  <span class="hljs-number">4'd0</span>,<br>    <span class="hljs-keyword">parameter</span> CHNL_WIDTH =  <span class="hljs-number">8</span>,<br>    <span class="hljs-keyword">parameter</span> CFG_WIDTH =  <span class="hljs-number">16'd16</span>,<br>    <span class="hljs-keyword">parameter</span> CFG_LEN =  <span class="hljs-number">16'd24</span>,<br>    <span class="hljs-keyword">parameter</span> CFG_BLK =  CFG_LEN*CFG_WIDTH,<br>    <span class="hljs-keyword">parameter</span> BUS_WIDTH =  SOFT_BIT*MAX_QM,<br>    <span class="hljs-keyword">parameter</span> BUFFER_WIDTH =  MAX_QM*LLR_ACC_WIDTH,<br>    <span class="hljs-keyword">parameter</span> MAX_QM_2x =  MAX_QM*<span class="hljs-number">2</span>,<br>    <span class="hljs-keyword">parameter</span> NULL_LLR_DATA =  &#123;MAX_QM&#123;NULL_LLR_VAL&#125;&#125;<br>)<br>(<br>    <span class="hljs-keyword">input</span>   clock,<br>    <span class="hljs-keyword">input</span>   reset_n,<br>    <span class="hljs-keyword">input</span>  [CFG_BLK-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cfg_lut,<br>    <span class="hljs-keyword">input</span>  [CHNL_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_sink_channel,<br>    <span class="hljs-keyword">input</span>  [BUS_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_sink_data,<br>    <span class="hljs-keyword">input</span>   drm_sink_eop,<br>    <span class="hljs-keyword">output</span>   drm_sink_ready,<br>    <span class="hljs-keyword">input</span>   drm_sink_sop,<br>    <span class="hljs-keyword">input</span>   drm_sink_valid,<br>    <span class="hljs-keyword">output</span>  [<span class="hljs-number">2</span>*CFG_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_source_cfg_out,<br>    <span class="hljs-keyword">output</span>  [CHNL_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_source_channel,<br>    <span class="hljs-keyword">output</span>  [BUS_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_source_data,<br>    <span class="hljs-keyword">output</span>   drm_source_eop,<br>    <span class="hljs-keyword">input</span>   drm_source_ready,<br>    <span class="hljs-keyword">output</span>   drm_source_sop,<br>    <span class="hljs-keyword">output</span>   drm_source_valid<br>);<br><br>    <span class="hljs-keyword">wire</span> [CFG_BLK-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] cfg_lut_ndly;<br>    <span class="hljs-keyword">wire</span> [CHNL_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_sink_channel_ndly;<br>    <span class="hljs-keyword">wire</span> [BUS_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_sink_data_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_sink_eop_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_sink_ready_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_sink_sop_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_sink_valid_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">2</span>*CFG_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_source_cfg_out_ndly;<br>    <span class="hljs-keyword">wire</span> [CHNL_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_source_channel_ndly;<br>    <span class="hljs-keyword">wire</span> [BUS_WIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] drm_source_data_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_source_eop_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_source_ready_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_source_sop_ndly;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] drm_source_valid_ndly;<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(CFG_BLK-1-0+1),.PIPE_NUM(1))</span> IN_NDELAY_CFG_LUT (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (cfg_lut),<br>        <span class="hljs-variable">.sig_dout</span>(cfg_lut_ndly)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(CHNL_WIDTH-1-0+1),.PIPE_NUM(1))</span> IN_NDELAY_DRM_SINK_CHANNEL (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_sink_channel),<br>        <span class="hljs-variable">.sig_dout</span>(drm_sink_channel_ndly)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(BUS_WIDTH-1-0+1),.PIPE_NUM(1))</span> IN_NDELAY_DRM_SINK_DATA (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_sink_data),<br>        <span class="hljs-variable">.sig_dout</span>(drm_sink_data_ndly)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> IN_NDELAY_DRM_SINK_EOP (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_sink_eop),<br>        <span class="hljs-variable">.sig_dout</span>(drm_sink_eop_ndly)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> OUT_NDELAY_DRM_SINK_READY (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_sink_ready_ndly),<br>        <span class="hljs-variable">.sig_dout</span>(drm_sink_ready)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> IN_NDELAY_DRM_SINK_SOP (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_sink_sop),<br>        <span class="hljs-variable">.sig_dout</span>(drm_sink_sop_ndly)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> IN_NDELAY_DRM_SINK_VALID (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_sink_valid),<br>        <span class="hljs-variable">.sig_dout</span>(drm_sink_valid_ndly)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(2*CFG_WIDTH-1-0+1),.PIPE_NUM(1))</span> OUT_NDELAY_DRM_SOURCE_CFG_OUT (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_source_cfg_out_ndly),<br>        <span class="hljs-variable">.sig_dout</span>(drm_source_cfg_out)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(CHNL_WIDTH-1-0+1),.PIPE_NUM(1))</span> OUT_NDELAY_DRM_SOURCE_CHANNEL (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_source_channel_ndly),<br>        <span class="hljs-variable">.sig_dout</span>(drm_source_channel)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(BUS_WIDTH-1-0+1),.PIPE_NUM(1))</span> OUT_NDELAY_DRM_SOURCE_DATA (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_source_data_ndly),<br>        <span class="hljs-variable">.sig_dout</span>(drm_source_data)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> OUT_NDELAY_DRM_SOURCE_EOP (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_source_eop_ndly),<br>        <span class="hljs-variable">.sig_dout</span>(drm_source_eop)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> IN_NDELAY_DRM_SOURCE_READY (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_source_ready),<br>        <span class="hljs-variable">.sig_dout</span>(drm_source_ready_ndly)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> OUT_NDELAY_DRM_SOURCE_SOP (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_source_sop_ndly),<br>        <span class="hljs-variable">.sig_dout</span>(drm_source_sop)<br>        );<br><br>    signal_ndelay <span class="hljs-variable">#(.RST_MODE(0),.DWIDTH(1),.PIPE_NUM(1))</span> OUT_NDELAY_DRM_SOURCE_VALID (<br>        <span class="hljs-variable">.clk</span>     (clock),<br>        <span class="hljs-variable">.rst_n</span>   (reset_n),<br>        <span class="hljs-variable">.sig_din</span> (drm_source_valid_ndly),<br>        <span class="hljs-variable">.sig_dout</span>(drm_source_valid)<br>        );<br><br><br>    match_proc #(<br>        <span class="hljs-variable">.IDLE</span>(IDLE), <br>        <span class="hljs-variable">.MAX_QM</span>(MAX_QM), <br>        <span class="hljs-variable">.CFG_LEN</span>(CFG_LEN), <br>        <span class="hljs-variable">.CFG_BLK</span>(CFG_BLK), <br>        <span class="hljs-variable">.SOFT_BIT</span>(SOFT_BIT), <br>        <span class="hljs-variable">.OUT_DATA</span>(OUT_DATA), <br>        <span class="hljs-variable">.OUT_NULL</span>(OUT_NULL), <br>        <span class="hljs-variable">.OUT_PATCH</span>(OUT_PATCH), <br>        <span class="hljs-variable">.BUS_WIDTH</span>(BUS_WIDTH), <br>        <span class="hljs-variable">.CFG_WIDTH</span>(CFG_WIDTH), <br>        <span class="hljs-variable">.MAX_QM_2x</span>(MAX_QM_2x), <br>        <span class="hljs-variable">.PREV_FETCH</span>(PREV_FETCH), <br>        <span class="hljs-variable">.CHNL_WIDTH</span>(CHNL_WIDTH), <br>        <span class="hljs-variable">.NULL_LLR_VAL</span>(NULL_LLR_VAL), <br>        <span class="hljs-variable">.BUFFER_WIDTH</span>(BUFFER_WIDTH), <br>        <span class="hljs-variable">.ZERO_LLR_ADDR</span>(ZERO_LLR_ADDR), <br>        <span class="hljs-variable">.LLR_ACC_WIDTH</span>(LLR_ACC_WIDTH), <br>        <span class="hljs-variable">.NULL_LLR_DATA</span>(NULL_LLR_DATA), <br>        <span class="hljs-variable">.OUT_LAST_DATA</span>(OUT_LAST_DATA), <br>        <span class="hljs-variable">.NULL_LLR_ADDR</span>(NULL_LLR_ADDR), <br>        <span class="hljs-variable">.OUT_NULL_DATA</span>(OUT_NULL_DATA), <br>        <span class="hljs-variable">.OUT_PATCH_NULL</span>(OUT_PATCH_NULL), <br>        <span class="hljs-variable">.OUT_NULL_PEND1</span>(OUT_NULL_PEND1), <br>        <span class="hljs-variable">.OUT_NULL_PEND0</span>(OUT_NULL_PEND0), <br>        <span class="hljs-variable">.OUT_PATCH_NULL_DATA</span>(OUT_PATCH_NULL_DATA), <br>        <span class="hljs-variable">.OUT_PATCH_NULL_PEND1</span>(OUT_PATCH_NULL_PEND1), <br>        <span class="hljs-variable">.OUT_PATCH_NULL_PEND0</span>(OUT_PATCH_NULL_PEND0))<br>    U_MATCH_PROC (<br>        <span class="hljs-variable">.clock</span>(clock), <br>        <span class="hljs-variable">.reset_n</span>(reset_n), <br>        <span class="hljs-variable">.cfg_lut</span>(cfg_lut_ndly), <br>        <span class="hljs-variable">.drm_sink_channel</span>(drm_sink_channel_ndly), <br>        <span class="hljs-variable">.drm_sink_data</span>(drm_sink_data_ndly), <br>        <span class="hljs-variable">.drm_sink_eop</span>(drm_sink_eop_ndly), <br>        <span class="hljs-variable">.drm_sink_ready</span>(drm_sink_ready_ndly), <br>        <span class="hljs-variable">.drm_sink_sop</span>(drm_sink_sop_ndly), <br>        <span class="hljs-variable">.drm_sink_valid</span>(drm_sink_valid_ndly), <br>        <span class="hljs-variable">.drm_source_cfg_out</span>(drm_source_cfg_out_ndly), <br>        <span class="hljs-variable">.drm_source_channel</span>(drm_source_channel_ndly), <br>        <span class="hljs-variable">.drm_source_data</span>(drm_source_data_ndly), <br>        <span class="hljs-variable">.drm_source_eop</span>(drm_source_eop_ndly), <br>        <span class="hljs-variable">.drm_source_ready</span>(drm_source_ready_ndly), <br>        <span class="hljs-variable">.drm_source_sop</span>(drm_source_sop_ndly), <br>        <span class="hljs-variable">.drm_source_valid</span>(drm_source_valid_ndly)<br>    );<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Perl </tag>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>signal延迟模块RTL</title>
      <link href="/2020/09/18/signal%E5%BB%B6%E8%BF%9F%E6%A8%A1%E5%9D%97RTL/"/>
      <url>/2020/09/18/signal%E5%BB%B6%E8%BF%9F%E6%A8%A1%E5%9D%97RTL/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs verilog"> <span class="hljs-comment">//============================================================================</span><br> <span class="hljs-comment">//     FileName: signal_ndelay.sv</span><br> <span class="hljs-comment">//         Desc:</span><br> <span class="hljs-comment">//              Function : use for pipeline signals.</span><br> <span class="hljs-comment">//              Parameter</span><br> <span class="hljs-comment">//                 RST_MODE  : use reset mode to pipeline, value inside &#123;0:asyn, 1:sync, 2:none&#125;</span><br> <span class="hljs-comment">//                 DWIDTH    : signal vector width, value inside &#123;1:1bit, 2:2bit, ...&#125;</span><br> <span class="hljs-comment">//                 PIPE_NUM  : pipeline number, value inside &#123;0:passthrought, 1:1 pipeline, ...&#125;</span><br> <span class="hljs-comment">//       Author: 神秘人</span><br> <span class="hljs-comment">//        Email: 275244143@qq.com</span><br> <span class="hljs-comment">//     HomePage:</span><br> <span class="hljs-comment">//      Version: 1.0.0</span><br> <span class="hljs-comment">//   LastChange: 2020-09-17 17:39:49</span><br> <span class="hljs-comment">//      History:</span><br> <span class="hljs-comment">//============================================================================*/</span><br><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> SIGNAL_NDELAY__SV</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> SIGNAL_NDELAY__SV</span><br><br><span class="hljs-keyword">module</span> signal_ndelay #(<br>    <span class="hljs-keyword">parameter</span> RST_MODE  = <span class="hljs-number">0</span>,<br>    <span class="hljs-keyword">parameter</span> DWIDTH    = <span class="hljs-number">1</span>,<br>    <span class="hljs-keyword">parameter</span> PIPE_NUM  = <span class="hljs-number">2</span><br>) (<br>   <span class="hljs-keyword">input</span>                 clk     ,<br>   <span class="hljs-keyword">input</span>                 rst_n   ,<br>   <span class="hljs-keyword">input</span>  [DWIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] sig_din ,<br>   <span class="hljs-keyword">output</span> [DWIDTH-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>] sig_dout<br>);<br><br><br>    <span class="hljs-keyword">generate</span><br>        <span class="hljs-keyword">if</span>(PIPE_NUM == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span>:PASS_PROC<br>            <span class="hljs-keyword">assign</span> sig_dout = sig_din;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span>:PIPE_PROC<br>            <span class="hljs-keyword">reg</span> [PIPE_NUM*DWIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] pipelines;<br>            <span class="hljs-keyword">if</span>(PIPE_NUM == <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span>(RST_MODE == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(rst_n == <span class="hljs-number">1'b0</span>) <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= &#123;(DWIDTH*PIPE_NUM)&#123;<span class="hljs-number">1'b0</span>&#125;&#125;;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= sig_din;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(RST_MODE == <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(rst_n == <span class="hljs-number">1'b0</span>) <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= &#123;(DWIDTH*PIPE_NUM)&#123;<span class="hljs-number">1'b0</span>&#125;&#125;;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= sig_din;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>                        pipelines &lt;= sig_din;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">assign</span> sig_dout = pipelines;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span>(RST_MODE == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(rst_n == <span class="hljs-number">1'b0</span>) <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= &#123;(DWIDTH*PIPE_NUM)&#123;<span class="hljs-number">1'b0</span>&#125;&#125;;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= &#123;pipelines[(PIPE_NUM-<span class="hljs-number">1</span>)*DWIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>],sig_din&#125;;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(RST_MODE == <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(rst_n == <span class="hljs-number">1'b0</span>) <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= &#123;(DWIDTH*PIPE_NUM)&#123;<span class="hljs-number">1'b0</span>&#125;&#125;;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            pipelines &lt;= &#123;pipelines[(PIPE_NUM-<span class="hljs-number">1</span>)*DWIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>],sig_din&#125;;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>                        pipelines &lt;= &#123;pipelines[(PIPE_NUM-<span class="hljs-number">1</span>)*DWIDTH-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>],sig_din&#125;;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">assign</span> sig_dout = pipelines[PIPE_NUM*DWIDTH-<span class="hljs-number">1</span> -: DWIDTH];<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endgenerate</span><br><br><span class="hljs-keyword">endmodule</span> <span class="hljs-comment">// signal_ndelay</span><br><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perl模块验证环境使用</title>
      <link href="/2020/08/27/Perl%E6%A8%A1%E5%9D%97%E9%AA%8C%E8%AF%81%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/27/Perl%E6%A8%A1%E5%9D%97%E9%AA%8C%E8%AF%81%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="ICer-FPGAer还是Perl比Python熟悉一点"><a href="#ICer-FPGAer还是Perl比Python熟悉一点" class="headerlink" title="ICer/FPGAer还是Perl比Python熟悉一点"></a>ICer/FPGAer还是Perl比Python熟悉一点</h3><h4 id="通过Perl编写激励快速测试verilog模块很爽"><a href="#通过Perl编写激励快速测试verilog模块很爽" class="headerlink" title="通过Perl编写激励快速测试verilog模块很爽~"></a>通过Perl编写激励快速测试verilog模块很爽~</h4><p><img src="/2020/08/27/Perl模块验证环境使用/ss.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Perl </tag>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现个通用堆栈RTL</title>
      <link href="/2020/08/25/SV%E5%AE%9E%E7%8E%B0%E4%B8%AA%E9%80%9A%E7%94%A8%E5%A0%86%E6%A0%88RTL/"/>
      <url>/2020/08/25/SV%E5%AE%9E%E7%8E%B0%E4%B8%AA%E9%80%9A%E7%94%A8%E5%A0%86%E6%A0%88RTL/</url>
      
        <content type="html"><![CDATA[<h3 id="闲着了"><a href="#闲着了" class="headerlink" title="闲着了~"></a>闲着了~</h3><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-keyword">packed</span> &#123;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] id;<br>    <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] data;<br>&#125; sdata_t;<br><br><br><span class="hljs-keyword">module</span> stack #(<br>               <span class="hljs-keyword">type</span> DTYPE = <span class="hljs-keyword">int</span>,<br>               <span class="hljs-keyword">int</span> STACK_DEPTH = <span class="hljs-number">32'd16</span><br>               ) (<br>                  <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span>  clk,<br>                  <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span>  rst_n,<br>                  <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span>  stack_push,<br>                  <span class="hljs-keyword">input</span> <span class="hljs-keyword">logic</span>  stack_pop,<br>                  <span class="hljs-keyword">input</span>        DTYPE stack_din,<br>                  <span class="hljs-keyword">output</span>       DTYPE stack_dout,<br>                  <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> stack_full,<br>                  <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span> stack_empty<br>                  );<br><br>    DTYPE stack_mem[<span class="hljs-number">1</span>:STACK_DEPTH];<br><br><br>    <span class="hljs-keyword">logic</span> [<span class="hljs-built_in">$clog2</span>(STACK_DEPTH):<span class="hljs-number">0</span>] stack_next_ptr;<br><br>    <span class="hljs-keyword">assign</span> stack_full = (stack_next_ptr &gt; STACK_DEPTH) ? <span class="hljs-number">1'b1</span> : <span class="hljs-number">1'b0</span>;<br>    <span class="hljs-keyword">assign</span> stack_empty = (stack_next_ptr &gt; <span class="hljs-number">32'd1</span>) ? <span class="hljs-number">1'b0</span> : <span class="hljs-number">1'b1</span>;<br><br>    <span class="hljs-keyword">always_ff</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> rst_n) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(rst_n == <span class="hljs-number">1'b0</span>) <span class="hljs-keyword">begin</span><br>            stack_dout &lt;= '<span class="hljs-number">0</span>;<br>            stack_next_ptr &lt;= <span class="hljs-number">32'd1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= STACK_DEPTH; i++) <span class="hljs-keyword">begin</span><br>                stack_mem[i] &lt;= '<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( (stack_full == <span class="hljs-number">1'b0</span>) &amp;&amp; (stack_push == <span class="hljs-number">1'b1</span>) ) <span class="hljs-keyword">begin</span><br>            stack_next_ptr &lt;= stack_next_ptr + <span class="hljs-number">32'd1</span>;<br>            stack_mem[stack_next_ptr] &lt;= stack_din;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( (stack_empty == <span class="hljs-number">1'b0</span>) &amp;&amp; (stack_pop == <span class="hljs-number">1'b1</span>) ) <span class="hljs-keyword">begin</span><br>            stack_next_ptr &lt;= stack_next_ptr - <span class="hljs-number">32'd1</span>;<br>            stack_dout &lt;= stack_mem[stack_next_ptr - <span class="hljs-number">32'd1</span>];<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            ;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span> <span class="hljs-comment">// stack</span><br><br><br><span class="hljs-keyword">module</span> tb;<br><br>    <span class="hljs-keyword">bit</span> clk;<br>    <span class="hljs-keyword">bit</span> rst_n;<br>    <span class="hljs-keyword">logic</span> stack_push;<br>    <span class="hljs-keyword">logic</span> stack_pop;<br>    sdata_t stack_din;<br>    sdata_t stack_dout;<br>    <span class="hljs-keyword">logic</span> stack_full;<br>    <span class="hljs-keyword">logic</span> stack_empty;<br><br><br>    stack <span class="hljs-variable">#(.DTYPE(sdata_t)) u_stack(clk, rst_n, stack_push, stack_pop, stack_din, stack_dout, stack_full, stack_empty)</span>;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        $shm_open(<span class="hljs-string">"wave"</span>);<br>        $shm_probe(<span class="hljs-string">"ACTFM"</span>);<br>    <span class="hljs-keyword">end</span><br><br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        rst_n &lt;= <span class="hljs-number">0</span>;<br>        #<span class="hljs-number">10</span>ns;<br>        rst_n &lt;= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">20</span>ns;<br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">begin</span><br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_push &lt;= <span class="hljs-number">1</span>;<br>            stack_din &lt;= &#123;<span class="hljs-built_in">$random</span>, <span class="hljs-built_in">$random</span>&#125;;<br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_push &lt;= <span class="hljs-number">0</span>;<br>            stack_din &lt;= <span class="hljs-number">0</span>;<br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_pop &lt;= <span class="hljs-number">1</span>;<br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_pop &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">begin</span><br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_pop &lt;= <span class="hljs-number">1</span>;<br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_pop &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">begin</span><br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_push &lt;= <span class="hljs-number">1</span>;<br>            stack_din &lt;= &#123;<span class="hljs-built_in">$random</span>, <span class="hljs-built_in">$random</span>&#125;;<br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_push &lt;= <span class="hljs-number">0</span>;<br>            stack_din &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">repeat</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">begin</span><br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_pop &lt;= <span class="hljs-number">1</span>;<br>            @(<span class="hljs-keyword">posedge</span> clk);<br>            stack_pop &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">forever</span> #<span class="hljs-number">4</span>ns clk = ~clk;<br>    <span class="hljs-keyword">end</span><br><br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        #<span class="hljs-number">3</span>us;<br>        <span class="hljs-built_in">$finish</span>;<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><img src="/2020/08/25/SV实现个通用堆栈RTL/stack.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JasperGold形式验证工具初试用</title>
      <link href="/2020/08/11/JasperGold%E5%BD%A2%E5%BC%8F%E9%AA%8C%E8%AF%81%E5%B7%A5%E5%85%B7%E5%88%9D%E8%AF%95%E7%94%A8/"/>
      <url>/2020/08/11/JasperGold%E5%BD%A2%E5%BC%8F%E9%AA%8C%E8%AF%81%E5%B7%A5%E5%85%B7%E5%88%9D%E8%AF%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="JasperGold工具很强大，小模块验证可以不错，还有其他各种APP"><a href="#JasperGold工具很强大，小模块验证可以不错，还有其他各种APP" class="headerlink" title="JasperGold工具很强大，小模块验证可以不错，还有其他各种APP~"></a>JasperGold工具很强大，小模块验证可以不错，还有其他各种APP~</h3><p><img src="/2020/08/11/JasperGold形式验证工具初试用/jg.jpg" alt="jg"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实例化Parameterized test</title>
      <link href="/2020/07/22/%E5%A6%82%E4%BD%95%E5%AE%9E%E4%BE%8B%E5%8C%96Parameterized-test/"/>
      <url>/2020/07/22/%E5%A6%82%E4%BD%95%E5%AE%9E%E4%BE%8B%E5%8C%96Parameterized-test/</url>
      
        <content type="html"><![CDATA[<h3 id="不错，就转载一下。"><a href="#不错，就转载一下。" class="headerlink" title="不错，就转载一下。"></a>不错，就转载一下。</h3><p>I have a few questions regarding parameterized test ( which would act as uvm_test_top )</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_macros.svh"</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_pkg.sv"</span><br> <span class="hljs-keyword">import</span> uvm_pkg::*;<br> <br><span class="hljs-keyword">class</span> my_test # ( <span class="hljs-keyword">type</span> T = <span class="hljs-keyword">int</span> , T par = <span class="hljs-number">10</span> ) <span class="hljs-keyword">extends</span> uvm_test ;<br> <br> <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> M1 `uvm_component_param_utils ( my_test#(T,par) ) `<span class="hljs-meta-keyword">endif</span> </span><br> <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> M2 </span><br>    <span class="hljs-meta">`uvm_component_registry ( my_test#(T,par) , $sformatf("my_test_%0s_%0d",$typename(T),par)  )  // [A] </span><br> <br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">string</span> type_name = &#123;<span class="hljs-string">"my_test#("</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"my_test_%0s_%0d"</span>,<span class="hljs-built_in">$typename</span>(T),par),<span class="hljs-string">")"</span> &#125; ; <br>    <span class="hljs-comment">// NOTE :: Overriding Property [ 2 type_name exists (a) type_name (b) super.type_name() ] !!</span><br> <br>     <span class="hljs-keyword">function</span> <span class="hljs-keyword">string</span> get_type_name() <span class="hljs-comment">// NOTE :: Error to declare it as static , Virtual ( in uvm_test ) by default !!    </span><br>          <span class="hljs-keyword">return</span> type_name ;<br>     <span class="hljs-keyword">endfunction</span><br> <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br> <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase ( uvm_phase phase ) ;<br>    <span class="hljs-meta">`uvm_info(get_name(),$sformatf(" type_name is ",type_name),UVM_NONE) // [B] </span><br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br> <br><span class="hljs-keyword">module</span> TOP ;<br> <br><span class="hljs-comment">// Make Specialized Class</span><br>my_test <span class="hljs-variable">#(int,10)</span> top1 ;<br>my_test <span class="hljs-variable">#(int,20)</span> top2 ;<br> <br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>   run_test(<span class="hljs-string">"my_test_int_20"</span>); <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>[1] Using +define+M1 :: It’s unable to create a component since its not registered with the factory . Is there a way around ?</p><p>[2] Using +define+M2 I see discrepancy across simulators ( Not the EDA ones , but the licensed ones at work ) .<br>Some are able to create instance of my_test#(int,20) while others flash “Class specialization parameter must be constant” at line [A] above .</p><p>[3] Using `uvm_component_param_utils , user needs to create own type_name variable and get_type_name function .<br>Is there a helper macro for this ?</p><p>[4] If I want to run specialized test via command line +UVM_TESTNAME= , what should ARG be given as ?</p><p>[5] Can I use text substitution macro <code>&quot;T</code>“ in [A] above instead of $typename(T) ?</p><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><ol><li><p>You can manually create the top level instance.</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> TOP ;<br>  uvm_test top;  <br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    top = my_test <span class="hljs-variable">#(int,10)::type_id::create("my_test_int_10",null)</span>;<br>    run_test(<span class="hljs-string">""</span>); <br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>If you want command line control, you would have to look at your own switch instead of using +UVM_TESTNAME</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> TOP ;<br>  uvm_test top;<br>  <span class="hljs-keyword">string</span> testname;<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">$value$plusargs</span>(<span class="hljs-string">"MY_TESTNAME=%s"</span>,testname)) <span class="hljs-meta">`uvm_fatal("", "No test specified")</span><br>    <span class="hljs-keyword">case</span>(testname)<br>      <span class="hljs-string">"int_10"</span>: top = my_test <span class="hljs-variable">#(int,10)::type_id::create("my_test_int_10",null)</span>;<br>      <span class="hljs-string">"int_20"</span>: top = my_test <span class="hljs-variable">#(int,20)::type_id::create("my_test_int_20",null)</span>;<br>      <span class="hljs-keyword">default</span>: <span class="hljs-meta">`uvm_fatal("", "Test not found")</span><br>    <span class="hljs-keyword">endcase</span><br>    run_test(<span class="hljs-string">""</span>); <br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure></li><li><p>Yes, tools are inconstant in support of $sformat as a parameterization.</p></li><li><p>There are no existing helper macros. You could copy the functionality of</p><p> `uvm_component_utils</p><p>into another macro that takes two arguments; the first being the same argument to uvm_component_param_utils, and the second one being a unique string parameter. That’s a small amount of code, but I don’t have the time to explain the internals of that macro. Another approach that has the same effect is extending each class specialization into an unparameterized class.</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_test_int_10 <span class="hljs-keyword">extends</span> my_test<span class="hljs-variable">#(int,10)</span>;<br><span class="hljs-meta">`uvm_component_utils(my_test_int_10)</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>  <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name,parent);<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">class</span> my_test_int_20 <span class="hljs-keyword">extends</span> my_test<span class="hljs-variable">#(int,20)</span>;<br><span class="hljs-meta">`uvm_component_utils(my_test_int_20)</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>  <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name,parent);<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>That would be easy to turn into a macro</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> my_test_spec(T,V) \</span><br><span class="hljs-keyword">class</span> my_test_<span class="hljs-meta">``T``_V extends my_test#(T,V); \</span><br><span class="hljs-meta">`uvm_component_utils(my_test_``T``_V) \</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent); \<br>  <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name,parent); \<br><span class="hljs-keyword">endfunction</span> \<br><span class="hljs-keyword">endclass</span><br> <br><span class="hljs-meta">`my_test_spec(int,10)</span><br><span class="hljs-meta">`my_test_spec(int,20)</span><br></code></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>The answer to 3) lets you use +UVM_TESTNAME</p></li><li><p>No. The replaced string would be the same for each class specialization.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关库查找技巧</title>
      <link href="/2020/07/13/%E7%9B%B8%E5%85%B3%E5%BA%93%E6%9F%A5%E6%89%BE%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/07/13/%E7%9B%B8%E5%85%B3%E5%BA%93%E6%9F%A5%E6%89%BE%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="perl安装库WEB浏览"><a href="#perl安装库WEB浏览" class="headerlink" title="perl安装库WEB浏览"></a>perl安装库WEB浏览</h3><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">perl -MPod::POM::Web -e "Pod::POM::Web-&gt;server"<br></code></pre></td></tr></table></figure><h3 id="perl常用库"><a href="#perl常用库" class="headerlink" title="perl常用库"></a>perl常用库</h3><p><a href="https://github.com/hachiojipm/awesome-perl" target="_blank" rel="noopener">https://github.com/hachiojipm/awesome-perl</a></p><h3 id="Ubuntu等使用apt-file解决库或者文件缺失依赖"><a href="#Ubuntu等使用apt-file解决库或者文件缺失依赖" class="headerlink" title="Ubuntu等使用apt-file解决库或者文件缺失依赖"></a>Ubuntu等使用apt-file解决库或者文件缺失依赖</h3><p><strong>转载</strong><br><strong>1 问题发现</strong><br>有的时候编译或者安装软件包，会提示缺少某个文件，比如头文件或者动态链接库xxx.so文件等, 虽然我们知道这是因为没有安装某个必须的软件包所致，却不知道具体是哪个软件包。<br><strong>2 问题解析</strong><br>解决这样的问题，在fedora/RHEL 上，使用yum whatprovides可以很轻松的查到相应的，在ubuntu下面有什么解决方案? 可使用apt-file工具。<br><strong>3 apt-file</strong><br>apt-file 是一个命令行界面的 APT 包搜索工具。当我们在编译源代码时，时有缺少文件的情况发生。此时，通过 apt-file 就可以找出该缺失文件所在的包，然后将缺失的包安装后即可让编译顺利进行了。<br><strong>3.1 安装配置apt-file</strong><br>首先安装apt-file管理器</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install apt-file<br></code></pre></td></tr></table></figure><p>接着更新apt-file的缓存</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-file update<br></code></pre></td></tr></table></figure><p>此过程将持续一会儿，以后如果修改了sources.list，仍需执行该操作.<br> <strong>3.2 apt-file搜索文件依赖</strong><br> 现在你可以使用apt-file搜索缺失的文件了，安装WPS时，提示缺少libgthread-2.0.so.0<br> 此时，输入</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-file search libgthread-2.0.so.0<br></code></pre></td></tr></table></figure><p>然后使用apt-get install可安装缺失的软件包</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install libglib2.0-0<br></code></pre></td></tr></table></figure><p><strong>3.3 列出包中的文件</strong></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-file list 包名称<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> perl </tag>
            
            <tag> 库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ncsim波形显示glitch</title>
      <link href="/2020/07/09/ncsim%E6%B3%A2%E5%BD%A2%E6%98%BE%E7%A4%BAglitch/"/>
      <url>/2020/07/09/ncsim%E6%B3%A2%E5%BD%A2%E6%98%BE%E7%A4%BAglitch/</url>
      
        <content type="html"><![CDATA[<h3 id="NCSIM中如何显示波形中的glitch"><a href="#NCSIM中如何显示波形中的glitch" class="headerlink" title="NCSIM中如何显示波形中的glitch?"></a><strong>NCSIM中如何显示波形中的glitch</strong>?</h3><ul><li>使用ncsim仿真产生shm波形，verilog 代码中有一段产生reset的逻辑，然后这个逻辑又会被自身的这个复位信号给复位掉。波形上看不出来请问有没有什么指令能够在波形上显示出这个glitch<br>我dumpfsdb波形，然后加+fsdb+glitch=0可以在波形上显示出有个glitch? </li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">You can dump event based waveforms. This will help in catching any glitches that might be generated from within the design.<br><br>To dump the delta events you need to use the following TCL commands:<br><span class="hljs-meta"><br>ncsim&gt;</span><span class="bash"> database -open waves -shm -default -event</span><br><span class="hljs-meta">ncsim&gt;</span><span class="bash"> probe -create -shm -all -depth all</span><br><br>You can issue the above commands at the ncsim TCL console BEFORE running the simulation/sending signals to waveform window or you can put them in a file called input.tcl and provide this file to irun/ncverilog with -input option.<br><span class="hljs-meta"><br>&gt;</span><span class="bash"> irun -input input.tcl &lt;other options&gt;</span><br><br>To expand the time sequence:<br><br>    Go to the "Simvision Waveform WIndow"<br>    Go to "View" menu<br>    Go to "Expand Sequence Time"<br>    Go to "All Time"<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> ncsim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>perl1line收集</title>
      <link href="/2020/07/06/perl1line%E6%94%B6%E9%9B%86/"/>
      <url>/2020/07/06/perl1line%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="转"><a href="#转" class="headerlink" title="转"></a>转</h3><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br></pre></td><td class="code"><pre><code class="hljs shell">Useful One-Line Scripts for Perl                    Jan 27 2019 | version 1.12<br>--------------------------------                    -----------   ------------<br><br>Compiled by Peter Krumins (peter@catonmat.net, @pkrumins on twitter)<br>https://www.catonmat.net -- good coders code, great coders reuse<br><br>Latest version of this file is always at:<br><br>    https://catonmat.net/ftp/perl1line.txt<br><br>This file is also available in other languages:<br><br>    Chinese: https://github.com/vinian/perl1line.txt<br><br>    Please email me peter@catonmat.net if you want to translate it.<br><br>Perl One-Liners on Github:<br> <br>    https://github.com/pkrumins/perl1line.txt<br><br>    You can send me pull requests over GitHub! I accept bug fixes,<br>    new one-liners, translations and everything else related.<br><br>I have also written "Perl One-Liners Explained" ebook that's based on<br>this file. It explains all the one-liners here. Get it at:<br><br>    https://catonmat.net/perl-book<br><br>No Starch Press has published "Perl One-Liners" as a real book too:<br><br>    https://nostarch.com/perloneliners<br><br>These one-liners work both on UNIX systems and Windows. Most likely your<br>UNIX system already has Perl. For Windows get the Strawberry Perl at:<br><br>    http://www.strawberryperl.com<br><br>Table of contents:<br><br>    1. File Spacing<br>    2. Line Numbering<br>    3. Calculations<br>    4. String Creation and Array Creation<br>    5. Text Conversion and Substitution<br>    6. Selective Printing and Deleting of Certain Lines    <br>    7. Handy Regular Expressions<br>    8. Perl tricks<br><br><br>FILE SPACING <br>------------<br><span class="hljs-meta"><br>#</span><span class="bash"> Double space a file</span><br>perl -pe '$\="\n"'<br>perl -pe 'BEGIN &#123; $\="\n" &#125;'<br>perl -pe '$_ .= "\n"'<br>perl -pe 's/$/\n/'<br>perl -nE 'say'<br><span class="hljs-meta"><br>#</span><span class="bash"> Double space a file, except the blank lines</span><br>perl -pe '$_ .= "\n" unless /^$/'<br>perl -pe '$_ .= "\n" if /\S/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Triple space a file</span><br>perl -pe '$\="\n\n"'<br>perl -pe '$_.="\n\n"'<br><span class="hljs-meta"><br>#</span><span class="bash"> N-space a file</span><br>perl -pe '$_.="\n"x7'<br><span class="hljs-meta"><br>#</span><span class="bash"> Add a blank line before every line</span><br>perl -pe 's//\n/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Remove all blank lines</span><br>perl -ne 'print unless /^$/'<br>perl -lne 'print if length'<br>perl -ne 'print if /\S/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Remove all consecutive blank lines, leaving just one</span><br>perl -00 -pe ''<br>perl -00pe0<br><span class="hljs-meta"><br>#</span><span class="bash"> Compress/expand all blank lines into N consecutive ones</span><br>perl -00 -pe '$_.="\n"x4'<br><span class="hljs-meta"><br>#</span><span class="bash"> Fold a file so that every <span class="hljs-built_in">set</span> of 10 lines becomes one tab-separated line</span><br>perl -lpe '$\ = $. % 10 ? "\t" : "\n"'<br><br><br>LINE NUMBERING<br>--------------<br><span class="hljs-meta"><br>#</span><span class="bash"> Number all lines <span class="hljs-keyword">in</span> a file</span><br>perl -pe '$_ = "$. $_"'<br><span class="hljs-meta"><br>#</span><span class="bash"> Number only non-empty lines <span class="hljs-keyword">in</span> a file</span><br>perl -pe '$_ = ++$a." $_" if /./'<br><span class="hljs-meta"><br>#</span><span class="bash"> Number and <span class="hljs-built_in">print</span> only non-empty lines <span class="hljs-keyword">in</span> a file (drop empty lines)</span><br>perl -ne 'print ++$a." $_" if /./'<br><span class="hljs-meta"><br>#</span><span class="bash"> Number all lines but <span class="hljs-built_in">print</span> line numbers only non-empty lines</span><br>perl -pe '$_ = "$. $_" if /./'<br><span class="hljs-meta"><br>#</span><span class="bash"> Number only lines that match a pattern, <span class="hljs-built_in">print</span> others unmodified</span><br>perl -pe '$_ = ++$a." $_" if /regex/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Number and <span class="hljs-built_in">print</span> only lines that match a pattern</span><br>perl -ne 'print ++$a." $_" if /regex/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Number all lines, but <span class="hljs-built_in">print</span> line numbers only <span class="hljs-keyword">for</span> lines that match a pattern</span><br>perl -pe '$_ = "$. $_" if /regex/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Number all lines <span class="hljs-keyword">in</span> a file using a custom format (<span class="hljs-built_in">emulate</span> cat -n)</span><br>perl -ne 'printf "%-5d %s", $., $_'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the total number of lines <span class="hljs-keyword">in</span> a file (<span class="hljs-built_in">emulate</span> wc -l)</span><br>perl -lne 'END &#123; print $. &#125;'<br>perl -le 'print $n=()=&lt;&gt;'<br>perl -le 'print scalar(()=&lt;&gt;)'<br>perl -le 'print scalar(@foo=&lt;&gt;)'<br>perl -ne '&#125;&#123;print $.'<br>perl -nE '&#125;&#123;say $.'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the number of non-empty lines <span class="hljs-keyword">in</span> a file</span><br>perl -le 'print scalar(grep&#123;/./&#125;&lt;&gt;)'<br>perl -le 'print ~~grep&#123;/./&#125;&lt;&gt;'<br>perl -le 'print~~grep/./,&lt;&gt;'<br>perl -E 'say~~grep/./,&lt;&gt;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the number of empty lines <span class="hljs-keyword">in</span> a file</span><br>perl -lne '$a++ if /^$/; END &#123;print $a+0&#125;'<br>perl -le 'print scalar(grep&#123;/^$/&#125;&lt;&gt;)'<br>perl -le 'print ~~grep&#123;/^$/&#125;&lt;&gt;'<br>perl -E 'say~~grep&#123;/^$/&#125;&lt;&gt;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the number of lines <span class="hljs-keyword">in</span> a file that match a pattern (<span class="hljs-built_in">emulate</span> grep -c)</span><br>perl -lne '$a++ if /regex/; END &#123;print $a+0&#125;'<br>perl -nE '$a++ if /regex/; END &#123;say $a+0&#125;'<br><br><br>CALCULATIONS<br>------------<br><span class="hljs-meta"><br>#</span><span class="bash"> Check <span class="hljs-keyword">if</span> a number is a prime</span><br>perl -lne '(1x$_) !~ /^1?$|^(11+?)\1+$/ &amp;&amp; print "$_ is prime"'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the sum of all the fields on a line</span><br>perl -MList::Util=sum -alne 'print sum @F'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the sum of all the fields on all lines</span><br>perl -MList::Util=sum -alne 'push @S,@F; END &#123; print sum @S &#125;'<br>perl -MList::Util=sum -alne '$s += sum @F; END &#123; print $s &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Shuffle all fields on a line</span><br>perl -MList::Util=shuffle -alne 'print "@&#123;[shuffle @F]&#125;"'<br>perl -MList::Util=shuffle -alne 'print join " ", shuffle @F'<br><span class="hljs-meta"><br>#</span><span class="bash"> Find the minimum element on a line</span><br>perl -MList::Util=min -alne 'print min @F'<br><span class="hljs-meta"><br>#</span><span class="bash"> Find the minimum element over all the lines</span><br>perl -MList::Util=min -alne '@M = (@M, @F); END &#123; print min @M &#125;'<br>perl -MList::Util=min -alne '$min = min @F; $rmin = $min unless defined $rmin &amp;&amp; $min &gt; $rmin; END &#123; print $rmin &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Find the maximum element on a line</span><br>perl -MList::Util=max -alne 'print max @F'<br><span class="hljs-meta"><br>#</span><span class="bash"> Find the maximum element over all the lines</span><br>perl -MList::Util=max -alne '@M = (@M, @F); END &#123; print max @M &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Replace each field with its absolute value</span><br>perl -alne 'print "@&#123;[map &#123; abs &#125; @F]&#125;"'<br><span class="hljs-meta"><br>#</span><span class="bash"> Find the total number of fields (words) on each line</span><br>perl -alne 'print scalar @F'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the total number of fields (words) on each line followed by the line</span><br>perl -alne 'print scalar @F, " $_"'<br><span class="hljs-meta"><br>#</span><span class="bash"> Find the total number of fields (words) on all lines</span><br>perl -alne '$t += @F; END &#123; print $t&#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the total number of fields that match a pattern</span><br>perl -alne 'map &#123; /regex/ &amp;&amp; $t++ &#125; @F; END &#123; print $t &#125;'<br>perl -alne '$t += /regex/ for @F; END &#123; print $t &#125;'<br>perl -alne '$t += grep /regex/, @F; END &#123; print $t &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the total number of lines that match a pattern</span><br>perl -lne '/regex/ &amp;&amp; $t++; END &#123; print $t &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the number PI to n decimal places</span><br>perl -Mbignum=bpi -le 'print bpi(n)'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the number PI to 39 decimal places</span><br>perl -Mbignum=PI -le 'print PI'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the number E to n decimal places</span><br>perl -Mbignum=bexp -le 'print bexp(1,n+1)'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the number E to 39 decimal places</span><br>perl -Mbignum=e -le 'print e'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print UNIX time (seconds since Jan 1, 1970, 00:00:00 UTC)</span><br>perl -le 'print time'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print GMT (Greenwich Mean Time) and <span class="hljs-built_in">local</span> computer time</span><br>perl -le 'print scalar gmtime'<br>perl -le 'print scalar localtime'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print <span class="hljs-built_in">local</span> computer time <span class="hljs-keyword">in</span> H:M:S format</span><br>perl -le 'print join ":", (localtime)[2,1,0]'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print yesterday<span class="hljs-string">'s date</span></span><br>perl -MPOSIX -le '@now = localtime; $now[3] -= 1; print scalar localtime mktime @now'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print date 14 months, 9 days and 7 seconds ago</span></span><br>perl -MPOSIX -le '@now = localtime; $now[0] -= 7; $now[4] -= 14; $now[7] -= 9; print scalar localtime mktime @now'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Prepend timestamps to stdout (GMT, localtime)</span></span><br>tail -f logfile | perl -ne 'print scalar gmtime," ",$_'<br>tail -f logfile | perl -ne 'print scalar localtime," ",$_'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Calculate factorial of 5</span></span><br>perl -MMath::BigInt -le 'print Math::BigInt-&gt;new(5)-&gt;bfac()'<br>perl -le '$f = 1; $f *= $_ for 1..5; print $f'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Calculate greatest common divisor (GCM)</span></span><br>perl -MMath::BigInt=bgcd -le 'print bgcd(@list_of_numbers)'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Calculate GCM of numbers 20 and 35 using Euclid'</span>s algorithm</span><br>perl -le '$n = 20; $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $m'<br><span class="hljs-meta"><br>#</span><span class="bash"> Calculate least common multiple (LCM) of numbers 35, 20 and 8</span><br>perl -MMath::BigInt=blcm -le 'print blcm(35,20,8)'<br><span class="hljs-meta"><br>#</span><span class="bash"> Calculate LCM of 20 and 35 using Euclid<span class="hljs-string">'s formula: n*m/gcd(n,m)</span></span><br>perl -le '$a = $n = 20; $b = $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $a*$b/$m'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Generate 10 random numbers between 5 and 15 (excluding 15)</span></span><br>perl -le '$n=10; $min=5; $max=15; $, = " "; print map &#123; int(rand($max-$min))+$min &#125; 1..$n'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Find and print all permutations of a list</span></span><br>perl -MAlgorithm::Permute -le '$l = [1,2,3,4,5]; $p = Algorithm::Permute-&gt;new($l); print @r while @r = $p-&gt;next'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Generate the power set</span></span><br>perl -MList::PowerSet=powerset -le '@l = (1,2,3,4,5); for (@&#123;powerset(@l)&#125;) &#123; print "@$_" &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert an IP address to unsigned integer</span></span><br>perl -le '$i=3; $u += ($_&lt;&lt;8*$i--) for "127.0.0.1" =~ /(\d+)/g; print $u'<br>perl -le '$ip="127.0.0.1"; $ip =~ s/(\d+)\.?/sprintf("%02x", $1)/ge; print hex($ip)'<br>perl -le 'print unpack("N", 127.0.0.1)'<br>perl -MSocket -le 'print unpack("N", inet_aton("127.0.0.1"))'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert an unsigned integer to an IP address</span></span><br>perl -MSocket -le 'print inet_ntoa(pack("N", 2130706433))'<br>perl -le '$ip = 2130706433; print join ".", map &#123; (($ip&gt;&gt;8*($_))&amp;0xFF) &#125; reverse 0..3'<br>perl -le '$ip = 2130706433; $, = "."; print map &#123; (($ip&gt;&gt;8*($_))&amp;0xFF) &#125; reverse 0..3'<br><br><br>STRING CREATION AND ARRAY CREATION<br>----------------------------------<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Generate and print the alphabet</span></span><br>perl -le 'print a..z'<br>perl -le 'print ("a".."z")'<br>perl -le '$, = ","; print ("a".."z")'<br>perl -le 'print join ",", ("a".."z")'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Generate and print all the strings from "a" to "zz"</span></span><br>perl -le 'print ("a".."zz")'<br>perl -le 'print "aa".."zz"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Create a hex lookup table</span></span><br>@hex = (0..9, "a".."f")<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert a decimal number to hex using @hex lookup table</span></span><br>perl -le '$num = 255; @hex = (0..9, "a".."f"); while ($num) &#123; $s = $hex[($num%16)&amp;15].$s; $num = int $num/16 &#125; print $s'<br>perl -le '$hex = sprintf("%x", 255); print $hex'<br>perl -le '$num = "ff"; print hex $num'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Generate a random 8 character password</span></span><br>perl -le 'print map &#123; ("a".."z")[rand 26] &#125; 1..8'<br>perl -le 'print map &#123; ("a".."z", 0..9)[rand 36] &#125; 1..8'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Create a string of specific length</span></span><br>perl -le 'print "a"x50'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Create a repeated list of elements</span></span><br>perl -le '@list = (1,2)x20; print "@list"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Create an array from a string</span></span><br>@months = split ' ', "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"<br>@months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Create a string from an array</span></span><br>@stuff = ("hello", 0..9, "world"); $string = join '-', @stuff<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Find the numeric values for characters in the string</span></span><br>perl -le 'print join ", ", map &#123; ord &#125; split //, "hello world"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert a list of numeric ASCII values into a string</span></span><br>perl -le '@ascii = (99, 111, 100, 105, 110, 103); print pack("C*", @ascii)'<br>perl -le '@ascii = (99, 111, 100, 105, 110, 103); print map &#123; chr &#125; @ascii'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Generate an array with odd numbers from 1 to 100</span></span><br>perl -le '@odd = grep &#123;$_ % 2 == 1&#125; 1..100; print "@odd"'<br>perl -le '@odd = grep &#123; $_ &amp; 1 &#125; 1..100; print "@odd"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Generate an array with even numbers from 1 to 100</span></span><br>perl -le '@even = grep &#123;$_ % 2 == 0&#125; 1..100; print "@even"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Find the length of the string</span></span><br>perl -le 'print length "one-liners are great"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Find the number of elements in an array</span></span><br>perl -le '@array = ("a".."z"); print scalar @array'<br>perl -le '@array = ("a".."z"); print $#array + 1'<br><br><br>TEXT CONVERSION AND SUBSTITUTION<br>--------------------------------<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> ROT13 a string</span></span><br>'y/A-Za-z/N-ZA-Mn-za-m/'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> ROT 13 a file</span></span><br>perl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' file<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Base64 encode a string</span></span><br>perl -MMIME::Base64 -e 'print encode_base64("string")'<br>perl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Base64 decode a string</span></span><br>perl -MMIME::Base64 -le 'print decode_base64("base64string")'<br>perl -MMIME::Base64 -ne 'print decode_base64($_)' file<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> URL-escape a string</span></span><br>perl -MURI::Escape -le 'print uri_escape($string)'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> URL-unescape a string</span></span><br>perl -MURI::Escape -le 'print uri_unescape($string)'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> HTML-encode a string</span></span><br>perl -MHTML::Entities -le 'print encode_entities($string)'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> HTML-decode a string</span></span><br>perl -MHTML::Entities -le 'print decode_entities($string)'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert all text to uppercase</span></span><br>perl -nle 'print uc'<br>perl -ple '$_=uc'<br>perl -nle 'print "\U$_"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert all text to lowercase</span></span><br>perl -nle 'print lc'<br>perl -ple '$_=lc'<br>perl -nle 'print "\L$_"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Uppercase only the first word of each line</span></span><br>perl -nle 'print ucfirst lc'<br>perl -nle 'print "\u\L$_"'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Invert the letter case</span></span><br>perl -ple 'y/A-Za-z/a-zA-Z/'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Camel case each line</span></span><br>perl -ple 's/(\w+)/\u$1/g'<br>perl -ple 's/(?&lt;![\'])(\w+)/\u\1/g'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Strip leading whitespace (spaces, tabs) from the beginning of each line</span></span><br>perl -ple 's/^[ \t]+//'<br>perl -ple 's/^\s+//'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Strip trailing whitespace (space, tabs) from the end of each line</span></span><br>perl -ple 's/[ \t]+$//'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Strip whitespace from the beginning and end of each line</span></span><br>perl -ple 's/^[ \t]+|[ \t]+$//g'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert UNIX newlines to DOS/Windows newlines</span></span><br>perl -pe 's|\n|\r\n|'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert DOS/Windows newlines to UNIX newlines</span></span><br>perl -pe 's|\r\n|\n|'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Convert UNIX newlines to Mac newlines</span></span><br>perl -pe 's|\n|\r|'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Substitute (find and replace) "foo" with "bar" on each line</span></span><br>perl -pe 's/foo/bar/'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Substitute (find and replace) all "foo"s with "bar" on each line</span></span><br>perl -pe 's/foo/bar/g'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Substitute (find and replace) "foo" with "bar" on lines that match "baz"</span></span><br>perl -pe '/baz/ &amp;&amp; s/foo/bar/'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Binary patch a file (find and replace a given array of bytes as hex numbers)</span></span><br>perl -pi -e 's/\x89\xD8\x48\x8B/\x90\x90\x48\x8B/g' file<br><br><br>SELECTIVE PRINTING AND DELETING OF CERTAIN LINES<br>------------------------------------------------<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print the first line of a file (emulate head -1)</span></span><br>perl -ne 'print; exit'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print the first 10 lines of a file (emulate head -10)</span></span><br>perl -ne 'print if $. &lt;= 10'<br>perl -ne '$. &lt;= 10 &amp;&amp; print'<br>perl -ne 'print if 1..10'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print the last line of a file (emulate tail -1)</span></span><br>perl -ne '$last = $_; END &#123; print $last &#125;'<br>perl -ne 'print if eof'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print the last 10 lines of a file (emulate tail -10)</span></span><br>perl -ne 'push @a, $_; @a = @a[@a-10..$#a]; END &#123; print @a &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print only lines that match a regular expression</span></span><br>perl -ne '/regex/ &amp;&amp; print'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print only lines that do not match a regular expression</span></span><br>perl -ne '!/regex/ &amp;&amp; print'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print the line before a line that matches a regular expression</span></span><br>perl -ne '/regex/ &amp;&amp; $last &amp;&amp; print $last; $last = $_'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print the line after a line that matches a regular expression</span></span><br>perl -ne 'if ($p) &#123; print; $p = 0 &#125; $p++ if /regex/'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print lines that match regex AAA and regex BBB in any order</span></span><br>perl -ne '/AAA/ &amp;&amp; /BBB/ &amp;&amp; print'<br><span class="hljs-meta"><br>#</span><span class="bash"><span class="hljs-string"> Print lines that don'</span>t match match regexes AAA and BBB</span><br>perl -ne '!/AAA/ &amp;&amp; !/BBB/ &amp;&amp; print'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print lines that match regex AAA followed by regex BBB followed by CCC</span><br>perl -ne '/AAA.*BBB.*CCC/ &amp;&amp; print'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print lines that are 80 chars or longer</span><br>perl -ne 'print if length &gt;= 80'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print lines that are less than 80 chars <span class="hljs-keyword">in</span> length</span><br>perl -ne 'print if length &lt; 80'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print only line 13</span><br>perl -ne '$. == 13 &amp;&amp; print &amp;&amp; exit'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print all lines except line 27</span><br>perl -ne '$. != 27 &amp;&amp; print'<br>perl -ne 'print if $. != 27'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print only lines 13, 19 and 67</span><br>perl -ne 'print if $. == 13 || $. == 19 || $. == 67'<br>perl -ne 'print if int($.) ~~ (13, 19, 67)' <br><span class="hljs-meta"><br>#</span><span class="bash"> Print all lines between two regexes (including lines that match regex)</span><br>perl -ne 'print if /regex1/../regex2/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print all lines from line 17 to line 30</span><br>perl -ne 'print if $. &gt;= 17 &amp;&amp; $. &lt;= 30'<br>perl -ne 'print if int($.) ~~ (17..30)'<br>perl -ne 'print if grep &#123; $_ == $. &#125; 17..30'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the longest line</span><br>perl -ne '$l = $_ if length($_) &gt; length($l); END &#123; print $l &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the shortest line</span><br>perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) &lt; length($s); END &#123; print $s &#125;'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print all lines that contain a number</span><br>perl -ne 'print if /\d/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Find all lines that contain only a number</span><br>perl -ne 'print if /^\d+$/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print all lines that contain only characters</span><br>perl -ne 'print if /^[[:alpha:]]+$/'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print every second line</span><br>perl -ne 'print if $. % 2'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print every second line, starting the second line</span><br>perl -ne 'print if $. % 2 == 0'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print all lines that repeat</span><br>perl -ne 'print if ++$a&#123;$_&#125; == 2'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print all unique lines</span><br>perl -ne 'print unless $a&#123;$_&#125;++'<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the first field (word) of every line (<span class="hljs-built_in">emulate</span> cut -f 1 -d <span class="hljs-string">' '</span>)</span><br>perl -alne 'print $F[0]'<br><br><br>HANDY REGULAR EXPRESSIONS<br>-------------------------<br><span class="hljs-meta"><br>#</span><span class="bash"> Match something that looks like an IP address</span><br>/^\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;$/<br>/^(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;$/<br><span class="hljs-meta"><br>#</span><span class="bash"> Test <span class="hljs-keyword">if</span> a number is <span class="hljs-keyword">in</span> range 0-255</span><br>/^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/<br><span class="hljs-meta"><br>#</span><span class="bash"> Match an IP address</span><br>my $ip_part = qr|([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|;<br>if ($ip =~ /^($ip_part\.)&#123;3&#125;$ip_part$/) &#123;<br> say "valid ip";<br>&#125;<br><span class="hljs-meta"><br>#</span><span class="bash"> Check <span class="hljs-keyword">if</span> the string looks like an email address</span><br>/\S+@\S+\.\S+/<br><span class="hljs-meta"><br>#</span><span class="bash"> Check <span class="hljs-keyword">if</span> the string is a decimal number</span><br>/^\d+$/<br>/^[+-]?\d+$/<br>/^[+-]?\d+\.?\d*$/<br><span class="hljs-meta"><br>#</span><span class="bash"> Check <span class="hljs-keyword">if</span> the string is a hexadecimal number</span><br>/^0x[0-9a-f]+$/i<br><span class="hljs-meta"><br>#</span><span class="bash"> Check <span class="hljs-keyword">if</span> the string is an octal number</span><br>/^0[0-7]+$/<br><span class="hljs-meta"><br>#</span><span class="bash"> Check <span class="hljs-keyword">if</span> the string is binary</span><br>/^[01]+$/<br><span class="hljs-meta"><br>#</span><span class="bash"> Check <span class="hljs-keyword">if</span> a word appears twice <span class="hljs-keyword">in</span> the string</span><br>/(word).*\1/<br><span class="hljs-meta"><br>#</span><span class="bash"> Increase all numbers by one <span class="hljs-keyword">in</span> the string</span><br><span class="hljs-meta">$</span><span class="bash">str =~ s/(\d+)/<span class="hljs-variable">$1</span>+1/ge</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Extract HTTP User-Agent string from the HTTP headers</span><br>/^User-Agent: (.+)$/<br><span class="hljs-meta"><br>#</span><span class="bash"> Match printable ASCII characters</span><br>/[ -~]/<br><span class="hljs-meta"><br>#</span><span class="bash"> Match unprintable ASCII characters</span><br>/[^ -~]/<br><span class="hljs-meta"><br>#</span><span class="bash"> Match text between two HTML tags</span><br>m|&lt;strong&gt;([^&lt;]*)&lt;/strong&gt;|<br>m|&lt;strong&gt;(.*?)&lt;/strong&gt;|<br><span class="hljs-meta"><br>#</span><span class="bash"> Replace all &lt;b&gt; tags with &lt;strong&gt;</span><br><span class="hljs-meta">$</span><span class="bash">html =~ s|&lt;(/)?b&gt;|&lt;<span class="hljs-variable">$1strong</span>&gt;|g</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Extract all matches from a regular expression</span><br>my @matches = $text =~ /regex/g;<br><br><br>PERL TRICKS<br>-----------<br><span class="hljs-meta"><br>#</span><span class="bash"> Print the version of a Perl module</span><br>perl -MModule -le 'print $Module::VERSION'<br>perl -MLWP::UserAgent -le 'print $LWP::UserAgent::VERSION'<br><br><br>PERL ONE-LINERS EXPLAINED E-BOOK<br>--------------------------------<br><br>I have written an ebook based on the one-liners in this file. If you want to<br>support my work and learn more about these one-liners, you can get a copy<br>of my ebook at:<br><br>    https://catonmat.net/perl-book<br><br>The ebook is based on the 7-part article series that I wrote on my blog.<br>In the ebook I reviewed all the one-liners, improved explanations, added<br>new ones, and added two new chapters - introduction to Perl one-liners<br>and summary of commonly used special variables.<br><br>You can read the original article series here:<br><br>    https://catonmat.net/perl-one-liners-explained-part-one<br>    https://catonmat.net/perl-one-liners-explained-part-two<br>    https://catonmat.net/perl-one-liners-explained-part-three<br>    https://catonmat.net/perl-one-liners-explained-part-four<br>    https://catonmat.net/perl-one-liners-explained-part-five<br>    https://catonmat.net/perl-one-liners-explained-part-six<br>    https://catonmat.net/perl-one-liners-explained-part-seven<br><br><br>CREDITS<br>-------<br><br>Andy Lester       http://www.petdance.com<br>Shlomi Fish       http://www.shlomifish.org<br>Madars Virza      http://www.madars.org<br>caffecaldo        https://github.com/caffecaldo<br>Kirk Kimmel       https://github.com/kimmel<br>avar              https://github.com/avar<br>rent0n<br><br><br>FOUND A BUG? HAVE ANOTHER ONE-LINER?<br>------------------------------------<br><br>Email bugs and new one-liners to me at peter@catonmat.net.<br><br><br>HAVE FUN<br>--------<br><br>I hope you found these one-liners useful. Have fun and see ya!<br><span class="hljs-meta"><br>#</span><span class="bash">---end of file---</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Perl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perl拆解One-Liner</title>
      <link href="/2020/06/29/Perl%E6%8B%86%E8%A7%A3One-Liner/"/>
      <url>/2020/06/29/Perl%E6%8B%86%E8%A7%A3One-Liner/</url>
      
        <content type="html"><![CDATA[<h3 id="Perl一行式如何定位问题？"><a href="#Perl一行式如何定位问题？" class="headerlink" title="Perl一行式如何定位问题？"></a>Perl一行式如何定位问题？</h3><figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">perl -MO=Deparse -paF: -le <span class="hljs-string">'print $F[2]'</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">输出：<br>BEGIN &#123; $/ = "\n"; $\ = "\n"; &#125;<br>LINE: while (defined($_ = &lt;ARGV&gt;)) &#123;<br>    chomp $_;<br>    our(@F) = split(/:/, $_, 0);<br>    print $F[2];<br>&#125;<br>continue &#123;<br>    print $_;<br>&#125;<br>-e syntax OK<br></code></pre></td></tr></table></figure><h3 id="MO-Deparse选项可以反编译perl过程，挺有意思的。"><a href="#MO-Deparse选项可以反编译perl过程，挺有意思的。" class="headerlink" title="-MO=Deparse选项可以反编译perl过程，挺有意思的。"></a>-MO=Deparse选项可以反编译perl过程，挺有意思的。</h3>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Perl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perl匹配打印</title>
      <link href="/2020/06/24/Perl%E5%8C%B9%E9%85%8D%E6%89%93%E5%8D%B0/"/>
      <url>/2020/06/24/Perl%E5%8C%B9%E9%85%8D%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Perl匹配打印功能，当然是抄的，然后修改"><a href="#Perl匹配打印功能，当然是抄的，然后修改" class="headerlink" title="Perl匹配打印功能，当然是抄的，然后修改~"></a>Perl匹配打印功能，当然是抄的，然后修改~</h3><figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl"><br><span class="hljs-comment">#! /usr/bin/env perl</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-number">5.10</span>.<span class="hljs-number">1</span>;<br><span class="hljs-keyword">use</span> warnings;<br><span class="hljs-keyword">use</span> strict;<br><br><span class="hljs-keyword">my</span> $pattern = <span class="hljs-keyword">shift</span> @ARGV;<br><span class="hljs-keyword">my</span> $regex = <span class="hljs-keyword">eval</span> &#123; <span class="hljs-regexp">qr/$pattern/</span> &#125;;<br><span class="hljs-keyword">die</span> <span class="hljs-string">"Check your pattern! $@"</span> <span class="hljs-keyword">if</span> $@;<br><br><span class="hljs-keyword">while</span>( &lt;&gt; ) &#123;<br>  <span class="hljs-keyword">if</span>( <span class="hljs-regexp">m/$regex/</span> ) &#123;<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">"$_"</span>;<br>    <span class="hljs-keyword">foreach</span> <span class="hljs-keyword">my</span> $i (<span class="hljs-number">0</span>..$#-) &#123;<br>      <span class="hljs-keyword">if</span>($i == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"\t\t\$&amp;: "</span>, <span class="hljs-keyword">substr</span>($_, $-[$i], $+[$i] - $-[$i]), <span class="hljs-string">"\n"</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"\t\t\$$i: "</span>, <span class="hljs-keyword">substr</span>($_, $-[$i], $+[$i] - $-[$i]), <span class="hljs-string">"\n"</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">perldoc -t perl|perl perl-grep.pl <span class="hljs-string">"\b(\S)(\S)\S\1\b"</span>                                                                        lixu@fpga-rs</span><br>    For ease of access, the Perl manual has been split up into several<br><span class="hljs-meta">$</span><span class="bash">&amp;: ease</span><br><span class="hljs-meta">$</span><span class="bash">1: e</span><br><span class="hljs-meta">$</span><span class="bash">2: a</span><br>        perl5100delta       Perl changes in version 5.10.0<br><span class="hljs-meta">$</span><span class="bash">&amp;: .10.</span><br><span class="hljs-meta">$</span><span class="bash">1: .</span><br><span class="hljs-meta">$</span><span class="bash">2: 1</span><br>    in the /usr/share/perl5 directory (or else in the man subdirectory of<br><span class="hljs-meta">$</span><span class="bash">&amp;: <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">$</span><span class="bash">1: e</span><br><span class="hljs-meta">$</span><span class="bash">2: l</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Perl </tag>
            
            <tag> Regx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altera IP sim filelist Gen PerlScript</title>
      <link href="/2020/06/22/Altera-IP-sim-filelist-Gen-PerlScript/"/>
      <url>/2020/06/22/Altera-IP-sim-filelist-Gen-PerlScript/</url>
      
        <content type="html"><![CDATA[<h3 id="服务器未备份，损失惨重，自动化查找了"><a href="#服务器未备份，损失惨重，自动化查找了" class="headerlink" title="服务器未备份，损失惨重，自动化查找了~"></a>服务器未备份，损失惨重，自动化查找了~</h3><figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#! /usr/bin/env perl</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-number">5.10</span>.<span class="hljs-number">1</span>;<br><span class="hljs-keyword">use</span> warnings;<br><span class="hljs-keyword">use</span> strict;<br><span class="hljs-keyword">use</span> autodie;<br><span class="hljs-keyword">use</span> File::Basename;<br><span class="hljs-keyword">use</span> Cwd <span class="hljs-string">qw(realpath)</span>;<br><br><span class="hljs-keyword">my</span> $PATH = <span class="hljs-keyword">shift</span> // <span class="hljs-string">"./RTL"</span>;<br>-d <span class="hljs-string">"$PATH/simflist"</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">mkdir</span> <span class="hljs-string">"$PATH/simflist"</span>;<br><br><span class="hljs-keyword">my</span> @sim_files = <span class="hljs-string">`find $PATH -name "ncsim_files.tcl" -print`</span>;<br><br><span class="hljs-keyword">my</span> $regx = <span class="hljs-string">qr&#123;.*\\"(\$QSYS_SIMDIR/.*?)\\".*&#125;</span>;<br><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">my</span> $file (@sim_files) &#123;<br>  <span class="hljs-keyword">my</span> @datas = ();<br>  <span class="hljs-keyword">chomp</span> $file;<br>  <span class="hljs-keyword">my</span> ($filename,$dirname,$suffixname) = fileparse($file,<span class="hljs-string">".tcl"</span>);<br>  <span class="hljs-keyword">my</span> @path_names = <span class="hljs-keyword">split</span> <span class="hljs-regexp">/\//</span>,$dirname;<br>  <span class="hljs-keyword">my</span> $ip_name = $path_names[<span class="hljs-number">3</span>];<br>  <span class="hljs-keyword">my</span> $QSYS_SIMDIR = <span class="hljs-string">qq&#123;$PATH/ip/$ip_name/sim&#125;</span>;<br>  <span class="hljs-keyword">my</span> $filelist_name = $dirname.$filename.<span class="hljs-string">".simflist"</span>;<br>  <span class="hljs-keyword">open</span> <span class="hljs-keyword">my</span> $r_fileh, <span class="hljs-string">"&lt;"</span>, $file;<br>  <span class="hljs-keyword">open</span> <span class="hljs-keyword">my</span> $w_fileh, <span class="hljs-string">"&gt;"</span>, $filelist_name;<br>  <span class="hljs-keyword">while</span>(&lt;$r_fileh&gt;) &#123;<br>     <span class="hljs-keyword">my</span> ($pre_match_filename) = ($_ =~ <span class="hljs-regexp">/$regx/</span>);<br>     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">defined</span>($pre_match_filename)) &#123;<br>       <span class="hljs-keyword">my</span> $match_filename = $pre_match_filename;<br>       $match_filename =~ <span class="hljs-regexp">s/\$QSYS_SIMDIR/$QSYS_SIMDIR/</span>;<br>       <span class="hljs-keyword">my</span> $abs_filename = realpath($match_filename);<br>       <span class="hljs-keyword">push</span> @datas,($abs_filename ? $abs_filename : $pre_match_filename);<br>     &#125;<br>  &#125;<br>  <span class="hljs-keyword">print</span> $w_fileh $_.<span class="hljs-string">"\n"</span> <span class="hljs-keyword">for</span> @datas;<br>  <span class="hljs-keyword">system</span>(<span class="hljs-string">qq&#123;mv $filelist_name $PATH/simflist/<span class="hljs-subst">$&#123;ip_name&#125;</span>_$filename.simflist &#125;</span>);<br>  <span class="hljs-keyword">close</span>($r_fileh);<br>  <span class="hljs-keyword">close</span>($w_fileh);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Perl </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCD中快速查找信号命</title>
      <link href="/2020/06/05/VCD%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E4%BF%A1%E5%8F%B7%E5%91%BD/"/>
      <url>/2020/06/05/VCD%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E4%BF%A1%E5%8F%B7%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="Verdi打开太慢了"><a href="#Verdi打开太慢了" class="headerlink" title="Verdi打开太慢了~~~"></a>Verdi打开太慢了~~~</h3><figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/env perl</span><br><span class="hljs-comment">=pod<br><br>=head1 快速查找verilog中层次化信号.<br><br>=cut</span><br><span class="hljs-keyword">package</span> FindSigPkg;<br><br><span class="hljs-keyword">use</span> warnings;<br><span class="hljs-keyword">use</span> strict;<br><span class="hljs-keyword">use</span> threads;<br><span class="hljs-keyword">use</span> threads::shared;<br><span class="hljs-keyword">use</span> Thread <span class="hljs-string">qw(async cond_wait cond_signal)</span>;<br><span class="hljs-keyword">use</span> Verilog::VCD;<br><span class="hljs-keyword">use</span> constant <span class="hljs-string">CPU_NUM =&gt;</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">our</span> $VERSION = <span class="hljs-number">1.0</span>.<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">my</span> $start_time = <span class="hljs-keyword">time</span>();<br><span class="hljs-keyword">my</span> $wait_var :shared = <span class="hljs-number">0</span>;<br><br>async &#123;<br>  <span class="hljs-keyword">use</span> Term::Pulse;<br>  pulse_start(<span class="hljs-string">name =&gt;</span> <span class="hljs-string">'Parsing'</span>, <span class="hljs-string">rotate =&gt;</span> <span class="hljs-number">0</span>, <span class="hljs-string">time =&gt;</span> <span class="hljs-number">1</span>);<br>  lock $wait_var ;<br>  cond_wait $wait_var <span class="hljs-keyword">until</span> $wait_var == <span class="hljs-number">1</span>;<br>  pulse_stop();<br>&#125;<br><br><span class="hljs-keyword">my</span> $red = <span class="hljs-string">qq(\033[0;31m)</span>;<br><span class="hljs-keyword">my</span> $end = <span class="hljs-string">qq(\033[0m)</span>;<br><span class="hljs-keyword">local</span> $" = <span class="hljs-string">qq(\n)</span>;<br><span class="hljs-keyword">my</span> @vcd_sigs = Verilog::VCD::list_sigs( <span class="hljs-keyword">shift</span> );<br>@vcd_sigs = <span class="hljs-keyword">sort</span> @vcd_sigs;<br><span class="hljs-keyword">my</span> $search_pattern = <span class="hljs-keyword">shift</span>;<br><span class="hljs-keyword">my</span> $mod_regex = <span class="hljs-regexp">qr/$search_pattern/</span>;<br><br><span class="hljs-keyword">my</span> @share_vcd_sigs :shared;<br><span class="hljs-keyword">my</span> @work_jobs;<br><span class="hljs-keyword">my</span> $cut_num = <span class="hljs-keyword">int</span>($#vcd_sigs / CPU_NUM) + <span class="hljs-number">1</span>;<br><br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-number">0</span>..CPU_NUM-<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">my</span> $begin = $_ * $cut_num;<br>    <span class="hljs-keyword">my</span> $end = ($_ + <span class="hljs-number">1</span>) * $cut_num - <span class="hljs-number">1</span>;<br>    $end = $#vcd_sigs <span class="hljs-keyword">if</span> $end &gt;= $#vcd_sigs;<br>    <span class="hljs-keyword">push</span> @work_jobs, threads-&gt;create( \&amp;find_worker, @vcd_sigs[$begin..$end] );<br>&#125;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-number">0</span>..CPU_NUM-<span class="hljs-number">1</span>) &#123;<br>  $work_jobs[$_]-&gt;<span class="hljs-keyword">join</span>();<br>&#125;<br><br>async &#123;<br>  lock $wait_var;<br>  $wait_var = <span class="hljs-number">1</span>;<br>  cond_signal $wait_var;<br>&#125;<br><br>@share_vcd_sigs = <span class="hljs-keyword">sort</span> @share_vcd_sigs;<br><span class="hljs-keyword">print</span> <span class="hljs-string">"@share_vcd_sigs\n"</span>;<br><span class="hljs-keyword">my</span> $elapsed_time = <span class="hljs-keyword">time</span>() - $start_time;<br><span class="hljs-keyword">print</span> <span class="hljs-string">"Time elapsed: $elapsed_time s\n"</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">find_worker</span> </span>&#123;<br>  <span class="hljs-keyword">my</span> (@sigs) = @_;<br>  @sigs = <span class="hljs-keyword">map</span> &#123; <span class="hljs-regexp">s/($mod_regex)/$red$1$end/g</span>;$_ &#125; <span class="hljs-keyword">grep</span> &#123; <span class="hljs-regexp">/$mod_regex/o</span> &#125; (@sigs);<br>  lock(@share_vcd_sigs);<br>  @share_vcd_sigs = (@share_vcd_sigs,@sigs);<br>&#125;<br><br><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">findsig.pl test.vcd test_dbg<br><br>=&gt; tile_gen[2].tile_ctrl_inst.test_dbg_out[47:0]<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Perl </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV追踪Log的堆栈</title>
      <link href="/2020/06/02/SV%E8%BF%BD%E8%B8%AALog%E7%9A%84%E5%A0%86%E6%A0%88/"/>
      <url>/2020/06/02/SV%E8%BF%BD%E8%B8%AALog%E7%9A%84%E5%A0%86%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h3 id="没有堆栈的跟踪定位，有时候真的是不知道错在那个线程的哪个函数里面"><a href="#没有堆栈的跟踪定位，有时候真的是不知道错在那个线程的哪个函数里面" class="headerlink" title="没有堆栈的跟踪定位，有时候真的是不知道错在那个线程的哪个函数里面~"></a>没有堆栈的跟踪定位，有时候真的是不知道错在那个线程的哪个函数里面~</h3><h3 id="采用EDA工具提供的函数实现了"><a href="#采用EDA工具提供的函数实现了" class="headerlink" title="采用EDA工具提供的函数实现了~"></a>采用EDA工具提供的函数实现了~</h3><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">import</span> uvm_pkg::*;<br><span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_macros.svh"</span><br><br><span class="hljs-keyword">package</span> some_pkg;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> rpt_info_f(<span class="hljs-keyword">string</span> ID, MSG, VERBOSITY = UVM_LOW, uvm_report_object OBJ = <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span>(OBJ == <span class="hljs-literal">null</span>) <span class="hljs-keyword">begin</span><br>            <span class="hljs-meta">`uvm_info(ID,MSG,VERBOSITY)</span><br>            $stacktrace;<span class="hljs-comment">//vcs:$stack</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-meta">`uvm_info_context(ID,MSG,VERBOSITY,OBJ)</span><br>            $stacktrace;<span class="hljs-comment">//vcs:$stack</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> some_function();<br>    rpt_info_f(<span class="hljs-string">"TEST"</span>,<span class="hljs-string">"@@@@"</span>,UVM_LOW);<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> some_function1();<br>    some_function();<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endpackage</span> : some_pkg<br><br><span class="hljs-keyword">module</span> top;<br>  <span class="hljs-keyword">import</span> some_pkg::*;<br><br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    rpt_info_f(<span class="hljs-string">"TEST"</span>,<span class="hljs-string">"$$$$"</span>,UVM_LOW);<br>    <span class="hljs-keyword">fork</span><br>        <span class="hljs-keyword">begin</span>:TEST<br>            some_function1(); <br>        <span class="hljs-keyword">end</span> <br>        some_function1(); <br>    <span class="hljs-keyword">join</span><br>    <span class="hljs-built_in">$finish</span>;<br>  <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span> : top<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog">UVM_INFO tb1<span class="hljs-variable">.sv</span>(<span class="hljs-number">42</span>) @ <span class="hljs-number">0</span>: reporter [TEST] $$$$<br>Verilog Stack Trace:<br><span class="hljs-number">0</span>: <span class="hljs-keyword">function</span> worklib<span class="hljs-variable">.some_pkg</span>::rpt_info_f at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">43</span><br><span class="hljs-number">1</span>: <span class="hljs-keyword">initial</span> block in top at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">66</span><br><br>UVM_INFO tb1<span class="hljs-variable">.sv</span>(<span class="hljs-number">42</span>) @ <span class="hljs-number">0</span>: reporter [TEST] @@@@<br>Verilog Stack Trace:<br><span class="hljs-number">0</span>: <span class="hljs-keyword">function</span> worklib<span class="hljs-variable">.some_pkg</span>::rpt_info_f at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">43</span><br><span class="hljs-number">1</span>: <span class="hljs-keyword">function</span> worklib<span class="hljs-variable">.some_pkg</span>::some_function at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">53</span><br><span class="hljs-number">2</span>: <span class="hljs-keyword">function</span> worklib<span class="hljs-variable">.some_pkg</span>::some_function1 at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">57</span><br><span class="hljs-number">3</span>: process in top<span class="hljs-variable">.TEST</span> at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">69</span><br><br>UVM_INFO tb1<span class="hljs-variable">.sv</span>(<span class="hljs-number">42</span>) @ <span class="hljs-number">0</span>: reporter [TEST] @@@@<br>Verilog Stack Trace:<br><span class="hljs-number">0</span>: <span class="hljs-keyword">function</span> worklib<span class="hljs-variable">.some_pkg</span>::rpt_info_f at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">43</span><br><span class="hljs-number">1</span>: <span class="hljs-keyword">function</span> worklib<span class="hljs-variable">.some_pkg</span>::some_function at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">53</span><br><span class="hljs-number">2</span>: <span class="hljs-keyword">function</span> worklib<span class="hljs-variable">.some_pkg</span>::some_function1 at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">57</span><br><span class="hljs-number">3</span>: process in top at ./tb1<span class="hljs-variable">.sv</span>:<span class="hljs-number">71</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程自动查找顶层.v文件包含的文件列表</title>
      <link href="/2020/05/29/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%87%AA%E5%8A%A8%E6%9F%A5%E6%89%BE%E9%A1%B6%E5%B1%82-v%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8/"/>
      <url>/2020/05/29/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%87%AA%E5%8A%A8%E6%9F%A5%E6%89%BE%E9%A1%B6%E5%B1%82-v%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="下面代码就是流水账，不是最佳的，一堆可以优化，凑合用。"><a href="#下面代码就是流水账，不是最佳的，一堆可以优化，凑合用。" class="headerlink" title="下面代码就是流水账，不是最佳的，一堆可以优化，凑合用。"></a>下面代码就是流水账，不是最佳的，一堆可以优化，凑合用。</h3><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> commands<br><span class="hljs-keyword">from</span> Queue <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread,Lock<br>logging.basicConfig(level=<span class="hljs-number">10</span>,<br>                    format=<span class="hljs-string">'%(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,<br>                    filename=<span class="hljs-string">r'rtl_filelist_gen.log'</span>,filemode=<span class="hljs-string">"w"</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">work</span><span class="hljs-params">(workid)</span>:</span><br>    <span class="hljs-keyword">global</span> lock<br>    <span class="hljs-keyword">global</span> dq<br>    <span class="hljs-keyword">global</span> file<br>    <span class="hljs-keyword">global</span> file_found<br>    lock.acquire()<br>    mod = dq.popleft()<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">"Work%0d:Find modules:%s in file:%s"</span>%(workid,mod,file)<br>    lock.release()<br>    <span class="hljs-comment">#慢</span><br>    <span class="hljs-comment">#find_file_list = 'find %0s -name "*.v" -exec egrep -nl "\s*module\s*\&lt;%0s\&gt;\s*" &#123;&#125; \;'%(sys.argv[2],mod)</span><br>    <span class="hljs-comment">#快</span><br>    find_file_list = <span class="hljs-string">'ag -t -U -G ".+\.s?vo?$" -l --silent "\s*module\s*\\b%0s\\b\s*" %0s'</span>%(mod,sys.argv[<span class="hljs-number">2</span>])<br>    mod_file_l = commands.getoutput(find_file_list).split()<br>    flag = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> len(mod_file_l) &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> mod_file_l:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">"/sim/"</span> <span class="hljs-keyword">in</span> file:<br>                lock.acquire()<br>                file_found.append(file)<br>                lock.release()<br>                flag = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:<br>            lock.acquire()<br>            <span class="hljs-keyword">print</span> <span class="hljs-string">"Work%0d:Error:found too many module %s file:%s"</span>%(workid,mod,mod_file_l)<br>            logging.error(<span class="hljs-string">"Work%0d:Error:found too many module %s file:%s"</span>%(workid,mod,mod_file_l))<br>            lock.release()<br>    <span class="hljs-keyword">elif</span> len(mod_file_l) == <span class="hljs-number">1</span>:<br>        lock.acquire()<br>        file_found.append(mod_file_l[<span class="hljs-number">0</span>])<br>        lock.release()<br>    <span class="hljs-keyword">else</span>:<br>        lock.acquire()<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"Work%0d:Error:Can't found module %s file num: 0"</span>%(workid,mod)<br>        logging.error(<span class="hljs-string">"Work%0d:Can't found module %s file"</span>%(workid,mod))<br>        lock.release()<br>    lock.acquire()<br>    file_found = deque(set(file_found))<br>    lock.release()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getModuleName</span><span class="hljs-params">(filepath)</span>:</span><br>    sub = subprocess.Popen(<span class="hljs-string">"vhier %s"</span>%(filepath), shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE,stderr=subprocess.STDOUT)<br>    sub.wait()<br>    outstr = sub.stdout.read()<br>    outstr = outstr.split(<span class="hljs-string">"\n"</span>)<br>    module_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> outstr:<br>        res_list = re.split(<span class="hljs-string">"find"</span>,i)<br>        <span class="hljs-keyword">if</span> len(res_list) == <span class="hljs-number">2</span>:<br>            module_list.append(res_list[<span class="hljs-number">-1</span>].strip())<br>    <span class="hljs-keyword">return</span> list(set(module_list))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    <span class="hljs-keyword">if</span> len(sys.argv) != <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"Usage: ./filegen.py /path/to/top.v searchpath"</span><br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    starttime = time.time()<br>    all_files = []<br>    all_mods_list = []<br>    file_found = deque([sys.argv[<span class="hljs-number">1</span>]])<br><br>    <span class="hljs-keyword">while</span> len(file_found):<br>        file = file_found.popleft()<br>        all_files.append(file)<br>        mods = getModuleName(file)<br>        uniq_mods = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mods:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> all_mods_list:<br>                all_mods_list.append(i)<br>                uniq_mods.append(i)<br><br>        dq = deque(uniq_mods)<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"|=======&gt;:Start parallel find file:%s and it has modules:%s"</span>%(file,list(dq))<br>        lock = Lock()<br>        jobs = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(dq)):<br>            p = Thread(target=work,args=(i,))<br>            jobs.append(p)<br>            p.start()<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> jobs:<br>            p.join()<br><br>    all_files = list(set(all_files))<br>    all_files.sort()<br>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">"rtl_filelist.f"</span>,<span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> all_files:<br>            f.write(i+<span class="hljs-string">"\n"</span>)<br><br>    os.system(<span class="hljs-string">"sort rtl_filelist_gen.log | uniq &gt; rtl_filelist_lost.log"</span>)<br>    os.system(<span class="hljs-string">"rm rtl_filelist_gen.log"</span>)<br><br>    endtime = time.time()<br>    dtime = endtime - starttime<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"</span><br>    <span class="hljs-keyword">print</span> <span class="hljs-string">"@@@@@@@@@@Found Almost Filelist@ElapsedTime %.6s s@@@@@@@@@@"</span>%(dtime)<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gnu parallel入门</title>
      <link href="/2020/04/23/Gnu-parallel%E5%85%A5%E9%97%A8/"/>
      <url>/2020/04/23/Gnu-parallel%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="how"><a href="#how" class="headerlink" title="how"></a>how</h2><p>最简单的方法就是类比<code>xargs</code>。在xargs里面有一个参数 <code>-P</code>，可以利用多核。</p><p>举个例子：</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ time <span class="hljs-built_in">echo</span> &#123;1..5&#125; |xargs -n 1  sleep<br><br>real    0m15.005s<br>user    0m0.000s<br>sys 0m0.000s<br></code></pre></td></tr></table></figure><p>这一条xargs把每个echo的数作为参数传给sleep ，所以一共sleep了 1+2+3+4+5=15秒。</p><p>如果使用 -P 参数分给5个核，每个核各sleep 1,2,3,4,5秒，所以执行完之后总共sleep的5秒。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ time <span class="hljs-built_in">echo</span> &#123;1..5&#125; |xargs -n 1 -P 5 sleep<br><br>real    0m5.003s<br>user    0m0.000s<br>sys 0m0.000s<br></code></pre></td></tr></table></figure><p>铺垫结束。一般情况下，parallel的第一种模式，就是替换掉 xargs -P.</p><p>比如压缩一下所有的html文件。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">'*.html'</span> | parallel gzip --best<br></code></pre></td></tr></table></figure><h3 id="传参数模式"><a href="#传参数模式" class="headerlink" title="传参数模式"></a>传参数模式</h3><p>第一种模式是利用 parallel传参数。管道前面进来的作为参数传给后面的命令，并行执行</p><p>比如</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">huang$ seq 5 | parallel <span class="hljs-built_in">echo</span> pre_placehoder_&#123;&#125;<br>pre_placehoder_1<br>pre_placehoder_2<br>pre_placehoder_3<br>pre_placehoder_4<br>pre_placehoder_5<br></code></pre></td></tr></table></figure><p>其中<code>{}</code>是占位符，用来占位传入参数的位置。</p><p>在云计算操作中，经常有批量操作，比如建立10个云硬盘</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">seq 10 | parallel  cinder create 10 --display-name test_&#123;&#125;<br></code></pre></td></tr></table></figure><p>建立50个云主机</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">seq <span class="hljs-number">50</span> | parallel nova boot --image    image_id  --flavor <span class="hljs-number">1</span> --availability-zone  az_id   --nic vnetwork=<span class="hljs-keyword">private</span>   --vnc-password <span class="hljs-number">000000</span>  vm-test_&#123;&#125;<br></code></pre></td></tr></table></figure><p>批量删除云主机</p><figure class="hljs highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">nova list | grep some_pattern| awk <span class="hljs-string">'&#123;print <span class="hljs-subst">$2</span>&#125;'</span> | parallel nova delete<br></code></pre></td></tr></table></figure><h4 id="改写-for-loop"><a href="#改写-for-loop" class="headerlink" title="改写 for loop"></a>改写 for loop</h4><p>可以看到，我其实是把很多需要写循环的地方用parallel替换了，顺带享受了并行带来的快捷。</p><p>这个道理是这样的，在进行for循环的时候，是最有可能并行化的，因为被放在循环中的各个对象是上下文无关的。</p><p>普世抽象，shell的循环：</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> `cat list` ; <span class="hljs-keyword">do</span><br>  do_something <span class="hljs-variable">$x</span><br><span class="hljs-keyword">done</span>) | process_output<br></code></pre></td></tr></table></figure><p>可以直接写成</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cat <span class="hljs-built_in">list</span> | parallel do_something | process_output<br></code></pre></td></tr></table></figure><p>如果loop 里面内容太多了</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">(<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> `cat list` ; <span class="hljs-keyword">do</span><br>   do_something <span class="hljs-variable">$x</span><br>   [... 100 lines that <span class="hljs-keyword">do</span> something with <span class="hljs-variable">$x</span> ...]<br> <span class="hljs-keyword">done</span>) | process_output<br></code></pre></td></tr></table></figure><p>那么最好写成一个脚本</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">doit</span></span>() &#123;<br>  x=<span class="hljs-variable">$1</span><br>  do_something <span class="hljs-variable">$x</span><br>  [... 100 lines that <span class="hljs-keyword">do</span> something with <span class="hljs-variable">$x</span> ...]<br>&#125;<br><span class="hljs-built_in">export</span> -f doit<br>cat list | parallel doit<br></code></pre></td></tr></table></figure><p>而且还能避免掉很多麻烦的转义。</p><h3 id="–pipe模式"><a href="#–pipe模式" class="headerlink" title="–pipe模式"></a>–pipe模式</h3><p>另一种模式就是 <code>parallel --pipe</code></p><p>这时管道前面的不是作为参数，而是标准输入传给后面的命令</p><p>例如：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">cat my_large_log   |parallel --pipe grep pattern<br></code></pre></td></tr></table></figure><p>如果不加 <code>--pipe</code> ，相当于 mylog中的每一行都变成 <code>grep pattern line</code>的命令展开了。而加入了<code>--pipe</code>，则和 <code>cat mylog | grep pattern</code>  没有区别，只是分配到各个核上去执行了。</p><p>好了，基本概念就讲完了！其他的都只是各个参数具体使用，比如到底用几个核啊，place_holder的替换啊，各种花样传参数啊，并行执行但是保证结果顺序输出(-k)，以及神奇的跨节点并行计算啊，看看man page就知道了。</p><h2 id="bonus"><a href="#bonus" class="headerlink" title="bonus"></a>bonus</h2><p>手边有了一个转换成并行的小工具，除了让你日常执行快一点之外，还有一个好处，就是<strong>测并发</strong>。</p><p>很多接口在并发操作下会出现一些bug，比如有一些判断数据库里面没有加锁，是在代码层面判断的，结果并发请求下去，每个请求在到达服务器的时候是判断通过，一起写了之后就超出限制了。之前写for循环因为是串行执行的，并不会触发这些问题。但是你要真正测并发的话，又要写脚本，或者利用python的<code>mulitiprocessing</code>封装一下。但我手边有了parallel，又在bashrc里面就加了以下两个alias</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> p=<span class="hljs-string">'parallel'</span><br><span class="hljs-built_in">alias</span> pp=<span class="hljs-string">'parallel --pipe -k'</span><br></code></pre></td></tr></table></figure><p>这样制造并发太方便了，只需要管道后面加个p , 我就时时刻刻可以制造并发来观察响应。</p><p>举个例子</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">seq 50 | p -n0 -q  curl <span class="hljs-string">'example.com'</span><br></code></pre></td></tr></table></figure><p>以你核的个数并发请求。-n0的意思是seq输出不作为参数传给后面的命令。</p><h2 id="详细参考手册"><a href="#详细参考手册" class="headerlink" title="详细参考手册"></a>详细参考手册</h2><h2 id="Linux下的并行神器——parallel"><a href="#Linux下的并行神器——parallel" class="headerlink" title="Linux下的并行神器——parallel"></a><a href="https://www.jianshu.com/p/cc54a72616a1" target="_blank" rel="noopener">Linux下的并行神器——parallel</a></h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 并行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altera fifo/ram_2port ip脚本生成</title>
      <link href="/2020/04/22/Altera-fifo-ram-2port-ip%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90/"/>
      <url>/2020/04/22/Altera-fifo-ram-2port-ip%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="fifo"><a href="#fifo" class="headerlink" title="fifo"></a>fifo</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span>! /usr/bin/env bash<br><span class="hljs-meta">#</span>//============================================================================<br><span class="hljs-meta">#</span>     FileName: ipgen_fifo.sh<br><span class="hljs-meta">#</span>         Desc: 采用GPL许可版权，请注意版权使用～<br><span class="hljs-meta">#</span>   LastChange: 2020-04-21 16:00:47<br><span class="hljs-meta">#</span>      History: 1. 增加双时钟以及ram类型<br><span class="hljs-meta">#</span>//============================================================================<br><span class="hljs-meta"><br>#</span>set -x<br>read -p "Setting Quartus install path(default:/home/soft/Quartus-pro-19.3): " quartus_path<br>read -p "Setting Device name(default:1SG280LN2F43E1VG): " device_name<br>read -p "Setting Device Family name(default:Stratix 10): " device_family<br>read -p "Setting fifo name(default:fifo_d64_inw8_outw8): " fifo_name<br>read -p "Setting fifo clock_type(default:1 =&gt; 0:single,1:double): " clock_type<br>read -p "Setting fifo depth(default:64): " fifo_depth<br>read -p "Setting fifo in data width(default:8): " fifo_din_width<br>read -p "Setting fifo out data width(default:8): " fifo_dout_width<br>read -p "Setting fifo almost_full(default:0): " almost_full<br>read -p "Setting fifo almost_empty(default:0): " almost_empty<br>read -p "Setting fifo ram_block_type(default:Auto(MLAB,M20K,M144K)): " ram_block_type<br><br>echo "################################"<br>echo "Generate FIFOName:$&#123;fifo_name:=fifo_d64_inw8_outw8&#125;<br>         ClockType:$&#123;clock_type:=1&#125;<br>         Depth:$&#123;fifo_depth:=64&#125;<br>         InDataWidth:$&#123;fifo_din_width:=8&#125;<br>         OutDataWidth:$&#123;fifo_dout_width:=8&#125;<br>         AlmostFull:$&#123;almost_full:=0&#125;<br>         AlmostEmpty:$&#123;almost_empty:=0&#125;<br>         ram_block_type:$&#123;ram_block_type:=Auto&#125;<br>         QuartusPath:$&#123;quartus_path:=/home/soft/Quartus-pro-19.3&#125;<br>         DeviceName:$&#123;device_name:=1SG280LN2F43E1VG&#125;<br>         DeviceFamily:$&#123;device_family:=Stratix 10&#125;"<br>echo "################################"<br><br><br>cat &gt; $&#123;fifo_name&#125;.tcl &lt;&lt; __EOF__<br>package require -exact qsys 18.0<br><br>proc do_create_$&#123;fifo_name&#125; &#123;&#125; &#123;<br><span class="hljs-meta">#</span> create the system<br>create_system $&#123;fifo_name&#125;<br>set_project_property DEVICE &#123;$&#123;device_name&#125;&#125;<br>set_project_property DEVICE_FAMILY &#123;$&#123;device_family&#125;&#125;<br>set_project_property HIDE_FROM_IP_CATALOG &#123;false&#125;<br>set_use_testbench_naming_pattern 0 &#123;&#125;<br><span class="hljs-meta"><br>#</span> add the components<br>add_component fifo ip/$&#123;fifo_name&#125;/$&#123;fifo_name&#125;_fifo.ip fifo fifo 19.1<br>load_component fifo<br>set_component_parameter_value GUI_AlmostEmpty &#123;$&#123;almost_empty&#125;&#125;<br>set_component_parameter_value GUI_AlmostEmptyThr &#123;1&#125;<br>set_component_parameter_value GUI_AlmostFull &#123;$&#123;almost_full&#125;&#125;<br>set_component_parameter_value GUI_AlmostFullThr &#123;1&#125;<br>set_component_parameter_value GUI_CLOCKS_ARE_SYNCHRONIZED &#123;0&#125;<br>set_component_parameter_value GUI_Clock &#123;$&#123;clock_type&#125;&#125;<br>set_component_parameter_value GUI_DISABLE_DCFIFO_EMBEDDED_TIMING_CONSTRAINT &#123;1&#125;<br>set_component_parameter_value GUI_Depth &#123;$&#123;fifo_depth&#125;&#125;<br>set_component_parameter_value GUI_ENABLE_ECC &#123;0&#125;<br>set_component_parameter_value GUI_Empty &#123;1&#125;<br>set_component_parameter_value GUI_Full &#123;1&#125;<br>set_component_parameter_value GUI_LE_BasedFIFO &#123;0&#125;<br>set_component_parameter_value GUI_LegacyRREQ &#123;1&#125;<br>set_component_parameter_value GUI_MAX_DEPTH &#123;Auto&#125;<br>set_component_parameter_value GUI_MAX_DEPTH_BY_9 &#123;0&#125;<br>set_component_parameter_value GUI_OVERFLOW_CHECKING &#123;0&#125;<br>set_component_parameter_value GUI_Optimize &#123;0&#125;<br>set_component_parameter_value GUI_Optimize_max &#123;0&#125;<br>set_component_parameter_value GUI_RAM_BLOCK_TYPE &#123;$&#123;ram_block_type&#125;&#125;<br>set_component_parameter_value GUI_TESTBENCH &#123;0&#125;<br>set_component_parameter_value GUI_UNDERFLOW_CHECKING &#123;0&#125;<br>set_component_parameter_value GUI_UsedW &#123;1&#125;<br>set_component_parameter_value GUI_Width &#123;$&#123;fifo_din_width&#125;&#125;<br>set_component_parameter_value GUI_dc_aclr &#123;0&#125;<br>set_component_parameter_value GUI_delaypipe &#123;4&#125;<br>set_component_parameter_value GUI_diff_widths &#123;0&#125;<br>set_component_parameter_value GUI_msb_usedw &#123;0&#125;<br>set_component_parameter_value GUI_output_width &#123;$&#123;fifo_dout_width&#125;&#125;<br>set_component_parameter_value GUI_read_aclr_synch &#123;0&#125;<br>set_component_parameter_value GUI_rsEmpty &#123;1&#125;<br>set_component_parameter_value GUI_rsFull &#123;0&#125;<br>set_component_parameter_value GUI_rsUsedW &#123;0&#125;<br>set_component_parameter_value GUI_sc_aclr &#123;0&#125;<br>set_component_parameter_value GUI_sc_sclr &#123;0&#125;<br>set_component_parameter_value GUI_synStage &#123;3&#125;<br>set_component_parameter_value GUI_write_aclr_synch &#123;0&#125;<br>set_component_parameter_value GUI_wsEmpty &#123;0&#125;<br>set_component_parameter_value GUI_wsFull &#123;1&#125;<br>set_component_parameter_value GUI_wsUsedW &#123;0&#125;<br>set_component_project_property HIDE_FROM_IP_CATALOG &#123;false&#125;<br>save_component<br>load_instantiation fifo<br><span class="hljs-meta"><br>#</span> set the the module properties<br>set_module_property BONUS_DATA &#123;&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br>&lt;bonusData&gt;<br> &lt;element __value="fifo"&gt;<br>  &lt;datum __value="_sortIndex" value="2" type="int" /&gt;<br>  &lt;datum __value="sopceditor_expanded" value="1" type="boolean" /&gt;<br> &lt;/element&gt;<br>&lt;/bonusData&gt;<br>&#125;<br>set_module_property FILE &#123;$&#123;fifo_name&#125;.qsys&#125;<br>set_module_property GENERATION_ID &#123;0x00000000&#125;<br>set_module_property NAME &#123;$&#123;fifo_name&#125;&#125;<br><span class="hljs-meta"><br>#</span> save the system<br>sync_sysinfo_parameters<br>save_system $&#123;fifo_name&#125;<br>&#125;<br><span class="hljs-meta"><br>#</span> create all the systems, from bottom up<br><span class="hljs-meta">do_create_$</span>&#123;fifo_name&#125;<br><br>__EOF__<br><br><br>if [[ -e "$&#123;fifo_name&#125;.qpf" ]]; then<br>    $&#123;quartus_path&#125;/qsys/bin/qsys-script --script=$&#123;fifo_name&#125;.tcl --quartus-project=$&#123;fifo_name&#125;.qpf<br>else<br>    $&#123;quartus_path&#125;/qsys/bin/qsys-script --script=$&#123;fifo_name&#125;.tcl --new-quartus-project=$&#123;fifo_name&#125;.qpf<br>fi<br><span class="hljs-meta">$</span>&#123;quartus_path&#125;/qsys/bin/qsys-generate $&#123;fifo_name&#125;.qsys  --simulation --synthesis --testbench --testbench-simulation --parallel --quartus-project=$&#123;fifo_name&#125;.qpf<br><br>rm -rf ./$&#123;fifo_name&#125;* ./qdb<br>echo "##########################################################"<br>echo "FIFO IP Finish:$&#123;fifo_name&#125; is in ./ip/$&#123;fifo_name&#125;"<br>echo "##########################################################"<br></code></pre></td></tr></table></figure><h2 id="ram-2port"><a href="#ram-2port" class="headerlink" title="ram_2port"></a>ram_2port</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span>! /usr/bin/env bash<br><span class="hljs-meta">#</span>//============================================================================<br><span class="hljs-meta">#</span>     FileName: ipgen_ram_2port.sh<br><span class="hljs-meta">#</span>         Desc: 采用GPL许可版权，请注意版权使用～<br><span class="hljs-meta">#</span>      Version: 0.0.1<br><span class="hljs-meta">#</span>   LastChange: 2020-04-21 16:00:47<br><span class="hljs-meta">#</span>      History: 1. 增加双时钟以及ram类型<br><span class="hljs-meta">#</span>//============================================================================<br><span class="hljs-meta"><br>#</span>set -xf<br>read -p "Setting Quartus install path(default:/home/soft/Quartus-pro-19.3): " quartus_path<br>read -p "Setting Device name(default:1SG280LN2F43E1VG): " device_name<br>read -p "Setting Device Family name(default:Stratix 10): " device_family<br>read -p "Setting ram_2port name(default:ram2p_dw8_mword32_mbit256_qab8): " ram_2port_name<br>read -p "Setting ram_2port CLOCK_TYPE(default:1 =&gt; 0:single,1:double): " clock_type<br>read -p "Setting ram_2port DATAA_WIDTH(default:8): " dataa_width<br>read -p "Setting ram_2port QA_WIDTH(default:8): " qa_width<br>read -p "Setting ram_2port MEMSIZE_WORDS(default:32): " memsize_words<br>read -p "Setting ram_2port MEMSIZE_BITS(default:256): " memsize_bits<br>read -p "Setting ram_2port RAM_BLOCK_TYPE(default:Auto(MLAB,M20K,LCs)): " ram_block_type<br><br>echo "################################"<br>echo "Generate RAM_2PORTName:$&#123;ram_2port_name:=ram2p_dw8_mword32_mbit256_qab8&#125;<br>         CLOCK_TYPE:$&#123;clock_type:=1&#125;<br>         DATAA_WIDTH:$&#123;dataa_width:=8&#125;<br>         QA_WIDTH:$&#123;qa_width:=8&#125;<br>         MEMSIZE_WORDS:$&#123;memsize_words:=32&#125;<br>         MEMSIZE_BITS:$&#123;memsize_bits:=256&#125;<br>         RAM_BLOCK_TYPE:$&#123;ram_block_type:=Auto&#125;<br>         QuartusPath:$&#123;quartus_path:=/home/soft/Quartus-pro-19.3&#125;<br>         DeviceName:$&#123;device_name:=1SG280LN2F43E1VG&#125;<br>         DeviceFamily:$&#123;device_family:=Stratix 10&#125;"<br>echo "################################"<br><br><br>cat &gt; $&#123;ram_2port_name&#125;.tcl &lt;&lt; __EOF__<br><br>package require -exact qsys 18.0<br><br>proc do_create_$&#123;ram_2port_name&#125; &#123;&#125; &#123;<br><span class="hljs-meta">#</span> create the system<br>create_system $&#123;ram_2port_name&#125;<br>set_project_property DEVICE &#123;$&#123;device_name&#125;&#125;<br>set_project_property DEVICE_FAMILY &#123;$&#123;device_family&#125;&#125;<br>set_project_property HIDE_FROM_IP_CATALOG &#123;false&#125;<br>set_use_testbench_naming_pattern 0 &#123;&#125;<br><span class="hljs-meta"><br>#</span> add the components<br>add_component ram_2port ip/$&#123;ram_2port_name&#125;/$&#123;ram_2port_name&#125;_ram_2port.ip ram_2port ram_2port 19.2.0<br>load_component ram_2port<br>set_component_parameter_value GUI_ACLR_READ_INPUT_RDADDRESS &#123;0&#125;<br>set_component_parameter_value GUI_ACLR_READ_OUTPUT_QA &#123;0&#125;<br>set_component_parameter_value GUI_ACLR_READ_OUTPUT_QB &#123;0&#125;<br>set_component_parameter_value GUI_BLANK_MEMORY &#123;0&#125;<br>set_component_parameter_value GUI_BYTE_ENABLE_A &#123;0&#125;<br>set_component_parameter_value GUI_BYTE_ENABLE_B &#123;0&#125;<br>set_component_parameter_value GUI_BYTE_ENABLE_WIDTH &#123;8&#125;<br>set_component_parameter_value GUI_CLKEN_ADDRESS_STALL_A &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_ADDRESS_STALL_B &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_INPUT_REG_A &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_INPUT_REG_B &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_OUTPUT_REG_A &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_OUTPUT_REG_B &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_RDADDRESSSTALL &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_READ_INPUT_REG &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_READ_OUTPUT_REG &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_WRADDRESSSTALL &#123;0&#125;<br>set_component_parameter_value GUI_CLKEN_WRITE_INPUT_REG &#123;0&#125;<br>set_component_parameter_value GUI_CLOCK_TYPE &#123;$&#123;clock_type&#125;&#125;<br>set_component_parameter_value GUI_COHERENT_READ &#123;0&#125;<br>set_component_parameter_value GUI_CONSTRAINED_DONT_CARE &#123;1&#125;<br>set_component_parameter_value GUI_DATAA_WIDTH &#123;$&#123;dataa_width&#125;&#125;<br>set_component_parameter_value GUI_DIFFERENT_CLKENS &#123;0&#125;<br>set_component_parameter_value GUI_ECCENCBYPASS &#123;0&#125;<br>set_component_parameter_value GUI_ECC_DOUBLE &#123;0&#125;<br>set_component_parameter_value GUI_ECC_PIPELINE &#123;0&#125;<br>set_component_parameter_value GUI_ECC_TRIPLE &#123;0&#125;<br>set_component_parameter_value GUI_FILE_REFERENCE &#123;0&#125;<br>set_component_parameter_value GUI_FORCE_TO_ZERO &#123;0&#125;<br>set_component_parameter_value GUI_INIT_FILE_LAYOUT &#123;PORT_B&#125;<br>set_component_parameter_value GUI_INIT_SIM_TO_X &#123;0&#125;<br>set_component_parameter_value GUI_LC_IMPLEMENTION_OPTIONS &#123;0&#125;<br>set_component_parameter_value GUI_MAX_DEPTH &#123;Auto&#125;<br>set_component_parameter_value GUI_MEMSIZE_BITS &#123;$&#123;memsize_bits&#125;&#125;<br>set_component_parameter_value GUI_MEMSIZE_WORDS &#123;$&#123;memsize_words&#125;&#125;<br>set_component_parameter_value GUI_MEM_IN_BITS &#123;0&#125;<br>set_component_parameter_value GUI_MIF_FILENAME &#123;&#125;<br>set_component_parameter_value GUI_MODE &#123;0&#125;<br>set_component_parameter_value GUI_NBE_A &#123;1&#125;<br>set_component_parameter_value GUI_NBE_B &#123;1&#125;<br>set_component_parameter_value GUI_OPTIMIZATION_OPTION &#123;0&#125;<br>set_component_parameter_value GUI_PR &#123;0&#125;<br>set_component_parameter_value GUI_QA_WIDTH &#123;$&#123;qa_width&#125;&#125;<br>set_component_parameter_value GUI_QB_WIDTH &#123;$&#123;qa_width&#125;&#125;<br>set_component_parameter_value GUI_Q_PORT_MODE &#123;2&#125;<br>set_component_parameter_value GUI_RAM_BLOCK_TYPE &#123;$&#123;ram_block_type&#125;&#125;<br>set_component_parameter_value GUI_RDEN_DOUBLE &#123;0&#125;<br>set_component_parameter_value GUI_RDEN_SINGLE &#123;0&#125;<br>set_component_parameter_value GUI_RDW_A_MODE &#123;New Data&#125;<br>set_component_parameter_value GUI_RDW_B_MODE &#123;New Data&#125;<br>set_component_parameter_value GUI_READ_INPUT_RDADDRESS &#123;1&#125;<br>set_component_parameter_value GUI_READ_OUTPUT_QA &#123;1&#125;<br>set_component_parameter_value GUI_READ_OUTPUT_QB &#123;1&#125;<br>set_component_parameter_value GUI_SCLR_READ_OUTPUT_QA &#123;0&#125;<br>set_component_parameter_value GUI_SCLR_READ_OUTPUT_QB &#123;0&#125;<br>set_component_parameter_value GUI_TBENCH &#123;0&#125;<br>set_component_parameter_value GUI_TDP_EMULATE &#123;0&#125;<br>set_component_parameter_value GUI_VAR_WIDTH &#123;0&#125;<br>set_component_parameter_value GUI_WIDTH_ECCENCPARITY &#123;8&#125;<br>set_component_parameter_value GUI_WRITE_INPUT_PORTS &#123;1&#125;<br>set_component_project_property HIDE_FROM_IP_CATALOG &#123;false&#125;<br>save_component<br>load_instantiation ram_2port<br><span class="hljs-meta"><br>#</span> set the the module properties<br>set_module_property BONUS_DATA &#123;&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br>&lt;bonusData&gt;<br> &lt;element __value="ram_2port"&gt;<br>  &lt;datum __value="_sortIndex" value="2" type="int" /&gt;<br> &lt;/element&gt;<br>&lt;/bonusData&gt;<br>&#125;<br>set_module_property FILE &#123;$&#123;ram_2port_name&#125;.qsys&#125;<br>set_module_property GENERATION_ID &#123;0x00000000&#125;<br>set_module_property NAME &#123;$&#123;ram_2port_name&#125;&#125;<br><span class="hljs-meta"><br>#</span> save the system<br>sync_sysinfo_parameters<br>save_system $&#123;ram_2port_name&#125;<br>&#125;<br><span class="hljs-meta"><br>#</span> create all the systems, from bottom up<br><span class="hljs-meta">do_create_$</span>&#123;ram_2port_name&#125;<br><br><br>__EOF__<br><br><br>if [[ -e "$&#123;ram_2port_name&#125;.qpf" ]]; then<br>    $&#123;quartus_path&#125;/qsys/bin/qsys-script --script=$&#123;ram_2port_name&#125;.tcl --quartus-project=$&#123;ram_2port_name&#125;.qpf<br>else<br>    $&#123;quartus_path&#125;/qsys/bin/qsys-script --script=$&#123;ram_2port_name&#125;.tcl --new-quartus-project=$&#123;ram_2port_name&#125;.qpf<br>fi<br><span class="hljs-meta">$</span>&#123;quartus_path&#125;/qsys/bin/qsys-generate $&#123;ram_2port_name&#125;.qsys  --simulation --synthesis --testbench --testbench-simulation --parallel --quartus-project=$&#123;ram_2port_name&#125;.qpf<br><br>rm -rf ./$&#123;ram_2port_name&#125;* ./qdb<br>echo "##########################################################"<br>echo "RAM_2PORT IP Finish:$&#123;ram_2port_name&#125; is in ./ip/$&#123;ram_2port_name&#125;"<br>echo "##########################################################"<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> Altera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现的链表(我是搬运工)</title>
      <link href="/2020/04/09/SV%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%93%BE%E8%A1%A8-%E6%88%91%E6%98%AF%E6%90%AC%E8%BF%90%E5%B7%A5/"/>
      <url>/2020/04/09/SV%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%93%BE%E8%A1%A8-%E6%88%91%E6%98%AF%E6%90%AC%E8%BF%90%E5%B7%A5/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><br><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> LIST_VH</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> LIST_VH</span><br><br><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> BaseNode <span class="hljs-variable">#(type T = int)</span>;<br><br><span class="hljs-keyword">typedef</span> BaseNode<span class="hljs-variable">#(T)</span> this_type;<br><br><span class="hljs-keyword">protected</span> BaseNode<span class="hljs-variable">#(T)</span> n_prev,n_next;<br><br><br><span class="hljs-comment">// Item constructor</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br><span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><br><br><span class="hljs-keyword">function</span> BaseNode<span class="hljs-variable">#(T) prev()</span>;<br><span class="hljs-keyword">return</span> n_prev;<br><span class="hljs-keyword">endfunction</span> : prev<br><br><br><span class="hljs-keyword">function</span> BaseNode<span class="hljs-variable">#(T) next()</span>;<br><span class="hljs-keyword">return</span> n_next;<br><span class="hljs-keyword">endfunction</span> : next<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> assign_prev(BaseNode<span class="hljs-variable">#(T) n)</span>;<br><span class="hljs-built_in">$cast</span>(n_prev,n);<br><span class="hljs-keyword">endfunction</span> : assign_prev<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> assign_next(BaseNode<span class="hljs-variable">#(T) n)</span>;<br><span class="hljs-built_in">$cast</span>(n_next,n);<br><span class="hljs-keyword">endfunction</span> : assign_next<br><br><br><span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> T <span class="hljs-number">_</span>value();<br><br><span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> empty_node();<br><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">class</span> Node <span class="hljs-variable">#(type T = int) extends BaseNode#(T)</span>;<br><br><span class="hljs-keyword">protected</span> T value;<br><br><br><span class="hljs-comment">// ************************************</span><br><br><br><span class="hljs-comment">// Item constructor</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(T v_in);<br>value = v_in;<br><span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><br><br><span class="hljs-comment">// Returns node value.</span><br><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> T <span class="hljs-number">_</span>value();<br><span class="hljs-keyword">return</span> value;<br><span class="hljs-keyword">endfunction</span> : <span class="hljs-number">_</span>value<br><br><br><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> empty_node();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span> : Node<br><br><br><span class="hljs-keyword">class</span> EndNode <span class="hljs-variable">#(type T = int) extends BaseNode#(T)</span>;<br><br><span class="hljs-comment">// Item constructor</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br><span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><br><br><span class="hljs-comment">// Returns node value.</span><br><span class="hljs-keyword">function</span> T <span class="hljs-number">_</span>value();<br>T value;<br><span class="hljs-keyword">assert</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> value;<br><span class="hljs-keyword">endfunction</span> : <span class="hljs-number">_</span>value<br><br><br><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> empty_node();<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span>: EndNode<br><br><br><br><span class="hljs-keyword">class</span> List_Iterator<span class="hljs-variable">#(type T = int)</span>;<br><br><span class="hljs-keyword">protected</span> BaseNode<span class="hljs-variable">#(T)</span> n;<br><br><br><span class="hljs-comment">// ************************************</span><br><br><br><span class="hljs-comment">// Moves an iterator to the next position on the list (++i)</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> inc();<br><span class="hljs-keyword">assert</span>(n!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">begin</span><br>BaseNode<span class="hljs-variable">#(T)</span> n_item;<br><br>n_item = n<span class="hljs-variable">.next</span>();<br>n = n<span class="hljs-variable">.next</span>();<br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br><span class="hljs-keyword">if</span> (n_item<span class="hljs-variable">.empty_node</span>())<br><span class="hljs-built_in">$display</span>(<span class="hljs-string">"%m Empty node reached"</span>);<br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span> : inc<br><br><br><span class="hljs-comment">// Moves an iterator to the previous position on the list (--i)</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> dec();<br><span class="hljs-keyword">assert</span>(n!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">begin</span><br>BaseNode<span class="hljs-variable">#(T)</span> n_item;<br><br>n_item = n<span class="hljs-variable">.prev</span>();<br>n = n<span class="hljs-variable">.prev</span>();<br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br><span class="hljs-keyword">if</span> (n_item<span class="hljs-variable">.empty_node</span>())<br><span class="hljs-built_in">$display</span>(<span class="hljs-string">"%m Empty node reached"</span>);<br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span> : dec<br><br><br><span class="hljs-comment">// Returns the implementation item of the current iterator</span><br><span class="hljs-keyword">function</span> BaseNode<span class="hljs-variable">#(T) node_item()</span>;<br><span class="hljs-keyword">return</span> n;<br><span class="hljs-keyword">endfunction</span> : node_item<br><br><br><span class="hljs-comment">// Constructor.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(BaseNode<span class="hljs-variable">#(T) n_item)</span>;<br>n = n_item;<br><span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><br><br><span class="hljs-comment">// Changes the iterator so that it refers to the next element in the list.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> next();<br><span class="hljs-keyword">assert</span>(n!=<span class="hljs-literal">null</span>);<br>n = n<span class="hljs-variable">.next</span>();<br><span class="hljs-keyword">endfunction</span> : next<br><br><br><span class="hljs-comment">// Changes the iterator so that it refers to the previous element in the list.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> prev();<br><span class="hljs-keyword">assert</span>(n!=<span class="hljs-literal">null</span>);<br>n = n<span class="hljs-variable">.prev</span>();<br><span class="hljs-keyword">endfunction</span> : prev<br><br><br><span class="hljs-comment">// Compares two iterators and returns 1 if both iterators refer to the same list element.</span><br><span class="hljs-comment">//Otherwise, it returns 0.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> eq( List_Iterator<span class="hljs-variable">#(T) iter )</span>;<br><span class="hljs-keyword">assert</span>(iter!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> (n == iter<span class="hljs-variable">.n</span>);<br><span class="hljs-keyword">endfunction</span> : eq<br><br><br><span class="hljs-comment">// The negation of eq(); it compares two iterators and returns 0 if both iterators refer to</span><br><span class="hljs-comment">//the same list element. Otherwise, it returns 1.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> neq( List_Iterator<span class="hljs-variable">#(T) iter )</span>;<br><span class="hljs-keyword">assert</span>(iter!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> !(n == iter<span class="hljs-variable">.n</span>);<br><span class="hljs-keyword">endfunction</span> : neq<br><br><br><span class="hljs-comment">// Returns the data stored in the element at the given iterator location.</span><br><span class="hljs-keyword">function</span> T data();<br><span class="hljs-keyword">assert</span>(n!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> n<span class="hljs-variable">._value</span>();<br><span class="hljs-keyword">endfunction</span> : data<br><br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">class</span> List#(<span class="hljs-keyword">parameter</span> <span class="hljs-keyword">type</span> T=<span class="hljs-keyword">int</span>);<br><br><br>BaseNode <span class="hljs-variable">#(T)</span> head, tail;<br>EndNode <span class="hljs-variable">#(T)</span> posttail;<br><br><br><span class="hljs-comment">// ************************************</span><br><br><br><span class="hljs-comment">// Returns an iterator pointing to the beginning of the list</span><br><span class="hljs-keyword">function</span> List_Iterator<span class="hljs-variable">#(T) start()</span>;<br>List_Iterator<span class="hljs-variable">#(T) i_item = new(head)</span>;<br><span class="hljs-keyword">return</span> i_item;<br><span class="hljs-keyword">endfunction</span> : start<br><br><br><span class="hljs-comment">// Returns an iterator pointing to the end of the list</span><br><span class="hljs-keyword">function</span> List_Iterator<span class="hljs-variable">#(T) finish()</span>;<br><span class="hljs-comment">//List_Iterator#(T) i_item = new(null);</span><br>List_Iterator<span class="hljs-variable">#(T) i_item = new(posttail)</span>;<br><span class="hljs-keyword">return</span> i_item;<br><span class="hljs-keyword">endfunction</span> : finish<br><br><br><span class="hljs-comment">// Constructor</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br><span class="hljs-keyword">endfunction</span><br><br><br><span class="hljs-comment">// Returns the number of elements stored in the list.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> size();<br>List_Iterator<span class="hljs-variable">#(T)</span> i_item;<br>List_Iterator<span class="hljs-variable">#(T)</span> i_end;<br><span class="hljs-keyword">int</span> k;<br><br>i_item = start();<br>i_end = finish();<br><span class="hljs-keyword">while</span>(!i_item<span class="hljs-variable">.eq</span>(i_end))<br><span class="hljs-keyword">begin</span><br>++k;<br>i_item<span class="hljs-variable">.inc</span>();<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> k;<br><span class="hljs-keyword">endfunction</span> : size<br><br><br><span class="hljs-comment">// Returns 1 if the number elements stored in the list is zero and 0 otherwise.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> empty();<br><span class="hljs-keyword">return</span> head==<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">endfunction</span> : empty<br><br><br><span class="hljs-comment">// Inserts the specified value at the front of the list.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> push_front( T value );<br>Node<span class="hljs-variable">#(T) n_item = new(value)</span>;<br><span class="hljs-keyword">if</span> (tail == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">begin</span><br>EndNode<span class="hljs-variable">#(T)</span> e_item=<span class="hljs-keyword">new</span>;<br><br>tail = n_item;<br>posttail = e_item;<br><br>head=tail;<br><br>head<span class="hljs-variable">.assign_next</span>(posttail);<br>head<span class="hljs-variable">.assign_prev</span>(posttail);<br><br>posttail<span class="hljs-variable">.assign_prev</span>(head);<br>posttail<span class="hljs-variable">.assign_next</span>(head);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br>head<span class="hljs-variable">.assign_prev</span>(n_item);<br>n_item<span class="hljs-variable">.assign_next</span>(head);<br><span class="hljs-keyword">end</span><br>head = n_item;<br><span class="hljs-keyword">endfunction</span> : push_front<br><br><br><span class="hljs-comment">// Inserts the specified value at the end of the list.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> push_back(T value );<br>Node<span class="hljs-variable">#(T) n_item = new(value)</span>;<br><span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">begin</span><br>EndNode <span class="hljs-variable">#(T)</span> e_item=<span class="hljs-keyword">new</span>;<br><br>head = n_item;<br>posttail = e_item;<br><br>head<span class="hljs-variable">.assign_next</span>(posttail);<br>head<span class="hljs-variable">.assign_prev</span>(posttail);<br>posttail<span class="hljs-variable">.assign_prev</span>(head);<br>posttail<span class="hljs-variable">.assign_next</span>(head);<br>tail=head;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br>tail<span class="hljs-variable">.assign_next</span>(n_item);<br>n_item<span class="hljs-variable">.assign_prev</span>(tail);<br>n_item<span class="hljs-variable">.assign_next</span>(posttail);<br>posttail<span class="hljs-variable">.assign_prev</span>(n_item);<br><span class="hljs-keyword">end</span><br>tail = n_item;<br><span class="hljs-keyword">endfunction</span> : push_back<br><br><br><span class="hljs-comment">// Returns the data stored in the first element of the list (valid only if the list is not empty).</span><br><span class="hljs-keyword">function</span> T front();<br><span class="hljs-keyword">assert</span> (head!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> head<span class="hljs-variable">._value</span>();<br><span class="hljs-keyword">endfunction</span> : front<br><br><br><span class="hljs-comment">// Returns the data stored in the last element of the list (valid only if the list is not empty).</span><br><span class="hljs-keyword">function</span> T back();<br><span class="hljs-keyword">assert</span>(tail!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> tail<span class="hljs-variable">._value</span>();<br><span class="hljs-keyword">endfunction</span> : back<br><br><br><span class="hljs-comment">// Removes the first element of the list. If the list is empty, this method is illegal and can generate an error.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> pop_front();<br><span class="hljs-keyword">assert</span>(head != <span class="hljs-literal">null</span>);<br>head = head<span class="hljs-variable">.next</span>();<br>posttail<span class="hljs-variable">.assign_next</span>(head);<br><span class="hljs-keyword">if</span> (head==<span class="hljs-literal">null</span>)<br>tail = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">endfunction</span> : pop_front<br><br><br><span class="hljs-comment">// Returns the data stored in the last element of the list (valid only if the list is not empty).</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> pop_back();<br><span class="hljs-keyword">assert</span>(tail != <span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">begin</span> : body<br>tail = tail<span class="hljs-variable">.prev</span>();<br>tail<span class="hljs-variable">.assign_next</span>(posttail);<br>posttail<span class="hljs-variable">.assign_prev</span>(tail);<br><span class="hljs-keyword">if</span> (tail==<span class="hljs-literal">null</span>)<br>head = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">end</span> : body<br><span class="hljs-keyword">endfunction</span> : pop_back<br><br><br><span class="hljs-comment">// Inserts the given data (value) into the list at the position specified by the iterator</span><br><span class="hljs-comment">// (before the element, if any, that was previously at the iterator's position). If the iterator is not a valid position</span><br><span class="hljs-comment">// within the list, then this operation is illegal and can generate an error.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> insert( List_Iterator<span class="hljs-variable">#(T) position, T value )</span>;<br><span class="hljs-keyword">assert</span>(position!=<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">begin</span> : body<br>BaseNode<span class="hljs-variable">#(T)</span> n_item;<br>n_item= position<span class="hljs-variable">.node_item</span>();<br><br><span class="hljs-keyword">if</span> (n_item==<span class="hljs-literal">null</span>)<br><span class="hljs-keyword">begin</span> : front_insert<br>push_back(value);<br><span class="hljs-keyword">end</span> : front_insert<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n_item == head)<br><span class="hljs-keyword">begin</span> : back_insert<br>push_front(value);<br><span class="hljs-keyword">end</span> : back_insert<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span> : middle_insert<br>List_Iterator<span class="hljs-variable">#(T)</span> i_item;<br>BaseNode<span class="hljs-variable">#(T)</span> n_item1,n_item2;<br>Node<span class="hljs-variable">#(T) _n = new(value)</span>;<br><br>n_item1 = <span class="hljs-number">_</span>n;<br>n_item1<span class="hljs-variable">.assign_next</span>(n_item);<br>n_item1<span class="hljs-variable">.assign_prev</span>( n_item<span class="hljs-variable">.prev</span>());<br>n_item2 = n_item<span class="hljs-variable">.prev</span>();<br>n_item2<span class="hljs-variable">.assign_next</span>(n_item1);<br>n_item<span class="hljs-variable">.assign_prev</span>(n_item1);<br><span class="hljs-keyword">end</span> : middle_insert<br><span class="hljs-keyword">end</span> : body<br><span class="hljs-keyword">endfunction</span> : insert<br><br><br><span class="hljs-comment">// Inserts the items from the range [first, last) before the position i_pos. If the last iterator refers to</span><br><span class="hljs-comment">// an element before the first iterator, the range wraps around the end of the list.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> insert_range (List_Iterator<span class="hljs-variable">#(T) position, List_Iterator#(T) first, List_Iterator#(T) last)</span>;<br><span class="hljs-keyword">assert</span>(position!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">assert</span>(first!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">assert</span>(last!=<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">if</span> (! first<span class="hljs-variable">.eq</span>(last))<br><span class="hljs-keyword">begin</span> : if_block<br>List_Iterator<span class="hljs-variable">#(T)</span> i_item;<br>BaseNode<span class="hljs-variable">#(T)</span> n_item;<br>i_item = first;<br>insert(position,first<span class="hljs-variable">.data</span>());<br>first<span class="hljs-variable">.inc</span>();<br><span class="hljs-keyword">while</span> (! i_item<span class="hljs-variable">.eq</span>(last))<br><span class="hljs-keyword">begin</span><br>n_item = i_item<span class="hljs-variable">.node_item</span>();<br><span class="hljs-keyword">if</span> (!n_item<span class="hljs-variable">.empty_node</span>())<br>insert(position,i_item<span class="hljs-variable">.data</span>());<br>i_item<span class="hljs-variable">.inc</span>();<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span> : if_block<br><span class="hljs-keyword">endfunction</span> : insert_range<br><br><br><span class="hljs-comment">// Removes from the list the element at the specified position. After erase() returns, the position iterator becomes invalid.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> erase( List_Iterator<span class="hljs-variable">#(T) position )</span>;<br><span class="hljs-keyword">assert</span>(position!=<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">begin</span> : body<br>BaseNode<span class="hljs-variable">#(T)</span> n_item, n_pos;<br><br>n_pos = position<span class="hljs-variable">.node_item</span>();<br><span class="hljs-keyword">if</span> (!(n_pos==head))<br><span class="hljs-keyword">begin</span><br>n_item = n_pos<span class="hljs-variable">.prev</span>();<br>n_item<span class="hljs-variable">.assign_next</span>(n_pos<span class="hljs-variable">.next</span>());<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br>head = n_pos<span class="hljs-variable">.next</span>();<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">if</span> (n_pos<span class="hljs-variable">.next</span>())<br><span class="hljs-keyword">begin</span><br>n_item = n_pos<span class="hljs-variable">.next</span>();<br>n_item<span class="hljs-variable">.assign_prev</span>(n_pos<span class="hljs-variable">.prev</span>());<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">assert</span>(n_pos==tail);<br>tail = n_pos<span class="hljs-variable">.prev</span>();<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span> : body<br><span class="hljs-keyword">endfunction</span> : erase<br><br><br><span class="hljs-comment">// Erases the range of items [first, last). If the last iterator refers to an element</span><br><span class="hljs-comment">// before the first iterator, the range wraps around the end of the list.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> erase_range(List_Iterator<span class="hljs-variable">#(T) first, List_Iterator#(T) last)</span>;<br><br><span class="hljs-keyword">assert</span>(first!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">assert</span>(last!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">assert</span>(!first<span class="hljs-variable">.eq</span>(last));<br><br><span class="hljs-keyword">if</span> (! first<span class="hljs-variable">.eq</span>(last))<br><span class="hljs-keyword">begin</span> : if_block<br>List_Iterator<span class="hljs-variable">#(T)</span> i_item, i_pos;<br>BaseNode<span class="hljs-variable">#(T)</span> n_item;<br><br>i_item = first;<br>i_pos = i_item;<br>erase(i_pos);<br>i_item<span class="hljs-variable">.inc</span>();<br><span class="hljs-keyword">while</span> (! i_item<span class="hljs-variable">.eq</span>(last))<br><span class="hljs-keyword">begin</span><br>i_pos = i_item;<br>n_item = i_item<span class="hljs-variable">.node_item</span>();<br><span class="hljs-keyword">if</span> (!n_item<span class="hljs-variable">.empty_node</span>())<br>erase(i_pos);<br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> DEBUG</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">$display</span>(<span class="hljs-string">"%m Empty node reached"</span>);<br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>i_item<span class="hljs-variable">.inc</span>();<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span> : if_block<br><span class="hljs-keyword">endfunction</span> : erase_range<br><br><br><span class="hljs-comment">// Assigns to the list object the elements that lie in the range specified by the [first,last) iterators.</span><br><span class="hljs-comment">// After this method returns, the modified list shall have a size equal to the range specified by first and last.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set( List_Iterator<span class="hljs-variable">#(T) first, last )</span>;<br><span class="hljs-keyword">assert</span>(first!=<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">assert</span>(last!=<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">begin</span> : body<br>List_Iterator<span class="hljs-variable">#(T)</span> i_item;<br><br><span class="hljs-keyword">this</span><span class="hljs-variable">.clear</span>();<br><br><span class="hljs-keyword">if</span> (!first<span class="hljs-variable">.eq</span>(last))<br><span class="hljs-keyword">begin</span> : copy_loop<br>i_item = first;<br><br><span class="hljs-keyword">while</span>(! i_item<span class="hljs-variable">.eq</span>(last))<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">this</span><span class="hljs-variable">.push_back</span>(i_item<span class="hljs-variable">.data</span>());<br>i_item<span class="hljs-variable">.inc</span>();<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span> : copy_loop<br><span class="hljs-keyword">end</span> : body<br><span class="hljs-keyword">endfunction</span> : set<br><br><br><span class="hljs-comment">// Swaps the contents of two lists</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> swap( List<span class="hljs-variable">#(T) lst )</span>;<br><span class="hljs-keyword">assert</span>(lst!=<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">begin</span> : body<br>BaseNode<span class="hljs-variable">#(T)</span> head_temp,tail_temp;<br>EndNode<span class="hljs-variable">#(T)</span> posttail_temp;<br><br>head_temp = <span class="hljs-keyword">this</span><span class="hljs-variable">.head</span>;<br>tail_temp = <span class="hljs-keyword">this</span><span class="hljs-variable">.tail</span>;<br>posttail_temp = <span class="hljs-keyword">this</span><span class="hljs-variable">.posttail</span>;<br><span class="hljs-keyword">this</span><span class="hljs-variable">.head</span> = lst<span class="hljs-variable">.head</span>;<br><span class="hljs-keyword">this</span><span class="hljs-variable">.tail</span> = lst<span class="hljs-variable">.tail</span>;<br><span class="hljs-keyword">this</span><span class="hljs-variable">.posttail</span> = lst<span class="hljs-variable">.posttail</span>;<br>lst<span class="hljs-variable">.head</span> = head_temp;<br>lst<span class="hljs-variable">.tail</span> = tail_temp;<br>lst<span class="hljs-variable">.posttail</span> = posttail_temp;<br><span class="hljs-keyword">end</span> : body<br><span class="hljs-keyword">endfunction</span> : swap<br><br><br><span class="hljs-comment">// Erases all of the list's elements.</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> clear();<br>head = <span class="hljs-literal">null</span>;<br>tail = <span class="hljs-literal">null</span>;<br>posttail = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">endfunction</span> : clear<br><br><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Random Constraint</title>
      <link href="/2020/03/30/Random-Constraint/"/>
      <url>/2020/03/30/Random-Constraint/</url>
      
        <content type="html"><![CDATA[<p>(转)</p><h3 id="Constrained-random-thoughts-on-SystemVerilog-e-and-more"><a href="#Constrained-random-thoughts-on-SystemVerilog-e-and-more" class="headerlink" title="Constrained random thoughts on SystemVerilog, e and more"></a>Constrained random thoughts on SystemVerilog, e and more</h3><p>Simulation is currently the dominant functional verification technique, with constrained random verification the most widely used methodology. While producing random data is a big part of it, letting the solver blindly generate stimulus isn’t going to be very efficient. Constraints are needed to guide the stimulus toward interesting scenarios.</p><p>A good constrained random test suite contains a mixture of tests with varying degrees of randomness. This is achieved by progressively adding constraints to tests to reduce their randomness. This is best explained with an example.</p><p>Let’s assume we’re verifying a device that can handle read and write accesses to locations in its address map. These accesses can either be done in secure mode or in non-secure mode. We model an access using a UVM sequence item:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> sequence_item <span class="hljs-keyword">extends</span> uvm_sequence_item;<br><br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123;<br>    READ,<br>    WRITE<br>  &#125; direction_e;<br><br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123;<br>    SECURE,<br>    NONSECURE<br>  &#125; sec_mode_e;<br><br>  <span class="hljs-keyword">rand</span> direction_e direction;<br>  <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] address;<br>  <span class="hljs-keyword">rand</span> sec_mode_e sec_mode;<br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Not all accesses are legal and illegal accesses would be rejected by the device.</p><p>Only certain address ranges are mapped, while accesses to unmapped addresses are illegal. If we were to write a test that only accesses mapped addresses, we would have to add the following constraints to generated items:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">constraint</span> only_mapped_addresses &#123;<br>  address <span class="hljs-keyword">inside</span> &#123;<br>      [CODE_START_ADDR:CODE_END_ADDR],<br>      [SRAM_START_ADDR:SRAM_END_ADDR],<br>      [PERIPHERAL_START_ADDR:PERIPHERAL_END_ADDR] &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>Our device also only allows writes to aligned addresses. For a 32-bit bus, this would mean that the lowest two address bits have to be 0:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">constraint</span> only_writes_to_aligned_addresses &#123;<br>  direction == WRITE;<br>  address[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Lastly, certain ranges of our device’s address map are restricted to secure code. Let’s assume that the address map is split into 16 regions of 256 MB each. Within each of these regions, the lower half is reserved for secure accesses. This means that bit 27 of the address is always 0 for a secure access:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">constraint</span> only_secure_accesses_to_lower_half_of_range &#123;<br>  sec_mode == SECURE;<br>  address[<span class="hljs-number">27</span>] == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The test suite for this device would contain a random test where unconstrained items are generated. One test would be directed toward generating accesses to mapped addresses, another test would only perform writes to aligned addresses, while another test would perform only secure accesses. At the same time, we would also need tests that lie at the intersection of the three features, so we would want tests that do pairwise combinations: aligned writes to mapped addresses, aligned writes in secure mode and secure access to mapped addresses. Finally, we also need a test that combines all three and only does secure writes to mapped addresses.</p><p>(While a real test suite would definitely need a lot more classes of tests, this post isn’t focused on verification planning, but on the mechanical aspects of implementing a robust constraint management strategy, so please ignore the simplicity of the example.)</p><p>It might be the case that these behaviors will get tweaked over time as the project moves forward or as a new derivative of the device is developed. The address map might change as regions are moved, removed or resized, or new regions are added. The bus width might change, which would change which addresses are aligned, or we could get a feature request to implement writes of other granularities (e.g. half-word). The definition of secure regions could also change or they could become configurable via special function registers. Any of these changes should be easy to handle and shouldn’t require massive changes to the verification code.</p><p>Let’s skip the obvious idea of putting all constraints into the sequence item class and activating/deactivating them selectively based on the test. This won’t scale for real projects, where we would have many more constraints, which would make the code unreadable.</p><h2 id="Using-mixins"><a href="#Using-mixins" class="headerlink" title="Using mixins"></a>Using mixins</h2><p>The mixin approach is flexible, because it allows us to handle each aspect individually. Instead of having all constraints in a single class, we can have one mixin for each constrained feature.</p><p>We need one for mapped addresses:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> only_mapped_addresses_mixin <span class="hljs-variable">#(type T = sequence_item)</span> <span class="hljs-keyword">extends</span> T;<br><br>  <span class="hljs-keyword">constraint</span> only_mapped_addresses &#123;<br>    address <span class="hljs-keyword">inside</span> &#123;<br>        [CODE_START_ADDR:CODE_END_ADDR],<br>        [SRAM_START_ADDR:SRAM_END_ADDR],<br>        [PERIPHERAL_START_ADDR:PERIPHERAL_END_ADDR] &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>We also need one for writes:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> only_legal_writes_mixin <span class="hljs-variable">#(type T = sequence_item)</span> <span class="hljs-keyword">extends</span> T;<br><br>  <span class="hljs-keyword">constraint</span> only_writes_to_aligned_addresses &#123;<br>    direction == WRITE;<br>    address[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Finally, we need a mixin for secure accesses:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> only_legal_secure_accesses_mixin <span class="hljs-variable">#(type T = sequence_item)</span> <span class="hljs-keyword">extends</span> T;<br><br>  <span class="hljs-keyword">constraint</span> only_secure_accesses_to_lower_half_of_range &#123;<br>    sec_mode == SECURE;<br>    address[<span class="hljs-number">27</span>] == <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Assuming that we have a random test that starts regular sequence items, we would use these mixins to write our more directed tests by replacing the original sequence item type with one with constraints mixed in.</p><p>The test that only accesses mapped addresses would do the following factory override:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_mapped_addresses <span class="hljs-keyword">extends</span> test_all_random;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set_factory_overrides();<br>    sequence_item::type_id::set_type_override(<br>        only_mapped_addresses_mixin <span class="hljs-variable">#(sequence_item)::get_type())</span>;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The other two feature tests would look similar, but would use their respective mixins.</p><p>To only perform writes to mapped addresses we would need to chain the two mixins:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_legal_writes_to_mapped_addresses <span class="hljs-keyword">extends</span> test_all_random;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set_factory_overrides();<br>    sequence_item::type_id::set_type_override(<br>        only_legal_writes_mixin <span class="hljs-variable">#(only_mapped_addresses_mixin #(sequence_item))::get_type())</span>;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Of course, we would do the same to handle the other two pairs.</p><p>Similarly, we could use the same principle to combine all three features:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_legal_writes_to_mapped_addresses_in_secure_mode <span class="hljs-keyword">extends</span> test_all_random;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set_factory_overrides();<br>    sequence_item::type_id::set_type_override(<br>        only_legal_writes_mixin #(<br>            only_mapped_addresses_mixin #(<br>                only_legal_secure_accesses_mixin <span class="hljs-variable">#(sequence_item)))::get_type())</span>;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The mixin approach comes with some issues, though.</p><p>Constraints are always polymorphic, so we have to be very careful to use unique constraint names across all mixins. Applying two different mixins that use the same constraint name would result in only the outer mixin’s constraints being applied, because it would override the constraint defined in the inner mixin. It’s very easy to run into this issue when using copy/paste to define a new mixin and forgetting to change the name of the constraint. Frustration will follow, as the code looks right, but leads to unexpected results. Moreover, the more mixins are used in the code base, the easier it is for constraint name collisions to happen.</p><p>Chaining of mixins is not particularly readable. It is bearable for one or two levels, but the more levels there are, the worse it’s going to get.</p><p>Finally, using mixins will cause the number of types in our code to explode. Each mixin on top of a class will create a new type. From a coding standpoint this isn’t such a big deal, as we won’t be referencing those types directly. The more types we have, though, the longer our compile times are going to get. Also, note that for the compiler <em>mixin1 #(mixin2 #(some_class))</em> is a distinct type from <em>mixin2 #(mixin1 #(some_class))</em>, regardless if it results in the “same” class. It’s very easy to use <em>mixin1 #(mixin2 #(some_class))</em> in one test, but use <em>mixin3 #(mixin2 #(mixin1 #(some_class)))</em> in another, which would make the compiler “see” an extra type.</p><p>The mixin pattern uses inheritance, which doesn’t match the call to action in the post title, so obviously we’re not going to stop here.</p><h2 id="Using-aspect-oriented-programming"><a href="#Using-aspect-oriented-programming" class="headerlink" title="Using aspect oriented programming"></a>Using aspect oriented programming</h2><p>It’s much easier to write our test family using aspect oriented programming (AOP). AOP allows us to alter the definition of a class from a different file. Even though SystemSystemverilog doesn’t support AOP, I’d still like to show an example in e, as it can provide us with some hints into how we could improve the mixin-base solution.</p><p>(Please note that the following code may not be idiomatic, so don’t take it as a reference on how to handle constraints in e.)</p><p>Our sequence item definition would look similar:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>struct sequence_item like any_sequence_item &#123;<br><br>  direction: direction_e;<br>  address: uint(bits: 32);<br>  sec_mode: sec_mode_e;<br><br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>In our test that only does mapped accesses, we would tell the compiler to add the constraint to the sequence item:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>import test_all_random;<br><br>extend sequence_item &#123;<br>  keep address in [CODE_START_ADDR..CODE_END_ADDR] or<br>      address in [SRAM_START_ADDR..SRAM_END_ADDR] or<br>      address in [PERIPHERAL_START_ADDR..PERIPHERAL_END_ADDR];<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>This does not result in a new type. It tweaks the existing <em>sequence_item</em> type for the duration of that test.</p><p>If we would like to reuse the constraint in the test that only writes to mapped addresses, we could put the extension into its own file. We could do the same for the other extensions that handle the other features. This would allow each test to load the relevant extension files. For example, for legal writes to mapped addresses we would have:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>import test_all_random;<br>import constraints/only_legal_writes;<br>import constraints/only_mapped_addresses;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>The file structure is similar to what we had when we used mixins, but the code is much cleaner.</p><p>Pay special attention to the natural language description of what we are doing: in <em>test_mapped_addresses</em> we are adding the constraint to the <em>sequence_item</em> type.</p><h2 id="Using-constraint-objects"><a href="#Using-constraint-objects" class="headerlink" title="Using constraint objects"></a>Using constraint objects</h2><p>Regular object oriented programming doesn’t allow us to change type definitions. What we can do, however, is build our code in such a way as to allow it to be extended when it is being used.</p><p>Back in 2015, there was an presented how to add constraints using composition. It showed how to add additional constraints to an instance of an object without changing the type of that object. This is done by encapsulating the constraints into their own objects which extend the behavior of the original object’s <em>randomize()</em> function. Have a quick look at the paper before proceeding, to understand the exact way this is done.</p><p>While the paper shows how to add constraints to object instances, we can extend the approach to add constraints globally, to all instances of a type. If we look back at the AOP case from before, this would be conceptually similar to what we were doing there. We would be emulating the addition of constraints to the <em>sequence_item</em> type.</p><p>The paper makes an attempt at global constraints in its final section, by using the UVM configuration DB. While that approach works, I feel that it is not expressive enough. A better API, consisting of a static function to add constraints globally, would make the code much more readable than a very verbose config DB <em>set(…)</em> call.</p><p>To get the extensibility we want, we have to set up the necessary infrastructure for it. If the sequence item class is under our control, we can modify it directly. Alternatively, if the sequence item is part of an external UVC package, we can define a sub-class which contains the necessary code.</p><p>We’ll assume that <em>sequence_item</em> can’t be changed and we’ll create a new <em>constrained_sequence_item</em> class. We would either use this sub-class in our sequences directly or use a factory override.</p><p>To execute code that affects all instances, the sequence item class needs a static function through which constraints are added:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> constrained_sequence_item <span class="hljs-keyword">extends</span> sequence_item;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> add_global_constraint(abstract_constraint c);<br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The <em>abstract_constraint</em> class would be the base class for our constraints and would provide us with a reference to the object that is being randomized:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> abstract_constraint;<br><br>  <span class="hljs-keyword">protected</span> sequence_item object;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set_object(sequence_item object);<br>    <span class="hljs-keyword">this</span><span class="hljs-variable">.object</span> = object;<br>  <span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The code to handle global constraints is similar to the one presented in the paper. We store all global constraints in a static array:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> constrained_sequence_item <span class="hljs-keyword">extends</span> sequence_item;<br><br>  <span class="hljs-keyword">local</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">rand</span> abstract_constraint global_constraints[$];<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> add_global_constraint(abstract_constraint c);<br>     global_constraints<span class="hljs-variable">.push_back</span>(c);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Before randomizing a sequence item instance, we have to set up the constraint objects to point to it:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> constrained_sequence_item <span class="hljs-keyword">extends</span> sequence_item;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> pre_randomize();<br>    <span class="hljs-keyword">foreach</span> (global_constraints[i])<br>      global_constraints[i]<span class="hljs-variable">.set_object</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>With the infrastructure set up, we can move on. We encapsulate the constraints for our features into their own constraint classes:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> only_mapped_addresses_constraint <span class="hljs-keyword">extends</span> abstract_constraint <span class="hljs-variable">#(sequence_item)</span>;<br><br>  <span class="hljs-keyword">constraint</span> c &#123;<br>    object<span class="hljs-variable">.address</span> <span class="hljs-keyword">inside</span> &#123;<br>        [CODE_START_ADDR:CODE_END_ADDR],<br>        [SRAM_START_ADDR:SRAM_END_ADDR],<br>        [PERIPHERAL_START_ADDR:PERIPHERAL_END_ADDR] &#125;;<br>  &#125;<br><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">class</span> only_legal_writes_constraint <span class="hljs-keyword">extends</span> abstract_constraint <span class="hljs-variable">#(sequence_item)</span>;<br><br>  <span class="hljs-keyword">constraint</span> c &#123;<br>    object<span class="hljs-variable">.direction</span> == sequence_item::WRITE;<br>    object<span class="hljs-variable">.address</span>[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>;<br>  &#125;<br><br><span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">class</span> only_legal_secure_accesses_constraint <span class="hljs-keyword">extends</span> abstract_constraint <span class="hljs-variable">#(sequence_item)</span>;<br><br>  <span class="hljs-keyword">constraint</span> c &#123;<br>    object<span class="hljs-variable">.sec_mode</span> == sequence_item::SECURE;<br>    object<span class="hljs-variable">.address</span>[<span class="hljs-number">27</span>] == <span class="hljs-number">0</span>;<br>  &#125;<br><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>In the test that only accesses mapped addresses we would make sure to add the required constraints:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_mapped_addresses <span class="hljs-keyword">extends</span> test_all_random;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> add_constraints();<br>    only_mapped_addresses_constraint c = <span class="hljs-keyword">new</span>();<br>    constrained_sequence_item::add_global_constraint(c);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The <em>add_constraints()</em> function should be called before any sequence items are started. A good place to call it from is the <em>end_of_elaboration_phase(…)</em> function.</p><p>In the other feature oriented tests we would simply add their respective constraints.</p><p>For the test that does writes to mapped addresses we just need to make sure that both constraints are added. We could do this by extending the random test and making two <em>add_global_constraint(…)</em> calls, one for each constraint object:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_legal_writes_to_mapped_addresses <span class="hljs-keyword">extends</span> test_random;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> add_constraints();<br>    only_legal_writes_constraint c0 = <span class="hljs-keyword">new</span>();<br>    only_mapped_addresses_constraint c1 = <span class="hljs-keyword">new</span>();<br>    constrained_sequence_item::add_global_constraint(c0);<br>    constrained_sequence_item::add_global_constraint(c1);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>We could also extend the test that only does legal writes and add the constraints for mapped addresses:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_legal_writes_to_mapped_addresses <span class="hljs-keyword">extends</span> test_legal_writes;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> add_constraints();<br>    only_mapped_addresses_constraint c = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.add_constraints</span>();<br>    constrained_sequence_item::add_global_constraint(c);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Of course, this approach can be used to handle all combinations of constraints.</p><p>Adding constraints dynamically has the same advantages as the mixin approach we looked at earlier.</p><p>It doesn’t suffer from the same readability issue, because we don’t rely on long parameterization chains. It suffers from a bit too much verboseness due to the multiple <em>add_global_constraint(…)</em> calls, though this could be improved by adding a variant of the function that accepts a list of constraint objects.</p><p>This approach also avoids the type explosion issue that mixins have and is potentially faster to compile.</p><p>There is a bit of boilerplate code required for the infrastructure. This can be extracted into a reusable library.</p><p>The first thing we need to do is to make the abstract constraint class parameterizable:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> abstract_constraint <span class="hljs-variable">#(type T = int)</span>;<br><br>  <span class="hljs-keyword">protected</span> T object;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set_object(T object);<br>    <span class="hljs-keyword">this</span><span class="hljs-variable">.object</span> = object;<br>  <span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The package should expose a macro to handle the constraint infrastructure:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> constraints_utils(TYPE) \</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> add_global_constraint(constraints::abstract_constraint <span class="hljs-variable">#(TYPE) c)</span>; \<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>There was a subtle issue with the simplistic infrastructure code we looked at before. It wasn’t able to handle randomization of multiple instances at the same time (for example, when randomizing an array of sequence items). As this is a more exotic use case, the problem won’t show up immediately. It’s a simple fix to make, but it would be very annoying to have to make it in mutiple projects. Even when the code might look deceptively simple and have us think it’s not worth the hassle to put into an own library, doing so makes it easier to implement and propagate fixes for such issues.</p><p>The macro makes the definition of <em>constrained_sequence_item</em> much cleaner:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> constrained_sequence_item <span class="hljs-keyword">extends</span> sequence_item;<br><br>  <span class="hljs-meta">`constraints_utils(sequence_item)</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相见恨晚的Org-mode</title>
      <link href="/2020/03/25/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84Org-mode/"/>
      <url>/2020/03/25/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84Org-mode/</url>
      
        <content type="html"><![CDATA[<pre><code>___________________ ORG-MODE 简明手册   (转载)   神秘人___________________   2020-03-25 Wed</code></pre><p>Table of Contents</p><hr><p><a href>1</a> 简介[1]<br>.. 1.1 序<br>.. 1.2 安装<br>.. 1.3 激活<br>.. 1.4 反馈<br>2 文档结构<br>.. 2.1 大纲<br>.. 2.2 标题<br>.. 2.3 视图循环<br>.. 2.4 移动<br>.. 2.5 结构编辑<br>.. 2.6 稀疏树<br>.. 2.7 文本列表<br>.. 2.8 脚注<br>3 表格<br>4 超链接<br>.. 4.1 链接格式<br>.. 4.2 内部链接<br>.. 4.3 外部链接<br>.. 4.4 使用链接<br>.. 4.5 目标链接<br>5 待办事项<br>.. 5.1 使用TODO状态<br>.. 5.2 多状态工作流程<br>.. 5.3 进度日志<br>.. 5.4 优先级<br>.. 5.5 任务细分<br>.. 5.6 复选框<br>6 标签<br>.. 6.1 标签继承<br>.. 6.2 设置标签<br>.. 6.3 标签查找<br>7 属性<br>.. 7.1 扩展阅读<br>8 日期和时间<br>.. 8.1 时间戳<br>.. 8.2 创建时间戳<br>.. 8.3 截止期限和计划安排<br>.. 8.4 记录工作时间<br>9 捕获——转发——存档<br>.. 9.1 捕获<br>.. 9.2 转送笔记<br>.. 9.3 归档<br>10 议程视图<br>.. 10.1 议程文件<br>.. 10.2 议程调度器<br>.. 10.3 内建议程视图<br>….. 10.3.1 周/日议程<br>….. 10.3.2 全局TODO列表<br>….. 10.3.3 匹配标签和属性<br>….. 10.3.4 单文件时间轴<br>….. 10.3.5 查找视图<br>.. 10.4 议程缓冲区的命令<br>.. 10.5 定制议程视图<br>11 准备导出<br>.. 11.1 结构的组成元素<br>.. 11.2 图片和表格<br>.. 11.3 纯文本的例子<br>.. 11.4 包含文件<br>.. 11.5 嵌入 LaTex<br>12 导出<br>.. 12.1 导出选项<br>.. 12.2 导出调度器<br>.. 12.3 ASCII/Latin-1/UTF-8 的导出<br>.. 12.4 HTML的导出<br>.. 12.5 LaTeX和PDF的导出<br>.. 12.6 DocBook的导出<br>.. 12.7 iCalendar的导出<br>13 发布<br>14 处理源代码<br>15 杂项<br>.. 15.1 补全<br>.. 15.2 一个更清晰的大纲视图<br>.. 15.3 MobileOrg</p><p>html格式:<a href="相见恨晚的Org-mode/相见恨晚的Org-mode.html">相见恨晚的Org-mode</a></p><h1 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1 简介[1]"></a>1 简介[1]</h1><p>1.1 序</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  Org 是一个用文本方式来快速高效地做笔记、维持待办事项和做项目计划的模式。<br>  它是一个创作发布系统。<br><br>  /这个文档是 Org-mode 手册的一个压缩版本。包含了所有的基本功能和命令，<br>  以及一些重要的定制提示。本文档写给不想阅读200多页手册的新手。/<br><br><br>1.2 安装<br>~~<br></code></pre></td></tr></table></figure><p>  <em>重要：</em> /如果你用的是 Emacs 或者 XEmacs 包里的 Org 版本，请跳过本节，<br>   直接阅读 1.3 节。/</p><pre><code>如果你是从网站上下载的 Org 版本，无论是 zip 包还是 tar 文件或者是</code></pre><p>  Git 文件，最好在分发包目录里直接来设置它。把 lisp 子目录加到 Emacs 的<br>  加载路径里，可以把下面两句加在 “.emacs” 文件里：#+srcname 1_1<br>  ,—-<br>  | (setq load-path (cons “~/path/to/orgdir/lisp” load-path))<br>  | (setq load-path (cons “~/path/to/orgdir/contrib/lisp” load-path))<br>  `—-</p><p>  为了提高速度可以用下面的 shell 命令将 Lisp 文件编译一下：#+srcname 1_2<br>  ,—-<br>  | make<br>  `—-</p><p>  再把下面一行加到 .emacs 文件里。它可以使文件中的函数自动加载，而不是启<br>  动 Org 模式时立即加载。#+srcname 1_3<br>  ,—-<br>  | (require ‘org-install)<br>  `—-</p><p>1.3 激活<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>     把下面几行加到 .emacs 文件里。后三行是为命令定义全局快捷键――请改<br>  成适合你自己的。#+srcname 1_4<br>  ,----<br>  | ;; The following lines are always needed. Choose your own keys.<br>  | (add-to-list &apos;auto-mode-alist &apos;(&quot;\\.org\\&apos;&quot; . org-mode))<br>  | (add-hook &apos;org-mode-hook &apos;turn-on-font-lock) ; not needed when global-font-lock-mode is on<br>  | (global-set-key &quot;\C-cl&quot; &apos;org-store-link)<br>  | (global-set-key &quot;\C-ca&quot; &apos;org-agenda)<br>  | (global-set-key &quot;\C-cb&quot; &apos;org-iswitchb)<br>  `----<br><br>  设置之后，打开 .org 扩展的文件会自动进入 org 模式。<br><br><br>1.4 反馈<br></code></pre></td></tr></table></figure></p><p>  如果你发现了问题，或者有问题评论或新想法，可以给Org的邮件列表<br>  <a href="mailto:emacs-orgmode@gnu.org" target="_blank" rel="noopener">emacs-orgmode@gnu.org</a> 发邮件。了解更多信息或者提交 bug，参见手册。</p><h1 id="2-文档结构"><a href="#2-文档结构" class="headerlink" title="2 文档结构"></a>2 文档结构</h1><p>  Org是基于Outline模式的，它提供了更灵活的编辑结构文件的命令。</p><p>2.1 大纲<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  Org 是在大纲模式之上实现的。大纲模式可以让我们用层次结构来组织文档，这<br>  （至少对我来说）是笔记和想法的最好实现方式。这种结构可以折叠（隐藏）文<br>  档的一部分而只显示文档的大概结构或者只显示我们正在处理的部分。Org 大大<br>  简化了大纲模式的使用，它把大纲模式的整个显示/隐藏功能整合到了一个命令<br>  中：org-cycle，这个命令绑定到了TAB键上。<br><br><br>2.2 标题<br></code></pre></td></tr></table></figure></p><p>  标题定义了大纲树的结构。它以处于一行左边缘的一个或多个星号开头。例如：<br>  ,—-<br>  | <em> Top level headline<br>  | <strong> Second level<br>  | </strong></em> 3rd level<br>  | ,    some text<br>  | <em>** 3rd level<br>  | ,    more text<br>  |<br>  | </em> Another top level headline<br>  `—-</p><p>  如果你不喜欢太多的星号，可以以空格后加一个星号作为标题的开头。查看<br>  15.2 节 [Clean view]，那里有设置方法。</p><p>2.3 视图循环<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  大纲模式可以隐藏缓冲区里的部分正文。Org 用绑定到 TAB 和 S-TAB 上的两个<br>  全命令来改变视图。<br>   TAB              子树循环：当加上一个前缀参数时（C-u TAB），在下面的状态中改变当前子树的视图 <br>                    FOLDED -&gt; CHILDREN -&gt; SUBTREE                                               <br>                    当加上shift键时会触发全局的视图循环。                                       <br>                                                                                              <br>   S-TAB和C-u TAB   全局循环：使整个缓冲区在下列状态中循环                                      <br>                    OVERVIEW -&gt; CONTENTS -&gt; SHOWALL                                             <br>                                                                                              <br>   C-u C-u C-u TAB  显示全部，包括drawers。                                                     <br><br>     当 Emacs 刚打开文件时，全局的状态是 OVERVIEW，也即只有顶层的标题可<br>  见。这可以通过变量 org-startup-folded 来设置。也可以通过 startup 关键<br>  字设置只对单个文件有效：#+srcname 2_2<br>  ,----<br>  | #+STARTUP: content<br>  `----<br><br><br>2.4 移动<br>~~~~~~~~<br><br>  下面的命令可以跳转到缓冲区其他的标题。<br>   C-c C-n  下个标题       <br>   C-c C-p  上个标题       <br>   C-c C-f  下个同级的标题 <br>   C-c C-b  上个同级的标题 <br>   C-c C-u  回到上层标题   <br><br><br>2.5 结构编辑<br></code></pre></td></tr></table></figure></p><p>   M-RET                  插入一个同级标题。如果光标在文本列表中，创建一个新的项（见 2.7 节 [Plain lists]）。如果处于一行的中间，这一行会被分开，后面的一部分成为新的标题。<br>   M-S-RET                插入一个和当前标题同级的 TODO 项<br>   TAB（新的空的条目中）  如果新的条目中还没有文字，TAB 会调整到合适的级别。<br>   M-LEFT/RIGHT           将当前的标题提升/降低一个等级。<br>   M-S-LEFT/RIGHT         将当前子提升/降低一个等级。<br>   M-S-UP/DOWN            将子树上/下移（和前/后个子树交换）。<br>   C-c C-w                将条目或区域传送到另一个文件中。见 9.2 节 [Refiling notes]。<br>   C-x n s/w              将缓冲区视图局限到当前子树中/再次放宽视图                                                                                                         </p><p>  如果有活动区域（暂时标记状态），提升和降低功能将会对区域中的所有标题起<br>  作用。</p><p>2.6 稀疏树<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  Org 模式的一个重要的功能是能根据大纲树中选择的信息构造出稀疏的树，这样<br>  文档就可以尽可能地折叠，但是选择的信息和它对应的标题会显示出来。试下就<br>  知道它是怎样工作的了。<br><br>  Org 模式有几个命令可以创建这种树，这些命令都可以通过调度器来使用：<br>   C-c /    它会提示再输入一个字符来选择稀疏树的创建命令。                                                            <br>   C-c / r  触发后，会提示输入匹配串，并且将所有匹配的项显示成稀疏树。所有的匹配项都会高亮显示；按 C-c C-c 取消高亮。 <br><br>  其他的基于 TODO 关键字、标签或属性来选择标题的稀疏树命令，我们会在本手<br>  册的后面讨论。<br><br><br>2.7 文本列表<br>~~<br></code></pre></td></tr></table></figure></p><p>  在大纲树的一项中，自定义格式的列表可以提供更多的组织结构，也使我们可以<br>  得到一个复先框列表（见 5.6 节［复先框］）。Org 模式可以处理这种列表，<br>  并且 HTML 导出器（见12章）也支持这种格式。</p><p>  Org 能够识别有序列表、无序列表和描述列表。</p><ul><li>无序列表项以‘-’、‘+’或者‘*‘开头。</li><li>有序列表项以‘1.’、‘1)’或者开头。</li><li><p>描述列表用‘::’将项和描述分开。</p><p> 同一列表中的项的第一行必须缩进相同程度。当下一行的缩进与列表项的的<br>开头的符号或者数字相同或者更小时，这一项就结束了。当所有的项都关上时，<br>或者后面有两个空行时，列表就结束了。例如：#+srcname 2_3<br>,—-<br>| ** Lord of the Rings<br>| ,   My favorite scenes are (in this order)<br>| ,   1. The attack of the Rohirrim<br>| ,   2. Eowyn’s fight with the witch king<br>| ,       + this was already my favorite scene in the book<br>| ,       + I really like Miranda Otto.<br>| ,   Important actors in this film are:<br>| ,   - Elijah Wood :: He plays Frodo<br>| ,   - Sean Austin :: He plays Sam, Frodo’s friend.<br>`—-</p><p>当光标位于一项的第一行时（带有项标志符号的行），下面的命令将会作用于该<br>项：<br>TAB             折叠项<br>M-RET           在当前级别插入一个项，有前缀时是强制新建一个标题<br>M-S-RET         插入一个带有复先框的项（见 2.5 节［复先框］）<br>M-S-UP/DOWN     将当前项和它的子项向上/下移动（和相同的缩进的前/后一个项交换位置）。如果列表是有序的，数字会自动改变<br>M-LEFT/M-RIGHT  提升/降低项的缩进，不包含子项<br>M-S-LEFT/RIGHT  提升/降低项的缩进，包含子项<br>C-c C-c         如果项中有复先框，就触发改变其状态。并且自动保持本项的符号与缩进在列表中的一致性<br>C-c -           循环改变将当前列表的项标志符号                                                                       </p></li></ul><p>2.8 脚注<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>     脚注就是以脚注定义符号开头的一段话，脚注定义符号是将脚注名称放在一<br>  个方括号里形成的，要求放在第0列，不能有缩进。而引用就是在正文中将脚注<br>  名称用方括号括起来。例如：#+srcname 2_4<br>  ,----<br>  | ,The Org homepage[fn:1] now looks a lot better than it used to.<br>  | ,...<br>  | ,[fn:1] The link is: http://orgmode.org<br>  `----<br><br>  用下面的命令来处理脚注：<br>   C-c C-x f  这是一个移动命令。当光标处理引用处时，跳转到它的定义；当光标处理定义处时，跳转到第一个引用处。其他情况下，新建一个脚注。当有前缀时，会提供一个菜单供选择操作，其中包括重新给脚注编号。 <br>   C-c C-c    在定义和引用之间跳转                                                                                                                                                                   <br><br><br>  *扩展阅读：*<br>  手册第 2 章<br>  Sacha Chua&apos;s tutorial<br><br><br>3 表格<br>======<br><br>  Org 提供了快速易用的表格编辑功能。通过调用 Emacs 内嵌的 ‘calc’包（对<br>  于 Emacs 的计算器可以查看 Emacs Calculator 手册）它支持类似于制表软件<br>  的计算操作。<br><br>    Org 能够很容易地处理 ASCII 文本表格。任何以‘|’为首个非空字符的行都<br>  会被认为是表格的一部分。’|‘也是列分隔符。一个表格是下面的样子：<br>  #+srcname 3_1<br>  ,----<br>  | ,| Name  | Phone | Age |<br>  | ,|-------+------+-----|<br>  | ,| Peter | 1234 | 17  |<br>  | ,| Anna  | 4321 | 25  |<br>  `----<br><br>  当你在表格内部输入 TAB、RET 或者 C-c C-c 时表格都会自动调整。TAB 会进<br>  入下一个区域（RET 进入下一行）并且创建一个新的行。表格的缩进程度可以在<br>  第一行设定。以’|-’开头的一行会作为一个水平分隔行，当它下次调整排列时<br>  会将‘-’扩展至填充整行。所以想要建上面的那个表格，只需键入：#+srcname<br>  3_2<br>  ,----<br>  | ,|Name|Phone|Age|<br>  | ,|-<br>  `----<br><br>  然后 TAB 排列表格。还有一个更快的方法就是键入|Name|Phone|Age，再 C-c<br>  RET。<br><br>  /在表格区域中输入文本时，DEL、BACKSPACE 和所有其他的字符会以特殊的方式<br>  处理，防止影响到其他的区域。当按 TAB、S-TAB 或者 RET 将光标移动到其他<br>  区域时，区域中会自动填充一些空格。/<br><br>  *创建和转换*<br><br>  C-c | 将活动区域（选中区域）转换成一个表。如果第一行至少有一个 TAB 字<br>  符，就用 TAB 划分内容；如果第一行都有逗号，就分逗号划分内容；否则就用<br>  空白符来划分区域。如果当前没有活动区域就会建立一个空的 Org 表格。其实<br>  用|Name|Phone|Age C-c RET 来建表会更简单一点。<br><br>  *调整和区域移动*<br><br>   C-c C-c  调整表格，不移动光标                           <br>   TAB      调整表格，将光标移到下一个区域，必要时新建一行 <br>   S-TAB    调整表格，将光标移到上一个区域                 <br>   RET      调整表格，将光标移到下一行，必要时会新建一行   <br><br>  *编辑行和列*<br><br>   M-LEFT/RIGHT  左/右移当前列                                                                                          <br>   M-S-LEFT      删除当前行                                                                                             <br>   M-S-RIGHT     在光标位置左边添加一列                                                                                 <br>   M-UP/DOWN     上/下移当前行                                                                                          <br>   M-S-UP        删除当前行                                                                                             <br>   M-S-DOWN      在当前行上面添加一行。如果有前缀，则在下面添加一行                                                     <br>   C-c -         在当前行下面添加一个水平线。如果带前缀，则在上面添加一行水平线                                         <br>   C-c RET       在当前行下面添加一个水平线。并将光标移动到下一行                                                       <br>   C-c ^         将表排序。当前位置所在的列作为排序的依据。排序在距当前位置最近的两个水平线之间的行（或者整个表）中进行 <br><br>  *扩展阅读：*<br>  手册第 3 章<br>  Bastien’s table tutorial<br>  Bastien’s spreadsheet tutorial<br>  Eric’s plotting tutoria<br><br><br>4 超链接<br>========<br><br>  就像 HTML 一样，Org 也提供了文件的内部链接，以及到其他文件、新闻组、电<br>  子邮件的外部链接等链接格式。<br><br><br>4.1 链接格式<br>~~~~<br></code></pre></td></tr></table></figure></p><p>  Org 能够识别 URL 格式的文本并将它们处理成可点击的链接。通常链接格式是<br>  这样的：<br>  ,—-<br>  | [[link][description]]  或者  [[link]]<br>  `—-</p><p>  链接输入一旦完成（所有的括号都匹配），Org 就会改变它的视图。这里会看到<br>  ”description“ 和 ”link“ ，而不是<br>  ,—-<br>  | [[link][descriptoin]]<br>  <code>----  和  ,----  | [[link]]。</code>—-<br>  要想编辑链接，可以光标置于链接上并键入 C-c C-l。</p><p>4.2 内部链接<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  如果一个链接地址并不是 URL 的形式，就会作为当前文件内部链接来处理。最<br>  重要的一个例子是<br>  ,----<br>  | [[#my-custom-id]]<br>  `----<br>  它会链接到 `CUSTOM_ID&apos; 属性是 “my-custom-id” 的项。<br><br>  类似<br>  ,----<br>  | [[My Target]]<br>  `----<br>  和<br>  ,----<br>  | [[My Target][Find my target]]<br>  `----<br>  的链接，点击后本文件中查找对应的目标 `“&lt;&lt;My Target&gt;&gt;”&apos; 。<br><br><br>4.3 外部链接<br></code></pre></td></tr></table></figure></p><p>  Org 支持的链接格式包括文件、网页、新闻组、BBDB 数据库项、IRC 会话和记<br>  录。外部链接是 URL 格式的定位器。以识别符开头，后面跟着一个冒号，冒号<br>  后面不能有空格。下面是一些例子：<br>  ,—-<br>  | ,<a href="http://www.astro.uva.nl/~dominik" target="_blank" rel="noopener">http://www.astro.uva.nl/~dominik</a>            on the web<br>  | ,file:/home/dominik/images/jupiter.jpg       file, absolute path<br>  | ,/home/dominik/images/jupiter.jpg            same as above<br>  | ,file:papers/last.pdf                        file, relative path<br>  | ,file:projects.org                           another Org file<br>  | ,docview:papers/last.pdf::NNN                open file in doc-view mode at page NNN<br>  | ,id:B7423F4D-2E8A-471B-8810-C40F074717E9     Link to heading by ID<br>  | ,news:comp.emacs                             Usenet link<br>  | ,mailto:<a href="mailto:adent@galaxy.net" target="_blank" rel="noopener">adent@galaxy.net</a>                     Mail link<br>  | ,vm:folder                                   VM folder link<br>  | ,vm:folder#id                                VM message link<br>  | ,wl:folder#id                                WANDERLUST message link<br>  | ,mhe:folder#id                               MH-E message link<br>  | ,rmail:folder#id                             RMAIL message link<br>  | ,gnus:group#id                               Gnus article link<br>  | ,bbdb:R.*Stallman                            BBDB link (with regexp)<br>  | ,irc:/irc.com/#emacs/bob                     IRC link<br>  | ,info:org:External%20links                   Info node link (with encoded space)<br>  `—-</p><p>  链接的括号应当是闭合的。当链接含有描述文字是显示描述文字而不是链接地址<br>  （见 4.1 节［链接格式］），例如：</p><p>  ,—-<br>  | [[http:<a href="http://www.gnu.org/software/emacs/][GNU" target="_blank" rel="noopener">www.gnu.org/software/emacs/][GNU</a> Emacs]]<br>  `—-</p><p>  如果描述信息是一个文件名或者是指向图片的 URL。HTML 导出（见 12.4 节<br>  [HTML 导出]）时会将图片内联成一个可以点击的按钮。如果没有描述信息且链<br>  接指向一个图片，那么图片就会嵌入到导出的 HTML 文件中。</p><p>4.4 使用链接<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  Org 提供了以下方法来创建和使用链接。<br>   C-c l                              在当前位置保存一个链接。这是一个全局命令（你可以设置自己的快捷键），可以在任何类型的缓冲区中使用。链接保存下来以便以后插入 Org 文件中（见下面） <br>   C-c C-l                            插入一个链接。它会让你输入，你可以输入一个链接，也可心用上/下键来获取保存的链接。它还会让你输入描述信息。                                       <br>   C-c C-l（光标在链接上）            当光标处于链接上时，你可以修改链接                                                                                                              <br>   C-c C-o 或者 mouse-1 或者 mouse-2  打开链接                                                                                                                                        <br>   C-c &amp;                              跳回到一个已记录的地址。用 C-c % 可以将地址记录下来，内部链接后面的命令也会自动将地址记录下来。使用这个命令多次可以一直往前定位。               <br><br><br>4.5 目标链接<br></code></pre></td></tr></table></figure></p><p>  文件链接可以包含一些其他信息使得进入链接时可以到达特定的位置。比如双冒<br>  号之后的一个行号或者搜索选项。</p><p>  下面是一些包含搜索定位功能的链接例子以及其说明：<br>  ,—-<br>  | , [[file:~/code/main.c::255]]                     进入到 255 行<br>  | , [[file:~/xx.org::My Target]]                    找到目标‘&lt;<my target>&gt;’<br>  | , [[file:~/xx.org/::#my-custom-id]]               查找自定义 id 的项<br>  `—-</my></p><p>  <em>扩展阅读：</em><br>  手册第四章</p><h1 id="5-待办事项"><a href="#5-待办事项" class="headerlink" title="5 待办事项"></a>5 待办事项</h1><p>  Org 模式并不用一个单独的文件来维持 TODO 列表[2]。它是一些笔记的集合体，<br>  因为 TODO 列表是在你记录笔记的过程中逐渐形成的。你 Org 模式下可以很容<br>  易地将树中的一项标记为一个 TODO 的项。用这种方式，信息内容不会冗余加倍，<br>  而且可以显示 TODO 项的上下文环境。</p><p>  当然，这种处理待办事项的方式会将它们分散于各个笔记文件中。Org 模式提供<br>  了一些方法使我们可以把它们看作一个整体来处理。</p><p>5.1 使用TODO状态<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  当标题以 TODO 开关时它就成为了一个 TODO 项，例如：<br>  ,----<br>  | , ***TODO Write letter to Sam Fortune<br>  `----<br>  下面是一些使用 TODO 项的常用命令：<br><br>   C-c C-t       将当前项的状态在（unmarked）-&gt;TODO-&gt;DONE 之间循环切换，同样的切换也可以在时间轴（timeline） 和议程（ agenda） 的缓冲区（buffer）中用 t 键“远程”进行。（见 2.6 节[稀疏树]） <br>   S-RIGHT/LEFT  选择下一个/上一个 TODO 状态，与上面的循环方式相同。                                                                                                                          <br>   C-c / t       在稀疏树中显示 TODO 项。将 buffer 折叠，但是会显示 TODO 项和它们所在的层次的标题。                                                                                           <br>   C-c a t       显示全局 TODO 列表。从所有的议程文件中收集 TODO 项到一个缓冲区中。详见 10.3.2 节。                                                                                           <br>   S-M-RET       在当前项下插入一个新的 TODO 项。                                                                                                                                             <br><br>  改变 TODO 的状态会触发标签改变。查看选项 org-todo-state-tags-triggers<br>  的描述获得更多信息。<br><br><br>5.2 多状态工作流程<br>~~<br></code></pre></td></tr></table></figure></p><p>  你可以用 TODO 关键字来定义不同的状态，用以处理项，比如：<br>  ,—-<br>  | (setq org-todo-keywords<br>  |       ‘((sequence “TODO” “FEEDBACK” “VERIFY” “|” “DONE” “DELEGATED”)))<br>  `—-</p><p>  竖直线将 TODO 关键字（还需要进一步的动作）和 DONE 状态（不需要进一步的<br>  动作）分隔开。如果你不给出竖直线，最后一个状态会作为 DONE 状态。设置之<br>  后，C-c C-t 就会将状态从 TODO 转换到 FEEDBACK，再转换到 VERIFY，最后到<br>  DONE 和 DELEGATED。</p><p>  有时你可能希望同时使用几个不同的 TODO 状态集合。例如，你可能想要一个基<br>  本的 TODO/DONE，以及一个修改 bug 的工作流程和一个隔开的状态来表示取消<br>  的项目（既还是 DONE，也不需要进一步的动作），你可以这样设置：<br>  ,—-<br>  | (setq org-todo-keywords<br>  |       ‘((sequence “TODO(t)” “|” “DONE(d)”)<br>  |     (sequence “REPORT(r)” “BUG(b)” “KNOWNCAUSE(k)” “|” “FIXED(f)”)<br>  |     (sequence “|” “CANCELED(c)”)))<br>  `—-<br>  关键字应该各不相同，这样对于一个选项 Org 才知道该用哪个状态序列（集合）。<br>  例子中也给出了快速使用一个关键字的方法，就是在关键字后面括号中给出快捷<br>  字母——当用 C-c C-t时，会询问，让你输入一个字母。</p><p>  要定义只在一个文件中有效的 TODO 关键字，可以在文件中任意地方给出下面的<br>  文本：<br>  ,—-<br>  | #+TODO: TODO(t) | DONE(d)<br>  | #+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)<br>  | #+TODO: | CANCELED(c)<br>  `—-</p><p>  当改变这些行中的一行后，光标停留在改变行上，用 C-c C-c 让改变生效。</p><p>5.3 进度日志<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  当你改变一个 TODO 状态为 DONE 时，或者当你每次改变一个 TODO 项的状态时，<br>  Org 都会自动记录时间戳或者作一个记录。这是高度可配置的。可以基于每一个<br>  关键字进入设置，并且可以定位到一个文件甚至子树。怎样记录一个任务的工作<br>  时间，见 8.4 节。<br><br>  *完成的项目*<br><br>  最基本的日志功能是跟踪一个特定项目的完成。这可以这样实现：[3]<br>  ,----<br>  | (setq org-log-done &apos;time)<br>  `----<br>  这时当你将一个项目从一个 TODO（未完成）状态改变为一个完成状态时，标题<br>  下面就会插入一行 “CLOSED:[timestamp]”。如果你想和时间戳一起作一个记<br>  录，用：[4]<br>  ,----<br>  | (setq org-log-done &apos;note)<br>  `----<br>  这时会提示你输入一个记录（note），并将它保存在标题为“Closing Note”项<br>  目之下。<br><br>  *跟踪TODO状态变化*<br><br>  你可能想跟踪 TODO 状态的变化。可以只记录一个时间戳，也可以为变化作一个<br>  带时间戳的记录。记录会被插入到标题之后形成列表。当有很多记录之后，你可<br>  能希望将记录取出放到抽屉里。通过定制变量 org-log-into-drawer 可以实现<br>  这个功能。对于状态记录，Org 可以实现基于每个状态关键字的设置。实现方法<br>  是在每个后的括号中指定“！”（记录时间戳）或“@”（作一个记录）。例如：<br>  ,----<br>  | #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)<br>  `----<br><br>  将会设置 TODO 关键字和快速访问字母，以及当一个项目设为 DONE 时，会记录<br>  时间戳，当状态变为 WAIT 或 CANCELED 时，会作一个记录。这个语法也适用于<br>  变量 org-todo-keywords。<br><br><br>5.4 优先级<br>~~~~~~~~~~<br><br>  如果你广泛地使用 Org 模式，这样你就会有大量的 TODO 项。给它们设定优先<br>  级就很有必要。可以在 TODO 项的标题中加入一些标记（cookie）来设置它们的<br>  优先级，像这样：<br>  ,----<br>  | *** TODO [#A] Write letter to Sam Fortune<br>  `----<br><br>  Org模式支持三个优先级别：’A‘、’B‘和’C‘。’A‘是最高级别，如不指<br>  定，’B‘是默认的。优先级只在议程中有用。<br><br>   C-c ,   设置当前标题的优先级。按’‘’‘’‘选择一个级别，或者SPC删除标记（cookie）。 <br>   S-UP                                                                                  <br>   S-Down  增加/减少当前标题的优先级。                                                   <br><br><br>5.5 任务细分<br></code></pre></td></tr></table></figure></p><p>  很多时候将一个大的任务分成几个的易于完成的小任务是明智的。你可以通过在<br>  TODO项目下新建一个大纲树，并在子树上标记子任务来实现这个功能。为了能对<br>  已经完成的任务有个大致的了解，你可以在标题的任何地方插入‘[/]’或者<br>  ‘[%]’。当每个子任务的状态变化时，或者当你在标记上按 C-c C-c时，这些<br>  标记状态也会随之更新。例如：<br>  ,—-<br>  | <em> Organize Party [33%]<br>  | <strong> TODO Call people [1/2]<br>  | </strong></em> TODO Peter<br>  | <strong>* DONE Sarah<br>  | </strong> TODO Buy food<br>  | ** DONE Talk to neighbor<br>  `—-</p><p>5.6 复选框<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  当纯文本中的项以‘[]’开头时，就会变成一个复选框。复选框不会包含在全局<br>  TODO 列表中，所以它们很适合地将一个任务划分成几个简单的步骤。下面是一<br>  个复选框的例子：<br>  ,----<br>  | * TODO Organize party [1/3]<br>  | ,  - [-] call people [1/2]<br>  | ,    - [ ] Peter<br>  | ,    - [X] Sarah<br>  | ,  - [X] order food<br>  | ,  - [ ] think about what music to play<br>  `----<br><br>  复选框是分层工作的。所以如果一个复选框项目如果还有子复选框，触发子复选<br>  框将会使该复选框变化以反映出一个、多个还是没有子复选框被选中。<br><br>  下面是处理复选框的命令：<br>   C-c C-c  触发复选框的状态或者（加上前缀）触发复选框的的存在状态。                    <br>   M-S-RET  增加一个带有复选框的项。这只在光标处于纯文本列表项（见 2.7 节）中才起使用。 <br><br>  *扩展阅读：*<br>  手册第5章<br>  David O’Toole’s introductory tutorial<br>  Charles Cave’s GTD setup<br><br><br>6 标签<br>======<br><br>  要为交叉相关的信息提供标签和上下文，一个不错的方法是给标题分配标签。<br>  Org 模式能够广泛地支持标签。<br><br>  每一个标题都能包含多个标签，它们位于标题的后面。标签可以包含字母，数字，<br>  `‘_’&apos; 和 `‘@’&apos; 。标签的前面和后面都应该有一个冒号，例如，<br>  “:work:”。可以指定多个标签，就像“:work:urgent:”。标签默认是粗体，<br>  并和标题具有相同的颜色。<br><br><br>6.1 标签继承<br>~~<br></code></pre></td></tr></table></figure></p><p>  标签具有大纲树的继承结构。如果一个标题具有某个标签，它的所有子标题也会<br>  继承这个标签。例如，在列表<br>  ,—-<br>  | <em> Meeting with the French group     :work:<br>  | <strong> Summary by Frank                 :boss:notes:<br>  | </strong></em> TODO Prepare slides for him     :action:<br>  `—-</p><p>  中,尽管没有明确标出,最后一个标题会有标签“:work:”，“:boss:”，<br>  “:note:”，和“:action”。你也可以设定一个标签让所有的标题都继承，就<br>  好像标签在包含整个文件的第零级标题中指定了一样。用下面的方法[5]：<br>  ,—-<br>  | #+FILETAGS: :Peter:Boss:Secret:<br>  `—-</p><p>6.2 设置标签<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  在标题后可以很容易地输入标签。在冒号之后，M-TAB 可以补全标签。也有一些<br>  专门的命令用于输入标签：<br>   C-c C-q  为当前标题输入标签。Org 模式既支持补全，也支持单键接口来设置标签，见下文。回车之后，标签会被插入，并放到第 org-tags-column 列。如果用前缀 C-u，会把当前缓冲区中的所有标签都对齐到那一列，这看起来很酷。 <br>   C-c C-c  当光标处于标题上时，这个命令同C-c C-q。                                                                                                                                                                 <br><br>  Org 支持基于一个标签列表来插入标签。默认情况这个列表是动态构建的，包含<br>  了当前缓冲区中使用过的所有标签。你也可以通过变量 org-tag-alist 在全局<br>  设定一个标签的硬列表（hard list）。另外，对于某个特定文件你也可以用下<br>  面这几行设置一个默认列表：<br>  ,----<br>  | #+TAGS: @work @home @tennisclub<br>  | #+TAGS: laptop car pc sailboat<br>  `----<br><br>  默认 Org 模式用一个迷你缓冲区补全设施来输入标签。另外，它也实现了一个<br>  更快速，称为 /快速标签选择/ （ /fast tag selection/ ）的标签选择方法。<br>  这使得你只用按一次键就可以选择或者取消一个标签。为了使它能很好地工作，<br>  需要为常用的标签赋唯一的值。你可以在你的“.emacs”文件中通过设置变量<br>  org-tag-alist 作全局设定。例如，如果你需要在不同的文件中经常要给条目添<br>  加标签“:@home:”，这时你就可以像这样设置：<br>  ,----<br>  | (setq org-tag-alist &apos;((&quot;@work&quot; . ?w) (&quot;@home&quot; . ?h) (&quot;laptop&quot; . ?l)))<br>  `----<br><br>  如果标签只用于当前正在处理的文件，那么你可以这样设置标签选项行：<br>  ,----<br>  | #+TAGS: @work(w) @home(h) @tennisclub(t) laptop(l) pc(p)<br>  `----<br><br><br>6.3 标签查找<br></code></pre></td></tr></table></figure></p><p>  一旦标签体系设置好，就可以用来收集相关联的信息到指定列表中。<br>   C-c  <br>   C-c / m  用匹配标签搜索的所有标题构造一个稀疏树。带前缀参数C-u时，忽略所有还是TODO行的标题。<br>   C-c a m  用所有议程文件匹配的标签构造一个全局列表。见第 10.3.3 节。<br>   C-c a M  用所有议程文件匹配的标签构造一个全局列表，但只搜索 TODO 项，并强制搜索所有子项（见变量 org-tags-match-listsublevels）。 </p><p>  这些命令都会提示输入字符串，字符串支持基本的逻辑去处。像<br>  “+boss+urgent-project1”，是搜索所有的包含标签“boss”和“urgent”但<br>  不含“project1”的项；而 “Kathy|Sally”，搜索标签包含“Kathy”或者<br>  “Sally”和项。搜索字符串的语法很丰富，支持查找TODO关键字、条目级别和<br>  属性。更详细的介绍和例子，见第 10.3.3 节。</p><p>  <em>扩展阅读</em><br>     手册第 6 章<br>     Sacha Chua’s article about tagging in Org-mode</p><h1 id="7-属性"><a href="#7-属性" class="headerlink" title="7 属性"></a>7 属性</h1><p>  属性是一些与条目关联的键值对。它们位于一个名为 <em>PROPERTIES</em> 的特殊抽屉<br>  中。第一个属性都单独一行，键在前（被冒号包围），值在后：<br>  ,—-<br>  | <em> CD collection<br>  | <strong> Classic<br>  | </strong></em> Goldberg Variations<br>  | ,    :PROPERTIES:<br>  | ,    :Title:    Goldberg Variations<br>  | ,    :Composer: J.S. Bach<br>  | ,    :Publisher: Deutsche Grammophon<br>  | ,    :NDisks:   1<br>  | ,    :END:<br>  `—-</p><p>  通过设置属性 <code>“:Xyz_ALL:”&#39; ，你可以为属性</code>“:Xyz:”’ 设置所有合法的<br>  值。这个特定的属性是有 /继承性/ 的，即，如果你是在第 1 级别设置的，那<br>  么会被应用于整个树。当合法的值设定之后，设置对应的属性就很容易了，并且<br>  不容易出现打字错误。用CD唱片集为例，我们可以预定义发行商和盒中的光盘数<br>  目：<br>  ,—-<br>  | * CD collection<br>  | ,  :PROPERTIES:<br>  | ,  :NDisks_ALL: 1 2 3 4<br>  | ,  :Publisher_ALL: “Deutsche Grammophon” Philips EMI<br>  | ,  :END:<br>  `—-</p><p>  也可以在全局设置 org-global-properties ，或者在文件级别设置：<br>  ,—-<br>  | #+PROPERTY: NDisks_ALL 1 2 3 4<br>  `—-</p><p>   C-c C-x p  设置一个属性。会询问属性名和属性值。<br>   C-c C-c d  从当前项中删除一个属性。             </p><p>  要基于选择的属性创建稀疏树或者特殊列表，跟标签搜索的命令相同（见第6.3<br>  节）。搜索字符串的语法在第10.3.3节中详述。</p><p>7.1 扩展阅读<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  手册第7章<br>     Bastien Guerry’s column view tutorial<br><br><br>8 日期和时间<br>============<br><br>  为了支持工程的计划，TODO 项可以标记上日期和/或时间。带有日期和时间信息<br>  的特定格式的字符串在 Org 模式中称为时间戳。<br><br><br>8.1 时间戳<br>~~~~~~~~~~<br><br>  时间戳是一个具有特定格式的日期（可能带有时间和时间段）说明，例如<br>  `&lt;2005-10-01&apos; `Tue&gt;&apos; ， `&lt;2003-09-16&apos; `Tue&apos; `09:39&gt;&apos; ，或者<br>  `&lt;2003-09-16&apos; `Tue&apos; `12:00-12:30&gt;&apos; 。时间戳可以出现在树条目的标题和正<br>  文的任何地方。它能使条目只在特定的日期才出现在议程列表中。（见第<br>  10.3.1 节）我们区分为：<br><br>  *普通时间戳；事件；约会*<br><br>  一个简单的时间戳只是给一个条目加上时间和日期。这跟在纸质的议程上写下约<br>  会和事件是一样的。<br>  ,----<br>  | * Meet Peter at the movies &lt;2006-11-01 Wed 19:15&gt;<br>  | * Discussion on climate change &lt;2006-11-02 Thu 20:00-22:00&gt;<br>  `----<br><br>  *具有时间间隔的时间戳*<br><br>  一个时间戳可以包含一个时间间隔，表示事件不只在指定的时间发生，还在每隔<br>  一个特定的时间如 N 天（d）、周（w）、月（m）或者年（y）之后重复发生。<br>  下面的事件每周二在议程中显示：<br>  ,----<br>  | * Pick up Sam at school &lt;2007-05-16 Wed 12:30 +1w&gt;<br>  `----<br><br>  *日记样式的 sexp 条目*<br><br>  为了能定义更复杂的时间，Org 模式支持 Emacs 日历/日记包（calendar/diary<br>  package）中的日记条目。例如：<br>  ,----<br>  | * The nerd meeting on every 2nd Thursday of the month<br>  | ,  &lt;%%(diary-float t 4 2)&gt;<br>  `----<br><br>  *时间/日期段*<br><br>  两个时间戳用‘--’连接起来就定义了一个时间段：<br>  ,----<br>  | ** Meeting in Amsterdam<br>  | ,   &lt;2004-08-23 Mon&gt;--&lt;2004-08-26 Thu&gt;<br>  `----<br><br>  *非激活的时间戳*<br><br>  跟普通时间戳一样，但是这里是方括号而不是尖括号。这种时间戳是未激活的，<br>  它 /不/ 会让一个条目显示在议程中。<br>  ,----<br>  | * Gillian comes late for the fifth time [2006-11-01 Wed]<br>  `----<br><br><br>8.2 创建时间戳<br>~~<br></code></pre></td></tr></table></figure></p><p>  时间戳要有特定的格式，这样才能被Org模式识别。下面的命令可以用来正确地<br>  处理时间戳的格式。<br>   C-c .         询问日期并输入正确的时间戳。当光标处理一个时间戳之上时，是修改这个时间戳，而不是插入一个新的。如果这个命令连用再次，就会插入一个时间段。加上前缀会附带当前时间。<br>   C-c !         功能同C-c .，但是插入的是一个未激活的时间戳。<br>   S-LEFT/RIGHT  将光标处理的时间戳改变一天。<br>   S-UP/DOWN     改变时间戳中光标下的项。光标可以处在年、月、日、时或者分之上。当时间戳包含一个时间段时，如 “15:30-16:30”，修改第一个时间，会自动同时修改第二个时间，以保持时间段长度不变。想修改时间段长度，可以修改第二个时间。 </p><p>  当 Org 模式询问时间/日期时，能接收任何包含时间和/或日期的字符串，它能<br>  根据当前的时间日期智能地分析字符串，从而得到没有指明的信息。你也可以用<br>  弹出的日历中选择日期。想完整地了解时间/日期询问的工作方式，可以参考手<br>  册。</p><p>8.3 截止期限和计划安排<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  时间戳前面可以加一些关键字来协助计划安排。<br><br>  *截止期限*<br><br>  意义：任务（大多数情况都会是一个TODO项，当然也可以不是）应该完成的日期。<br>   C-c C-d  在标题下面一行插入一个带有“DEADLINE”关键字的时间戳。 <br><br>  在 /截止日期/ ， /任务/ 会列在 /议程/ 中。另外， /今天的议程/ 会在任务<br>  到期 orgdeadline-warning-days 天前对即将即将到期以及已经过期的任务给出<br>  提醒，直到任务被标记为 DONE。例如：<br>  ,----<br>  | *** TODO write article about the Earth for the Guide<br>  | ,    The editor in charge is [[bbdb:Ford Prefect]]<br>  | ,    DEADLINE: &lt;2004-02-29 Sun&gt;<br>  `----<br><br>  *日程安排*<br><br>  意义：你计划在给定的那个日期开始进行那项任务。[6]<br>   C-c C-s  在标题下面插入一个带有“SCHEDULED”关键字的时间戳。 <br><br>  在给定的日期标题会列在议程中。[7]另外，对于过期的日程安排会在编辑为 /<br>  今天/ 并给出提醒，直到被标记为 DONE。也就是说，任务会自动推迟日期直到<br>  它被完成。<br>  ,----<br>  | *** TODO Call Trillian for a date on New Years Eve.<br>  | ,    SCHEDULED: &lt;2004-12-25 Sat&gt;<br>  `----<br><br>  有些任务需要一再重复出现。Org 模式在截止期限、计划安排和普通时间戳中用<br>  所谓的中继器来管理这种任务。在下面的例子中：<br>  ,----<br>  | ** TODO Pay the rent<br>  | ,   DEADLINE: &lt;2005-10-01 Sat +1m&gt;<br>  `----<br><br>  +1m 是一个中继器；上面的意思是任务有一个截止期限 `&lt;2005-10-01&gt;&apos; ，并从<br>  这个日期开始每月都重复出现。<br><br><br>8.4 记录工作时间<br>~~~~~~~~~~~~~~~~<br><br>  使用 Org 可以记录在一个工程中花在某些特定任务上的时间。<br><br>   C-c C-x C-i  开始当前条目的计时（clock-in）。这会插入一个 CLOCK 关键字和一个时间戳。加上 C-u 前缀，从当前已经计时的任务中选择任务。 <br>   C-c C-x C-o  停止计时（clock-out）。这会在开始计时的地方插入另一个时间戳。它会直接计算使用时间并插入到时间段的后面如 “=&gt; HH:MM”。 <br>   C-c C-x C-e  为当前的计时任务更新进度。                                                                                             <br>   C-c C-x C-x  取消当前的计时。当你误操作打开一个计时时，或者转而去做其他事情时，这个命令就很有用。                                   <br>   C-c C-x C-j  跳转到包含当前正在运行的计时的任务条目。用 C-uf前缀从当前计时的任务中选择。                                            <br>   C-c C-x C-r  在当前文件插入一个包含像 Org 表格一样的计时报告的动态块。当光标正处于一个存在的块上时，更新它。                        <br>                `#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file&apos;                                                           <br>                `#+END: clocktable&apos;                                                                                                    <br>                如何定制视图，见手册。                                                                                                 <br>   C-c C-c      在一个已经存在的计时表格之上时，更新它。 更新动态块。光标需要置于动态块 `#+BEGIN&apos; 这行。                               <br><br>  /l/ 键可能会在时间轴（见第 10.3.4 节）和议程（见第 10.3.1 节）中使用来<br>  查看一天中处理和关闭了哪些任务。<br><br>  *扩展阅读*<br>  手册第 8 章<br>  Charles Cave’s Date and Time tutorial<br>  Bernt Hansen’s clocking workflow<br><br><br>9 捕获——转发——存档<br>==================<br><br>  任何组织系统都有一个重要功能，就是能捕获新的灵感或者任务，并将相关的引<br>  用材料与之联系起来。Org 提供了一个捕获过程来创建任务。它将与一个任务相<br>  关的文件（附件）保存在一个特定的目录下。在系统中，任务和项目经常移动。<br>  将整个项目树保存到一个归档文件中可以保持系统简洁快速。<br><br><br>9.1 捕获<br>~~~~~~~~<br><br>  Org 的获取一个新条目的方法很大程序上受 John Wiegley 的 excellent<br>  remem-ber package 的影响。它使得你可以在工作流程中中断一小会儿来存贮一<br>  个简短的笔记。Org可以为新条目定义模板，并将它们与不同的目标文件关联起<br>  来以保存笔记。<br><br><br>  *设定截取位置[8]*<br><br>  下面的定制为笔记设置了一个默认的目标[9]文件，并为捕获新的任务定义了一<br>  个全局快捷键[10]。<br>  ,----<br>  | (setq org-default-notes-file (concat org-directory &quot;/notes.org&quot;))<br>  | (define-key global-map &quot;\C-cc&quot; &apos;org-capture)<br>  `----<br><br>  *截取的使用*<br><br>   C-c c    启动一个捕获过程。进入一个窄的间接缓冲区来编辑条目。                    <br>   C-c C-c  一旦完成捕获信息的输入，可以用 C-c C-c 返回之前的窗口，继续中断的工作。 <br>   C-c C-w  将条目保存到一个接收地址（见第2节）并结束。                             <br>   C-c C-k  取消捕获过程，返回之前的状态。                                          <br><br>  *捕获模板*<br><br>  用可以用不同的模板来做不同的捕获笔记，并将它们保存到不同的地方。例如，<br>  你想将新任务保存到文件“TODO.org”的“Tasks”标题下，而将日记项目保存<br>  到“journal.org”中一个时间树中。你可以：<br>  ,----<br>  | (setq org-capture-templates<br>  |       &apos;((&quot;t&quot; &quot;Todo&quot; entry (file+headline &quot;~/org/gtd.org&quot; &quot;Tasks&quot;)<br>  |  &quot;* TODO %?\n %i\n %a&quot;)<br>  | (&quot;j&quot; &quot;Journal&quot; entry (file+datetree &quot;~/org/journal.org&quot;)<br>  |  &quot;* %?\nEntered on %U\n %i\n %a&quot;)))<br>  `----<br><br>  其中，第一个字符串是模式的关键字，第二个字符串是简短的描述信息。接着是<br>  条目的类型和保存笔记的目标地址。最后是模板本身，它利用%作转义符基于时<br>  间和上下文来填充一些信息。<br><br>  当你调用 M-x org-capture 时，Org 提示输入一个键来选择模板（如果你有多<br>  个模板），然后就会给出像这样的内容：<br><br>  ,----<br>  | * TODO<br>  |  [[file:link to where you were when initiating capture]]<br>  `----<br><br><br>  在扩展模板时，可以用%转义符进行动态地插入内容。下面是一些可以使用的项，<br>  查看手册获得更多的选项。[11]<br>   %a      注解，通常是由 org-store-link 创建的链接 <br>   %i      初始化内容，当记忆时区域被C-u调用        <br>   %t      时间戳，只是日期                         <br>   %T      带有日期和时间的时间戳                   <br>   %u，%U  同上，但是时间戳不激活                   <br><br><br>9.2 转送笔记<br>~~~~~~~~~~~~<br><br>  当你回顾捕获的数据时，可以想把其中的一些条目转送到另一列表中，比如说到<br>  一工程项目。剪切，查找正确的地址，然后再粘贴笔记，这就似乎有些麻烦。为<br>  了简化这个过程，可以用专门的命令：<br><br>   C-c C-w          转送光标处的条目或者区域。这个命令会提供一些目标地址供选择,你可以通过补全功能选择一个。条目（或者区域中的所有条目）就会作为一个子项填充到目标标题下。 <br>                    默认情况下，当前缓冲区的一级标题会被作为转送的目标，你可以通过设置给出跨多个文件的复杂的定义。详见变量 org-refile-targets 的描述。                    <br>   C-u C-c C-w      借助于转送功能的接口来跳转到一个标题。                                                                                                                <br>   C-u C-u C-c C-w  跳转到 org-refile 最后转送子树所到的地方。                                                                                                            <br><br><br>9.3 归档<br>~~~~~~~~<br><br>  当一个用（子）树表示的工程完成后，你可能想把它移走，不让它再在议程里显<br>  示。归档能使你的工作文件变得简洁，并能使议程视图构造等全局搜索保持高效。<br>  最常用的归档命令是将工程树移到另一个文件——归档文件。<br><br>   C-c C-x C-a                   用变量 orgarchive-default-command 指定的命令归档当前的项。 <br>   C-c C-x C-s 或者简化为 C-c $  将光标处的子树归档至 org-archive-location 指定的位置。     <br><br>  默认的归档位置是当前文件同目录下，名为当前文件名后加 `“_archive”&apos; 的<br>  文件。例子和设置位置的方法见变量 org-archivelocation 的帮助信息。下面<br>  是一个在缓冲区内设置该变量的方法：<br>  ,----<br>  | #+ARCHIVE: %s_done::<br>  `----<br><br>  *扩展阅读*<br>  手册第9章<br>  Charles Cave’s remember tutorial<br>  Sebastian Rose’s tutorial for capturing from a web browser<br><br><br>10 议程视图<br>===========<br><br>  根据 Org 的工作方式，TODO 项、时间戳和带标签的标题分散在一个或者多个文<br>  件中。为了能够查看某一天的项目或者事件，信息必须收集在一起，以一种的有<br>  条理方式排序、显示。有几种不同的视图，见下文。<br><br>  收集的信息在一个专门的议程缓冲区中显示。这个缓冲区是只读的，但是提供了<br>  一些命令可以访问原 Org 文件中对应的条目，并且可以远程地编辑这些文件。<br>  从议程缓冲区中远程编辑是说，比如，你可以在议程缓冲区中改变标题和约会的<br>  日期。议程缓冲区中使用的命令在第 10.4 节列出。<br><br><br>10.1 议程文件<br>~~~~~~~~~~~~~<br><br>  显示的信息通常是从各个议程文件中收集来的，这样文件在变量<br>  org-agenda-files 中列出。<br>   C-c [  将当前文件加入到议程文件列表中。当前文件会被加到列表的前面。如果文件已经在列表中，会被移到前面。带有前缀时，文件添加/移到到后面。 <br>   C-c ]  将当前文件从议程文件列表中删除。                                                                                                  <br>   C-,    遍历议程文件列表，依次访问其中的每一个文件。                                                                                      <br><br><br>10.2 议程调度器<br>~~~~~~~~~~~~~~~<br><br>  视图是通过议程调试器创建的，通常我们会给它设置一个全局快捷键——比如 C-c<br>  a （见第1.2节）。按 C-c a 之后，就会提示再输入一个字母来执行对应的命令：<br><br>   a    日历式的议程。（见 10.3.1）                   <br>   t/T  TODO 项的列表。（见 10.3.2节）                <br>   m/M  匹配某个标签表达式的标题的列表。（见 10.3.3） <br>   L    当前文件的时间轴视图。（见 10.3.4）           <br>   s    通过关键字和/或正则表达式选中的条目的列表。   <br><br><br>10.3 内建议程视图<br>~~~~~~~~~~~~~~~~~<br><br>10.3.1 周/日议程<br>----------------<br><br>  周/日议程就像纸质的议程一样，用以显示本周或当天的所有任务。<br>   C-c a a  从一列 Org 文件中为本周收集出一个议程。议程显示出每天的条目。 <br><br>  Emacs 包含了 Edward M. Reingold 的日历和日记功能。Org 模式能识别日记的<br>  语法并允许在 Org 文件中直接使用日记的 sexp 条目：[12]<br>  ,----<br>  | * Birthdays and similar stuff<br>  | #+CATEGORY: Holiday<br>  | ,  %%(org-calendar-holiday) ; special function for holiday names<br>  | #+CATEGORY: Ann<br>  | ,  %%(diary-anniversary 5 14 1956) Arthur Dent is %d years old<br>  | ,  %%(diary-anniversary 10 2 1869) Mahatma Gandhi would be %d years old<br>  `----<br><br>  Org 可以跟 Emacs 的约会提醒功能结合。想添加议程文件中的约会提醒，可以<br>  使用命令 org-agenda-to-appt。详见帮助文档的描述。<br><br><br>10.3.2 全局TODO列表<br>-------------------<br><br>  全局TODO列表将所有未完成的 TODO 项格式化并集中到一处。TODO 项的远程编<br>  辑使得我们只用按一下键就可以改变 TODO 项的状态。TODO 列表中可以使用的<br>  命令在第10.4节给出。<br>   C-c a t  显示全局 TODO 列表。这会从所有的议程文件（见第10章）中收集 TODO 项到一个缓冲区中。 <br>   C-c a T  同上，但可以选择 TODO 关键字                                                       <br><br><br>10.3.3 匹配标签和属性<br>---------------------<br><br>  如果议程文件中的标题带有标签（见第6章）或者带有属性（见第7章），就可以<br>  基于这些元数据筛选标题到议程缓冲区中。这里描述的匹配语法在用 C-c / m<br>  创建稀疏树时也同样适用。在标签列表中可以使用的命令在第10.4节描述。<br><br>  ,----<br>  | ,C-c a m  将匹配指定的标签集的所有标题生成一个列表。这个命令询问筛选规则，可以是标签的逻辑表达式，如 “+work+urgent-withboss” 或 “work|home” （见第 6 章）。如果你经常使用某个搜索，可以将它定义成一个命令。（见第 10.2 节）<br>  | ,C-c a M  同 C-c a m，但只复选同时也是 TODO 项的标题。<br>  `----<br><br><br>  *匹配语法*<br><br>  搜索字符串可以使用 ‘&amp;’ 作与运算， ‘|’ 作或运算。‘&amp;’ 的约束力比<br>  ‘|’ 的强。括号功能现在还没实现。用以搜索的元素可以是标签 、匹配标签<br>  的正则表达式、或者像 PROPERTY OPERATOR VALUE 这样带有比较操作符的用来<br>  比较属性值的表达式。第一个元素前面加 ‘-’ 表示不选匹配的项，加 ‘+‘<br>  表示选择匹配的项。使用 ’+‘ 和 ’-“ 时，与操作符 ‘&amp;’ 就是可选的了。<br>  这里有一些只使用标签的例子。<br>  ,----<br>  | ”+work-boss“               选择标有”:work:“的标题，但去掉同时也标有”:boss:“的标题。。<br>  | ”work|laptop“              选择标有”:work:“或者”:laptop:“的行。<br>  | ”work|laptop+night“        跟前面相同，但要求标有”:laptop:“和行也要标有”:night:“。<br>  `----<br><br>  匹配标签时你也可以尝试同时匹配属性，详细内容见手册。<br><br><br>10.3.4 单文件时间轴<br>-------------------<br><br>  时间轴用时间排序视图概述单个文件中的所有带有时间戳的条目。这个命令的目<br>  的是用来给出一个工程中事件的鸟瞰图。<br>   C-c a L  给出 Org 文件中所有带时间戳条目的排序视图。带有 C-u 前缀时，没有完成的 TODO 项（作了安排的以及没作安排的）也列在当前日期下。 <br><br><br>10.3.5 查找视图<br>---------------<br><br>  这个议程视图用来对 Org 模式下的条目进行普通的文本查找。对于查找笔记很<br>  有用。<br>   C-c a s  这个查找方式可以让你通过匹配子串或者用逻辑表达式指定关键字来选择条目。 <br><br>  例如，查找字符串 *”computer equipment“* 将会查找包含子串 *”computer<br>  equipment“* 的条目。查找视图也可以用布尔逻辑查找条目中的关键字。查找<br>  字符串 *”+computer +wifi -ethernet-&#123;8\.11[bg]&#125;“* 将会搜索包含关键字<br>  *computer* 和 *wifi* 但不含 *ethernet* ，并且不被正则表达式<br>  *8\.11[bg]* （排除 8.11b 和 8.11g） 匹配的笔记条目。<br><br>  注意，除了议程文件，这条命令也会搜索<br>  org-agenda-text-search-extra-files 中列出的文件。<br><br><br>10.4 议程缓冲区的命令<br>~~~~~~~~~~~~~~~~~~~~~<br><br>  议程缓冲区中的条目链接到了它们的源 Org 或者日记文件。有一些命令可以用<br>  来显示和跳转到条目的源位置，也可以从视图缓冲区中”远程“编辑源文件。下<br>  面只是所有命令的一个选集，浏览 *Agenda* 菜单和手册获得完整的列表。<br><br>  *动作*<br>   n  下一行（同 DOWN 和 C-n）。[13] <br>   p  上一行（同 UP 和 C-p）。[14]   <br><br>  *查看/转到 Org 文件*<br>   mouse-3                                                                                 <br>   SPC      在另一个窗口中显示条目的源位置。带前缀使得整个条目在大纲中可见，而不只是标题。 <br>   TAB      在另一个窗口中条目的源位置。在 Emacs 22 之前的版本，mouse-1 也有这个功能。     <br>   RET      转到条目的源位置并删除其它的窗口。[15]                                         <br><br>  *改变显示方式*<br>   o               删除其他的窗口。                                                                                                                              <br>   d / w           切换到日/周视图。                                                                                                                             <br>   f 和 b          时间前移或者后移来显示随后的 org-agenda-current-span 天。例如，如果显示了一周的内容，切换到下/上一周。                                        <br>   .               转到今天。                                                                                                                                    <br>   j               询问日期并转到那天。                                                                                                                          <br>   v l 或简化为 l  触发日志模式（Logbook mode）。在日志模式中，当记录功能打开（变量 org-log-done）时标记为 DONE 的条目，以及在那天计时的条目，都会显示在议程中。 <br>   r 或 g          重新构造议程，以反映最新的状态。                                                                                                              <br>   s               保存当前 Emacs 会话的所有 Org 缓冲区和ID的地址。                                                                                              <br><br>  *二级筛选和查询编辑*<br><br>   `/&apos;  根据标签过滤当前的缓冲区。提示你输入一个字母选择一个标签。先按‘-’排除一个标签。 <br>   \    通过增加条件缩小当前议程的视图。[16]                                              <br><br><br>  *远程编辑（参考手册获得更多命令）*<br>   0-9                   数字参数。                                                                              <br>   t                     修改议程和 org 文件中的条目的TODO状态。                                                 <br>   C-k                   删除当前的议程条目以及源文件中它的整个子树。                                            <br>   C-c C-w               传送当前的条目。                                                                        <br>   C-c C-x C-a 或简作 a  用在 org-archive-default-command 中设置的默认归档命令对当前的条目对应的整个树进行归档。 <br>   C-c C-x C-s 或简作 $  归档当前标题对应的树。                                                                  <br>   C-c C-s               规划（Schedule）一个条目，带有前缀参数时删除规划时间戳。                                <br>   C-c C-d               为条目设置截止期限，带前缀时删除截止期限。                                              <br>   S-RIGHT 和 S-LEFT     将与当前行相关的时间戳改变一天。                                                        <br>   I                     对当前条目开始计时。                                                                    <br>   O / X                 暂停/取消最近开始的计时。                                                               <br>   J                     在另一个窗口中跳转到正在进行的计时。                                                    <br><br><br>10.5 定制议程视图<br>~~~~~~~~~~~~~~~~~<br><br>  自定义搜索的主要用途是对于频繁使用的搜索进行快捷键绑定，从而快捷地创建<br>  议程缓冲区或者稀疏树（当然后者只涵盖当前缓冲区的内容）。自定义的命令是<br>  用变量 org-agenda-custom-commands 来配置的。你可以用 C-c a C 来定制这<br>  个变量。也可以直接在 ”.emacs“ 中用 Emacs lisp 来设置。下面的例子包含<br>  了所有合法的搜索类型：<br>  ,----<br>  | (setq org-agenda-custom-commands<br>  |       &apos;((&quot;w&quot; todo &quot;WAITING&quot;)<br>  | (&quot;u&quot; tags &quot;+boss-urgent&quot;)<br>  | (&quot;v&quot; tags-todo &quot;+boss-urgent&quot;)))<br>  `----<br><br>  每个项的首字符串是使用调度器命令 C-c a 之后要给出的键以使用相应的命令。<br>  通常都是单个字符。第二个参数是搜索类型，接着是用来进行匹配的字符串或者<br>  正则表达式。上面的例子定义了：<br>   C-c a w  对于包含关键字 ”“ 的 TODO 项的全局搜索。                             <br>   C-c a u  对于带有标签 ”:boss:“ 而不含标签 ”:urgent:“ 的标题的全局标签搜索。 <br>   C-c a v  同搜索 C-c a u，但搜索范围只限于同时也是 TODO 项的标题。               <br><br>  *扩展阅读*<br>  手册第 10 章<br>  Mat Lundin’s tutorial about custom agenda commands<br>  John Wiegley’s setup<br><br><br>11 准备导出<br>===========<br><br>  当导出 Org 模式的文档时，导出器在后端（backend）尽可能准确地反映出文档<br>  的结构。由于所要导出的目标文档像 HTML，LaTeX 和 DocBook 具有丰富的格式，<br>  Org 为富导出（rich export）提供了一些规则。这节概述 Org 模式缓冲区中的<br>  准备规则。<br><br><br>11.1 结构的组成元素<br>~~~~~~~~~~~~~~~~~~~<br><br>  *文档标题*<br><br>  导出文件的标题在特定行给出：<br>  ,----<br>  | #+TITLE: This is the title of the document<br>  `----<br><br>  *标题和章节*<br><br>  第二章描述的大纲结构确定了导出文档的结构基础。然而由于大纲结构也用于<br>  （比如说）列表和任务，因此只有前三个级别用作标题。更深的级别会被看作项<br>  目列表。你可以通过变量 org-export-headline-levels 在全局设置这个开关，<br>  或者只是在单个文件中设置：<br>  ,----<br>  | #+OPTIONS: H:4<br>  `----<br><br>  *目录表*<br><br>  目录表通常会直接插入在文档第一个标题之前。<br>  ,----<br>  | #+OPTIONS: toc:2 (目录中只显示二级标题)<br>  | #+OPTIONS: toc:nil (无目录)<br>  `----<br><br>  *段落、分行和引用*<br><br>  段落之间至少要有一空行。如果你想实现段内分行，可以在行后加上“\\”。<br><br>  要想在一个区域内实现分行，而其他地方使用正常格式，你可以使用下面的构造，<br>  它也可以用来实现诗歌的格式：<br>  ,----<br>  | #+BEGIN_VERSE<br>  | , Great clouds overhead<br>  | , Tiny black birds rise and fall<br>  | , Snow covers Emacs<br>  | <br>  | ,     -- AlexSchroeder<br>  | #+END_VERSE<br>  `----<br><br>  当从另外一个文档中引用一段话时通过会让它左右都缩进。在 Org 文档中可以<br>  这样作引用：<br>  ,----<br>  | #+BEGIN_QUOTE<br>  | ,Everything should be made as simple as possible,<br>  | ,but not any simpler -- Albert Einstein<br>  | #+END_QUOTE<br>  `----<br><br>  如果你想让某些文本居中，可以这样：<br>  ,----<br>  | #+BEGIN_CENTER<br>  | ,Everything should be made as simple as possible, \\<br>  | ,but not any simpler<br>  | #+END_CENTER<br>  `----<br><br>  *强调和等宽*<br><br>  你可以让文字 *粗体* ， /斜体/ ， _下划线_ ， `代码&apos; ，以及 `逐文本&apos; ，<br>  如果必需，也可以&apos;+划掉+&apos;。代码和逐文本的字符串不会以Org模式的语法格式<br>  来处理，会被逐字输出。想要插入一个水平格尺[17]，用一个只含有破折号的行<br>  来实现，要求至少有5个破折号。<br><br>  *注释行*<br><br>  以‘#‘位于第 0 列的行会被看作注释，不会被导出。如果你想要一个缩进的行<br>  也被作为注释，用“#+”开头。另外以关键字 “COMMENT” 开头的子树整个树<br>  都不会被导出。最后，被 `“#+BEGIN_COMMENT“&apos; ... `”#+END_COMMENT”&apos;<br>  包围的整个区域也都不会被导出。<br><br>   C-c ;  在一个项的开头触发 COMMENT 关键字 <br><br><br>11.2 图片和表格<br>~~~~~~~~~~~~~~~<br><br>  对于 Org 模式的表格，以竖直线开头的行会成为表格的首行。你可以在表格前<br>  面用下面几行为表格指定标题和标签，以方便交叉引用，在文本中可以用<br>  `\ref&#123;tab:basic-data&#125;&apos; 来引用它：<br>  ,----<br>  | #+CAPTION: This is the caption for the next table (or link)<br>  | #+LABEL: tbl:basic-data<br>  | ,   | ... | ... |<br>  | ,   |-----+-----|<br>  `----<br><br>  一些后端（HTML，LaTeX，以及 DocBook）允许直接插入图片到导出的文档中。<br>  Org 也可以，只要图片的链接不含有描述部分就行了，例如：<br>  ,----<br>  | [[./img/a.jpg]]<br>  `----<br>  如果你希望为图片定义一个标题，或者一个标签方便内部交叉引用，可以让图片<br>  单独一行，在前面加上：<br><br>  ,----<br>  | #+CAPTION: This is the caption for the next figure link (or table)<br>  | #+LABEL: fig:SED-HR4049<br>  | [[./img/a.jpg]]<br>  `----<br><br>  你也可以为图形指定一些其他的特性。但由于这与后端[18]密切相关，可以参考<br>  关于特定后端的章节获得详细信息。<br><br><br>11.3 纯文本的例子<br>~~~~~~~~~~~~~~~~~<br><br>  你可以包含进来一些纯文本的例子，这不属于准备的范畴。这些例子会等宽排版，<br>  所以适用于代码以及其他类似的情况：<br>  ,----<br>  | #+BEGIN_EXAMPLE<br>  | ,Some example from a text file.<br>  | #+END_EXAMPLE<br>  `----<br><br>  为了简单化，一些小型的例子也可以将各行以冒号开头。冒号前面可以有空格：<br>  ,----<br>  | ,Here is an example<br>  | ,   : Some example from a text file.<br>  `----<br><br>  对于一些程序设计语言的源代码以及一些其他的文本，可以被 Emacs 的字体锁<br>  （font-lock）特殊标记，你也可以让它们像在Emacs的缓冲区中那样显示：<br>  ,----<br>  | #+BEGIN_SRC emacs-lisp<br>  | ,(defun org-xor (a b)<br>  | ,   &quot;Exclusive or.&quot;<br>  | ,   (if a (not b) b))<br>  | #+END_SRC<br>  `----<br><br>  为了能在支持这种语言的专门的缓冲区中编辑例子，可以用 C-c , 启动和退出<br>  编辑缓冲区。<br><br><br>11.4 包含文件<br>~~~~~~~~~~~~~<br><br>  当导出文档时，你可以包含其他文件中的内容。比如，想包含你的“.emacs”文<br>  件，你可以用：<br>  ,----<br>  | ,      #+INCLUDE: &quot;~/.emacs&quot; src emacs-lisp<br>  `----<br><br>  可选的第二个第三个参数是组织方式（例如，“quote”，“example”，或者<br>  “src”），如果是 “src”，语言用来格式化内容。组织方式是可选的，如果<br>  不给出，文本会被当作 Org 模式的正常处理。用 C-c ,可以访问包含的文件。<br><br><br>11.5 嵌入 LaTex<br>~~~~~~~~~~~~~~~<br><br>  对于需要包含数学符号和特殊方程的科学笔记，Org 模式支持嵌入 LaTeX 代码<br>  到文件中。你可以直接使用类 TeX 的宏来输入特殊符号，输入方程，或者整个<br>  LaTeX 环境。<br>  ,----<br>  | ,Angles are written as Greek letters \alpha, \beta and \gamma. The mass if<br>  | ,the sun is M_sun = 1.989 x 10^30 kg. The radius of the sun is R_&#123;sun&#125; =<br>  | ,6.96 x 10^8 m. If $a^2=b$ and $b=2$, then the solution must be either<br>  | ,$a=+\sqrt&#123;2&#125;$ or $a=-\sqrt&#123;2&#125;$.<br>  | <br>  | ,\begin&#123;equation&#125;<br>  | ,x=\sqrt&#123;b&#125;<br>  | ,\end&#123;equation&#125;<br>  `----<br><br>  特殊设置之后，导出 HTML 时 LaTeX 代码片断会生成图片并包含进来。<br><br>  *扩展阅读*<br>  手册第11章<br><br><br>12 导出<br>=======<br><br>  Org模式文档可以导出成多种格式：ASCII 用于包含在邮件中；HTML 用来发布到<br>  网页上；LaTeX/PDF 用来打印出漂亮的文档；DocBook 通过DocBook工具转换成<br>  其他各种各样的格式。也可以导出成 iCalendar 格式，将计划信息并入到桌面<br>  日历中。<br><br><br>12.1 导出选项<br>~~~~~~~~~~~~~<br><br>  导出器能识别缓冲区中提供附加信息的特殊行。这样行可以放在文件中的任何地<br>  方。整个集合可以用 C-c C-e t 插入到缓冲区中。<br>   C-c C-c t  插入导出选项模板，见下面的例子 <br><br>  ,----<br>  | #+TITLE:       the title to be shown (default is the buffer name)<br>  | #+AUTHOR:      the author (default taken from user-full-name)<br>  | #+DATE:        a date, fixed, of a format string for format-time-string<br>  | #+EMAIL:       his/her email address (default from user-mail-address)<br>  | #+DESCRIPTION: the page description, e.g. for the XHTML meta tag<br>  | #+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag<br>  | #+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)<br>  | #+TEXT:        Some descriptive text to be inserted at the beginning.<br>  | #+TEXT:        Several lines may be given.<br>  | #+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...<br>  | #+LINK_UP:     the ``up&apos;&apos; link of an exported page<br>  | #+LINK_HOME:   the ``home&apos;&apos; link of an exported page<br>  | #+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage&#123;xyz&#125;<br>  `----<br><br><br>12.2 导出调度器<br>~~~~~~~~~~~~~~~<br><br>  所有的导出命令都可以通过导出调度器来使用，调度器是一个前缀快捷键，它会<br>  提示输入一个字母来指定命令。通常整个文件都会被导出，但是如果选中区域包<br>  含大纲树，就会导出大纲树，并以第一个标题作为文件标题。<br><br>   C-c C-e  用来导出和发布的调度器 <br><br><br>12.3 ASCII/Latin-1/UTF-8 的导出<br>~~~~~~~~~<br></code></pre></td></tr></table></figure></p><p>  ASCII导出功能能给 Org 文件提供的一个简单易读的版本，它只包含纯 ASCII<br>  文本。Latin-1 和 UTF-8 导出用它们能编码的特殊字符扩展了文件的功能。<br>   C-c C-e a               导出 ASCII 文件<br>   C-c C-e n 和 C-c C-e N  和上面的命令一样，但是用 Latin-1 编码[19]<br>   C-c C-e u 和 C-c C-e U  和上面的命令一样，但是用 UTF-8 编码       </p><p>12.4 HTML的导出<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>   C-c C-e h  导出 HTML 文件               <br>   C-c C-e b  导出 HTML 文件并用浏览器打开 <br><br>  想要将 HTML 以纯文本方式复制到导出文件，可以：<br>  ,----<br>  | #+HTML: Literal HTML code for export<br>  `----<br>  或者<br>  ,----<br>  | #+BEGIN_HTML<br>  | All lines between these markers are exported literally<br>  | #+END_HTML<br>  `----<br><br><br>12.5 LaTeX和PDF的导出<br>~~~~~~<br></code></pre></td></tr></table></figure></p><p>   C-c C-e l  导出 LaTeX 文件<br>   C-c C-e p  导出 LaTeX 文件，并处理成 PDF 文件<br>   C-c C-e d  导出 LaTeX 文件，处理成 PDF 文件，并打开 </p><p>  默认，LaTeX输出是使用article类型。但你可以在文件中通过选项<br>  `#+LaTeX_CLASS: myclass’ 来改变，但类型必须是 org-export-latex-classes<br>  中列出的。</p><p>  第 11.5 节撰述的内嵌的 LaTeX 可以正确地插入到 LaTeX 文件中。跟 HTML 导<br>  出器相似，也可以通过 <code>#+LaTeX:&#39; 和</code>#+BEGIN_LaTeX … #+END_LaTeX’ 来<br>  加入纯文本的 LaTex 代码。</p><p>12.6 DocBook的导出<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>   C-c C-e D  导出 DocBook 文件 <br><br>  跟 HTML 导出器相似，也可以通过 `#+DocBook:&apos; 和 `#+BEGIN_DocBook<br>  ... #+END_DocBook&apos; 结构来加入纯文本的 DocBook 代码。[20]<br><br><br>12.7 iCalendar的导出<br>~~<br></code></pre></td></tr></table></figure></p><p>   C-c C-e i  在一个 “.ice” 文件中为当前文件创建 iCalendar 项。<br>   C-c C-e c  从 org-agenda-files 中的所有文件创建一个较大的 iCalendar 文件，并写入到 org-combined-agenda-icalendar-file 指定的文件中。 </p><p>  <em>扩展阅读</em><br>  手册第12章<br>  Sebastian Rose’s image handling tutorial<br>  Thomas Dye’s LaTeX export tutorial Eric Fraga’s BEAMER presentation<br>  tutorial</p><h1 id="13-发布"><a href="#13-发布" class="headerlink" title="13 发布"></a>13 发布</h1><p>  Org 包含一个发布管理系统，可以配置一个由相互链接的 Org 文件组成的工程<br>  项目的自动向 HTML 转换。你也可以设置 Org，将导出的 HTML 页面和相应的附<br>  件如图片，源代码文件等自动上传到服务器。如何设置，详见手册。</p><p>  下面是一个例子：<br>  ,—-<br>  | (setq org-publish-project-alist<br>  |       ‘((“org”<br>  |      :base-directory “~/org/“<br>  |      :publishing-directory “~/public_html”<br>  |      :section-numbers nil<br>  |      :table-of-contents nil<br>  |      :style “<link rel="\" stylesheet\"" | href="\" .. other mystyle.css\"" type="\" text css\" ">“)))<br>  `—-</p><p>   C-c C-e C  提示指明一个项目，将所有的文件发布。<br>   C-c C-e P  发布包含当前文件的项目。<br>   C-c C-e F  只发布当前文件。<br>   C-c C-e E  发布所有项目。                       </p><p>  Org 用时间戳来查看文件是否改变。上面的命令只发布修改过的文件。你可以给<br>  它们加上前缀来强制重新发布所有的文件。</p><p>  <em>扩展阅读</em><br>  手册第 1 章<br>  Sebastian Rose’s publishing tutorial<br>  Ian Barton’s Jekyll/blogging setup</p><h1 id="14-处理源代码"><a href="#14-处理源代码" class="headerlink" title="14 处理源代码"></a>14 处理源代码</h1><p>  Org模式提供了一系列功能来处理源代码，包括源代码块的本地主模式编辑，代<br>  码块的运行(evaluation)，代码块的混合，以及以多种方式导出代码块和它们的<br>  结果。</p><p>  <em>代码块的结构</em></p><p>  代码块的结构就像下面这样：<br>  ,—-<br>  | #+srcname: <name><br>  | #+begin_src <language> <switches> <header arguments><br>  | ,  <body><br>  | #+end_src<br>  `—-</body></header></switches></language></name></p><p>  其中<name>是代码块的名称，<language>指定代码块的语言（例如，emacs-lisp，<br>  shell，R，python，等等），<switches>用以控制代码块的导出，<header arguments>用来从多个方面控制代码块的行为，下面会详述，最后<body>是我们<br>  要写的代码。<script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/shizuku.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false});</script></body></header></switches></language></name></p><p>  <em>编辑源代码</em></p><p>  使用C-c ,[21] 来编辑当前代码块。这个命令会新开一个以代码语言为主模式并<br>  包含代码的缓冲区（buffer）。保存这个缓冲区，会将新的内容写回Org缓冲区。<br>  再次使用C-c , 退出这个缓冲区。</p><p>  <em>运行代码块</em></p><p>  用 C-c C-c 运行当前代码块并将它们的结果插入 Org 缓冲区中。默认情况下，<br>  运行功能只对 emacs-lisp 代码块开启，但支持多种语言。所支持语言的完整列<br>  表见手册。下面是一个代码块和它的结果。<br>  ,—-<br>  | #+begin_src emacs-lisp<br>  | ,  (+ 1 2 3 4)<br>  | #+end_src<br>  |<br>  | #+results:<br>  | ,: 10<br>  `—-</p><p>  <em>抽取源代码</em></p><p>  用 C-c C-v 将代码块从一个 Org 模式的文件中抽取到“杂货库”（Library of<br>  Babel）中，这样在所有的 Org 模式的缓冲区中都可以运行该代码。一个常用的<br>  代码块集合在 contrib/library-of-babel.org 中随 Org 一直发布。</p><p>  <em>头参数</em></p><p>  运行和导出代码时的很多选项都通过头参数来设置。选项可以指定为全局的，文<br>  件级别的，大纲子树级别的，或者只是用于一个代码块。下面解释部分头参数。<br>   :var      :var头参数用来将参数传递给代码块。能用来传递给参数的值可以是直接量，org模式表格中的值，文字实例块(literal example blocks)中的值，或者一个已命名代码块的结果。<br>   :results  :result头参数控制代码块结果的收集、类型和处理。output和value（默认）的值指定怎样在运行代码块时收集结果。vector，scalar，file， raw， html， latex 和 code的值指定代码块结果的类型并以此确定将结果并入Org缓冲区的方式。silent， replace， prepend和 append指定处理代码块结果的方式，明确是否以及如何将结果插入Org缓冲区中。<br>   :session  :session头参数将会使代码块在Emacs的一个持续交互的底层进程（persistent interactive inferior process）中执行。这考虑到了代码运行的持续状态和运行结果的人工检查。<br>   :exports  代码和块结果的任何组合在导出时都可以保持，这可以通过设置:results头参数为code results none或者both来指定。<br>   :tangle   头参数:tangle yes将使代码块的内容到保存到一个以Org模式缓冲区命名的文件中。也可以通过:tangle filename指明文件名。<br>   :cache    头参数:cache yes将使繁杂的代码块和结果关联，确保输入改变时代码块重运行。<br>   :noweb    头参数:noweb将扩展运行和混合时的”noweb“样式的引用。<br>   :file     将代码块结果输出到文件时（比如，图形，表格，图表）可以用头参数:file filename，结果会被保存至指定的文件中，在Org缓冲区中插入一个到该文件的链接。                                                                                                                                                                            </p><p>  <em>扩展阅读</em><br>  手册第 11.3 节<br>  The Babel site on Worg</p><h1 id="15-杂项"><a href="#15-杂项" class="headerlink" title="15 杂项"></a>15 杂项</h1><p>15.1 补全<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br>  Org 支持用 M-TAB 进行缓冲区内部的补全。这种补全不需要利用 minibuffer。<br>  你只需要键入几个字母然后用快捷键在原位补全。例如，这个命令可以在‘\’<br>  后面补全 TeX 符号，在标题的开头补全 TODO 关键字，在‘:’之后补全标签。<br><br><br>15.2 一个更清晰的大纲视图<br>~~~~~~~~~~~~~~~~<br></code></pre></td></tr></table></figure></p><p>  当 Org 标题含有很多星号并且标题下面的文字不缩进时，就会显得杂乱无章。<br>  当写一个图书结构的文件时，大纲标题就是实际章节的标题，基于列表机大纲，<br>  上面的问题就不会再有，缩进的结构也会更清晰：<br>  ,—-<br>  | <em> Top level headline<br>  | <strong> Second level<br>  | </strong></em> 3rd level<br>  | ,some text<br>  | <em>** 3rd level<br>  | ,more text<br>  | </em> Another top level headline<br>  `—-</p><p>  如果你用的 Emacs 23.1.50.3 和 Org 6.29 的更高版本，这种视图可以用<br>  org-indent-mode 模式动态地实现，它会在每行前面加上一些前导空格。你可以<br>  通过设置变量 org-startup-indented 为所有的文件打开 org-indent-mode 模<br>  式，或者用<br>  ,—-<br>  | #+STARTUP: indent<br>  `—-</p><p>  为单个文件打开缩进。如果你想在 Emacs 或者 Org 的早期版本中实现同样的效<br>  果，或者想让缩进用硬空格符号，以使得纯文本文件看起来一样。Org 可以缩进<br>  标题下面的文本（用TAB）;隐藏标题中的星号;只使用一级、三级等标题来为每<br>  级实现两个字符的缩进，从而实现这个功能。为了使这个特性在文件中支持，用：<br>  ,—-<br>  | #+STARTUP: hidestars odd<br>  `—-</p><p>15.3 MobileOrg<br><del>~</del><del>~</del>~~~~</p><p>  MobileOrg 最初是由 Richard Moreland 为 iPhone/iPod Touch 系列设备开发<br>  的应用程序。Matt Jones也为Android设备独立实现了一个版本。详见Org手册。</p><hr><p>  本文的英文原文是 Org 主页上的一篇简短手册（ [The compact Org-mode<br>  Guide] ）。另外：</p><ul><li>本文的脚注是双向链接的，你可以大胆地查看脚注而不用担心如何再定位到原<br>文。</li><li>我不知道如何在引用的源代码中加脚注，如果你知道，希望你能告诉我。</li><li>我不知道如果在表格中正确显示‘|’，如果你知道，希望你能告诉我。</li><li><p>本文可能有错误，如果发现错误，请在评论中给出。</p><p>返回</p></li></ul><p>  [The compact Org-mode Guide] <a href="http://orgmode.org/guide/index.html" target="_blank" rel="noopener">http://orgmode.org/guide/index.html</a></p><p>Footnotes</p><hr><p>[1] 见说明。</p><p>[2] 当然你也可以专门用一个文件来记录待办事项，但这不是必需的。</p><p>[3] 对应的buffer中的设置是：#+STARTUP: logdone</p><p>[4] 对应的buffer中的设置是：#+STARTUP: lognotedone</p><p>[5] 跟所有的缓冲区内设置一样，用C-c C-c 使行中的改变生效。</p><p>[6] 这跟通常意义上的 /安排一个会议/ （ /scheduling a meeting/ ）不同，<br>后者只要在Org模式中插入一个不带关键字的时间戳就行了。</p><p>[7] 即使被标记为 DONE，在指定日期它依然会列在议程中。如果你不希望这样<br>可以用变量 org-agenda-skip-scheduled-if-done 来设置。</p><p>[8] 截取位置是指保存截取信息的文件地址。</p><p>[9] 使用捕获模板，可以定义更细致的捕获地址，见[Capture templates]。</p><p>[10] 请设置你自己的快捷键，C-c c 只是一个建议。</p><p>[11] 这个表格实在翻译不通，以后再说吧。</p><p>[12] 注意，后两行中参数的顺序（月，日，年）依赖于 calendar-date-style<br>的设置。</p><p>[13] 原文是 C-p 有误。</p><p>[14] 原文是 C-n，有误。</p><p>[15] 在视图缓冲区的位置直接打开源位置，可能是版本的问题，并不删除其他<br>的窗口。</p><p>[16] 不知道为什么我的版本不识别这个命令。</p><p>[17] 分隔线</p><p>[18] （backend，导出目标）</p><p>[19] 可能是版本的问题，这个命令和下面的命令在我的机器上没有。</p><p>[20] 原文说是 LaTeX 代码，有误。</p><p>[21] 前面的逗号是命令的一部分，下同。</p>]]></content>
      
      
      <categories>
          
          <category> emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> org-mode </tag>
            
            <tag> gtd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/03/25/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84Org-mode/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84Org-mode/"/>
      <url>/2020/03/25/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84Org-mode/%E7%9B%B8%E8%A7%81%E6%81%A8%E6%99%9A%E7%9A%84Org-mode/</url>
      
        <content type="html"><![CDATA[<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><title>Org-mode 简明手册(转载)</title><!-- 2020-03-25 周三 14:13 --><meta http-equiv="Content-Type" content="text/html;charset=utf-8"><meta name="generator" content="Org-mode"><meta name="author" content="神秘人"><meta name="keywords" content="Emacs"><style type="text/css"> <!--/*--><![CDATA[/*><!--*/  .title  { text-align: center; }  .todo   { font-family: monospace; color: red; }  .done   { color: green; }  .tag    { background-color: #eee; font-family: monospace;            padding: 2px; font-size: 80%; font-weight: normal; }  .timestamp { color: #bebebe; }  .timestamp-kwd { color: #5f9ea0; }  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }  .center { margin-left: auto; margin-right: auto; text-align: center; }  .underline { text-decoration: underline; }  #postamble p, #preamble p { font-size: 90%; margin: .2em; }  p.verse { margin-left: 3%; }  pre {    border: 1px solid #ccc;    box-shadow: 3px 3px 3px #eee;    padding: 8pt;    font-family: monospace;    overflow: auto;    margin: 1.2em;  }  pre.src {    position: relative;    overflow: visible;    padding-top: 1.2em;  }  pre.src:before {    display: none;    position: absolute;    background-color: white;    top: -10px;    right: 10px;    padding: 3px;    border: 1px solid black;  }  pre.src:hover:before { display: inline;}  pre.src-sh:before    { content: 'sh'; }  pre.src-bash:before  { content: 'sh'; }  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }  pre.src-R:before     { content: 'R'; }  pre.src-perl:before  { content: 'Perl'; }  pre.src-java:before  { content: 'Java'; }  pre.src-sql:before   { content: 'SQL'; }  table { border-collapse:collapse; }  caption.t-above { caption-side: top; }  caption.t-bottom { caption-side: bottom; }  td, th { vertical-align:top;  }  th.right  { text-align: center;  }  th.left   { text-align: center;   }  th.center { text-align: center; }  td.right  { text-align: right;  }  td.left   { text-align: left;   }  td.center { text-align: center; }  dt { font-weight: bold; }  .footpara:nth-child(2) { display: inline; }  .footpara { display: block; }  .footdef  { margin-bottom: 1em; }  .figure { padding: 1em; }  .figure p { text-align: center; }  .inlinetask {    padding: 10px;    border: 2px solid gray;    margin: 10px;    background: #ffffcc;  }  #org-div-home-and-up   { text-align: right; font-size: 70%; white-space: nowrap; }  textarea { overflow-x: auto; }  .linenr { font-size: smaller }  .code-highlighted { background-color: #ffff00; }  .org-info-js_info-navigation { border-style: none; }  #org-info-js_console-label    { font-size: 10px; font-weight: bold; white-space: nowrap; }  .org-info-js_search-highlight    { background-color: #ffff00; color: #000000; font-weight: bold; }  /*]]>*/--></style><script type="text/javascript">/*@licstart  The following is the entire license notice for theJavaScript code in this tag.Copyright (C) 2012-2013 Free Software Foundation, Inc.The JavaScript code in this tag is free software: you canredistribute it and/or modify it under the terms of the GNUGeneral Public License (GNU GPL) as published by the Free SoftwareFoundation, either version 3 of the License, or (at your option)any later version.  The code is distributed WITHOUT ANY WARRANTY;without even the implied warranty of MERCHANTABILITY or FITNESSFOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.As additional permission under GNU GPL version 3 section 7, youmay distribute non-source (e.g., minimized or compacted) forms ofthat code without the copy of the GNU GPL normally required bysection 4, provided you include this license notice and a URLthrough which recipients can access the Corresponding Source.@licend  The above is the entire license noticefor the JavaScript code in this tag.*/<!--/*--><![CDATA[/*><!--*/ function CodeHighlightOn(elem, id) {   var target = document.getElementById(id);   if(null != target) {     elem.cacheClassElem = elem.className;     elem.cacheClassTarget = target.className;     target.className = "code-highlighted";     elem.className   = "code-highlighted";   } } function CodeHighlightOff(elem, id) {   var target = document.getElementById(id);   if(elem.cacheClassElem)     elem.className = elem.cacheClassElem;   if(elem.cacheClassTarget)     target.className = elem.cacheClassTarget; }/*]]>*///--></script></head><body><div id="content"><h1 class="title">Org-mode 简明手册(转载)</h1><div id="table-of-contents"><h2>Table of Contents</h2><div id="text-table-of-contents"><ul><li><a href="#sec-1">1. 简介</a><ul><li><a href="#sec-1-1">1.1. 序</a></li><li><a href="#sec-1-2">1.2. 安装</a></li><li><a href="#sec-1-3">1.3. 激活</a></li><li><a href="#sec-1-4">1.4. 反馈</a></li></ul></li><li><a href="#sec-2">2. 文档结构</a><ul><li><a href="#sec-2-1">2.1. 大纲</a></li><li><a href="#sec-2-2">2.2. 标题</a></li><li><a href="#sec-2-3">2.3. 视图循环</a></li><li><a href="#sec-2-4">2.4. 移动</a></li><li><a href="#sec-2-5">2.5. 结构编辑</a></li><li><a href="#sec-2-6">2.6. 稀疏树</a></li><li><a href="#sec-2-7">2.7. 文本列表</a></li><li><a href="#sec-2-8">2.8. 脚注</a></li></ul></li><li><a href="#sec-3">3. 表格</a></li><li><a href="#sec-4">4. 超链接</a><ul><li><a href="#sec-4-1">4.1. 链接格式</a></li><li><a href="#sec-4-2">4.2. 内部链接</a></li><li><a href="#sec-4-3">4.3. 外部链接</a></li><li><a href="#sec-4-4">4.4. 使用链接</a></li><li><a href="#sec-4-5">4.5. 目标链接</a></li></ul></li><li><a href="#sec-5">5. 待办事项</a><ul><li><a href="#sec-5-1">5.1. 使用TODO状态</a></li><li><a href="#sec-5-2">5.2. 多状态工作流程</a></li><li><a href="#sec-5-3">5.3. 进度日志</a></li><li><a href="#sec-5-4">5.4. 优先级</a></li><li><a href="#sec-5-5">5.5. 任务细分</a></li><li><a href="#sec-5-6">5.6. 复选框</a></li></ul></li><li><a href="#sec-6">6. 标签</a><ul><li><a href="#sec-6-1">6.1. 标签继承</a></li><li><a href="#sec-6-2">6.2. 设置标签</a></li><li><a href="#sec-6-3">6.3. 标签查找</a></li></ul></li><li><a href="#sec-7">7. 属性</a><ul><li><a href="#sec-7-1">7.1. 扩展阅读</a></li></ul></li><li><a href="#sec-8">8. 日期和时间</a><ul><li><a href="#sec-8-1">8.1. 时间戳</a></li><li><a href="#sec-8-2">8.2. 创建时间戳</a></li><li><a href="#sec-8-3">8.3. 截止期限和计划安排</a></li><li><a href="#sec-8-4">8.4. 记录工作时间</a></li></ul></li><li><a href="#sec-9">9. 捕获——转发——存档</a><ul><li><a href="#sec-9-1">9.1. 捕获</a></li><li><a href="#sec-9-2">9.2. 转送笔记</a></li><li><a href="#sec-9-3">9.3. 归档</a></li></ul></li><li><a href="#sec-10">10. 议程视图</a><ul><li><a href="#sec-10-1">10.1. 议程文件</a></li><li><a href="#sec-10-2">10.2. 议程调度器</a></li><li><a href="#sec-10-3">10.3. 内建议程视图</a><ul><li><a href="#sec-10-3-1">10.3.1. 周/日议程</a></li><li><a href="#sec-10-3-2">10.3.2. 全局TODO列表</a></li><li><a href="#sec-10-3-3">10.3.3. 匹配标签和属性</a></li><li><a href="#sec-10-3-4">10.3.4. 单文件时间轴</a></li><li><a href="#sec-10-3-5">10.3.5. 查找视图</a></li></ul></li><li><a href="#sec-10-4">10.4. 议程缓冲区的命令</a></li><li><a href="#sec-10-5">10.5. 定制议程视图</a></li></ul></li><li><a href="#sec-11">11. 准备导出</a><ul><li><a href="#sec-11-1">11.1. 结构的组成元素</a></li><li><a href="#sec-11-2">11.2. 图片和表格</a></li><li><a href="#sec-11-3">11.3. 纯文本的例子</a></li><li><a href="#sec-11-4">11.4. 包含文件</a></li><li><a href="#sec-11-5">11.5. 嵌入 LaTex</a></li></ul></li><li><a href="#sec-12">12. 导出</a><ul><li><a href="#sec-12-1">12.1. 导出选项</a></li><li><a href="#sec-12-2">12.2. 导出调度器</a></li><li><a href="#sec-12-3">12.3. ASCII/Latin-1/UTF-8 的导出</a></li><li><a href="#sec-12-4">12.4. HTML的导出</a></li><li><a href="#sec-12-5">12.5. LaTeX和PDF的导出</a></li><li><a href="#sec-12-6">12.6. DocBook的导出</a></li><li><a href="#sec-12-7">12.7. iCalendar的导出</a></li></ul></li><li><a href="#sec-13">13. 发布</a></li><li><a href="#sec-14">14. 处理源代码</a></li><li><a href="#sec-15">15. 杂项</a><ul><li><a href="#sec-15-1">15.1. 补全</a></li><li><a href="#sec-15-2">15.2. 一个更清晰的大纲视图</a></li><li><a href="#sec-15-3">15.3. MobileOrg</a></li></ul></li></ul></div></div><div id="outline-container-sec-1" class="outline-2"><h2 id="sec-1"><span class="section-number-2">1</span> 简介<sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup></h2><div class="outline-text-2" id="text-1"></div><div id="outline-container-sec-1-1" class="outline-3"><h3 id="sec-1-1"><span class="section-number-3">1.1</span> 序</h3><div class="outline-text-3" id="text-1-1"><p>Org 是一个用文本方式来快速高效地做笔记、维持待办事项和做项目计划的模式。它是一个创作发布系统。</p><p><i>这个文档是 Org-mode 手册的一个压缩版本。包含了所有的基本功能和命令，以及一些重要的定制提示。本文档写给不想阅读200多页手册的新手。</i></p></div></div><div id="outline-container-sec-1-2" class="outline-3"><h3 id="sec-1-2"><span class="section-number-3">1.2</span> 安装</h3><div class="outline-text-3" id="text-1-2"><p><b>重要：</b> <i>如果你用的是 Emacs 或者 XEmacs 包里的 Org 版本，请跳过本节，直接阅读 1.3 节。</i></p><p>   如果你是从网站上下载的 Org 版本，无论是 zip 包还是 tar 文件或者是 Git 文件，最好在分发包目录里直接来设置它。把 lisp 子目录加到 Emacs 的加载路径里，可以把下面两句加在 “.emacs” 文件里：#+srcname 1<sub>1</sub></p><div class="org-src-container"><pre class="src src-emacs-lisp">(setq load-path (cons "~/path/to/orgdir/lisp" load-path))(setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))</pre></div><p>为了提高速度可以用下面的 shell 命令将 Lisp 文件编译一下：#+srcname 1<sub>2</sub></p><div class="org-src-container"><pre class="src src-sh">make</pre></div><p>再把下面一行加到 .emacs 文件里。它可以使文件中的函数自动加载，而不是启动 Org 模式时立即加载。#+srcname 1<sub>3</sub></p><div class="org-src-container"><pre class="src src-emacs-lisp">(require 'org-install)</pre></div></div></div><div id="outline-container-sec-1-3" class="outline-3"><h3 id="sec-1-3"><span class="section-number-3">1.3</span> 激活</h3><div class="outline-text-3" id="text-1-3"><p>   把下面几行加到 .emacs 文件里。后三行是为命令定义全局快捷键――请改成适合你自己的。#+srcname 1<sub>4</sub></p><div class="org-src-container"><pre class="src src-emacs-lisp">;; The following lines are always needed. Choose your own keys.(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))(add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on(global-set-key "\C-cl" 'org-store-link)(global-set-key "\C-ca" 'org-agenda)(global-set-key "\C-cb" 'org-iswitchb)</pre></div><p>设置之后，打开 .org 扩展的文件会自动进入 org 模式。</p></div></div><div id="outline-container-sec-1-4" class="outline-3"><h3 id="sec-1-4"><span class="section-number-3">1.4</span> 反馈</h3><div class="outline-text-3" id="text-1-4"><p>如果你发现了问题，或者有问题评论或新想法，可以给Org的邮件列表 <i>emacs-orgmode@gnu.org</i> 发邮件。了解更多信息或者提交 bug，参见手册。</p></div></div></div><div id="outline-container-sec-2" class="outline-2"><h2 id="sec-2"><span class="section-number-2">2</span> 文档结构</h2><div class="outline-text-2" id="text-2"><p>Org是基于Outline模式的，它提供了更灵活的编辑结构文件的命令。</p></div><div id="outline-container-sec-2-1" class="outline-3"><h3 id="sec-2-1"><span class="section-number-3">2.1</span> 大纲</h3><div class="outline-text-3" id="text-2-1"><p>Org 是在大纲模式之上实现的。大纲模式可以让我们用层次结构来组织文档，这（至少对我来说）是笔记和想法的最好实现方式。这种结构可以折叠（隐藏）文档的一部分而只显示文档的大概结构或者只显示我们正在处理的部分。Org 大大简化了大纲模式的使用，它把大纲模式的整个显示/隐藏功能整合到了一个命令中：org-cycle，这个命令绑定到了TAB键上。</p></div></div><div id="outline-container-sec-2-2" class="outline-3"><h3 id="sec-2-2"><span class="section-number-3">2.2</span> 标题</h3><div class="outline-text-3" id="text-2-2"><p>标题定义了大纲树的结构。它以处于一行左边缘的一个或多个星号开头。例如：</p><div class="org-src-container"><pre class="src src-org">* Top level headline** Second level*** 3rd level,    some text*** 3rd level,    more text* Another top level headline</pre></div><p>如果你不喜欢太多的星号，可以以空格后加一个星号作为标题的开头。查看 15.2 节 [Clean view]，那里有设置方法。</p></div></div><div id="outline-container-sec-2-3" class="outline-3"><h3 id="sec-2-3"><span class="section-number-3">2.3</span> 视图循环</h3><div class="outline-text-3" id="text-2-3"><p>大纲模式可以隐藏缓冲区里的部分正文。Org 用绑定到 TAB 和 S-TAB 上的两个全命令来改变视图。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">TAB</td><td class="left">子树循环：当加上一个前缀参数时（C-u TAB），在下面的状态中改变当前子树的视图</td></tr><tr><td class="left">&#xa0;</td><td class="left">FOLDED -&gt; CHILDREN -&gt; SUBTREE</td></tr><tr><td class="left">&#xa0;</td><td class="left">当加上shift键时会触发全局的视图循环。</td></tr><tr><td class="left">&#xa0;</td><td class="left">&#xa0;</td></tr><tr><td class="left">S-TAB和C-u TAB</td><td class="left">全局循环：使整个缓冲区在下列状态中循环</td></tr><tr><td class="left">&#xa0;</td><td class="left">OVERVIEW -&gt; CONTENTS -&gt; SHOWALL</td></tr><tr><td class="left">&#xa0;</td><td class="left">&#xa0;</td></tr><tr><td class="left">C-u C-u C-u TAB</td><td class="left">显示全部，包括drawers。</td></tr></tbody></table><p>   当 Emacs 刚打开文件时，全局的状态是 OVERVIEW，也即只有顶层的标题可见。这可以通过变量 org-startup-folded 来设置。也可以通过 startup 关键字设置只对单个文件有效：#+srcname 2<sub>2</sub></p><div class="org-src-container"><pre class="src src-org">#+STARTUP: content</pre></div></div></div><div id="outline-container-sec-2-4" class="outline-3"><h3 id="sec-2-4"><span class="section-number-3">2.4</span> 移动</h3><div class="outline-text-3" id="text-2-4"><p>下面的命令可以跳转到缓冲区其他的标题。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-n</td><td class="left">下个标题</td></tr><tr><td class="left">C-c C-p</td><td class="left">上个标题</td></tr><tr><td class="left">C-c C-f</td><td class="left">下个同级的标题</td></tr><tr><td class="left">C-c C-b</td><td class="left">上个同级的标题</td></tr><tr><td class="left">C-c C-u</td><td class="left">回到上层标题</td></tr></tbody></table></div></div><div id="outline-container-sec-2-5" class="outline-3"><h3 id="sec-2-5"><span class="section-number-3">2.5</span> 结构编辑</h3><div class="outline-text-3" id="text-2-5"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">M-RET</td><td class="left">插入一个同级标题。如果光标在文本列表中，创建一个新的项（见 2.7 节 [Plain lists]）。如果处于一行的中间，这一行会被分开，后面的一部分成为新的标题。</td></tr><tr><td class="left">M-S-RET</td><td class="left">插入一个和当前标题同级的 TODO 项</td></tr><tr><td class="left">TAB（新的空的条目中）</td><td class="left">如果新的条目中还没有文字，TAB 会调整到合适的级别。</td></tr><tr><td class="left">M-LEFT/RIGHT</td><td class="left">将当前的标题提升/降低一个等级。</td></tr><tr><td class="left">M-S-LEFT/RIGHT</td><td class="left">将当前子提升/降低一个等级。</td></tr><tr><td class="left">M-S-UP/DOWN</td><td class="left">将子树上/下移（和前/后个子树交换）。</td></tr><tr><td class="left">C-c C-w</td><td class="left">将条目或区域传送到另一个文件中。见 9.2 节 [Refiling notes]。</td></tr><tr><td class="left">C-x n s/w</td><td class="left">将缓冲区视图局限到当前子树中/再次放宽视图</td></tr></tbody></table><p>如果有活动区域（暂时标记状态），提升和降低功能将会对区域中的所有标题起作用。</p></div></div><div id="outline-container-sec-2-6" class="outline-3"><h3 id="sec-2-6"><span class="section-number-3">2.6</span> 稀疏树</h3><div class="outline-text-3" id="text-2-6"><p>Org 模式的一个重要的功能是能根据大纲树中选择的信息构造出稀疏的树，这样文档就可以尽可能地折叠，但是选择的信息和它对应的标题会显示出来。试下就知道它是怎样工作的了。</p><p>Org 模式有几个命令可以创建这种树，这些命令都可以通过调度器来使用：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c /</td><td class="left">它会提示再输入一个字符来选择稀疏树的创建命令。</td></tr><tr><td class="left">C-c / r</td><td class="left">触发后，会提示输入匹配串，并且将所有匹配的项显示成稀疏树。所有的匹配项都会高亮显示；按 C-c C-c 取消高亮。</td></tr></tbody></table><p>其他的基于 TODO 关键字、标签或属性来选择标题的稀疏树命令，我们会在本手册的后面讨论。</p></div></div><div id="outline-container-sec-2-7" class="outline-3"><h3 id="sec-2-7"><span class="section-number-3">2.7</span> 文本列表</h3><div class="outline-text-3" id="text-2-7"><p>在大纲树的一项中，自定义格式的列表可以提供更多的组织结构，也使我们可以得到一个复先框列表（见 5.6 节［复先框］）。Org 模式可以处理这种列表，并且 HTML 导出器（见12章）也支持这种格式。</p><p>Org 能够识别有序列表、无序列表和描述列表。</p><ul class="org-ul"><li>无序列表项以‘-’、‘+’或者‘*‘开头。</li><li>有序列表项以‘1.’、‘1)’或者开头。</li><li>描述列表用‘::’将项和描述分开。</li></ul><p>   同一列表中的项的第一行必须缩进相同程度。当下一行的缩进与列表项的的开头的符号或者数字相同或者更小时，这一项就结束了。当所有的项都关上时，或者后面有两个空行时，列表就结束了。例如：#+srcname 2<sub>3</sub></p><div class="org-src-container"><pre class="src src-org">** Lord of the Rings,   My favorite scenes are (in this order),   1. The attack of the Rohirrim,   2. Eowyn's fight with the witch king,       + this was already my favorite scene in the book,       + I really like Miranda Otto.,   Important actors in this film are:,   - Elijah Wood :: He plays Frodo,   - Sean Austin :: He plays Sam, Frodo's friend.</pre></div><p>当光标位于一项的第一行时（带有项标志符号的行），下面的命令将会作用于该项：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">TAB</td><td class="left">折叠项</td></tr><tr><td class="left">M-RET</td><td class="left">在当前级别插入一个项，有前缀时是强制新建一个标题</td></tr><tr><td class="left">M-S-RET</td><td class="left">插入一个带有复先框的项（见 2.5 节［复先框］）</td></tr><tr><td class="left">M-S-UP/DOWN</td><td class="left">将当前项和它的子项向上/下移动（和相同的缩进的前/后一个项交换位置）。如果列表是有序的，数字会自动改变</td></tr><tr><td class="left">M-LEFT/M-RIGHT</td><td class="left">提升/降低项的缩进，不包含子项</td></tr><tr><td class="left">M-S-LEFT/RIGHT</td><td class="left">提升/降低项的缩进，包含子项</td></tr><tr><td class="left">C-c C-c</td><td class="left">如果项中有复先框，就触发改变其状态。并且自动保持本项的符号与缩进在列表中的一致性</td></tr><tr><td class="left">C-c -</td><td class="left">循环改变将当前列表的项标志符号</td></tr></tbody></table></div></div><div id="outline-container-sec-2-8" class="outline-3"><h3 id="sec-2-8"><span class="section-number-3">2.8</span> 脚注</h3><div class="outline-text-3" id="text-2-8"><p>   脚注就是以脚注定义符号开头的一段话，脚注定义符号是将脚注名称放在一个方括号里形成的，要求放在第0列，不能有缩进。而引用就是在正文中将脚注名称用方括号括起来。例如：#+srcname 2<sub>4</sub></p><div class="org-src-container"><pre class="src src-org">,The Org homepage[fn:1] now looks a lot better than it used to.,...,[fn:1] The link is: http://orgmode.org</pre></div><p>用下面的命令来处理脚注：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-x f</td><td class="left">这是一个移动命令。当光标处理引用处时，跳转到它的定义；当光标处理定义处时，跳转到第一个引用处。其他情况下，新建一个脚注。当有前缀时，会提供一个菜单供选择操作，其中包括重新给脚注编号。</td></tr><tr><td class="left">C-c C-c</td><td class="left">在定义和引用之间跳转</td></tr></tbody></table><p><b>扩展阅读：</b><br>手册第 2 章<br>Sacha Chua's tutorial</p></div></div></div><div id="outline-container-sec-3" class="outline-2"><h2 id="sec-3"><span class="section-number-2">3</span> 表格</h2><div class="outline-text-2" id="text-3"><p>Org 提供了快速易用的表格编辑功能。通过调用 Emacs 内嵌的 ‘calc’包（对于 Emacs 的计算器可以查看 Emacs Calculator 手册）它支持类似于制表软件的计算操作。</p><p>  Org 能够很容易地处理 ASCII 文本表格。任何以‘|’为首个非空字符的行都会被认为是表格的一部分。’|‘也是列分隔符。一个表格是下面的样子：#+srcname 3<sub>1</sub></p><div class="org-src-container"><pre class="src src-org">,| Name  | Phone | Age |,|-------+------+-----|,| Peter | 1234 | 17  |,| Anna  | 4321 | 25  |</pre></div><p>当你在表格内部输入 TAB、RET 或者 C-c C-c 时表格都会自动调整。TAB 会进入下一个区域（RET 进入下一行）并且创建一个新的行。表格的缩进程度可以在第一行设定。以’|-’开头的一行会作为一个水平分隔行，当它下次调整排列时会将‘-’扩展至填充整行。所以想要建上面的那个表格，只需键入：#+srcname 3<sub>2</sub></p><div class="org-src-container"><pre class="src src-org">,|Name|Phone|Age|,|-</pre></div><p>然后 TAB 排列表格。还有一个更快的方法就是键入|Name|Phone|Age，再 C-c RET。</p><p><i>在表格区域中输入文本时，DEL、BACKSPACE 和所有其他的字符会以特殊的方式处理，防止影响到其他的区域。当按 TAB、S-TAB 或者 RET 将光标移动到其他区域时，区域中会自动填充一些空格。</i></p><p><b>创建和转换</b></p><p>C-c | 将活动区域（选中区域）转换成一个表。如果第一行至少有一个 TAB 字符，就用 TAB 划分内容；如果第一行都有逗号，就分逗号划分内容；否则就用空白符来划分区域。如果当前没有活动区域就会建立一个空的 Org 表格。其实用|Name|Phone|Age C-c RET 来建表会更简单一点。</p><p><b>调整和区域移动</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-c</td><td class="left">调整表格，不移动光标</td></tr><tr><td class="left">TAB</td><td class="left">调整表格，将光标移到下一个区域，必要时新建一行</td></tr><tr><td class="left">S-TAB</td><td class="left">调整表格，将光标移到上一个区域</td></tr><tr><td class="left">RET</td><td class="left">调整表格，将光标移到下一行，必要时会新建一行</td></tr></tbody></table><p><b>编辑行和列</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">M-LEFT/RIGHT</td><td class="left">左/右移当前列</td></tr><tr><td class="left">M-S-LEFT</td><td class="left">删除当前行</td></tr><tr><td class="left">M-S-RIGHT</td><td class="left">在光标位置左边添加一列</td></tr><tr><td class="left">M-UP/DOWN</td><td class="left">上/下移当前行</td></tr><tr><td class="left">M-S-UP</td><td class="left">删除当前行</td></tr><tr><td class="left">M-S-DOWN</td><td class="left">在当前行上面添加一行。如果有前缀，则在下面添加一行</td></tr><tr><td class="left">C-c -</td><td class="left">在当前行下面添加一个水平线。如果带前缀，则在上面添加一行水平线</td></tr><tr><td class="left">C-c RET</td><td class="left">在当前行下面添加一个水平线。并将光标移动到下一行</td></tr><tr><td class="left">C-c ^</td><td class="left">将表排序。当前位置所在的列作为排序的依据。排序在距当前位置最近的两个水平线之间的行（或者整个表）中进行</td></tr></tbody></table><p><b>扩展阅读：</b><br>手册第 3 章<br>Bastien’s table tutorial<br>Bastien’s spreadsheet tutorial<br>Eric’s plotting tutoria</p></div></div><div id="outline-container-sec-4" class="outline-2"><h2 id="sec-4"><span class="section-number-2">4</span> 超链接</h2><div class="outline-text-2" id="text-4"><p>就像 HTML 一样，Org 也提供了文件的内部链接，以及到其他文件、新闻组、电子邮件的外部链接等链接格式。</p></div><div id="outline-container-sec-4-1" class="outline-3"><h3 id="sec-4-1"><span class="section-number-3">4.1</span> 链接格式</h3><div class="outline-text-3" id="text-4-1"><p>Org 能够识别 URL 格式的文本并将它们处理成可点击的链接。通常链接格式是这样的：</p><div class="org-src-container"><pre class="src src-ascii">[[link][description]]  或者  [[link]]</pre></div><p>链接输入一旦完成（所有的括号都匹配），Org 就会改变它的视图。这里会看到 ”description“ 和 ”link“ ，而不是 </p><pre class="example">[[link][descriptoin]]</pre><p>和 </p><pre class="example">[[link]]。</pre><p>要想编辑链接，可以光标置于链接上并键入 C-c C-l。</p></div></div><div id="outline-container-sec-4-2" class="outline-3"><h3 id="sec-4-2"><span class="section-number-3">4.2</span> 内部链接</h3><div class="outline-text-3" id="text-4-2"><p>如果一个链接地址并不是 URL 的形式，就会作为当前文件内部链接来处理。最重要的一个例子是</p><pre class="example">[[#my-custom-id]]</pre><p>它会链接到 <code>CUSTOM_ID</code> 属性是 “my-custom-id” 的项。</p><p>类似</p><pre class="example">[[My Target]]</pre><p>和</p><pre class="example">[[My Target][Find my target]]</pre><p>的链接，点击后本文件中查找对应的目标 <code>“&lt;&lt;My Target&gt;&gt;”</code> 。</p></div></div><div id="outline-container-sec-4-3" class="outline-3"><h3 id="sec-4-3"><span class="section-number-3">4.3</span> 外部链接</h3><div class="outline-text-3" id="text-4-3"><p>Org 支持的链接格式包括文件、网页、新闻组、BBDB 数据库项、IRC 会话和记录。外部链接是 URL 格式的定位器。以识别符开头，后面跟着一个冒号，冒号后面不能有空格。下面是一些例子：</p><div class="org-src-container"><pre class="src src-org">,http://www.astro.uva.nl/~dominik            on the web,file:/home/dominik/images/jupiter.jpg       file, absolute path,/home/dominik/images/jupiter.jpg            same as above,file:papers/last.pdf                        file, relative path,file:projects.org                           another Org file,docview:papers/last.pdf::NNN                open file in doc-view mode at page NNN,id:B7423F4D-2E8A-471B-8810-C40F074717E9     Link to heading by ID,news:comp.emacs                             Usenet link,mailto:adent@galaxy.net                     Mail link,vm:folder                                   VM folder link,vm:folder#id                                VM message link,wl:folder#id                                WANDERLUST message link,mhe:folder#id                               MH-E message link,rmail:folder#id                             RMAIL message link,gnus:group#id                               Gnus article link,bbdb:R.*Stallman                            BBDB link (with regexp),irc:/irc.com/#emacs/bob                     IRC link,info:org:External%20links                   Info node link (with encoded space)</pre></div><p>链接的括号应当是闭合的。当链接含有描述文字是显示描述文字而不是链接地址（见 4.1 节［链接格式］），例如：</p><pre class="example">[[http:www.gnu.org/software/emacs/][GNU Emacs]]</pre><p>如果描述信息是一个文件名或者是指向图片的 URL。HTML 导出（见 12.4 节[HTML 导出]）时会将图片内联成一个可以点击的按钮。如果没有描述信息且链接指向一个图片，那么图片就会嵌入到导出的 HTML 文件中。</p></div></div><div id="outline-container-sec-4-4" class="outline-3"><h3 id="sec-4-4"><span class="section-number-3">4.4</span> 使用链接</h3><div class="outline-text-3" id="text-4-4"><p>Org 提供了以下方法来创建和使用链接。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c l</td><td class="left">在当前位置保存一个链接。这是一个全局命令（你可以设置自己的快捷键），可以在任何类型的缓冲区中使用。链接保存下来以便以后插入 Org 文件中（见下面）</td></tr><tr><td class="left">C-c C-l</td><td class="left">插入一个链接。它会让你输入，你可以输入一个链接，也可心用上/下键来获取保存的链接。它还会让你输入描述信息。</td></tr><tr><td class="left">C-c C-l（光标在链接上）</td><td class="left">当光标处于链接上时，你可以修改链接</td></tr><tr><td class="left">C-c C-o 或者 mouse-1 或者 mouse-2</td><td class="left">打开链接</td></tr><tr><td class="left">C-c &amp;</td><td class="left">跳回到一个已记录的地址。用 C-c % 可以将地址记录下来，内部链接后面的命令也会自动将地址记录下来。使用这个命令多次可以一直往前定位。</td></tr></tbody></table></div></div><div id="outline-container-sec-4-5" class="outline-3"><h3 id="sec-4-5"><span class="section-number-3">4.5</span> 目标链接</h3><div class="outline-text-3" id="text-4-5"><p>文件链接可以包含一些其他信息使得进入链接时可以到达特定的位置。比如双冒号之后的一个行号或者搜索选项。</p><p>下面是一些包含搜索定位功能的链接例子以及其说明：</p><div class="org-src-container"><pre class="src src-org">, [[file:~/code/main.c::255]]                     进入到 255 行, [[file:~/xx.org::My Target]]                    找到目标‘&lt;&lt;My Target&gt;&gt;’, [[file:~/xx.org/::#my-custom-id]]               查找自定义 id 的项</pre></div><p><b>扩展阅读：</b><br>手册第四章</p></div></div></div><div id="outline-container-sec-5" class="outline-2"><h2 id="sec-5"><span class="section-number-2">5</span> 待办事项</h2><div class="outline-text-2" id="text-5"><p>Org 模式并不用一个单独的文件来维持 TODO 列表<sup><a id="fnr.2" name="fnr.2" class="footref" href="#fn.2">2</a></sup>。它是一些笔记的集合体，因为 TODO 列表是在你记录笔记的过程中逐渐形成的。你 Org 模式下可以很容易地将树中的一项标记为一个 TODO 的项。用这种方式，信息内容不会冗余加倍，而且可以显示 TODO 项的上下文环境。</p><p>当然，这种处理待办事项的方式会将它们分散于各个笔记文件中。Org 模式提供了一些方法使我们可以把它们看作一个整体来处理。</p></div><div id="outline-container-sec-5-1" class="outline-3"><h3 id="sec-5-1"><span class="section-number-3">5.1</span> 使用TODO状态</h3><div class="outline-text-3" id="text-5-1"><p>当标题以 TODO 开关时它就成为了一个 TODO 项，例如：</p><div class="org-src-container"><pre class="src src-org">, ***TODO Write letter to Sam Fortune</pre></div><p>下面是一些使用 TODO 项的常用命令：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-t</td><td class="left">将当前项的状态在（unmarked）-&gt;TODO-&gt;DONE 之间循环切换，同样的切换也可以在时间轴（timeline） 和议程（ agenda） 的缓冲区（buffer）中用 t 键“远程”进行。（见 2.6 节[稀疏树]）</td></tr><tr><td class="left">S-RIGHT/LEFT</td><td class="left">选择下一个/上一个 TODO 状态，与上面的循环方式相同。</td></tr><tr><td class="left">C-c / t</td><td class="left">在稀疏树中显示 TODO 项。将 buffer 折叠，但是会显示 TODO 项和它们所在的层次的标题。</td></tr><tr><td class="left">C-c a t</td><td class="left">显示全局 TODO 列表。从所有的议程文件中收集 TODO 项到一个缓冲区中。详见 10.3.2 节。</td></tr><tr><td class="left">S-M-RET</td><td class="left">在当前项下插入一个新的 TODO 项。</td></tr></tbody></table><p>改变 TODO 的状态会触发标签改变。查看选项 org-todo-state-tags-triggers 的描述获得更多信息。</p></div></div><div id="outline-container-sec-5-2" class="outline-3"><h3 id="sec-5-2"><span class="section-number-3">5.2</span> 多状态工作流程</h3><div class="outline-text-3" id="text-5-2"><p>你可以用 TODO 关键字来定义不同的状态，用以处理项，比如：</p><div class="org-src-container"><pre class="src src-lisp">(setq org-todo-keywords      '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))</pre></div><p>竖直线将 TODO 关键字（还需要进一步的动作）和 DONE 状态（不需要进一步的动作）分隔开。如果你不给出竖直线，最后一个状态会作为 DONE 状态。设置之后，C-c C-t 就会将状态从 TODO 转换到 FEEDBACK，再转换到 VERIFY，最后到 DONE 和 DELEGATED。</p><p>有时你可能希望同时使用几个不同的 TODO 状态集合。例如，你可能想要一个基本的 TODO/DONE，以及一个修改 bug 的工作流程和一个隔开的状态来表示取消的项目（既还是 DONE，也不需要进一步的动作），你可以这样设置：</p><div class="org-src-container"><pre class="src src-elisp">(setq org-todo-keywords      '((sequence "TODO(t)" "|" "DONE(d)")(sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")(sequence "|" "CANCELED(c)")))</pre></div><p>关键字应该各不相同，这样对于一个选项 Org 才知道该用哪个状态序列（集合）。例子中也给出了快速使用一个关键字的方法，就是在关键字后面括号中给出快捷字母——当用 C-c C-t时，会询问，让你输入一个字母。</p><p>要定义只在一个文件中有效的 TODO 关键字，可以在文件中任意地方给出下面的文本：</p><div class="org-src-container"><pre class="src src-org">#+TODO: TODO(t) | DONE(d)#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)#+TODO: | CANCELED(c)</pre></div><p>当改变这些行中的一行后，光标停留在改变行上，用 C-c C-c 让改变生效。</p></div></div><div id="outline-container-sec-5-3" class="outline-3"><h3 id="sec-5-3"><span class="section-number-3">5.3</span> 进度日志</h3><div class="outline-text-3" id="text-5-3"><p>当你改变一个 TODO 状态为 DONE 时，或者当你每次改变一个 TODO 项的状态时，Org 都会自动记录时间戳或者作一个记录。这是高度可配置的。可以基于每一个关键字进入设置，并且可以定位到一个文件甚至子树。怎样记录一个任务的工作时间，见 8.4 节。</p><p><b>完成的项目</b></p><p>最基本的日志功能是跟踪一个特定项目的完成。这可以这样实现：<sup><a id="fnr.3" name="fnr.3" class="footref" href="#fn.3">3</a></sup></p><div class="org-src-container"><pre class="src src-elisp">(setq org-log-done 'time)</pre></div><p>这时当你将一个项目从一个 TODO（未完成）状态改变为一个完成状态时，标题下面就会插入一行 “CLOSED:[timestamp]”。如果你想和时间戳一起作一个记录，用：<sup><a id="fnr.4" name="fnr.4" class="footref" href="#fn.4">4</a></sup></p><div class="org-src-container"><pre class="src src-elisp">(setq org-log-done 'note)</pre></div><p>这时会提示你输入一个记录（note），并将它保存在标题为“Closing Note”项目之下。</p><p><b>跟踪TODO状态变化</b></p><p>你可能想跟踪 TODO 状态的变化。可以只记录一个时间戳，也可以为变化作一个带时间戳的记录。记录会被插入到标题之后形成列表。当有很多记录之后，你可能希望将记录取出放到抽屉里。通过定制变量 org-log-into-drawer 可以实现这个功能。对于状态记录，Org 可以实现基于每个状态关键字的设置。实现方法是在每个后的括号中指定“！”（记录时间戳）或“@”（作一个记录）。例如：</p><div class="org-src-container"><pre class="src src-org">#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)</pre></div><p>将会设置 TODO 关键字和快速访问字母，以及当一个项目设为 DONE 时，会记录时间戳，当状态变为 WAIT 或 CANCELED 时，会作一个记录。这个语法也适用于变量 org-todo-keywords。</p></div></div><div id="outline-container-sec-5-4" class="outline-3"><h3 id="sec-5-4"><span class="section-number-3">5.4</span> 优先级</h3><div class="outline-text-3" id="text-5-4"><p>如果你广泛地使用 Org 模式，这样你就会有大量的 TODO 项。给它们设定优先级就很有必要。可以在 TODO 项的标题中加入一些标记（cookie）来设置它们的优先级，像这样：</p><div class="org-src-container"><pre class="src src-org">*** TODO [#A] Write letter to Sam Fortune</pre></div><p>Org模式支持三个优先级别：’A‘、’B‘和’C‘。’A‘是最高级别，如不指定，’B‘是默认的。优先级只在议程中有用。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c ,</td><td class="left">设置当前标题的优先级。按’‘’‘’‘选择一个级别，或者SPC删除标记（cookie）。</td></tr><tr><td class="left">S-UP</td><td class="left">&#xa0;</td></tr><tr><td class="left">S-Down</td><td class="left">增加/减少当前标题的优先级。</td></tr></tbody></table></div></div><div id="outline-container-sec-5-5" class="outline-3"><h3 id="sec-5-5"><span class="section-number-3">5.5</span> 任务细分</h3><div class="outline-text-3" id="text-5-5"><p>很多时候将一个大的任务分成几个的易于完成的小任务是明智的。你可以通过在TODO项目下新建一个大纲树，并在子树上标记子任务来实现这个功能。为了能对已经完成的任务有个大致的了解，你可以在标题的任何地方插入‘<code>[/]</code>’或者‘<code>[%]</code>’。当每个子任务的状态变化时，或者当你在标记上按 C-c C-c时，这些标记状态也会随之更新。例如：</p><div class="org-src-container"><pre class="src src-org">* Organize Party [33%]** TODO Call people [1/2]*** TODO Peter*** DONE Sarah** TODO Buy food** DONE Talk to neighbor</pre></div></div></div><div id="outline-container-sec-5-6" class="outline-3"><h3 id="sec-5-6"><span class="section-number-3">5.6</span> 复选框</h3><div class="outline-text-3" id="text-5-6"><p>当纯文本中的项以‘[]’开头时，就会变成一个复选框。复选框不会包含在全局 TODO 列表中，所以它们很适合地将一个任务划分成几个简单的步骤。下面是一个复选框的例子：</p><div class="org-src-container"><pre class="src src-org">* TODO Organize party [1/3],  - [-] call people [1/2],    - [ ] Peter,    - [X] Sarah,  - [X] order food,  - [ ] think about what music to play</pre></div><p>复选框是分层工作的。所以如果一个复选框项目如果还有子复选框，触发子复选框将会使该复选框变化以反映出一个、多个还是没有子复选框被选中。</p><p>下面是处理复选框的命令：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-c</td><td class="left">触发复选框的状态或者（加上前缀）触发复选框的的存在状态。</td></tr><tr><td class="left">M-S-RET</td><td class="left">增加一个带有复选框的项。这只在光标处于纯文本列表项（见 2.7 节）中才起使用。</td></tr></tbody></table><p><b>扩展阅读：</b><br>手册第5章<br>David O’Toole’s introductory tutorial<br>Charles Cave’s GTD setup</p></div></div></div><div id="outline-container-sec-6" class="outline-2"><h2 id="sec-6"><span class="section-number-2">6</span> 标签</h2><div class="outline-text-2" id="text-6"><p>要为交叉相关的信息提供标签和上下文，一个不错的方法是给标题分配标签。Org 模式能够广泛地支持标签。</p><p>每一个标题都能包含多个标签，它们位于标题的后面。标签可以包含字母，数字， <code>‘_’</code> 和 <code>‘@’</code> 。标签的前面和后面都应该有一个冒号，例如，“:work:”。可以指定多个标签，就像“:work:urgent:”。标签默认是粗体，并和标题具有相同的颜色。</p></div><div id="outline-container-sec-6-1" class="outline-3"><h3 id="sec-6-1"><span class="section-number-3">6.1</span> 标签继承</h3><div class="outline-text-3" id="text-6-1"><p>标签具有大纲树的继承结构。如果一个标题具有某个标签，它的所有子标题也会继承这个标签。例如，在列表</p><div class="org-src-container"><pre class="src src-org">* Meeting with the French group     :work:** Summary by Frank                 :boss:notes:*** TODO Prepare slides for him     :action:</pre></div><p>中,尽管没有明确标出,最后一个标题会有标签“:work:”，“:boss:”，“:note:”，和“:action”。你也可以设定一个标签让所有的标题都继承，就好像标签在包含整个文件的第零级标题中指定了一样。用下面的方法<sup><a id="fnr.5" name="fnr.5" class="footref" href="#fn.5">5</a></sup>：</p><div class="org-src-container"><pre class="src src-org">#+FILETAGS: :Peter:Boss:Secret:</pre></div></div></div><div id="outline-container-sec-6-2" class="outline-3"><h3 id="sec-6-2"><span class="section-number-3">6.2</span> 设置标签</h3><div class="outline-text-3" id="text-6-2"><p>在标题后可以很容易地输入标签。在冒号之后，M-TAB 可以补全标签。也有一些专门的命令用于输入标签：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-q</td><td class="left">为当前标题输入标签。Org 模式既支持补全，也支持单键接口来设置标签，见下文。回车之后，标签会被插入，并放到第 org-tags-column 列。如果用前缀 C-u，会把当前缓冲区中的所有标签都对齐到那一列，这看起来很酷。</td></tr><tr><td class="left">C-c C-c</td><td class="left">当光标处于标题上时，这个命令同C-c C-q。</td></tr></tbody></table><p>Org 支持基于一个标签列表来插入标签。默认情况这个列表是动态构建的，包含了当前缓冲区中使用过的所有标签。你也可以通过变量 org-tag-alist 在全局设定一个标签的硬列表（hard list）。另外，对于某个特定文件你也可以用下面这几行设置一个默认列表：</p><div class="org-src-container"><pre class="src src-org">#+TAGS: @work @home @tennisclub#+TAGS: laptop car pc sailboat</pre></div><p>默认 Org 模式用一个迷你缓冲区补全设施来输入标签。另外，它也实现了一个更快速，称为 <i>快速标签选择</i> （ <i>fast tag selection</i> ）的标签选择方法。这使得你只用按一次键就可以选择或者取消一个标签。为了使它能很好地工作，需要为常用的标签赋唯一的值。你可以在你的“.emacs”文件中通过设置变量 org-tag-alist 作全局设定。例如，如果你需要在不同的文件中经常要给条目添加标签“:@home:”，这时你就可以像这样设置：</p><div class="org-src-container"><pre class="src src-elisp">(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))</pre></div><p>如果标签只用于当前正在处理的文件，那么你可以这样设置标签选项行：</p><div class="org-src-container"><pre class="src src-org">#+TAGS: @work(w) @home(h) @tennisclub(t) laptop(l) pc(p)</pre></div></div></div><div id="outline-container-sec-6-3" class="outline-3"><h3 id="sec-6-3"><span class="section-number-3">6.3</span> 标签查找</h3><div class="outline-text-3" id="text-6-3"><p>一旦标签体系设置好，就可以用来收集相关联的信息到指定列表中。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c \</td><td class="left">&#xa0;</td></tr><tr><td class="left">C-c / m</td><td class="left">用匹配标签搜索的所有标题构造一个稀疏树。带前缀参数C-u时，忽略所有还是TODO行的标题。</td></tr><tr><td class="left">C-c a m</td><td class="left">用所有议程文件匹配的标签构造一个全局列表。见第 10.3.3 节。</td></tr><tr><td class="left">C-c a M</td><td class="left">用所有议程文件匹配的标签构造一个全局列表，但只搜索 TODO 项，并强制搜索所有子项（见变量 org-tags-match-listsublevels）。</td></tr></tbody></table><p>这些命令都会提示输入字符串，字符串支持基本的逻辑去处。像“+boss+urgent-project1”，是搜索所有的包含标签“boss”和“urgent”但不含“project1”的项；而 “Kathy|Sally”，搜索标签包含“Kathy”或者“Sally”和项。搜索字符串的语法很丰富，支持查找TODO关键字、条目级别和属性。更详细的介绍和例子，见第 10.3.3 节。</p><p><b>扩展阅读</b><br>   手册第 6 章<br>   Sacha Chua’s article about tagging in Org-mode</p></div></div></div><div id="outline-container-sec-7" class="outline-2"><h2 id="sec-7"><span class="section-number-2">7</span> 属性</h2><div class="outline-text-2" id="text-7"><p>属性是一些与条目关联的键值对。它们位于一个名为 <b>PROPERTIES</b> 的特殊抽屉中。第一个属性都单独一行，键在前（被冒号包围），值在后：</p><div class="org-src-container"><pre class="src src-org">* CD collection** Classic*** Goldberg Variations,    :PROPERTIES:,    :Title:    Goldberg Variations,    :Composer: J.S. Bach,    :Publisher: Deutsche Grammophon,    :NDisks:   1,    :END:</pre></div><p>通过设置属性 <code>“:Xyz_ALL:”</code> ，你可以为属性 <code>“:Xyz:”</code> 设置所有合法的值。这个特定的属性是有 <i>继承性</i> 的，即，如果你是在第 1 级别设置的，那么会被应用于整个树。当合法的值设定之后，设置对应的属性就很容易了，并且不容易出现打字错误。用CD唱片集为例，我们可以预定义发行商和盒中的光盘数目：</p><div class="org-src-container"><pre class="src src-org">* CD collection,  :PROPERTIES:,  :NDisks_ALL: 1 2 3 4,  :Publisher_ALL: "Deutsche Grammophon" Philips EMI,  :END:</pre></div><p>也可以在全局设置 org-global-properties ，或者在文件级别设置：</p><div class="org-src-container"><pre class="src src-org">#+PROPERTY: NDisks_ALL 1 2 3 4</pre></div><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-x p</td><td class="left">设置一个属性。会询问属性名和属性值。</td></tr><tr><td class="left">C-c C-c d</td><td class="left">从当前项中删除一个属性。</td></tr></tbody></table><p>要基于选择的属性创建稀疏树或者特殊列表，跟标签搜索的命令相同（见第6.3节）。搜索字符串的语法在第10.3.3节中详述。</p></div><div id="outline-container-sec-7-1" class="outline-3"><h3 id="sec-7-1"><span class="section-number-3">7.1</span> 扩展阅读</h3><div class="outline-text-3" id="text-7-1"><p>手册第7章<br>   Bastien Guerry’s column view tutorial</p></div></div></div><div id="outline-container-sec-8" class="outline-2"><h2 id="sec-8"><span class="section-number-2">8</span> 日期和时间</h2><div class="outline-text-2" id="text-8"><p>为了支持工程的计划，TODO 项可以标记上日期和/或时间。带有日期和时间信息的特定格式的字符串在 Org 模式中称为时间戳。</p></div><div id="outline-container-sec-8-1" class="outline-3"><h3 id="sec-8-1"><span class="section-number-3">8.1</span> 时间戳</h3><div class="outline-text-3" id="text-8-1"><p>时间戳是一个具有特定格式的日期（可能带有时间和时间段）说明，例如 <code>&lt;2005-10-01</code> <code>Tue&gt;</code> ， <code>&lt;2003-09-16</code> <code>Tue</code> <code>09:39&gt;</code> ，或者 <code>&lt;2003-09-16</code> <code>Tue</code> <code>12:00-12:30&gt;</code> 。时间戳可以出现在树条目的标题和正文的任何地方。它能使条目只在特定的日期才出现在议程列表中。（见第 10.3.1 节）我们区分为：</p><p><b>普通时间戳；事件；约会</b></p><p>一个简单的时间戳只是给一个条目加上时间和日期。这跟在纸质的议程上写下约会和事件是一样的。</p><div class="org-src-container"><pre class="src src-org">* Meet Peter at the movies &lt;2006-11-01 Wed 19:15&gt;* Discussion on climate change &lt;2006-11-02 Thu 20:00-22:00&gt;</pre></div><p><b>具有时间间隔的时间戳</b></p><p>一个时间戳可以包含一个时间间隔，表示事件不只在指定的时间发生，还在每隔一个特定的时间如 N 天（d）、周（w）、月（m）或者年（y）之后重复发生。下面的事件每周二在议程中显示：</p><div class="org-src-container"><pre class="src src-org">* Pick up Sam at school &lt;2007-05-16 Wed 12:30 +1w&gt;</pre></div><p><b>日记样式的 sexp 条目</b></p><p>为了能定义更复杂的时间，Org 模式支持 Emacs 日历/日记包（calendar/diary package）中的日记条目。例如：</p><div class="org-src-container"><pre class="src src-org">* The nerd meeting on every 2nd Thursday of the month,  &lt;%%(diary-float t 4 2)&gt;</pre></div><p><b>时间/日期段</b></p><p>两个时间戳用‘&#x2013;’连接起来就定义了一个时间段：</p><div class="org-src-container"><pre class="src src-org">** Meeting in Amsterdam,   &lt;2004-08-23 Mon&gt;--&lt;2004-08-26 Thu&gt;</pre></div><p><b>非激活的时间戳</b></p><p>跟普通时间戳一样，但是这里是方括号而不是尖括号。这种时间戳是未激活的，它 <i>不</i> 会让一个条目显示在议程中。</p><div class="org-src-container"><pre class="src src-org">* Gillian comes late for the fifth time [2006-11-01 Wed]</pre></div></div></div><div id="outline-container-sec-8-2" class="outline-3"><h3 id="sec-8-2"><span class="section-number-3">8.2</span> 创建时间戳</h3><div class="outline-text-3" id="text-8-2"><p>时间戳要有特定的格式，这样才能被Org模式识别。下面的命令可以用来正确地处理时间戳的格式。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c .</td><td class="left">询问日期并输入正确的时间戳。当光标处理一个时间戳之上时，是修改这个时间戳，而不是插入一个新的。如果这个命令连用再次，就会插入一个时间段。加上前缀会附带当前时间。</td></tr><tr><td class="left">C-c !</td><td class="left">功能同C-c .，但是插入的是一个未激活的时间戳。</td></tr><tr><td class="left">S-LEFT/RIGHT</td><td class="left">将光标处理的时间戳改变一天。</td></tr><tr><td class="left">S-UP/DOWN</td><td class="left">改变时间戳中光标下的项。光标可以处在年、月、日、时或者分之上。当时间戳包含一个时间段时，如 “15:30-16:30”，修改第一个时间，会自动同时修改第二个时间，以保持时间段长度不变。想修改时间段长度，可以修改第二个时间。</td></tr></tbody></table><p>当 Org 模式询问时间/日期时，能接收任何包含时间和/或日期的字符串，它能根据当前的时间日期智能地分析字符串，从而得到没有指明的信息。你也可以用弹出的日历中选择日期。想完整地了解时间/日期询问的工作方式，可以参考手册。</p></div></div><div id="outline-container-sec-8-3" class="outline-3"><h3 id="sec-8-3"><span class="section-number-3">8.3</span> 截止期限和计划安排</h3><div class="outline-text-3" id="text-8-3"><p>时间戳前面可以加一些关键字来协助计划安排。</p><p><b>截止期限</b></p><p>意义：任务（大多数情况都会是一个TODO项，当然也可以不是）应该完成的日期。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-d</td><td class="left">在标题下面一行插入一个带有“DEADLINE”关键字的时间戳。</td></tr></tbody></table><p>在 <i>截止日期</i> ， <i>任务</i> 会列在 <i>议程</i> 中。另外， <i>今天的议程</i> 会在任务到期 orgdeadline-warning-days 天前对即将即将到期以及已经过期的任务给出提醒，直到任务被标记为 DONE。例如：</p><div class="org-src-container"><pre class="src src-org">*** TODO write article about the Earth for the Guide,    The editor in charge is [[bbdb:Ford Prefect]],    DEADLINE: &lt;2004-02-29 Sun&gt;</pre></div><p><b>日程安排</b></p><p>意义：你计划在给定的那个日期开始进行那项任务。<sup><a id="fnr.6" name="fnr.6" class="footref" href="#fn.6">6</a></sup></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-s</td><td class="left">在标题下面插入一个带有“SCHEDULED”关键字的时间戳。</td></tr></tbody></table><p>在给定的日期标题会列在议程中。<sup><a id="fnr.7" name="fnr.7" class="footref" href="#fn.7">7</a></sup>另外，对于过期的日程安排会在编辑为 <i>今天</i> 并给出提醒，直到被标记为 DONE。也就是说，任务会自动推迟日期直到它被完成。</p><div class="org-src-container"><pre class="src src-org">*** TODO Call Trillian for a date on New Years Eve.,    SCHEDULED: &lt;2004-12-25 Sat&gt;</pre></div><p>有些任务需要一再重复出现。Org 模式在截止期限、计划安排和普通时间戳中用所谓的中继器来管理这种任务。在下面的例子中：</p><div class="org-src-container"><pre class="src src-org">** TODO Pay the rent,   DEADLINE: &lt;2005-10-01 Sat +1m&gt;</pre></div><p>+1m 是一个中继器；上面的意思是任务有一个截止期限 <code>&lt;2005-10-01&gt;</code> ，并从这个日期开始每月都重复出现。</p></div></div><div id="outline-container-sec-8-4" class="outline-3"><h3 id="sec-8-4"><span class="section-number-3">8.4</span> 记录工作时间</h3><div class="outline-text-3" id="text-8-4"><p>使用 Org 可以记录在一个工程中花在某些特定任务上的时间。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-x C-i</td><td class="left">开始当前条目的计时（clock-in）。这会插入一个 CLOCK 关键字和一个时间戳。加上 C-u 前缀，从当前已经计时的任务中选择任务。</td></tr><tr><td class="left">C-c C-x C-o</td><td class="left">停止计时（clock-out）。这会在开始计时的地方插入另一个时间戳。它会直接计算使用时间并插入到时间段的后面如 “=&gt; HH:MM”。</td></tr><tr><td class="left">C-c C-x C-e</td><td class="left">为当前的计时任务更新进度。</td></tr><tr><td class="left">C-c C-x C-x</td><td class="left">取消当前的计时。当你误操作打开一个计时时，或者转而去做其他事情时，这个命令就很有用。</td></tr><tr><td class="left">C-c C-x C-j</td><td class="left">跳转到包含当前正在运行的计时的任务条目。用 C-uf前缀从当前计时的任务中选择。</td></tr><tr><td class="left">C-c C-x C-r</td><td class="left">在当前文件插入一个包含像 Org 表格一样的计时报告的动态块。当光标正处于一个存在的块上时，更新它。</td></tr><tr><td class="left">&#xa0;</td><td class="left"><code>#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file</code></td></tr><tr><td class="left">&#xa0;</td><td class="left"><code>#+END: clocktable</code></td></tr><tr><td class="left">&#xa0;</td><td class="left">如何定制视图，见手册。</td></tr><tr><td class="left">C-c C-c</td><td class="left">在一个已经存在的计时表格之上时，更新它。 更新动态块。光标需要置于动态块 <code>#+BEGIN</code> 这行。</td></tr></tbody></table><p><i>l</i> 键可能会在时间轴（见第 10.3.4 节）和议程（见第 10.3.1 节）中使用来查看一天中处理和关闭了哪些任务。</p><p><b>扩展阅读</b><br>手册第 8 章<br>Charles Cave’s Date and Time tutorial<br>Bernt Hansen’s clocking workflow</p></div></div></div><div id="outline-container-sec-9" class="outline-2"><h2 id="sec-9"><span class="section-number-2">9</span> 捕获——转发——存档</h2><div class="outline-text-2" id="text-9"><p>任何组织系统都有一个重要功能，就是能捕获新的灵感或者任务，并将相关的引用材料与之联系起来。Org 提供了一个捕获过程来创建任务。它将与一个任务相关的文件（附件）保存在一个特定的目录下。在系统中，任务和项目经常移动。将整个项目树保存到一个归档文件中可以保持系统简洁快速。</p></div><div id="outline-container-sec-9-1" class="outline-3"><h3 id="sec-9-1"><span class="section-number-3">9.1</span> 捕获</h3><div class="outline-text-3" id="text-9-1"><p>Org 的获取一个新条目的方法很大程序上受 John Wiegley 的 excellent remem-ber package 的影响。它使得你可以在工作流程中中断一小会儿来存贮一个简短的笔记。Org可以为新条目定义模板，并将它们与不同的目标文件关联起来以保存笔记。</p><p><b>设定截取位置<sup><a id="fnr.8" name="fnr.8" class="footref" href="#fn.8">8</a></sup></b></p><p>下面的定制为笔记设置了一个默认的目标<sup><a id="fnr.9" name="fnr.9" class="footref" href="#fn.9">9</a></sup>文件，并为捕获新的任务定义了一个全局快捷键<sup><a id="fnr.10" name="fnr.10" class="footref" href="#fn.10">10</a></sup>。</p><div class="org-src-container"><pre class="src src-elisp">(setq org-default-notes-file (concat org-directory "/notes.org"))(define-key global-map "\C-cc" 'org-capture)</pre></div><p><b>截取的使用</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c c</td><td class="left">启动一个捕获过程。进入一个窄的间接缓冲区来编辑条目。</td></tr><tr><td class="left">C-c C-c</td><td class="left">一旦完成捕获信息的输入，可以用 C-c C-c 返回之前的窗口，继续中断的工作。</td></tr><tr><td class="left">C-c C-w</td><td class="left">将条目保存到一个接收地址（见第2节）并结束。</td></tr><tr><td class="left">C-c C-k</td><td class="left">取消捕获过程，返回之前的状态。</td></tr></tbody></table><p><b>捕获模板</b></p><p>用可以用不同的模板来做不同的捕获笔记，并将它们保存到不同的地方。例如，你想将新任务保存到文件“TODO.org”的“Tasks”标题下，而将日记项目保存到“journal.org”中一个时间树中。你可以：</p><div class="org-src-container"><pre class="src src-elisp">(setq org-capture-templates      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks") "* TODO %?\n %i\n %a")("j" "Journal" entry (file+datetree "~/org/journal.org") "* %?\nEntered on %U\n %i\n %a")))</pre></div><p>其中，第一个字符串是模式的关键字，第二个字符串是简短的描述信息。接着是条目的类型和保存笔记的目标地址。最后是模板本身，它利用%作转义符基于时间和上下文来填充一些信息。</p><p>当你调用 M-x org-capture 时，Org 提示输入一个键来选择模板（如果你有多个模板），然后就会给出像这样的内容：</p><pre class="example">* TODO [[file:link to where you were when initiating capture]]</pre><p>在扩展模板时，可以用%转义符进行动态地插入内容。下面是一些可以使用的项，查看手册获得更多的选项。<sup><a id="fnr.11" name="fnr.11" class="footref" href="#fn.11">11</a></sup></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">%a</td><td class="left">注解，通常是由 org-store-link 创建的链接</td></tr><tr><td class="left">%i</td><td class="left">初始化内容，当记忆时区域被C-u调用</td></tr><tr><td class="left">%t</td><td class="left">时间戳，只是日期</td></tr><tr><td class="left">%T</td><td class="left">带有日期和时间的时间戳</td></tr><tr><td class="left">%u，%U</td><td class="left">同上，但是时间戳不激活</td></tr></tbody></table></div></div><div id="outline-container-sec-9-2" class="outline-3"><h3 id="sec-9-2"><span class="section-number-3">9.2</span> 转送笔记</h3><div class="outline-text-3" id="text-9-2"><p>当你回顾捕获的数据时，可以想把其中的一些条目转送到另一列表中，比如说到一工程项目。剪切，查找正确的地址，然后再粘贴笔记，这就似乎有些麻烦。为了简化这个过程，可以用专门的命令：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-w</td><td class="left">转送光标处的条目或者区域。这个命令会提供一些目标地址供选择,你可以通过补全功能选择一个。条目（或者区域中的所有条目）就会作为一个子项填充到目标标题下。</td></tr><tr><td class="left">&#xa0;</td><td class="left">默认情况下，当前缓冲区的一级标题会被作为转送的目标，你可以通过设置给出跨多个文件的复杂的定义。详见变量 org-refile-targets 的描述。</td></tr><tr><td class="left">C-u C-c C-w</td><td class="left">借助于转送功能的接口来跳转到一个标题。</td></tr><tr><td class="left">C-u C-u C-c C-w</td><td class="left">跳转到 org-refile 最后转送子树所到的地方。</td></tr></tbody></table></div></div><div id="outline-container-sec-9-3" class="outline-3"><h3 id="sec-9-3"><span class="section-number-3">9.3</span> 归档</h3><div class="outline-text-3" id="text-9-3"><p>当一个用（子）树表示的工程完成后，你可能想把它移走，不让它再在议程里显示。归档能使你的工作文件变得简洁，并能使议程视图构造等全局搜索保持高效。最常用的归档命令是将工程树移到另一个文件——归档文件。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-x C-a</td><td class="left">用变量 orgarchive-default-command 指定的命令归档当前的项。</td></tr><tr><td class="left">C-c C-x C-s 或者简化为 C-c $</td><td class="left">将光标处的子树归档至 org-archive-location 指定的位置。</td></tr></tbody></table><p>默认的归档位置是当前文件同目录下，名为当前文件名后加 <code>“_archive”</code> 的文件。例子和设置位置的方法见变量 org-archivelocation 的帮助信息。下面是一个在缓冲区内设置该变量的方法：</p><div class="org-src-container"><pre class="src src-org">#+ARCHIVE: %s_done::</pre></div><p><b>扩展阅读</b><br>手册第9章<br>Charles Cave’s remember tutorial<br>Sebastian Rose’s tutorial for capturing from a web browser</p></div></div></div><div id="outline-container-sec-10" class="outline-2"><h2 id="sec-10"><span class="section-number-2">10</span> 议程视图</h2><div class="outline-text-2" id="text-10"><p>根据 Org 的工作方式，TODO 项、时间戳和带标签的标题分散在一个或者多个文件中。为了能够查看某一天的项目或者事件，信息必须收集在一起，以一种的有条理方式排序、显示。有几种不同的视图，见下文。</p><p>收集的信息在一个专门的议程缓冲区中显示。这个缓冲区是只读的，但是提供了一些命令可以访问原 Org 文件中对应的条目，并且可以远程地编辑这些文件。从议程缓冲区中远程编辑是说，比如，你可以在议程缓冲区中改变标题和约会的日期。议程缓冲区中使用的命令在第 10.4 节列出。</p></div><div id="outline-container-sec-10-1" class="outline-3"><h3 id="sec-10-1"><span class="section-number-3">10.1</span> 议程文件</h3><div class="outline-text-3" id="text-10-1"><p>显示的信息通常是从各个议程文件中收集来的，这样文件在变量 org-agenda-files 中列出。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c [</td><td class="left">将当前文件加入到议程文件列表中。当前文件会被加到列表的前面。如果文件已经在列表中，会被移到前面。带有前缀时，文件添加/移到到后面。</td></tr><tr><td class="left">C-c ]</td><td class="left">将当前文件从议程文件列表中删除。</td></tr><tr><td class="left">C-,</td><td class="left">遍历议程文件列表，依次访问其中的每一个文件。</td></tr></tbody></table></div></div><div id="outline-container-sec-10-2" class="outline-3"><h3 id="sec-10-2"><span class="section-number-3">10.2</span> 议程调度器</h3><div class="outline-text-3" id="text-10-2"><p>视图是通过议程调试器创建的，通常我们会给它设置一个全局快捷键——比如 C-c a （见第1.2节）。按 C-c a 之后，就会提示再输入一个字母来执行对应的命令：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">a</td><td class="left">日历式的议程。（见 10.3.1）</td></tr><tr><td class="left">t/T</td><td class="left">TODO 项的列表。（见 10.3.2节）</td></tr><tr><td class="left">m/M</td><td class="left">匹配某个标签表达式的标题的列表。（见 10.3.3）</td></tr><tr><td class="left">L</td><td class="left">当前文件的时间轴视图。（见 10.3.4）</td></tr><tr><td class="left">s</td><td class="left">通过关键字和/或正则表达式选中的条目的列表。</td></tr></tbody></table></div></div><div id="outline-container-sec-10-3" class="outline-3"><h3 id="sec-10-3"><span class="section-number-3">10.3</span> 内建议程视图</h3><div class="outline-text-3" id="text-10-3"></div><div id="outline-container-sec-10-3-1" class="outline-4"><h4 id="sec-10-3-1"><span class="section-number-4">10.3.1</span> 周/日议程</h4><div class="outline-text-4" id="text-10-3-1"><p>周/日议程就像纸质的议程一样，用以显示本周或当天的所有任务。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c a a</td><td class="left">从一列 Org 文件中为本周收集出一个议程。议程显示出每天的条目。</td></tr></tbody></table><p>Emacs 包含了 Edward M. Reingold 的日历和日记功能。Org 模式能识别日记的语法并允许在 Org 文件中直接使用日记的 sexp 条目：<sup><a id="fnr.12" name="fnr.12" class="footref" href="#fn.12">12</a></sup></p><div class="org-src-container"><pre class="src src-org">* Birthdays and similar stuff#+CATEGORY: Holiday,  %%(org-calendar-holiday) ; special function for holiday names#+CATEGORY: Ann,  %%(diary-anniversary 5 14 1956) Arthur Dent is %d years old,  %%(diary-anniversary 10 2 1869) Mahatma Gandhi would be %d years old</pre></div><p>Org 可以跟 Emacs 的约会提醒功能结合。想添加议程文件中的约会提醒，可以使用命令 org-agenda-to-appt。详见帮助文档的描述。</p></div></div><div id="outline-container-sec-10-3-2" class="outline-4"><h4 id="sec-10-3-2"><span class="section-number-4">10.3.2</span> 全局TODO列表</h4><div class="outline-text-4" id="text-10-3-2"><p>全局TODO列表将所有未完成的 TODO 项格式化并集中到一处。TODO 项的远程编辑使得我们只用按一下键就可以改变 TODO 项的状态。TODO 列表中可以使用的命令在第10.4节给出。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c a t</td><td class="left">显示全局 TODO 列表。这会从所有的议程文件（见第10章）中收集 TODO 项到一个缓冲区中。</td></tr><tr><td class="left">C-c a T</td><td class="left">同上，但可以选择 TODO 关键字</td></tr></tbody></table></div></div><div id="outline-container-sec-10-3-3" class="outline-4"><h4 id="sec-10-3-3"><span class="section-number-4">10.3.3</span> 匹配标签和属性</h4><div class="outline-text-4" id="text-10-3-3"><p>如果议程文件中的标题带有标签（见第6章）或者带有属性（见第7章），就可以基于这些元数据筛选标题到议程缓冲区中。这里描述的匹配语法在用 C-c / m 创建稀疏树时也同样适用。在标签列表中可以使用的命令在第10.4节描述。</p><div class="org-src-container"><pre class="src src-org">,C-c a m  将匹配指定的标签集的所有标题生成一个列表。这个命令询问筛选规则，可以是标签的逻辑表达式，如 “+work+urgent-withboss” 或 “work|home” （见第 6 章）。如果你经常使用某个搜索，可以将它定义成一个命令。（见第 10.2 节）,C-c a M  同 C-c a m，但只复选同时也是 TODO 项的标题。</pre></div><p><b>匹配语法</b></p><p>搜索字符串可以使用 ‘&amp;’ 作与运算， ‘|’ 作或运算。‘&amp;’ 的约束力比 ‘|’ 的强。括号功能现在还没实现。用以搜索的元素可以是标签 、匹配标签的正则表达式、或者像 PROPERTY OPERATOR VALUE 这样带有比较操作符的用来比较属性值的表达式。第一个元素前面加 ‘-’ 表示不选匹配的项，加 ‘+‘ 表示选择匹配的项。使用 ’+‘ 和 ’-“ 时，与操作符 ‘&amp;’ 就是可选的了。这里有一些只使用标签的例子。</p><pre class="example">”+work-boss“               选择标有”:work:“的标题，但去掉同时也标有”:boss:“的标题。。”work|laptop“              选择标有”:work:“或者”:laptop:“的行。”work|laptop+night“        跟前面相同，但要求标有”:laptop:“和行也要标有”:night:“。</pre><p>匹配标签时你也可以尝试同时匹配属性，详细内容见手册。</p></div></div><div id="outline-container-sec-10-3-4" class="outline-4"><h4 id="sec-10-3-4"><span class="section-number-4">10.3.4</span> 单文件时间轴</h4><div class="outline-text-4" id="text-10-3-4"><p>时间轴用时间排序视图概述单个文件中的所有带有时间戳的条目。这个命令的目的是用来给出一个工程中事件的鸟瞰图。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c a L</td><td class="left">给出 Org 文件中所有带时间戳条目的排序视图。带有 C-u 前缀时，没有完成的 TODO 项（作了安排的以及没作安排的）也列在当前日期下。</td></tr></tbody></table></div></div><div id="outline-container-sec-10-3-5" class="outline-4"><h4 id="sec-10-3-5"><span class="section-number-4">10.3.5</span> 查找视图</h4><div class="outline-text-4" id="text-10-3-5"><p>这个议程视图用来对 Org 模式下的条目进行普通的文本查找。对于查找笔记很有用。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c a s</td><td class="left">这个查找方式可以让你通过匹配子串或者用逻辑表达式指定关键字来选择条目。</td></tr></tbody></table><p>例如，查找字符串 <b>”computer equipment“</b> 将会查找包含子串 <b>”computer equipment“</b> 的条目。查找视图也可以用布尔逻辑查找条目中的关键字。查找字符串 <b>”+computer +wifi -ethernet-{8\.11[bg]}“</b> 将会搜索包含关键字 <b>computer</b> 和 <b>wifi</b> 但不含 <b>ethernet</b> ，并且不被正则表达式 <b>8\.11[bg]</b> （排除 8.11b 和 8.11g） 匹配的笔记条目。</p><p>注意，除了议程文件，这条命令也会搜索 org-agenda-text-search-extra-files 中列出的文件。</p></div></div></div><div id="outline-container-sec-10-4" class="outline-3"><h3 id="sec-10-4"><span class="section-number-3">10.4</span> 议程缓冲区的命令</h3><div class="outline-text-3" id="text-10-4"><p>议程缓冲区中的条目链接到了它们的源 Org 或者日记文件。有一些命令可以用来显示和跳转到条目的源位置，也可以从视图缓冲区中”远程“编辑源文件。下面只是所有命令的一个选集，浏览 <b>Agenda</b> 菜单和手册获得完整的列表。</p><p><b>动作</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">n</td><td class="left">下一行（同 DOWN 和 C-n）。<sup><a id="fnr.13" name="fnr.13" class="footref" href="#fn.13">13</a></sup></td></tr><tr><td class="left">p</td><td class="left">上一行（同 UP 和 C-p）。<sup><a id="fnr.14" name="fnr.14" class="footref" href="#fn.14">14</a></sup></td></tr></tbody></table><p><b>查看/转到 Org 文件</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">mouse-3</td><td class="left">&#xa0;</td></tr><tr><td class="left">SPC</td><td class="left">在另一个窗口中显示条目的源位置。带前缀使得整个条目在大纲中可见，而不只是标题。</td></tr><tr><td class="left">TAB</td><td class="left">在另一个窗口中条目的源位置。在 Emacs 22 之前的版本，mouse-1 也有这个功能。</td></tr><tr><td class="left">RET</td><td class="left">转到条目的源位置并删除其它的窗口。<sup><a id="fnr.15" name="fnr.15" class="footref" href="#fn.15">15</a></sup></td></tr></tbody></table><p><b>改变显示方式</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">o</td><td class="left">删除其他的窗口。</td></tr><tr><td class="left">d / w</td><td class="left">切换到日/周视图。</td></tr><tr><td class="left">f 和 b</td><td class="left">时间前移或者后移来显示随后的 org-agenda-current-span 天。例如，如果显示了一周的内容，切换到下/上一周。</td></tr><tr><td class="left">.</td><td class="left">转到今天。</td></tr><tr><td class="left">j</td><td class="left">询问日期并转到那天。</td></tr><tr><td class="left">v l 或简化为 l</td><td class="left">触发日志模式（Logbook mode）。在日志模式中，当记录功能打开（变量 org-log-done）时标记为 DONE 的条目，以及在那天计时的条目，都会显示在议程中。</td></tr><tr><td class="left">r 或 g</td><td class="left">重新构造议程，以反映最新的状态。</td></tr><tr><td class="left">s</td><td class="left">保存当前 Emacs 会话的所有 Org 缓冲区和ID的地址。</td></tr></tbody></table><p><b>二级筛选和查询编辑</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left"><code>/</code></td><td class="left">根据标签过滤当前的缓冲区。提示你输入一个字母选择一个标签。先按‘-’排除一个标签。</td></tr><tr><td class="left">\</td><td class="left">通过增加条件缩小当前议程的视图。<sup><a id="fnr.16" name="fnr.16" class="footref" href="#fn.16">16</a></sup></td></tr></tbody></table><p><b>远程编辑（参考手册获得更多命令）</b></p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">0-9</td><td class="left">数字参数。</td></tr><tr><td class="left">t</td><td class="left">修改议程和 org 文件中的条目的TODO状态。</td></tr><tr><td class="left">C-k</td><td class="left">删除当前的议程条目以及源文件中它的整个子树。</td></tr><tr><td class="left">C-c C-w</td><td class="left">传送当前的条目。</td></tr><tr><td class="left">C-c C-x C-a 或简作 a</td><td class="left">用在 org-archive-default-command 中设置的默认归档命令对当前的条目对应的整个树进行归档。</td></tr><tr><td class="left">C-c C-x C-s 或简作 $</td><td class="left">归档当前标题对应的树。</td></tr><tr><td class="left">C-c C-s</td><td class="left">规划（Schedule）一个条目，带有前缀参数时删除规划时间戳。</td></tr><tr><td class="left">C-c C-d</td><td class="left">为条目设置截止期限，带前缀时删除截止期限。</td></tr><tr><td class="left">S-RIGHT 和 S-LEFT</td><td class="left">将与当前行相关的时间戳改变一天。</td></tr><tr><td class="left">I</td><td class="left">对当前条目开始计时。</td></tr><tr><td class="left">O / X</td><td class="left">暂停/取消最近开始的计时。</td></tr><tr><td class="left">J</td><td class="left">在另一个窗口中跳转到正在进行的计时。</td></tr></tbody></table></div></div><div id="outline-container-sec-10-5" class="outline-3"><h3 id="sec-10-5"><span class="section-number-3">10.5</span> 定制议程视图</h3><div class="outline-text-3" id="text-10-5"><p>自定义搜索的主要用途是对于频繁使用的搜索进行快捷键绑定，从而快捷地创建议程缓冲区或者稀疏树（当然后者只涵盖当前缓冲区的内容）。自定义的命令是用变量 org-agenda-custom-commands 来配置的。你可以用 C-c a C 来定制这个变量。也可以直接在 ”.emacs“ 中用 Emacs lisp 来设置。下面的例子包含了所有合法的搜索类型：</p><div class="org-src-container"><pre class="src src-elisp">(setq org-agenda-custom-commands      '(("w" todo "WAITING")("u" tags "+boss-urgent")("v" tags-todo "+boss-urgent")))</pre></div><p>每个项的首字符串是使用调度器命令 C-c a 之后要给出的键以使用相应的命令。通常都是单个字符。第二个参数是搜索类型，接着是用来进行匹配的字符串或者正则表达式。上面的例子定义了：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c a w</td><td class="left">对于包含关键字 ”“ 的 TODO 项的全局搜索。</td></tr><tr><td class="left">C-c a u</td><td class="left">对于带有标签 ”:boss:“ 而不含标签 ”:urgent:“ 的标题的全局标签搜索。</td></tr><tr><td class="left">C-c a v</td><td class="left">同搜索 C-c a u，但搜索范围只限于同时也是 TODO 项的标题。</td></tr></tbody></table><p><b>扩展阅读</b><br>手册第 10 章<br>Mat Lundin’s tutorial about custom agenda commands<br>John Wiegley’s setup</p></div></div></div><div id="outline-container-sec-11" class="outline-2"><h2 id="sec-11"><span class="section-number-2">11</span> 准备导出</h2><div class="outline-text-2" id="text-11"><p>当导出 Org 模式的文档时，导出器在后端（backend）尽可能准确地反映出文档的结构。由于所要导出的目标文档像 HTML，LaTeX 和 DocBook 具有丰富的格式，Org 为富导出（rich export）提供了一些规则。这节概述 Org 模式缓冲区中的准备规则。</p></div><div id="outline-container-sec-11-1" class="outline-3"><h3 id="sec-11-1"><span class="section-number-3">11.1</span> 结构的组成元素</h3><div class="outline-text-3" id="text-11-1"><p><b>文档标题</b></p><p>导出文件的标题在特定行给出：</p><div class="org-src-container"><pre class="src src-org">#+TITLE: This is the title of the document</pre></div><p><b>标题和章节</b></p><p>第二章描述的大纲结构确定了导出文档的结构基础。然而由于大纲结构也用于（比如说）列表和任务，因此只有前三个级别用作标题。更深的级别会被看作项目列表。你可以通过变量 org-export-headline-levels 在全局设置这个开关，或者只是在单个文件中设置：</p><div class="org-src-container"><pre class="src src-org">#+OPTIONS: H:4</pre></div><p><b>目录表</b></p><p>目录表通常会直接插入在文档第一个标题之前。</p><div class="org-src-container"><pre class="src src-org">#+OPTIONS: toc:2 (目录中只显示二级标题)#+OPTIONS: toc:nil (无目录)</pre></div><p><b>段落、分行和引用</b></p><p>段落之间至少要有一空行。如果你想实现段内分行，可以在行后加上“\\”。</p><p>要想在一个区域内实现分行，而其他地方使用正常格式，你可以使用下面的构造，它也可以用来实现诗歌的格式：</p><div class="org-src-container"><pre class="src src-org">#+BEGIN_VERSE, Great clouds overhead, Tiny black birds rise and fall, Snow covers Emacs,     -- AlexSchroeder#+END_VERSE</pre></div><p>当从另外一个文档中引用一段话时通过会让它左右都缩进。在 Org 文档中可以这样作引用：</p><div class="org-src-container"><pre class="src src-org">#+BEGIN_QUOTE,Everything should be made as simple as possible,,but not any simpler -- Albert Einstein#+END_QUOTE</pre></div><p>如果你想让某些文本居中，可以这样：</p><div class="org-src-container"><pre class="src src-org">#+BEGIN_CENTER,Everything should be made as simple as possible, \\,but not any simpler#+END_CENTER</pre></div><p><b>强调和等宽</b></p><p>你可以让文字 <b>粗体</b> ， <i>斜体</i> ， <span class="underline">下划线</span>  ， <code>代码</code> ，以及  <code>逐文本</code> ，如果必需，也可以'<del>划掉</del>'。代码和逐文本的字符串不会以Org模式的语法格式来处理，会被逐字输出。想要插入一个水平格尺<sup><a id="fnr.17" name="fnr.17" class="footref" href="#fn.17">17</a></sup>，用一个只含有破折号的行来实现，要求至少有5个破折号。</p><p><b>注释行</b></p><p>以‘#‘位于第 0 列的行会被看作注释，不会被导出。如果你想要一个缩进的行也被作为注释，用“#+”开头。另外以关键字 “COMMENT” 开头的子树整个树都不会被导出。最后，被 <code>“#+BEGIN_COMMENT“</code> &#x2026; <code>”#+END_COMMENT”</code> 包围的整个区域也都不会被导出。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c ;</td><td class="left">在一个项的开头触发 COMMENT 关键字</td></tr></tbody></table></div></div><div id="outline-container-sec-11-2" class="outline-3"><h3 id="sec-11-2"><span class="section-number-3">11.2</span> 图片和表格</h3><div class="outline-text-3" id="text-11-2"><p>对于 Org 模式的表格，以竖直线开头的行会成为表格的首行。你可以在表格前面用下面几行为表格指定标题和标签，以方便交叉引用，在文本中可以用 <code>\ref{tab:basic-data}</code> 来引用它：</p><div class="org-src-container"><pre class="src src-org">#+CAPTION: This is the caption for the next table (or link)#+LABEL: tbl:basic-data,   | ... | ... |,   |-----+-----|</pre></div><p>一些后端（HTML，LaTeX，以及 DocBook）允许直接插入图片到导出的文档中。Org 也可以，只要图片的链接不含有描述部分就行了，例如：</p><pre class="example">[[./img/a.jpg]]</pre><p>如果你希望为图片定义一个标题，或者一个标签方便内部交叉引用，可以让图片单独一行，在前面加上：</p><pre class="example">#+CAPTION: This is the caption for the next figure link (or table)#+LABEL: fig:SED-HR4049[[./img/a.jpg]]</pre><p>你也可以为图形指定一些其他的特性。但由于这与后端<sup><a id="fnr.18" name="fnr.18" class="footref" href="#fn.18">18</a></sup>密切相关，可以参考关于特定后端的章节获得详细信息。</p></div></div><div id="outline-container-sec-11-3" class="outline-3"><h3 id="sec-11-3"><span class="section-number-3">11.3</span> 纯文本的例子</h3><div class="outline-text-3" id="text-11-3"><p>你可以包含进来一些纯文本的例子，这不属于准备的范畴。这些例子会等宽排版，所以适用于代码以及其他类似的情况：</p><div class="org-src-container"><pre class="src src-org">#+BEGIN_EXAMPLE,Some example from a text file.#+END_EXAMPLE</pre></div><p>为了简单化，一些小型的例子也可以将各行以冒号开头。冒号前面可以有空格：</p><div class="org-src-container"><pre class="src src-org">,Here is an example,   : Some example from a text file.</pre></div><p>对于一些程序设计语言的源代码以及一些其他的文本，可以被 Emacs 的字体锁（font-lock）特殊标记，你也可以让它们像在Emacs的缓冲区中那样显示：</p><div class="org-src-container"><pre class="src src-org">#+BEGIN_SRC emacs-lisp,(defun org-xor (a b),   "Exclusive or.",   (if a (not b) b))#+END_SRC</pre></div><p>为了能在支持这种语言的专门的缓冲区中编辑例子，可以用 C-c , 启动和退出编辑缓冲区。</p></div></div><div id="outline-container-sec-11-4" class="outline-3"><h3 id="sec-11-4"><span class="section-number-3">11.4</span> 包含文件</h3><div class="outline-text-3" id="text-11-4"><p>当导出文档时，你可以包含其他文件中的内容。比如，想包含你的“.emacs”文件，你可以用：</p><div class="org-src-container"><pre class="src src-org">,      #+INCLUDE: "~/.emacs" src emacs-lisp</pre></div><p>可选的第二个第三个参数是组织方式（例如，“quote”，“example”，或者“src”），如果是 “src”，语言用来格式化内容。组织方式是可选的，如果不给出，文本会被当作 Org 模式的正常处理。用 C-c ,可以访问包含的文件。</p></div></div><div id="outline-container-sec-11-5" class="outline-3"><h3 id="sec-11-5"><span class="section-number-3">11.5</span> 嵌入 LaTex</h3><div class="outline-text-3" id="text-11-5"><p>对于需要包含数学符号和特殊方程的科学笔记，Org 模式支持嵌入 LaTeX 代码到文件中。你可以直接使用类 TeX 的宏来输入特殊符号，输入方程，或者整个 LaTeX 环境。</p><div class="org-src-container"><pre class="src src-org">,Angles are written as Greek letters \alpha, \beta and \gamma. The mass if,the sun is M_sun = 1.989 x 10^30 kg. The radius of the sun is R_{sun} =,6.96 x 10^8 m. If $a^2=b$ and $b=2$, then the solution must be either,$a=+\sqrt{2}$ or $a=-\sqrt{2}$.,\begin{equation},x=\sqrt{b},\end{equation}</pre></div><p>特殊设置之后，导出 HTML 时 LaTeX 代码片断会生成图片并包含进来。</p><p><b>扩展阅读</b><br>手册第11章</p></div></div></div><div id="outline-container-sec-12" class="outline-2"><h2 id="sec-12"><span class="section-number-2">12</span> 导出</h2><div class="outline-text-2" id="text-12"><p>Org模式文档可以导出成多种格式：ASCII 用于包含在邮件中；HTML 用来发布到网页上；LaTeX/PDF 用来打印出漂亮的文档；DocBook 通过DocBook工具转换成其他各种各样的格式。也可以导出成 iCalendar 格式，将计划信息并入到桌面日历中。</p></div><div id="outline-container-sec-12-1" class="outline-3"><h3 id="sec-12-1"><span class="section-number-3">12.1</span> 导出选项</h3><div class="outline-text-3" id="text-12-1"><p>导出器能识别缓冲区中提供附加信息的特殊行。这样行可以放在文件中的任何地方。整个集合可以用 C-c C-e t 插入到缓冲区中。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-c t</td><td class="left">插入导出选项模板，见下面的例子</td></tr></tbody></table><div class="org-src-container"><pre class="src src-org">#+TITLE:       the title to be shown (default is the buffer name)#+AUTHOR:      the author (default taken from user-full-name)#+DATE:        a date, fixed, of a format string for format-time-string#+EMAIL:       his/her email address (default from user-mail-address)#+DESCRIPTION: the page description, e.g. for the XHTML meta tag#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)#+TEXT:        Some descriptive text to be inserted at the beginning.#+TEXT:        Several lines may be given.#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...#+LINK_UP:     the ``up'' link of an exported page#+LINK_HOME:   the ``home'' link of an exported page#+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}</pre></div></div></div><div id="outline-container-sec-12-2" class="outline-3"><h3 id="sec-12-2"><span class="section-number-3">12.2</span> 导出调度器</h3><div class="outline-text-3" id="text-12-2"><p>所有的导出命令都可以通过导出调度器来使用，调度器是一个前缀快捷键，它会提示输入一个字母来指定命令。通常整个文件都会被导出，但是如果选中区域包含大纲树，就会导出大纲树，并以第一个标题作为文件标题。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-e</td><td class="left">用来导出和发布的调度器</td></tr></tbody></table></div></div><div id="outline-container-sec-12-3" class="outline-3"><h3 id="sec-12-3"><span class="section-number-3">12.3</span> ASCII/Latin-1/UTF-8 的导出</h3><div class="outline-text-3" id="text-12-3"><p>ASCII导出功能能给 Org 文件提供的一个简单易读的版本，它只包含纯 ASCII 文本。Latin-1 和 UTF-8 导出用它们能编码的特殊字符扩展了文件的功能。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-e a</td><td class="left">导出 ASCII 文件</td></tr><tr><td class="left">C-c C-e n 和 C-c C-e N</td><td class="left">和上面的命令一样，但是用 Latin-1 编码<sup><a id="fnr.19" name="fnr.19" class="footref" href="#fn.19">19</a></sup></td></tr><tr><td class="left">C-c C-e u 和 C-c C-e U</td><td class="left">和上面的命令一样，但是用 UTF-8 编码</td></tr></tbody></table></div></div><div id="outline-container-sec-12-4" class="outline-3"><h3 id="sec-12-4"><span class="section-number-3">12.4</span> HTML的导出</h3><div class="outline-text-3" id="text-12-4"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-e h</td><td class="left">导出 HTML 文件</td></tr><tr><td class="left">C-c C-e b</td><td class="left">导出 HTML 文件并用浏览器打开</td></tr></tbody></table><p>想要将 HTML 以纯文本方式复制到导出文件，可以：</p><div class="org-src-container"><pre class="src src-org">#+HTML: Literal HTML code for export</pre></div><p>或者</p><pre class="example">#+BEGIN_HTMLAll lines between these markers are exported literally#+END_HTML</pre></div></div><div id="outline-container-sec-12-5" class="outline-3"><h3 id="sec-12-5"><span class="section-number-3">12.5</span> LaTeX和PDF的导出</h3><div class="outline-text-3" id="text-12-5"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-e l</td><td class="left">导出 LaTeX 文件</td></tr><tr><td class="left">C-c C-e p</td><td class="left">导出 LaTeX 文件，并处理成 PDF 文件</td></tr><tr><td class="left">C-c C-e d</td><td class="left">导出 LaTeX 文件，处理成 PDF 文件，并打开</td></tr></tbody></table><p>默认，LaTeX输出是使用article类型。但你可以在文件中通过选项 <code>#+LaTeX_CLASS: myclass</code> 来改变，但类型必须是 org-export-latex-classes 中列出的。</p><p>第 11.5 节撰述的内嵌的 LaTeX 可以正确地插入到 LaTeX 文件中。跟 HTML 导出器相似，也可以通过 <code>#+LaTeX:</code> 和 <code>#+BEGIN_LaTeX ... #+END_LaTeX</code> 来加入纯文本的 LaTex 代码。</p></div></div><div id="outline-container-sec-12-6" class="outline-3"><h3 id="sec-12-6"><span class="section-number-3">12.6</span> DocBook的导出</h3><div class="outline-text-3" id="text-12-6"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-e D</td><td class="left">导出 DocBook 文件</td></tr></tbody></table><p>跟 HTML 导出器相似，也可以通过 <code>#+DocBook:</code> 和 <code>#+BEGIN_DocBook ... #+END_DocBook</code> 结构来加入纯文本的 DocBook 代码。<sup><a id="fnr.20" name="fnr.20" class="footref" href="#fn.20">20</a></sup></p></div></div><div id="outline-container-sec-12-7" class="outline-3"><h3 id="sec-12-7"><span class="section-number-3">12.7</span> iCalendar的导出</h3><div class="outline-text-3" id="text-12-7"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-e i</td><td class="left">在一个 “.ice” 文件中为当前文件创建 iCalendar 项。</td></tr><tr><td class="left">C-c C-e c</td><td class="left">从 org-agenda-files 中的所有文件创建一个较大的 iCalendar 文件，并写入到 org-combined-agenda-icalendar-file 指定的文件中。</td></tr></tbody></table><p><b>扩展阅读</b><br>手册第12章<br>Sebastian Rose’s image handling tutorial<br>Thomas Dye’s LaTeX export tutorial Eric Fraga’s BEAMER presentation tutorial</p></div></div></div><div id="outline-container-sec-13" class="outline-2"><h2 id="sec-13"><span class="section-number-2">13</span> 发布</h2><div class="outline-text-2" id="text-13"><p>Org 包含一个发布管理系统，可以配置一个由相互链接的 Org 文件组成的工程项目的自动向 HTML 转换。你也可以设置 Org，将导出的 HTML 页面和相应的附件如图片，源代码文件等自动上传到服务器。如何设置，详见手册。</p><p>下面是一个例子：</p><div class="org-src-container"><pre class="src src-elisp">(setq org-publish-project-alist      '(("org" :base-directory "~/org/" :publishing-directory "~/public_html" :section-numbers nil :table-of-contents nil :style "&lt;link rel=\"stylesheet\"href=\"../other/mystyle.css\"type=\"text/css\"/&gt;")))</pre></div><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">C-c C-e C</td><td class="left">提示指明一个项目，将所有的文件发布。</td></tr><tr><td class="left">C-c C-e P</td><td class="left">发布包含当前文件的项目。</td></tr><tr><td class="left">C-c C-e F</td><td class="left">只发布当前文件。</td></tr><tr><td class="left">C-c C-e E</td><td class="left">发布所有项目。</td></tr></tbody></table><p>Org 用时间戳来查看文件是否改变。上面的命令只发布修改过的文件。你可以给它们加上前缀来强制重新发布所有的文件。                  </p><p><b>扩展阅读</b><br>手册第 1 章<br>Sebastian Rose’s publishing tutorial<br>Ian Barton’s Jekyll/blogging setup</p></div></div><div id="outline-container-sec-14" class="outline-2"><h2 id="sec-14"><span class="section-number-2">14</span> 处理源代码</h2><div class="outline-text-2" id="text-14"><p>Org模式提供了一系列功能来处理源代码，包括源代码块的本地主模式编辑，代码块的运行(evaluation)，代码块的混合，以及以多种方式导出代码块和它们的结果。</p><p><b>代码块的结构</b></p><p>代码块的结构就像下面这样：</p><div class="org-src-container"><pre class="src src-org">#+srcname: &lt;name&gt;#+begin_src &lt;language&gt; &lt;switches&gt; &lt;header arguments&gt;,  &lt;body&gt;#+end_src</pre></div><p>其中&lt;name&gt;是代码块的名称，&lt;language&gt;指定代码块的语言（例如，emacs-lisp，shell，R，python，等等），&lt;switches&gt;用以控制代码块的导出，&lt;header arguments&gt;用来从多个方面控制代码块的行为，下面会详述，最后&lt;body&gt;是我们要写的代码。</p><p><b>编辑源代码</b></p><p>使用C-c ,<sup><a id="fnr.21" name="fnr.21" class="footref" href="#fn.21">21</a></sup> 来编辑当前代码块。这个命令会新开一个以代码语言为主模式并包含代码的缓冲区（buffer）。保存这个缓冲区，会将新的内容写回Org缓冲区。再次使用C-c , 退出这个缓冲区。</p><p><b>运行代码块</b></p><p>用 C-c C-c 运行当前代码块并将它们的结果插入 Org 缓冲区中。默认情况下，运行功能只对 emacs-lisp 代码块开启，但支持多种语言。所支持语言的完整列表见手册。下面是一个代码块和它的结果。</p><div class="org-src-container"><pre class="src src-org">#+begin_src emacs-lisp,  (+ 1 2 3 4)#+end_src#+results:,: 10</pre></div><p><b>抽取源代码</b></p><p>用 C-c C-v 将代码块从一个 Org 模式的文件中抽取到“杂货库”（Library of Babel）中，这样在所有的 Org 模式的缓冲区中都可以运行该代码。一个常用的代码块集合在 contrib/library-of-babel.org 中随 Org 一直发布。</p><p><b>头参数</b></p><p>运行和导出代码时的很多选项都通过头参数来设置。选项可以指定为全局的，文件级别的，大纲子树级别的，或者只是用于一个代码块。下面解释部分头参数。</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">:var</td><td class="left">:var头参数用来将参数传递给代码块。能用来传递给参数的值可以是直接量，org模式表格中的值，文字实例块(literal example blocks)中的值，或者一个已命名代码块的结果。</td></tr><tr><td class="left">:results</td><td class="left">:result头参数控制代码块结果的收集、类型和处理。output和value（默认）的值指定怎样在运行代码块时收集结果。vector，scalar，file， raw， html， latex 和 code的值指定代码块结果的类型并以此确定将结果并入Org缓冲区的方式。silent， replace， prepend和 append指定处理代码块结果的方式，明确是否以及如何将结果插入Org缓冲区中。</td></tr><tr><td class="left">:session</td><td class="left">:session头参数将会使代码块在Emacs的一个持续交互的底层进程（persistent interactive inferior process）中执行。这考虑到了代码运行的持续状态和运行结果的人工检查。</td></tr><tr><td class="left">:exports</td><td class="left">代码和块结果的任何组合在导出时都可以保持，这可以通过设置:results头参数为code results none或者both来指定。</td></tr><tr><td class="left">:tangle</td><td class="left">头参数:tangle yes将使代码块的内容到保存到一个以Org模式缓冲区命名的文件中。也可以通过:tangle filename指明文件名。</td></tr><tr><td class="left">:cache</td><td class="left">头参数:cache yes将使繁杂的代码块和结果关联，确保输入改变时代码块重运行。</td></tr><tr><td class="left">:noweb</td><td class="left">头参数:noweb将扩展运行和混合时的”noweb“样式的引用。</td></tr><tr><td class="left">:file</td><td class="left">将代码块结果输出到文件时（比如，图形，表格，图表）可以用头参数:file filename，结果会被保存至指定的文件中，在Org缓冲区中插入一个到该文件的链接。</td></tr></tbody></table><p><b>扩展阅读</b><br>手册第 11.3 节<br>The Babel site on Worg</p></div></div><div id="outline-container-sec-15" class="outline-2"><h2 id="sec-15"><span class="section-number-2">15</span> 杂项</h2><div class="outline-text-2" id="text-15"></div><div id="outline-container-sec-15-1" class="outline-3"><h3 id="sec-15-1"><span class="section-number-3">15.1</span> 补全</h3><div class="outline-text-3" id="text-15-1"><p>Org 支持用 M-TAB 进行缓冲区内部的补全。这种补全不需要利用 minibuffer。你只需要键入几个字母然后用快捷键在原位补全。例如，这个命令可以在‘\’后面补全 TeX 符号，在标题的开头补全 TODO 关键字，在‘:’之后补全标签。</p></div></div><div id="outline-container-sec-15-2" class="outline-3"><h3 id="sec-15-2"><span class="section-number-3">15.2</span> 一个更清晰的大纲视图</h3><div class="outline-text-3" id="text-15-2"><p>当 Org 标题含有很多星号并且标题下面的文字不缩进时，就会显得杂乱无章。当写一个图书结构的文件时，大纲标题就是实际章节的标题，基于列表机大纲，上面的问题就不会再有，缩进的结构也会更清晰：</p><div class="org-src-container"><pre class="src src-org">* Top level headline ** Second level *** 3rd level,some text *** 3rd level,more text * Another top level headline</pre></div><p>如果你用的 Emacs 23.1.50.3 和 Org 6.29 的更高版本，这种视图可以用 org-indent-mode 模式动态地实现，它会在每行前面加上一些前导空格。你可以通过设置变量 org-startup-indented 为所有的文件打开 org-indent-mode 模式，或者用</p><div class="org-src-container"><pre class="src src-org">#+STARTUP: indent</pre></div><p>为单个文件打开缩进。如果你想在 Emacs 或者 Org 的早期版本中实现同样的效果，或者想让缩进用硬空格符号，以使得纯文本文件看起来一样。Org 可以缩进标题下面的文本（用TAB）;隐藏标题中的星号;只使用一级、三级等标题来为每级实现两个字符的缩进，从而实现这个功能。为了使这个特性在文件中支持，用：</p><div class="org-src-container"><pre class="src src-org">#+STARTUP: hidestars odd</pre></div></div></div><div id="outline-container-sec-15-3" class="outline-3"><h3 id="sec-15-3"><span class="section-number-3">15.3</span> MobileOrg</h3><div class="outline-text-3" id="text-15-3"><p>MobileOrg 最初是由 Richard Moreland 为 iPhone/iPod Touch 系列设备开发的应用程序。Matt Jones也为Android设备独立实现了一个版本。详见Org手册。  </p><hr><p><a id="note" name="note"></a> 本文的英文原文是 Org 主页上的一篇简短手册（ <a href="http://orgmode.org/guide/index.html" target="_blank" rel="noopener">The compact Org-mode Guide</a> ）。另外：</p><ul class="org-ul"><li>本文的脚注是双向链接的，你可以大胆地查看脚注而不用担心如何再定位到原文。</li><li>我不知道如何在引用的源代码中加脚注，如果你知道，希望你能告诉我。</li><li>我不知道如果在表格中正确显示‘|’，如果你知道，希望你能告诉我。</li><li>本文可能有错误，如果发现错误，请在评论中给出。</li></ul><p><i>返回</i></p></div></div></div><div id="footnotes"><h2 class="footnotes">Footnotes: </h2><div id="text-footnotes"><div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">见<a href="#note">说明</a>。</p></div><div class="footdef"><sup><a id="fn.2" name="fn.2" class="footnum" href="#fnr.2">2</a></sup> <p class="footpara">当然你也可以专门用一个文件来记录待办事项，但这不是必需的。</p></div><div class="footdef"><sup><a id="fn.3" name="fn.3" class="footnum" href="#fnr.3">3</a></sup> <p class="footpara">对应的buffer中的设置是：#+STARTUP: logdone</p></div><div class="footdef"><sup><a id="fn.4" name="fn.4" class="footnum" href="#fnr.4">4</a></sup> <p class="footpara">对应的buffer中的设置是：#+STARTUP: lognotedone</p></div><div class="footdef"><sup><a id="fn.5" name="fn.5" class="footnum" href="#fnr.5">5</a></sup> <p class="footpara">跟所有的缓冲区内设置一样，用C-c C-c 使行中的改变生效。</p></div><div class="footdef"><sup><a id="fn.6" name="fn.6" class="footnum" href="#fnr.6">6</a></sup> <p class="footpara">这跟通常意义上的 <i>安排一个会议</i> （ <i>scheduling a meeting</i> ）不同，后者只要在Org模式中插入一个不带关键字的时间戳就行了。</p></div><div class="footdef"><sup><a id="fn.7" name="fn.7" class="footnum" href="#fnr.7">7</a></sup> <p class="footpara">即使被标记为 DONE，在指定日期它依然会列在议程中。如果你不希望这样可以用变量 org-agenda-skip-scheduled-if-done 来设置。</p></div><div class="footdef"><sup><a id="fn.8" name="fn.8" class="footnum" href="#fnr.8">8</a></sup> <p class="footpara">截取位置是指保存截取信息的文件地址。</p></div><div class="footdef"><sup><a id="fn.9" name="fn.9" class="footnum" href="#fnr.9">9</a></sup> <p class="footpara">使用捕获模板，可以定义更细致的捕获地址，见[Capture templates]。</p></div><div class="footdef"><sup><a id="fn.10" name="fn.10" class="footnum" href="#fnr.10">10</a></sup> <p class="footpara">请设置你自己的快捷键，C-c c 只是一个建议。</p></div><div class="footdef"><sup><a id="fn.11" name="fn.11" class="footnum" href="#fnr.11">11</a></sup> <p class="footpara">这个表格实在翻译不通，以后再说吧。</p></div><div class="footdef"><sup><a id="fn.12" name="fn.12" class="footnum" href="#fnr.12">12</a></sup> <p class="footpara">注意，后两行中参数的顺序（月，日，年）依赖于 calendar-date-style 的设置。</p></div><div class="footdef"><sup><a id="fn.13" name="fn.13" class="footnum" href="#fnr.13">13</a></sup> <p class="footpara">原文是 C-p 有误。</p></div><div class="footdef"><sup><a id="fn.14" name="fn.14" class="footnum" href="#fnr.14">14</a></sup> <p class="footpara">原文是 C-n，有误。</p></div><div class="footdef"><sup><a id="fn.15" name="fn.15" class="footnum" href="#fnr.15">15</a></sup> <p class="footpara">在视图缓冲区的位置直接打开源位置，可能是版本的问题，并不删除其他的窗口。</p></div><div class="footdef"><sup><a id="fn.16" name="fn.16" class="footnum" href="#fnr.16">16</a></sup> <p class="footpara">不知道为什么我的版本不识别这个命令。</p></div><div class="footdef"><sup><a id="fn.17" name="fn.17" class="footnum" href="#fnr.17">17</a></sup> <p class="footpara">分隔线</p></div><div class="footdef"><sup><a id="fn.18" name="fn.18" class="footnum" href="#fnr.18">18</a></sup> <p class="footpara">（backend，导出目标）</p></div><div class="footdef"><sup><a id="fn.19" name="fn.19" class="footnum" href="#fnr.19">19</a></sup> <p class="footpara">可能是版本的问题，这个命令和下面的命令在我的机器上没有。</p></div><div class="footdef"><sup><a id="fn.20" name="fn.20" class="footnum" href="#fnr.20">20</a></sup> <p class="footpara">原文说是 LaTeX 代码，有误。</p></div><div class="footdef"><sup><a id="fn.21" name="fn.21" class="footnum" href="#fnr.21">21</a></sup> <p class="footpara">前面的逗号是命令的一部分，下同。</p></div></div></div></div><div id="postamble" class="status"><p class="date">Date: 2020-03-25 Wed</p><p class="author">Author: 神秘人</p><p class="date">Created: 2020-03-25 周三 14:13</p><p class="creator"><a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> 25.3.1 (<a href="http://orgmode.org" target="_blank" rel="noopener">Org</a> mode 8.2.10)</p><p class="validation"><a href="http://validator.w3.org/check?uri=referer" target="_blank" rel="noopener">Validate</a></p></div><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/shizuku.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false});</script></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DPI-C调用class中的TF</title>
      <link href="/2020/03/11/DPI-C%E8%B0%83%E7%94%A8class%E4%B8%AD%E7%9A%84TF/"/>
      <url>/2020/03/11/DPI-C%E8%B0%83%E7%94%A8class%E4%B8%AD%E7%9A%84TF/</url>
      
        <content type="html"><![CDATA[<h3 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h3><p>You can create a static instance of your sequence, then you will be able to access it from outside of the class.</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_seq <span class="hljs-keyword">extends</span> uvm_sequence;<br>  <span class="hljs-keyword">static</span> my_seq handle_m;<br> <br>  <span class="hljs-meta">`uvm_object_utils(my_seq)</span><br> <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name=<span class="hljs-string">"my_seq"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>    <span class="hljs-keyword">if</span>(handle_m == <span class="hljs-literal">null</span>) <span class="hljs-keyword">begin</span><br>      handle_m = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br> <br>  <span class="hljs-keyword">task</span> t1();<br>    <span class="hljs-comment">// access sequencer using m_sequencer for example</span><br>  <span class="hljs-keyword">endtask</span><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br> <br> <br><span class="hljs-keyword">task</span> t2();<br>  my_seq::handle_m<span class="hljs-variable">.t1</span>();<br><span class="hljs-keyword">endtask</span><br></code></pre></td></tr></table></figure><p>t2 task is called from C-DPI, then it can access t1() inside the seq class using static instance.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV约束中const的妙用</title>
      <link href="/2020/03/06/SV%E7%BA%A6%E6%9D%9F%E4%B8%ADconst%E7%9A%84%E5%A6%99%E7%94%A8/"/>
      <url>/2020/03/06/SV%E7%BA%A6%E6%9D%9F%E4%B8%ADconst%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>A const form of constant differs from a localparam constant in that the localparam shall be set during elaboration, whereas a const can be set during simulation, such as in an automatic task. </p><ul><li><p>在约束中被用作常数，如：Constraint for 32 bit addr to be different than prev addr by 2 bits.</p></li><li><p>土方法:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> a;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] addr;<br>    <span class="hljs-keyword">bit</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] prev_addr;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> pre_randomize;<br>        prev_addr = addr;<br>    <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">constraint</span> addr_constraint &#123;<span class="hljs-built_in">$countones</span>(addr ^ prev_addr) == <span class="hljs-number">2</span>;&#125;<br><span class="hljs-keyword">endclass</span> : a<br></code></pre></td></tr></table></figure></li><li><p>const方法:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> A;<br>    <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] addr;  <br>    <span class="hljs-keyword">constraint</span> addr_c &#123;<br>        <span class="hljs-built_in">$countones</span>(addr ^ <span class="hljs-keyword">const</span>'(addr)) == <span class="hljs-number">2</span>;<br>    &#125;<br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sv-package大小对编译速度的影响</title>
      <link href="/2020/02/10/sv-package%E5%A4%A7%E5%B0%8F%E5%AF%B9%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2020/02/10/sv-package%E5%A4%A7%E5%B0%8F%E5%AF%B9%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p>(转)</p><h1 id="Bigger-Is-Not-Always-Better-Builds-Are-Faster-with-Smaller-Packages"><a href="#Bigger-Is-Not-Always-Better-Builds-Are-Faster-with-Smaller-Packages" class="headerlink" title="Bigger Is Not Always Better: Builds Are Faster with Smaller Packages"></a>Bigger Is Not Always Better: Builds Are Faster with Smaller Packages</h1><p>One trend over the past few years is that the projects I’ve been working on tend to get bigger and more complicated. Bigger projects come with new challenges. Among these are the fact that it’s much more difficult to keep the entire project in one’s head, the need to synchronize with more developers because team sizes grow, a higher risk of having to re-write code because of poorly understood requirements or because some requirements change, and many more.</p><p>There’s one thing, though, that crept up on me: compile times get much bigger. While this doesn’t sound like a big deal, I’ve found that long build times are an absolute drain on productivity. I use <a href="http://agilesoc.com/open-source-projects/svunit/" target="_blank" rel="noopener">SVUnit</a> a lot, so I’m used to having a very short path between making a change and seeing the effects of that change. Ideally, there should be no delay between starting the test script and getting the result. A delay of a couple of seconds is tolerable. More than 10 seconds becomes noticeable. After exceeding the one minute mark, the temptation to switch to something else (like the Internet browser) becomes very high. This slowdown happens gradually, with each new class that is added, decreasing development speed.</p><p>In this post I’d like to talk about compilation. This topic has a tendency to be trivialized and underestimated, even more so in the hardware industry, where it’s common to have design flows already set up to deal with this process.</p><h2 id="Full-vs-incremental-builds"><a href="#Full-vs-incremental-builds" class="headerlink" title="Full vs. incremental builds"></a>Full vs. incremental builds</h2><p>A build is the process of taking the source code and producing an executable object. When talking about builds, there are two terms we need to be familiar with: full builds and incremental builds. A full build is performed when there isn’t any build output, which requires the entire source code to be built. This is either the case when starting in a new workspace (for example, after cloning the source repository) or after deleting the previous build output. An incremental build only builds the parts of the source code that have changed since the previous build. Because only parts of the project are rebuilt in this case, this means that, generally, the process is faster.</p><p>We’ll limit our discussion about builds to SystemVerilog packages, though the same concepts also apply to modules and interfaces.</p><p>Let’s say we have two packages, <em>package0</em> and <em>package1</em>, which we use in our verification environment:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// File: package0.sv</span><br><br><span class="hljs-keyword">package</span> package0;<br><br>  <span class="hljs-keyword">class</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// File: package1.sv</span><br><br><span class="hljs-keyword">package</span> package1;<br><br>  <span class="hljs-keyword">import</span> package0::*;<br><br>  <span class="hljs-keyword">class</span> some_derived_class <span class="hljs-keyword">extends</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>Compiling these two packages using an EDA tool is pretty straightforward:</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">compiler package0.sv package1.sv<br></code></pre></td></tr></table></figure><p>The very first time we run this command, the tool will parse the two source files and generate the data structures it uses to represent the compiler output. Since we didn’t have any build output when we ran the command, we were performing a full build.</p><p>If we add a new class to <em>package1</em> and run the compiler again, we will be performing an incremental build:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package1;<br><br>  <span class="hljs-keyword">import</span> package0::*;<br><br>  <span class="hljs-keyword">class</span> some_derived_class <span class="hljs-keyword">extends</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br>  <span class="hljs-keyword">class</span> some_other_class;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>The tool will only recompile <em>package1</em>. It won’t touch <em>package0</em>, since it didn’t change. If compilation for <em>package0</em> takes a lot of time, this will saves us that time.</p><h2 id="A-deeper-dive-into-SystemVerilog-compilation"><a href="#A-deeper-dive-into-SystemVerilog-compilation" class="headerlink" title="A deeper dive into SystemVerilog compilation"></a>A deeper dive into SystemVerilog compilation</h2><p>Before we continue with our main discussion, it makes sense to look a bit deeper into how SystemVerilog compilation works. Before I investigated this topic I had some misplaced ideas, which I would like to dispel.</p><p>I have only ever really looked at the behavior of one particular EDA tool, but I assume that other simulators behave similarly, as they all have a common heritage. Some SystemVerilog tools differentiate between compilation and elaboration. These defintions depend on the tool you’re using. I’ve seen compilation used to mean parsing the code and generating syntax trees. Elaboration takes these syntax trees and generates executable code that is run in the simulator. I’ll use the term <em>compile</em> to mean both of these steps.</p><p>Let’s start small, with a single package that contains only one class:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package0;<br><br>  <span class="hljs-keyword">class</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>After we compile the package, we will have performed a full build. Now, let’s add another class to the package:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package0;<br><br>  <span class="hljs-keyword">class</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br>  <span class="hljs-keyword">class</span> some_base_class2;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>In this case, you’ll notice that the tool compiles both classes. I’m a bit cautious about posting the log files and how I can tell that it’s compiling both classes. Some tools make this easier to see than others. One clear sign is that compile takes longer. You can try it out by adding more and more classes and recompiling. </p><p>In this case, an incremental compile takes about as much time as a full build, which suggests that nothing is being reused from previous build attempts. Even if we only add classes, the build output for previously built classes is discarded.</p><p>What did we learn from this? That tools only organize build output using packages as their most granular unit. Changes within packages are “lost”, from an incremental build point of view.</p><p>You could argue that from the previous experiment we could infer that tools organize build output based on files. If we were to put each file in its own class and include them in the package, then the tool would be able to somehow behave differently. This isn’t, the case, though. <em>`include</em> directives are handled by the pre-processor. It interleaves all of the files together and gives the compiler a big file with all the class definitions inline (the situation we had previously).</p><p>We can do another experiment to convince ourselves that builds aren’t organized by files. Let’s put two packages inside the same file:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package0;<br><span class="hljs-keyword">endpackage</span><br><br><span class="hljs-keyword">package</span> package1;<br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>Let’s modify <em>package1</em> by adding a new variable:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package0;<br><span class="hljs-keyword">endpackage</span><br><br><span class="hljs-keyword">package</span> package1;<br>  <span class="hljs-keyword">bit</span> some_var;<br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>When rebuilding, we’ll notice that only <em>package1</em> gets rebuilt, but <em>package0</em> is left alone. (This is also the behavior we would have liked to have for classes inside a package.)</p><p>Now let’s also modify <em>package0</em> by adding a variable to it:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package0;<br>  <span class="hljs-keyword">bit</span> some_var;<br><span class="hljs-keyword">endpackage</span><br><br><span class="hljs-keyword">package</span> package1;<br>  <span class="hljs-keyword">bit</span> some_var;<br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>When rebuilding, we’ll see that <em>package0</em> is being rebuilt, as we expected, but, surprisingly, so is <em>package1</em>. This is very confusing initially, but obvious once you know the explanation. Because we shifted the lines where <em>package1</em> and its items are defined in the file, the tool has to update debug information regarding line numbers. This is important for debuggers and for messages that contain line numbers (like assertion erros, <em>$info(…)</em> calls, etc.). This, by the way, is a very good reason to only define one element (package, interface, module) per file.</p><p>Let’s look at one more thing. Let’s take two packages that have a dependency relationship:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package0;<br><br>  <span class="hljs-keyword">class</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package1;<br><br>  <span class="hljs-keyword">import</span> package0::*;<br><br>  <span class="hljs-keyword">class</span> some_derived_class <span class="hljs-keyword">extends</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>It’s clear that changes to <em>package1</em> shouldn’t (and indeed won’t) cause rebuilds of <em>package0</em>. It’s also clear that changing <em>some_base_class</em> will have to trigger a rebuild of <em>package1</em>. Now, let’s add a new class to <em>package0</em>:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> package0;<br><br>  <span class="hljs-keyword">class</span> some_base_class;<br>  <span class="hljs-keyword">endclass</span><br><br>  <span class="hljs-keyword">class</span> some_base_class2;<br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>At this point, we shouldn’t be surprised anymore that both packages are rebuilt in this case. This is because the tool only understands changes at the package level. <em>package1</em> depends on <em>package0</em>, so any change to <em>package0</em> will lead to a rebuild of <em>package1</em>, regardless if this is really needed. Unfortunately, this isn’t the behavior we would like to have.</p><p>Contrast the way SystemVerilog builds work to C++, where files are compiled individually and are linked together in a separate step (a gross over-simplifaction). Changes to one class don’t cause recompiles of other classes in the same namespace, if the two classes are unrelated. This is because C++ classes are split between the header (which declares which functions a class provides) and the implementation (which contain the function bodies). A class that depends on another class includes its header, to let the compiler know that it relies on the other class. Only changes in a class’s header cause recompiles of dependent classes, while changes to its implementation don’t. Because of this setup, C++ builds are much more powerful when it comes to build avoidance, by only rebuilding the parts that they absolutely have to build. This allows for guidelines that incremental builds should take between 5-10 seconds and that full builds (including tests) should take between 1-2 minutes, according to <a href="http://www.bitsnbites.eu/faster-c-builds/" target="_blank" rel="noopener">http://www.bitsnbites.eu/faster-c-builds/</a>, numbers which are incredibly low by SystemVerilog standards, where merely starting the simulator takes double digit numbers of seconds.</p><h2 id="Case-study"><a href="#Case-study" class="headerlink" title="Case study"></a>Case study</h2><p>The classic testbench structure for an IP block consists of one or more interface verification components (IVCs), that contain code related to the signal protocols used by the design, and one module verification component (MVC), that contains code for aspects related to the design functionality.</p><p>IVCs typically consist of a package and one or more interfaces. We don’t usually make changes to the IVCs, so once we’ve built them via a full build, they won’t have any impact on subsequent incremental builds.</p><p>Most of our work is focused on the MVC. As we’ve seen above, if we place our MVC code into one package, then any change we make to it will trigger a new build, because of the way SystemVerilog tools handle incremental builds. This isn’t going to be very efficient, as an incremental build of the package after each change will take about as long as a full build.</p><p>What would happen if we could split our big MVC package into multiple smaller packages?</p><p>It’s experiment time again! We’ll assume that we can split the code such that building each package takes the same amount of time. We’ll also ignore any extra costs from building multiple packages instead of one single package. This means that if an incremental build of the entire <em>mvc</em> package would have taken <em>N</em> seconds, then by splitting it into <em>P</em> packages each of the smaller packages would take <em>N/P</em> seconds to build. We’ll also assume that we are just as likely to make changes to any of the smaller packages. This means that the probablity to change any package is <em>1/P</em>.</p><p>Let’s assume that we can create two independent packages, <em>p0</em> and <em>p1</em>. We can misuse UML to visualize the package topology:<br><img src="/2020/02/10/sv-package大小对编译速度的影响/1.png" alt="1"><br>Any change we make to <em>p0</em> won’t cause rebuilds of <em>p1</em> and vice-versa. We can compute the average incremental build time in this case. Building any of the packages takes <em>N/2</em> seconds, but we do it only half of the time (since in the other half we change the other package). The average incremental build time is the mean: <em>N/2 \</em> 1/2 + N/2 <em> 1/2 = N/2</em>. By splitting the code into two independent packages, we’ve managed to half our incremental build time. It’s not very realistic, though, that we could manage to do such a split on a real project.</p><p>Let’s have a look at something closer to reality. Let’s assume that we can split our MVC into two packages, <em>p0</em> and <em>p1</em>, but <em>p1</em> depends on <em>p0</em>:<br><img src="/2020/02/10/sv-package大小对编译速度的影响/2.png" alt="2"><br>An incremental build of <em>p1</em> would still take only <em>N/2</em> seconds, because changing anything in <em>p1</em> doesn’t have any effect on <em>p0</em>. A change in <em>p0</em> would mean that we also have to rebuild <em>p1</em>, which means that it would take <em>N/2 + N/2 = N</em> seconds. On average, we would need <em>N/2 \</em> 1/2 + N <em> 1/2 = 3/4 </em> N* seconds.</p><p>We should try to structure our code in such a way as to increase the number of packages without any dependencies to each other. Let’s say we can split <em>p1</em> from the previous example into two independent packages, <em>p1_0</em> and <em>p1_1</em>:<br><img src="/2020/02/10/sv-package大小对编译速度的影响/3.png" alt="3"><br>In this case, changing anything in either <em>p1_0</em> or <em>p1_1</em> would take <em>N/3</em> seconds. A change in <em>p0</em> would require all three packages to be rebuilt and would take the full <em>N</em> seconds. On average, a change would take <em>N/3 \</em> 1/3 + N/3 <em> 1/3 + N </em> 1/3 = 7/9 <em> N</em> seconds.</p><p>We could go on further with deeper package hierarchies, but I think you get the idea.</p><p>MVC code lends itself nicely to such a structure. We typically have some “common” code that models the basics of our DUT, from which we can model different higher level aspects, relating to the features of the DUT. We would use our models inside checks or coverage, which could be built independently from each other:<br><img src="/2020/02/10/sv-package大小对编译速度的影响/4.png" alt="4"></p><h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>Splitting code across multiple packages will generally be better for compilation speed. There are also other advantages. It could make the code base easier to understand, by grouping code by theme (code for <em>X</em> goes in package <em>p_x</em>, code for <em>Y</em> goes in package <em>p_y</em>). It could also make development easier, by allowing developers to specialize in only a handful of the packages, instead of having to deal with the entire code base.</p><p>Having to manage multiple packages brings its own set of challenges, though. It could make the code base more difficult to understand if the boundaries between packages are arbitrary (where does code for <em>X</em> go, in <em>p0</em> or <em>p1</em>?). More packages, especially when they have intricate dependency relationships, also make compilation more difficult to set up.</p><p>I’m not going to recommend making one package per class, just to improve build times. Ideally, SystemVerilog compilers should evolve to better handle incremental compilation, by working at levels lower than just packages. At the same time, you should care about turnaround time, so dumping all code into one package shouldn’t be your default mode of operation.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone断点续传</title>
      <link href="/2019/12/10/git-clone%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/"/>
      <url>/2019/12/10/git-clone%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="编译后端"><a href="#编译后端" class="headerlink" title="编译后端"></a>编译后端</h3><p>打开终端(假设你已经安装好了 git 和 cmake， gcc 或者 clang）</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/cquery-project/cquery.git<br><span class="hljs-built_in">cd</span> cquery<br>mkdir build &amp;&amp; <span class="hljs-built_in">cd</span> build<br>cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES<br>cmake --build .<br>cmake --build . --target install<br></code></pre></td></tr></table></figure><p>这样 cquery 就被编译好了，编译好的 cquery 会在 <strong>cquery/build/release/bin/</strong> 目录下生成一个名为 cquery 的 二进制文件</p><p>然后安装 lsp-mode, 可以使用 emacs 自带的包管理来安装</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">M-x package-install [RET] lsp-mode [RET]<br></code></pre></td></tr></table></figure><p>安装好之后在你的emacs 的配置文件里写下如下配置</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs commonlisp">;;; 如果 cquery 编译好之后的执行文件在 PATH 下的话，这条语句就不需要，<br>;;;  &quot;/path/to/cquery/build/release/bin/cquery&quot; 是 cquery 的位置<br>(setq cquery-executable &quot;/path/to/cquery/build/release/bin/cquery&quot;)<br>(dolist (hook &apos;(c-mode-hook c++-mode-hook))<br>  (add-hook hook<br>    #&apos;(lambda ()<br>(require &apos;cquery)<br>(lsp))))<br></code></pre></td></tr></table></figure><p>还有一些其他可以方便使用的配套插件也可以安装上比如 lsp-ui 和 company-lsp</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">M-x package-install [RET] lsp-ui [RET]<br>M-x package-install [RET] company-lsp [RET]<br></code></pre></td></tr></table></figure><p>配置 company-lsp</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs commonlisp">(push &apos;company-lsp company-backends)<br></code></pre></td></tr></table></figure><h3 id="git-clone-断了，下载了好久，续传"><a href="#git-clone-断了，下载了好久，续传" class="headerlink" title="git clone 断了，下载了好久，续传~~"></a>git clone 断了，下载了好久，续传~~</h3><p>2)进入项目根目录，继续下载<br><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> cquery</span><br><span class="hljs-meta">$</span><span class="bash"> git submodule update --init --recursive</span><br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emacs-vim加入lsp-mode成为最强ide~</title>
      <link href="/2019/12/09/emacs-vim%E5%8A%A0%E5%85%A5lsp-mode%E6%88%90%E4%B8%BA%E6%9C%80%E5%BC%BAide/"/>
      <url>/2019/12/09/emacs-vim%E5%8A%A0%E5%85%A5lsp-mode%E6%88%90%E4%B8%BA%E6%9C%80%E5%BC%BAide/</url>
      
        <content type="html"><![CDATA[<h4 id="emacs-vim-hack已经停不下来了，启动快，ide，各种好处，以前排斥，现在欣然学习接受"><a href="#emacs-vim-hack已经停不下来了，启动快，ide，各种好处，以前排斥，现在欣然学习接受" class="headerlink" title="emacs-vim hack已经停不下来了，启动快，ide，各种好处，以前排斥，现在欣然学习接受~"></a>emacs-vim hack已经停不下来了，启动快，ide，各种好处，以前排斥，现在欣然学习接受~</h4><p><img src="/2019/12/09/emacs-vim加入lsp-mode成为最强ide/pyls.png" alt="pyls"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim该说再见了，留下编辑思想~</title>
      <link href="/2019/11/20/vim%E8%AF%A5%E8%AF%B4%E5%86%8D%E8%A7%81%E4%BA%86%EF%BC%8C%E7%95%99%E4%B8%8B%E7%BC%96%E8%BE%91%E6%80%9D%E6%83%B3/"/>
      <url>/2019/11/20/vim%E8%AF%A5%E8%AF%B4%E5%86%8D%E8%A7%81%E4%BA%86%EF%BC%8C%E7%95%99%E4%B8%8B%E7%BC%96%E8%BE%91%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="vim该说再见了，留下编辑思想"><a href="#vim该说再见了，留下编辑思想" class="headerlink" title="vim该说再见了，留下编辑思想~"></a>vim该说再见了，留下编辑思想~</h3><p><img src="/2019/11/20/vim该说再见了，留下编辑思想/evilm.png" alt="evilm"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印用户下所有的git仓库</title>
      <link href="/2019/11/20/%E6%89%93%E5%8D%B0%E7%94%A8%E6%88%B7%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84git%E4%BB%93%E5%BA%93/"/>
      <url>/2019/11/20/%E6%89%93%E5%8D%B0%E7%94%A8%E6%88%B7%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84git%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"><br>$</span><span class="bash"> curl -s https://api.github.com/users/nonsequitur/repos?per_page=1000 |grep git_url |awk <span class="hljs-string">'&#123;print $2&#125;'</span>| sed <span class="hljs-string">'s/"\(.*\)",/\1/'</span>                                                                                        </span><br>git://github.com/nonsequitur/bitcoinbook.git                                                               <br>git://github.com/nonsequitur/bundix.git                                                                    <br>git://github.com/nonsequitur/cask.git                                                                      <br>git://github.com/nonsequitur/dotfiles.git                                                                  <br>git://github.com/nonsequitur/elementsproject.github.io.git                                                 <br>git://github.com/nonsequitur/emacs-git-gutter.git                                                          <br>git://github.com/nonsequitur/emacs-git-gutter-fringe.git                                                   <br>git://github.com/nonsequitur/events.git                                                                    <br>git://github.com/nonsequitur/flickr-download.git                                                           <br>git://github.com/nonsequitur/fringe-helper.el.git                                                          <br>git://github.com/nonsequitur/GamePlay.git                                                                  <br>git://github.com/nonsequitur/git-gutter-fringe-plus.git                                                    <br>git://github.com/nonsequitur/git-gutter-plus.git                                                           <br>git://github.com/nonsequitur/git-modes.git                                                                 <br>git://github.com/nonsequitur/helm-helm-commands.git                                                        <br>git://github.com/nonsequitur/home-manager.git                                                              <br>git://github.com/nonsequitur/idle-highlight-mode.git                                                       <br>git://github.com/nonsequitur/inf-ruby.git                                                                  <br>git://github.com/nonsequitur/kdlearn.git                                                                   <br>git://github.com/nonsequitur/magit.git                                                                     <br>git://github.com/nonsequitur/melpa.git                                                                     <br>git://github.com/nonsequitur/nix-emacs.git                                                                 <br>git://github.com/nonsequitur/nixpkgs.git                                                                   <br>git://github.com/nonsequitur/nox.git                                                                       <br>git://github.com/nonsequitur/ofborg.git                                                                    <br>git://github.com/nonsequitur/orglink.git                                                                   <br>git://github.com/nonsequitur/overlay-bug-emacs.d.git                                                       <br>git://github.com/nonsequitur/projectile.git                                                                <br>git://github.com/nonsequitur/python-mnemonic.git                                                           <br>git://github.com/nonsequitur/qt3d.git                                                                      <br>git://github.com/nonsequitur/rubygems.git                                                                  <br>git://github.com/nonsequitur/rum.git                                                                       <br>git://github.com/nonsequitur/rum-dev.git                                                                   <br>git://github.com/nonsequitur/s.el.git                                                                      <br>git://github.com/nonsequitur/show-performance-bug.git                                                      <br>git://github.com/nonsequitur/smex.git                                                                      <br>git://github.com/nonsequitur/test.git                                                                      <br>git://github.com/nonsequitur/tldr.git                                                                      <br>git://github.com/nonsequitur/tldr.el.git                                                                   <br>git://github.com/nonsequitur/victor-arias-event-sim.git                                                    <br>git://github.com/nonsequitur/vimeo-download.git                                 ```<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emacs+evil偶数行合并到奇数行</title>
      <link href="/2019/11/15/emacs-evil%E5%81%B6%E6%95%B0%E8%A1%8C%E5%90%88%E5%B9%B6%E5%88%B0%E5%A5%87%E6%95%B0%E8%A1%8C/"/>
      <url>/2019/11/15/emacs-evil%E5%81%B6%E6%95%B0%E8%A1%8C%E5%90%88%E5%B9%B6%E5%88%B0%E5%A5%87%E6%95%B0%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="emacs-强大实时显示-vim编辑的快速，niubility"><a href="#emacs-强大实时显示-vim编辑的快速，niubility" class="headerlink" title="emacs 强大实时显示+vim编辑的快速，niubility~"></a>emacs 强大实时显示+vim编辑的快速，niubility~</h3><p><img src="/2019/11/15/emacs-evil偶数行合并到奇数行/evil.png" alt="evil"></p>]]></content>
      
      
      <categories>
          
          <category> emacs </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> evil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级glibc动态库</title>
      <link href="/2019/11/06/%E5%8D%87%E7%BA%A7glibc%E5%8A%A8%E6%80%81%E5%BA%93/"/>
      <url>/2019/11/06/%E5%8D%87%E7%BA%A7glibc%E5%8A%A8%E6%80%81%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>(转)</p><p>glibc是gnu发布的libc库，即c运行库，glibc是linux系统中最底层的api，几乎其它任何运行库都会依赖于glibc。glibc除了封装linux操作系统所提供的系统服务外，它本身也提供了许多其它一些必要功能服务的实现。很多linux的基本命令，比如cp, rm, ll,ln等，都得依赖于它，如果操作错误或者升级失败会导致系统命令不能使用，严重的造成系统退出后无法重新进入，所以操作时候需要慎重。</p><p>1、首先，查看系统版本和Glibc版本</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@noi ~]# cat /etc/redhat-release<br>CentOS release 6.9 (Final)<br><br>[root@noi ~]# strings /lib64/libc.so.6 | grep GLIBC_<br>GLIBC_2.2.5<br>GLIBC_2.2.6<br>GLIBC_2.3<br>GLIBC_2.3.2<br>GLIBC_2.3.3<br>GLIBC_2.3.4<br>GLIBC_2.4<br>GLIBC_2.5<br>GLIBC_2.6<br>GLIBC_2.7<br>GLIBC_2.8<br>GLIBC_2.9<br>GLIBC_2.10<br>GLIBC_2.11<br>GLIBC_2.12<br>GLIBC_PRIVATE<br></code></pre></td></tr></table></figure><p>由上面的信息可以看出系统是CentOS 6.9，最高支持glibc的版本为2.12，而现在都已经2.27版本了，所以需要升级。</p><p>2、下载软件并升级</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://ftp.gnu.org/gnu/glibc/glibc-2.27.tar.gz tar -xvf  glibc-2.27.tar.gz mkdir glibc-2.27/buildcd glibc-2.27build ../configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/binmakemake install<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>误删除Linux中libc.so.6文件急救办法~</title>
      <link href="/2019/11/05/%E8%AF%AF%E5%88%A0%E9%99%A4Linux%E4%B8%ADlibc-so-6%E6%96%87%E4%BB%B6%E6%80%A5%E6%95%91%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/11/05/%E8%AF%AF%E5%88%A0%E9%99%A4Linux%E4%B8%ADlibc-so-6%E6%96%87%E4%BB%B6%E6%80%A5%E6%95%91%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="转：大坑啊"><a href="#转：大坑啊" class="headerlink" title="(转：大坑啊~~~~)"></a>(转：大坑啊~~~~)</h3><p>大家在linux中操作命令时，由于某些操作会导致误删除一些文件，也许这些文件就是大部分命令所依赖的，删除会导致什么问题呢？接下来就一起看看。</p><p>  首先普及一下关于libc.so.6的基本常识：</p><p>​       首先敲一下命令：cd /lib64    然后敲这个命令：locate libc.so.6 最后敲：ll libc.so.6</p><p>​       我们可以看到以下：</p><p>​    <img src="/2019/11/05/误删除Linux中libc-so-6文件急救办法/1.png" alt="1"></p><p>​      glibc是gnu发布的libc库，即c运行库。glibc是linux系统中最底层的api，几乎其它任何运行库都会依赖于glibc，所以说绝大部分操作命令都缺少不了它。</p><p>​      如果误删了/lib64/libc.so.6，大部分系统命令将无法执行，ssh登录系统也不成功，只会无休止的提示以下错误:error while loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory.     </p><p>​      鉴于这种情况，大部分命令已经不能执行了，只能执行例如cd,echo等小部分命令，而实用的cp,mv则更不可用。从上图中可以查看/lib64/libc.so.6得知是属于libc-2.17.so的软链接，因此，libc-2.17.so文件肯定还是存在的，误删的只是软链接而已，但此时想用ln命令重新建立软链接是失败的，但是可以这样强制设置变量就能执行成功</p><p>LD_PRELOAD=/lib64/libc-2.5.so  ln -s /lib64/libc-2.5.so /lib64/libc.so.6</p><p>​     注意的是，这整条命令要在同一行执行，不能分两行，否则就无效了.例如下图：</p><p><img src="/2019/11/05/误删除Linux中libc-so-6文件急救办法/2.png" alt="2"><br>这样你的机器就ok啦（<strong>在误删除命令时千万不要关闭终端哦，就在当前终端敲上图命令</strong>）</p><p>​     通过前面设置一下LD_PRELOAD变量，后面也是可以执行其它例如cp,mv等命令的</p><p>​    例如我一开始不是误删，只是把libc.so.6改名了，从而也导致了上面的错误，于是就可以按照下面方法恢复libc.so.6</p><p>​    LD_PRELOAD=/lib64/libc-2.17.so mv /lib64/libc.so.6.bak /lib64/libc.so.6</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> GLIBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emacs+vim刀剑合并~</title>
      <link href="/2019/10/31/emacs-vim%E5%88%80%E5%89%91%E5%90%88%E5%B9%B6/"/>
      <url>/2019/10/31/emacs-vim%E5%88%80%E5%89%91%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="Vim重度用户已经无法满足了和emacs这只怪物合并提升层级-效率高"><a href="#Vim重度用户已经无法满足了和emacs这只怪物合并提升层级-效率高" class="headerlink" title="Vim重度用户已经无法满足了和emacs这只怪物合并提升层级~效率高~"></a>Vim重度用户已经无法满足了和emacs这只怪物合并提升层级~效率高~</h4><p><img src="/2019/10/31/emacs-vim刀剑合并/emacs-evil.png" alt="emacs-evil"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精细化控制process~</title>
      <link href="/2019/10/14/%E7%B2%BE%E7%BB%86%E5%8C%96%E6%8E%A7%E5%88%B6process/"/>
      <url>/2019/10/14/%E7%B2%BE%E7%BB%86%E5%8C%96%E6%8E%A7%E5%88%B6process/</url>
      
        <content type="html"><![CDATA[<h4 id="啥也不说，做个轮子"><a href="#啥也不说，做个轮子" class="headerlink" title="啥也不说，做个轮子~"></a>啥也不说，做个轮子~</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//###############################################################################</span><br><span class="hljs-comment">//Process</span><br><span class="hljs-comment">//###############################################################################</span><br><span class="hljs-keyword">class</span> Process;<br><br>    <span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123;FINISHED,RUNNING,WAITING,SUSPENDED,KILLED&#125; state;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>        process pid;<br>        <span class="hljs-keyword">realtime</span> start_time;<br>        <span class="hljs-keyword">realtime</span> end_time;<br>    &#125; process_st;<br>    <br>    <span class="hljs-keyword">static</span> process_st pid[<span class="hljs-keyword">string</span>];<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> Setpid (<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(!pid<span class="hljs-variable">.exists</span>(name)) <span class="hljs-keyword">begin</span><span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.pid</span> = process::self(); <br>            pid[name]<span class="hljs-variable">.start_time</span> = <span class="hljs-built_in">$realtime</span>; <br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s already exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span>  <br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> process Getpid (<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            <span class="hljs-keyword">return</span> pid[name]<span class="hljs-variable">.pid</span>; <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span>  <br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> SetEndTime (<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name)) <span class="hljs-keyword">begin</span><span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.end_time</span> = <span class="hljs-built_in">$realtime</span>; <br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span>  <br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> state Status(<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            <span class="hljs-keyword">return</span> state'(pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.status</span>); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> Kill(<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.kill</span>(); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">task</span> Await(<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.await</span>(); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">task</span> Suspend(<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.suspend</span>(); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">task</span> Resume(<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.resume</span>(); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> Srandom(<br>        <span class="hljs-keyword">string</span> name,<br>        <span class="hljs-keyword">int</span> seed<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.srandom</span>(seed); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">string</span> Get_randstate(<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            <span class="hljs-keyword">return</span> pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.get_randstate</span>(); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> Set_randstate(<br>        <span class="hljs-keyword">string</span> name,<br>        <span class="hljs-keyword">string</span> state<br>    );<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.exists</span>(name))<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.set_randstate</span>(state); <br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Pid name:%s not exists!"</span>,name));<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> Gc();<br>        <span class="hljs-keyword">string</span> name;<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.first</span>(name)) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">do</span> <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span>(pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.status</span> == process::FINISHED)<span class="hljs-keyword">begin</span><br>                    <span class="hljs-built_in">$info</span>(<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Delete pid[FINISHED] name:%s."</span>,name));<br>                    pid<span class="hljs-variable">.delete</span>(name);<br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.status</span> == process::KILLED)<span class="hljs-keyword">begin</span><br>                    <span class="hljs-built_in">$info</span>(<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Delete pid[KILLED] name:%s."</span>,name));<br>                    pid<span class="hljs-variable">.delete</span>(name);<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span>(pid<span class="hljs-variable">.next</span>(name));<br>        <span class="hljs-keyword">end</span><span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">task</span> WaitForNotNull(<br>        <span class="hljs-keyword">string</span> name<br>    );<br>        #<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">wait</span>(pid[name]<span class="hljs-variable">.pid</span> != <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">task</span> WaitForAllNotNull();<br>        <span class="hljs-keyword">string</span> name;<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>        #<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.first</span>(name)) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">do</span> <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">wait</span>(pid[name]<span class="hljs-variable">.pid</span> != <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span>(pid<span class="hljs-variable">.next</span>(name));<br>        <span class="hljs-keyword">end</span><span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">task</span> AwaitAll();<br>        <span class="hljs-keyword">string</span> name;<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.first</span>(name)) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">do</span> <span class="hljs-keyword">begin</span><br>                pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.await</span>();<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span>(pid<span class="hljs-variable">.next</span>(name));<br>        <span class="hljs-keyword">end</span><span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> Print();<br>        <span class="hljs-keyword">string</span> pstr;<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>        <span class="hljs-keyword">string</span> name;<br>        <span class="hljs-keyword">realtime</span> start_time;<br>        <span class="hljs-keyword">realtime</span> end_time;<br>        pstr = <span class="hljs-string">"################################################################################\n"</span>;<br>        pstr = &#123;pstr,<span class="hljs-string">"[ ProcessIdName ]\t[   Status  ]\t[  StartTime(ns) ]\t[  EndTime(ns) ]\n"</span>&#125;;<br>        pstr = &#123;pstr,<span class="hljs-string">"################################################################################\n"</span>&#125;;<br>        <span class="hljs-keyword">if</span>(pid<span class="hljs-variable">.first</span>(name)) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">do</span> <span class="hljs-keyword">begin</span><br>                start_time = pid[name]<span class="hljs-variable">.start_time</span>;<br>                end_time = pid[name]<span class="hljs-variable">.end_time</span>;<br>                <span class="hljs-keyword">case</span>(pid[name]<span class="hljs-variable">.pid</span><span class="hljs-variable">.status</span>)<br>                    process::FINISHED  : ppstr(pstr,name,<span class="hljs-string">"FINISHED"</span>,start_time,end_time);<br>                    process::RUNNING   : ppstr(pstr,name,<span class="hljs-string">"RUNNING"</span>,start_time,end_time);<br>                    process::WAITING   : ppstr(pstr,name,<span class="hljs-string">"WAITING"</span>,start_time,end_time);<br>                    process::SUSPENDED : ppstr(pstr,name,<span class="hljs-string">"SUSPENDED"</span>,start_time,end_time);<br>                    process::KILLED    : ppstr(pstr,name,<span class="hljs-string">"KILLED"</span>,start_time,end_time);<br>                <span class="hljs-keyword">endcase</span><br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">while</span>(pid<span class="hljs-variable">.next</span>(name));<br>        <span class="hljs-keyword">end</span><br>        pstr = &#123;pstr,<span class="hljs-string">"################################################################################\n"</span>&#125;;<br>        <span class="hljs-built_in">$write</span>(pstr);<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">local</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> ppstr(<span class="hljs-keyword">ref</span> <span class="hljs-keyword">string</span> pstr,<span class="hljs-keyword">input</span> <span class="hljs-keyword">string</span> name,stat,<span class="hljs-keyword">input</span> <span class="hljs-keyword">realtime</span> start_time,end_time);<br>        <span class="hljs-keyword">if</span>(end_time == <span class="hljs-number">0</span>)<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>            pstr = &#123;pstr,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"[ %-13s ]\t[  %-9s ]\t[  %-12.2f  ]\t[     ----     ]\n"</span>,name,stat,start_time)&#125;;<br>        <span class="hljs-keyword">else</span><br>            pstr = &#123;pstr,<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"[ %-13s ]\t[  %-9s ]\t[  %-12.2f  ]\t[  %-10.2f  ]\n"</span>,name,stat,start_time,end_time)&#125;;<br>        pstr = &#123;pstr,<span class="hljs-string">"--------------------------------------------------------------------------------\n"</span>&#125;;<span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种代码统计</title>
      <link href="/2019/10/14/%E5%90%84%E7%A7%8D%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1/"/>
      <url>/2019/10/14/%E5%90%84%E7%A7%8D%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="啥都不说，就这样"><a href="#啥都不说，就这样" class="headerlink" title="啥都不说，就这样~"></a>啥都不说，就这样~</h4><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">(base) ubuntu@VM-0-5-ubuntu:~$ cloc ./work/x.v<br>       1 text file.<br>       1 unique file.                              <br>       0 files ignored.<br><br>T=0.01 s (107.6 files/s, 2152.9 lines/s)<br>-----------------------------------------------------------------------------------<br>Language                         files          blank        comment           code<br>-----------------------------------------------------------------------------------<br>Verilog-SystemVerilog                1             10              6              4<br>-----------------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">(base) ubuntu@VM-0-5-ubuntu:~$ cat ./work/x.v<br>module tb(a,b);<br><br><br>input a;<br>output b;<br><br>//sdlkjdlkf<br>//dsflkd<br><br><br>/*<br>dklfjldk<br><br>dlkjdfkl<br><br>*/<br><br><br>endmodule<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxd妙用</title>
      <link href="/2019/10/11/xxd%E5%A6%99%E7%94%A8/"/>
      <url>/2019/10/11/xxd%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="Bin文件生成技巧"><a href="#Bin文件生成技巧" class="headerlink" title="Bin文件生成技巧~"></a>Bin文件生成技巧~</h4><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">xxd -c 16 -u -g 1 ./x.bin <br>00000000: 40 53 F6 6C AB 52 55 73 FA 52 97 0C FE 25 90 6F  @S.l.RUs.R...%.o<br>00000010: D9 75 D6 0B B2 75 58 00 00 00 00 00              .u...uX.....<br></code></pre></td></tr></table></figure><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> xxd -c 16 -g 1 -i ./x.bin &gt; x.h</span><br><span class="hljs-meta">%</span><span class="bash"> cat x.h </span><br>unsigned char __configure_IBS_28_bin[] = &#123;<br>  0x40, 0x53, 0xf6, 0x6c, 0xab, 0x52, 0x55, 0x73, 0xfa, 0x52, 0x97, 0x0c, 0xfe, 0x25, 0x90, 0x6f,<br>  0xd9, 0x75, 0xd6, 0x0b, 0xb2, 0x75, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00<br>&#125;;<br>unsigned int __configure_IBS_28_bin_len = 28;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用策略模式进行UVM-PORT-DEBUG</title>
      <link href="/2019/09/25/%E9%87%87%E7%94%A8%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E8%BF%9B%E8%A1%8CUVM-PORT-DEBUG/"/>
      <url>/2019/09/25/%E9%87%87%E7%94%A8%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E8%BF%9B%E8%A1%8CUVM-PORT-DEBUG/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现新的FSM方法模式</title>
      <link href="/2019/09/24/SV%E5%AE%9E%E7%8E%B0%E6%96%B0%E7%9A%84FSM%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/24/SV%E5%AE%9E%E7%8E%B0%E6%96%B0%E7%9A%84FSM%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="在状态模式中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。"><a href="#在状态模式中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。" class="headerlink" title="在状态模式中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。"></a>在状态模式中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> fsm_pkg;<br><br>    <span class="hljs-keyword">import</span> uvm_pkg::*;<br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_macros.svh"</span><br>    <br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">class</span> OffState;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">class</span> OnState;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">class</span> SuspendState;<br>    <br>    <span class="hljs-keyword">class</span> ComputerState;<br>    <br>        <span class="hljs-keyword">string</span> name;<br>        <span class="hljs-keyword">string</span> allowed[<span class="hljs-keyword">string</span>];<br>     <br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> ComputerState switch(ComputerState state);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span><span class="hljs-variable">.exists</span>(state<span class="hljs-variable">.name</span>)) <span class="hljs-keyword">begin</span><br>                ComputerState st;<br>                <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Current State::%s =&gt; switch to new State:%s."</span>,name,state<span class="hljs-variable">.name</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span>[state<span class="hljs-variable">.name</span>] == <span class="hljs-string">"OffState"</span>) <br>                    st = OffState::<span class="hljs-keyword">new</span>();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span>[state<span class="hljs-variable">.name</span>] == <span class="hljs-string">"OnState"</span>)<br>                    st = OnState::<span class="hljs-keyword">new</span>();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span>[state<span class="hljs-variable">.name</span>] == <span class="hljs-string">"SuspendState"</span>)<br>                    st = SuspendState::<span class="hljs-keyword">new</span>();<br>                <span class="hljs-keyword">return</span> st;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Current State::%s =&gt; switch to new State:%s not allowed!"</span>,name,state<span class="hljs-variable">.name</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> OffState <span class="hljs-keyword">extends</span> ComputerState;<br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.name</span> = <span class="hljs-string">"OffState"</span>;<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span>[<span class="hljs-string">"OnState"</span>] = <span class="hljs-string">"OnState"</span>;<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> OnState <span class="hljs-keyword">extends</span> ComputerState;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.name</span> = <span class="hljs-string">"OnState"</span>;<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span>[<span class="hljs-string">"OffState"</span>] = <span class="hljs-string">"OffState"</span>;<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span>[<span class="hljs-string">"SuspendState"</span>] = <span class="hljs-string">"SuspendState"</span>;<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> SuspendState <span class="hljs-keyword">extends</span> ComputerState;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.name</span> = <span class="hljs-string">"SuspendState"</span>;<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.allowed</span>[<span class="hljs-string">"OnState"</span>] = <span class="hljs-string">"OnState"</span>;<br>        <span class="hljs-keyword">endfunction</span> <br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> Computer;<br>    <br>        ComputerState m_state;<br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(ComputerState state = <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span>(state == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">this</span><span class="hljs-variable">.m_state</span> = OffState::<span class="hljs-keyword">new</span>();<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">this</span><span class="hljs-variable">.m_state</span> = state;<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> change(ComputerState state);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.m_state</span> = <span class="hljs-keyword">this</span><span class="hljs-variable">.m_state</span><span class="hljs-variable">.switch</span>(state);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span>:fsm_pkg<br><br><span class="hljs-keyword">program</span> TBProgram <span class="hljs-keyword">import</span> fsm_pkg::*;;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">automatic</span> Computer comp = Computer::<span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">automatic</span> OnState on = OnState::<span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">automatic</span> OffState off = OffState::<span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">automatic</span> SuspendState sus = SuspendState::<span class="hljs-keyword">new</span>();<br>        comp<span class="hljs-variable">.change</span>(on);<br>        comp<span class="hljs-variable">.change</span>(sus);<br>        comp<span class="hljs-variable">.change</span>(sus);<br>        comp<span class="hljs-variable">.change</span>(on);<br>        comp<span class="hljs-variable">.change</span>(off);<br>        comp<span class="hljs-variable">.change</span>(sus);<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endprogram</span><br></code></pre></td></tr></table></figure><h4 id="仿真Demo"><a href="#仿真Demo" class="headerlink" title="仿真Demo"></a>仿真Demo</h4><p><img src="/2019/09/24/SV实现新的FSM方法模式/fsm.png" alt="fsm"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现Template方法模式</title>
      <link href="/2019/09/24/SV%E5%AE%9E%E7%8E%B0Template%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/24/SV%E5%AE%9E%E7%8E%B0Template%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="模板模式，一个抽象类公开定义了执行它的方法的方式-模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。"><a href="#模板模式，一个抽象类公开定义了执行它的方法的方式-模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。" class="headerlink" title="模板模式，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。"></a>模板模式，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> template_pkg;<br><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> CompilerInterface;<br>     <br>    <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> collectSource(<span class="hljs-keyword">string</span> msg);<br>    <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> compileToObject(<span class="hljs-keyword">string</span> msg);<br>    <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> run(<span class="hljs-keyword">string</span> msg);<br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> compileAndRun(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.collectSource</span>(msg);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.compileToObject</span>(msg);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.run</span>(msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> GccCompiler <span class="hljs-keyword">extends</span> CompilerInterface;<br>        <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> collectSource(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"GccCompiler collectSource C Program From %s"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> compileToObject(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"GccCompiler compileToObject C Program From %s"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> run(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"GccCompiler run C Program From %s"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> LlvmCompiler <span class="hljs-keyword">extends</span> CompilerInterface;<br>        <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> collectSource(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"LlvmCompiler collectSource C Program From %s"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> compileToObject(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"LlvmCompiler compileToObject C Program From %s"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> run(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"LlvmCompiler run C Program From %s"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span>:template_pkg<br><br><span class="hljs-keyword">program</span> TBProgram <span class="hljs-keyword">import</span> template_pkg::*;;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">automatic</span> CompilerInterface gcc  = GccCompiler::<span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">automatic</span> CompilerInterface llvm  = LlvmCompiler::<span class="hljs-keyword">new</span>();<br>        gcc<span class="hljs-variable">.compileAndRun</span>(<span class="hljs-string">"Start Gcc~"</span>);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">"------------------"</span>);<br>        llvm<span class="hljs-variable">.compileAndRun</span>(<span class="hljs-string">"Start Llvm~"</span>);<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endprogram</span><br></code></pre></td></tr></table></figure><h4 id="仿真Demo"><a href="#仿真Demo" class="headerlink" title="仿真Demo"></a>仿真Demo</h4><p><img src="/2019/09/24/SV实现Template方法模式/temp.png" alt="temp"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现命令模式</title>
      <link href="/2019/09/24/SV%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/24/SV%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="命令模式是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。"><a href="#命令模式是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。" class="headerlink" title="命令模式是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。"></a>命令模式是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> cmd_pkg;<br><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> CmdInterface;<br>     <br>    <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> execute(<span class="hljs-keyword">string</span> msg);<br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> Receiver;<br>        <br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> action(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Receiver Action From %s."</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> ConcreteCmd <span class="hljs-keyword">extends</span> CmdInterface;<br>        <br>        Receiver recv ;<br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(Receiver recv);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.recv</span> = recv;<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> execute(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.recv</span><span class="hljs-variable">.action</span>(msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br><br><br>    <span class="hljs-keyword">class</span> Invoker;<br>    <br>        CmdInterface cmd ;<br>    <br>        <span class="hljs-keyword">function</span> command(CmdInterface cmd);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.cmd</span> = cmd;<br>        <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> execute(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.cmd</span><span class="hljs-variable">.execute</span>(msg);<br>        <span class="hljs-keyword">endfunction</span><br>        <br>    <span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">endpackage</span>:cmd_pkg<br><br><span class="hljs-keyword">program</span> TBProgram <span class="hljs-keyword">import</span> cmd_pkg::*;;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">automatic</span> Receiver recv = Receiver::<span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">automatic</span> CmdInterface cmd = ConcreteCmd::<span class="hljs-keyword">new</span>(recv);<br>        <span class="hljs-keyword">automatic</span> Invoker ivk = Invoker::<span class="hljs-keyword">new</span>();<br>        ivk<span class="hljs-variable">.command</span>(cmd);<br>        ivk<span class="hljs-variable">.execute</span>(<span class="hljs-string">"Start ExE Now!"</span>);<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endprogram</span><br></code></pre></td></tr></table></figure><h4 id="仿真Demo"><a href="#仿真Demo" class="headerlink" title="仿真Demo"></a>仿真Demo</h4><p><img src="/2019/09/24/SV实现命令模式/cmd.png" alt="cmd"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现观察者模式</title>
      <link href="/2019/09/23/SV%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/23/SV%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="观察者模式可以在注册、触发中起到不错的作用。"><a href="#观察者模式可以在注册、触发中起到不错的作用。" class="headerlink" title="观察者模式可以在注册、触发中起到不错的作用。"></a>观察者模式可以在注册、触发中起到不错的作用。</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> observer_pkg;<br><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> ObserverInterface;<br>     <br>    <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> notify(<span class="hljs-keyword">string</span> msg);<br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> Subject;<br>        <br>        <span class="hljs-keyword">local</span> ObserverInterface m_observers[ObserverInterface];<br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> register(ObserverInterface observer);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.m_observers</span>[observer] = observer;<br>        <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> unregister(ObserverInterface observer);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.m_observers</span><span class="hljs-variable">.delete</span>(observer);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> notifyAll(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">this</span><span class="hljs-variable">.m_observers</span>[i])<br>                <span class="hljs-keyword">this</span><span class="hljs-variable">.m_observers</span>[i]<span class="hljs-variable">.notify</span>(msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> Observer1 <span class="hljs-keyword">extends</span> ObserverInterface;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">ref</span> Subject subject);<br>            subject<span class="hljs-variable">.register</span>(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> notify(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Observer1 get notify:%s~"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> Observer2 <span class="hljs-keyword">extends</span> ObserverInterface;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">ref</span> Subject subject);<br>            subject<span class="hljs-variable">.register</span>(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> notify(<span class="hljs-keyword">string</span> msg);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Observer2 get notify:%s~"</span>,msg);<br>        <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">endpackage</span>:observer_pkg<br><br><span class="hljs-keyword">program</span> TBProgram <span class="hljs-keyword">import</span> observer_pkg::*;;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">automatic</span> Subject subj = Subject::<span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">automatic</span> Observer1 obs1 = Observer1::<span class="hljs-keyword">new</span>(subj);<br>        <span class="hljs-keyword">automatic</span> Observer2 obs2 = Observer2::<span class="hljs-keyword">new</span>(subj);<br>        subj<span class="hljs-variable">.notifyAll</span>(<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"&lt;1-2&gt; Notify From %s"</span>,<span class="hljs-built_in">$typename</span>(Subject)));<br>        subj<span class="hljs-variable">.unregister</span>(obs1);<br>        subj<span class="hljs-variable">.notifyAll</span>(<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"&lt;2&gt; Notify From %s"</span>,<span class="hljs-built_in">$typename</span>(Subject)));<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endprogram</span><br></code></pre></td></tr></table></figure><h4 id="仿真Demo"><a href="#仿真Demo" class="headerlink" title="仿真Demo"></a>仿真Demo</h4><p><img src="/2019/09/23/SV实现观察者模式/observer.png" alt="observer"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现装饰器模式</title>
      <link href="/2019/09/17/SV%E5%AE%9E%E7%8E%B0%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/17/SV%E5%AE%9E%E7%8E%B0%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="装饰器模式进行扩展功能而不需要修改原代码。"><a href="#装饰器模式进行扩展功能而不需要修改原代码。" class="headerlink" title="装饰器模式进行扩展功能而不需要修改原代码。"></a>装饰器模式进行扩展功能而不需要修改原代码。</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> decorator_pkg;<br><br><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> BaseInterface;<br>     <br>    <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> doFunc();<br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> ConcreteInterface <span class="hljs-keyword">extends</span> BaseInterface;<br>    <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> doFunc();<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Do in ConcreteInterface"</span>);<br>        <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> DecoratorClass <span class="hljs-keyword">extends</span> BaseInterface;<br>        <br>        BaseInterface m_bdc;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(BaseInterface bdc);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.m_bdc</span> = bdc;<br>        <span class="hljs-keyword">endfunction</span> <br><br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> doFunc();<br>            m_bdc<span class="hljs-variable">.doFunc</span>();<br>        <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">endclass</span><br><br>    <span class="hljs-keyword">class</span> ConcreteDecoratorClass1 <span class="hljs-keyword">extends</span> DecoratorClass;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(BaseInterface bdc);<br>            <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(bdc);<br>        <span class="hljs-keyword">endfunction</span> <br>        <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> doFunc();<br>            <span class="hljs-keyword">super</span><span class="hljs-variable">.doFunc</span>();<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Do in ConcreteDecoratorClass1"</span>);<br>        <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">endclass</span><br><br>    <span class="hljs-keyword">class</span> ConcreteDecoratorClass2 <span class="hljs-keyword">extends</span> DecoratorClass;<br>        <br>        <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(BaseInterface bdc);<br>            <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(bdc);<br>        <span class="hljs-keyword">endfunction</span> <br>        <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> doFunc();<br>            <span class="hljs-keyword">super</span><span class="hljs-variable">.doFunc</span>();<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Do in ConcreteDecoratorClass2"</span>);<br>        <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">endpackage</span>:decorator_pkg<br><br><span class="hljs-keyword">program</span> TBProgram <span class="hljs-keyword">import</span> decorator_pkg::*;;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">automatic</span> BaseInterface bif1 = ConcreteInterface::<span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">automatic</span> BaseInterface bif2 = ConcreteDecoratorClass1::<span class="hljs-keyword">new</span>(bif1);<br>        <span class="hljs-keyword">automatic</span> BaseInterface bif3 = ConcreteDecoratorClass2::<span class="hljs-keyword">new</span>(bif2);<br>        bif3<span class="hljs-variable">.doFunc</span>();<br>    <span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">endprogram</span><br></code></pre></td></tr></table></figure><p><img src="/2019/09/17/SV实现装饰器模式/dec.png" alt="dec"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV实现状态机模式</title>
      <link href="/2019/09/16/SV%E5%AE%9E%E7%8E%B0%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/16/SV%E5%AE%9E%E7%8E%B0%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="FSM的高层实现，应对特殊的仿真场景"><a href="#FSM的高层实现，应对特殊的仿真场景" class="headerlink" title="FSM的高层实现，应对特殊的仿真场景~"></a>FSM的高层实现，应对特殊的仿真场景~</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> fsm_pkg;<br><br>    <span class="hljs-keyword">import</span> uvm_pkg::*;<br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_macros.svh"</span><br>    <br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">class</span> FSMClass;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">class</span> StateOpen;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">class</span> StateClose;<br>    <br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> StateClass;<br>     <br>    <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> open(FSMClass newstate);<br>        <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> close(FSMClass newstate);<br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> StateOpen <span class="hljs-keyword">extends</span> StateClass;<br>    <br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> open(FSMClass newstate);<br>            <span class="hljs-meta">`uvm_error("StateOpen","~FSM open NotImplementedError~");</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> close(FSMClass newstate);<br>            StateClose close_st = <span class="hljs-keyword">new</span>;<br>    newstate<span class="hljs-variable">.new_state</span>(close_st);<br>            <span class="hljs-meta">`uvm_info("StateOpen","~FSM close~",UVM_LOW);</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> StateClose <span class="hljs-keyword">extends</span> StateClass;<br>    <br>    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> open(FSMClass newstate);<br>            StateOpen open_st = <span class="hljs-keyword">new</span>;<br>    newstate<span class="hljs-variable">.new_state</span>(open_st);<br>            <span class="hljs-meta">`uvm_info("StateClose","~FSM open~",UVM_LOW);</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> close(FSMClass newstate);<br>            <span class="hljs-meta">`uvm_error("StateClose","~FSM close NotImplementedError~");</span><br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br>    <br>    <span class="hljs-keyword">class</span> FSMClass;<br>    <br>    <span class="hljs-keyword">local</span> StateClass <span class="hljs-number">_</span>state;<br>    <br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(StateClass newstate = <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span>(newstate == <span class="hljs-literal">null</span>) <span class="hljs-keyword">begin</span><br>                StateClose close_st = <span class="hljs-keyword">new</span>;<br>                <span class="hljs-keyword">this</span><span class="hljs-variable">.new_state</span>(close_st);<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">this</span><span class="hljs-variable">.new_state</span>(newstate);<br>    <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> new_state(StateClass newstate);<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">._state</span> = newstate;<br>    <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">function</span> FSMClass open();<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">._state</span><span class="hljs-variable">.open</span>(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">endfunction</span><br>    <br>        <span class="hljs-keyword">function</span> FSMClass close();<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">._state</span><span class="hljs-variable">.close</span>(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span>:fsm_pkg<br><br><span class="hljs-keyword">program</span> TBProgram <span class="hljs-keyword">import</span> fsm_pkg::*;;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">automatic</span> FSMClass fsm = <span class="hljs-keyword">new</span>;<br>        fsm<span class="hljs-variable">.open</span>()<span class="hljs-variable">.close</span>();<br>        fsm<span class="hljs-variable">.open</span>()<span class="hljs-variable">.open</span>();<br>        fsm<span class="hljs-variable">.open</span>()<span class="hljs-variable">.open</span>()<span class="hljs-variable">.close</span>();<br>        fsm<span class="hljs-variable">.open</span>()<span class="hljs-variable">.close</span>()<span class="hljs-variable">.close</span>();<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endprogram</span><br></code></pre></td></tr></table></figure><h3 id="运行demo"><a href="#运行demo" class="headerlink" title="运行demo"></a>运行demo</h3><p><img src="/2019/09/16/SV实现状态机模式/fsm.png" alt="fsm"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog中如何自动生成setter和getter？</title>
      <link href="/2019/09/12/SystemVerilog%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90setter%E5%92%8Cgetter/"/>
      <url>/2019/09/12/SystemVerilog%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90setter%E5%92%8Cgetter/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟化virtualenv</title>
      <link href="/2019/09/10/python%E8%99%9A%E6%8B%9F%E5%8C%96virtualenv/"/>
      <url>/2019/09/10/python%E8%99%9A%E6%8B%9F%E5%8C%96virtualenv/</url>
      
        <content type="html"><![CDATA[<h3 id="（转）"><a href="#（转）" class="headerlink" title="（转）"></a>（转）</h3><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><p>　　Python 今天我们就不聊了。接下来咱们说说virtualenv,英文比较好的同学，可能已经猜到了一半，virtual，即：虚拟的。那env是什么鬼？environment吗？所以翻译成中文就是”虚拟环境“。<br>    到底什么是虚拟环境呢？顾名思义，它是一个虚拟出来的环境。通俗的来讲，可以借助虚拟机，docker来理解虚拟环境，就是把一部分内容独立出来，我们把这部分独立出来的东西称作“容器”，在这个容器中，我们可以只安装我们需要的依赖包，而且各个容器之间互相隔离，互不影响。我们要学习Django,我们通过这个环境搞一个Django的虚拟环境就好了。<br><strong>【前提概要】</strong><br>    Django也是一个非常流行的web框架。由于Django的迭代更新非常快，也比较频繁，所以有一些过时的东西需要丢弃掉，一些新的东西需要加进来，从而导致不同的版本之间不兼容。比如Django1.3、Django1.4、Django1.8之间就有很大的差异性。<br>    或者是说，以Python的版本举例，现在工作中使用的Python版本与Python2.x和Python3.x两种。<br><strong>【故事背景】</strong><br>　　假设要进行Python web开发，使用的是Django。手上还有两个老项目A和B需要维护，而新项目C也正在开发中。这里项目A使用的是django1.3，项目B使用的是django1.4，而新项目C使用的是Django1.8。那么问题来了，如何同时在本地进行ABC这三个项目的开发和维护？<br>正常的模式可能是这样：现在在A项目上有一个BUG需要修复，于是，先执行下面的命令，删除掉原来的版本：</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip uninstall django<br></code></pre></td></tr></table></figure><p>然后再执行下面的命令安装django1.3</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install django==<span class="hljs-number">1.3</span><br></code></pre></td></tr></table></figure><p>数分钟后，bug修复完毕，好，现在进行新项目C的开发了，然后又要重复上面的故事。<br>　　好了，这还是最理想的情况。最不理想的情况就是基于django的第三方依赖也是跟Django版本相关的，于是除了install和uninstall Django之外，还要uninstall和install其依赖，Orz，这特么的就尴尬了…</p><p><strong>VirtualEnv能做什么呢？</strong></p><p>　　VirtualEnv可以搭建虚拟且独立的python运行环境, 使得单个项目的运行环境与其它项目独立起来。同时也可以用于在一台机器上创建多个独立的python运行环境，VirtualEnvWrapper为前者提供了一些便利的命令行上的封装。<br>　　Virtualenv是一个非常好的virtual python environment builder，他最大的好处是，可以让每一个python项目单独使用一个环境，而不会影响python系统环境，也不会影响其他项目的环境。<br>　　Virtualenv可用于创建独立的Python环境，在这些环境里面可以选择不同的Python版本或者不同的Packages，并且可以在没有root权限的情况下在环境里安装新套件，互相不会产生任何的影响。</p><p><strong>言归正传</strong></p><p><strong>安装，</strong>virtualenv本质上是个python包, 使用pip安装:</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install virtualenv<br></code></pre></td></tr></table></figure><p>在工作目录下创建虚拟环境(默认在当前目录)：注意需要自定义虚拟环境的名字！</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">~$virtualenv TestEnv<br>New python executable in ~/TestEnv/bin/python<br>Installing setuptools, pip, wheel...done.<br></code></pre></td></tr></table></figure><p>默认情况下, 虚拟环境中不包括系统的site-packages, 若要使用请添加参数:</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">virtualenv --system-site-packages TestEnv<br></code></pre></td></tr></table></figure><p>使用virtualenv默认python版本创建虚拟环境</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">virtualenv --no-site-packages ubuntu_env<br></code></pre></td></tr></table></figure><p>就可以在当前目录创建一个env目录(虚拟环境名称，这个文件夹就是保存 Python 虚拟环境)，你会注意到，virtualenv会把python，setuptools和pip给你安装上。</p><p>自定义python版本创建虚拟环境<br>　　1. 安装需要版本的python<br>　　2. 指定virtualenv中的python版本<br><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">virtualenv --no-site-packages --python=2.7 env<br></code></pre></td></tr></table></figure></p><p><strong>Note：</strong><br>　　1. 创建virtualenv虚拟环境之前，系统中必须要安装有对应版本的python，并且卸载之后当前虚拟环境就无效了。系统中可以同时存在python2和python3，通过环境变量中的系统变量path（不是用户变量）控制cmd或者系统中使用哪个版本的python，哪个版本的路径在前面就优先使用哪个版本。<br>　　2. –no-site-packages表示不包括系统全局的Python安装包，这样会更令环境更干净<br>　　3. –python=python2.7指定Python的版本未系统已经安装了的Python2.7<br>　　4. env是建立的虚拟环境名称<br>　　5. 没有安装python2.7或者使用命令virtualenv –no-site-packages –python=python2.7 env会出现The executable python does notexist 错误</p><p><strong>注意：</strong>　</p><p>　　安装的库的位置在虚拟环境的 env/Lib/site-packages/目录里，而不是在系统的python的Lib/site-packages目录里，这样你就知道为什么虚拟环境是分开的了吧。<br>　　Note ：virtualenv 创建的虚拟环境与主机的 Python 环境完全无关，你主机配置的库不能在 virtualenv 中直接使用。你需要在虚拟环境中利用 pip install 再次安装配置后才能使用。</p><p><strong>关于创建一个虚拟环境，你也可以这样做！</strong></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">1、为一个工程创建一个虚拟环境：<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> my_project_dir</span><br><span class="hljs-meta">$</span><span class="bash"> virtualenv venv　　<span class="hljs-comment">#venv为虚拟环境目录名，目录名自定义　　</span></span><br>virtualenv venv 将会在当前的目录中创建一个文件夹，包含了Python可执行文件，以及 pip 库的一份拷贝，这样就能安装其他包了。<br>虚拟环境的名字（此例中是 venv ）可以是任意的；若省略名字将会把文件均放在当前目录。<br>在任何你运行命令的目录中，这会创建Python的拷贝，并将之放在叫做 venv 的文件中。<br><br>2、你可以选择使用一个Python解释器：<br><span class="hljs-meta">$</span><span class="bash"> virtualenv -p /usr/bin/python2.7 venv　<span class="hljs-comment"># -p参数指定Python解释器程序路径</span></span><br>这将会使用 /usr/bin/python2.7中的Python解释器。<br></code></pre></td></tr></table></figure><p><strong>虚拟环境激活**</strong>，若想使用就需要激活创建的虚拟环境！**<br>进入虚拟环境目录 执行source ./bin/activate激活虚拟环境:</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 相对路径方式：~/TestEnv$ <span class="hljs-built_in">source</span> bin/activate</span><br>(TestEnv) ~/TestEnv$ python -V <br>Python 2.7.11 # 绝对路径方式<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">source</span> venv/bin/activate　<span class="hljs-comment"># 绝对路径</span></span><br></code></pre></td></tr></table></figure><p> <strong>从现在起，任何你使用pip安装的包将会放在 venv 文件夹中，与全局安装的Python隔绝开。像平常一样安装包，比如：</strong></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install requests<br></code></pre></td></tr></table></figure><p><strong>使用requirements.txt安装版本包(requirements.txt文件下保存的都是各个依赖包的版本信息)</strong></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>　　<strong>进入环境env1，执行pip freeze &gt; requirements.txt将包依赖信息保存在requirements.txt文件中。　　最好手动调整一下顺序，比如numpy和scipy要在matplotlib前面安装；另外如果想安装最新版本的，再将后面的版本号==1.9.1什么的删除。　　然后进入目的虚拟环境env2，执行pip install -r requirements.txt，pip就会自动从网上下载并安装所有包。　　虚拟环境env2如果是env1的拷贝，最好先pip uninstall -ry requirements.txt，再pip install -r requirements.txt</strong></p><p>如果你在虚拟环境中暂时完成了工作，则可以停用它：</p><p><strong>退出虚拟环境:</strong></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 在环境下，相对退出&lt;br&gt;(TestEnv) ~/TestEnv$ deactivate</span><br>~/TestEnv$ #走绝对路径<br><span class="hljs-meta">$</span><span class="bash"> .venv/bin/deactivate</span><br></code></pre></td></tr></table></figure><p>这将会回到系统默认的Python解释器，包括已安装的库也会回到默认的。</p><p><strong>要删除一个虚拟环境，只需删除它的文件夹。</strong>（执行 rm -rf venv ）。<br>　　这里virtualenv 有些不便，因为virtual的启动、停止脚本都在特定文件夹，可能一段时间后，你可能会有很多个虚拟环境散落在系统各处，你可能忘记它们的名字或者位置。</p><h3 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper　"></a>virtualenvwrapper　</h3><p>　　鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。<br>1、安装virtualenvwrapper(确保virtualenv已安装)</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install virtualenvwrapper<br>pip install virtualenvwrapper-win　#Windows使用该命令<br></code></pre></td></tr></table></figure><p>2、安装完成后，在~/.bashrc写入以下内容</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export WORKON_HOME=~/Envs<br>source /usr/local/bin/virtualenvwrapper.sh　`<br></code></pre></td></tr></table></figure><p>　　第一行：virtualenvwrapper存放虚拟环境目录<br>　　第二行：virtrualenvwrapper会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bashrc　　#读入配置文件，立即生效<br></code></pre></td></tr></table></figure><p> <strong>virtualenvwrapper基本使用</strong></p><p>1.创建虚拟环境　mkvirtualenv</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkvirtualenv venv<br></code></pre></td></tr></table></figure><p>这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。<br>若想指定python版本，可通过”–python”指定python解释器</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkvirtualenv --python=/usr/local/python3.5.3/bin/python venv<br></code></pre></td></tr></table></figure><p>\2. 基本命令 　<br>　　查看当前的虚拟环境目录</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# workon<br>py2<br>py3<br></code></pre></td></tr></table></figure><p>　　切换到虚拟环境</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# workon py3<br>(py3) [root@localhost ~]#<br></code></pre></td></tr></table></figure><p>　　退出虚拟环境</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">(py3) [root@localhost ~]# deactivate<br>[root@localhost ~]#<br></code></pre></td></tr></table></figure><p>　　删除虚拟环境</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rmvirtualenv venv<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加速python模型方法~</title>
      <link href="/2019/09/04/%E5%8A%A0%E9%80%9Fpython%E6%A8%A1%E5%9E%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/04/%E5%8A%A0%E9%80%9Fpython%E6%A8%A1%E5%9E%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX182Er8+pqn6EGpXj+pE8ltkbkd2Nifw3ev6bBNWtfP/IZEMHpeGWxP4xb73U4IliorMEAiOBJFLVHaqCtMGgoS28YjH3jXksSvcUmuO+O/ONCkZPXzCyRQ2ZGrVY2qIh6lTvyru32qgStd+L4OBy4NJ/6736EdBw4yd/kM4mL9qdc2SjG3nCswirA5McfJsML4hck7/NGGAq09OVUtLWU82kFAVge98DVZ3MaHcICXc3Kuxo/Mdav546zO20cGWIPnl9T6fYK7tK6uVCLwM2D4XaMfP3sr/tfdyMuuT4xGViaiMmy4clg/zn1Qgi4FQaAyCPqbiIRoxXY7a06JSvNzGiCx8crGWYqGUDBl3v9Yuf90vBjX8Wf7MCK29Jk5BbT76z6ljst0/FVTPVW6FtJEe03jEFn/ZaurXG5j8dL88ACczJ+50rEZZ5YVBfPBb4FhuokNSHViObEaMNVUUb5GvcskYIj/zVgtAE8ZKvNwDUkra2RDcFtEDR5OqrUWSGp85MX7VWXaGLw1qaHkf/RDFLEnhjEDTfTeguihzaZnSNNdfI01krZYpEPfednpdvQpD1764sPHYoc1Qagq7oF4CVP8WaSLyM5olMRR07/766xiylKCCiqUeSEdHHSHFQAfETZg/p+mVQMSYFkE56nC4LtgHRBgv2L6UaloTZbniYxaIHI4/2As3/cVUH8Hiep5tYEN0P4muwT6txcaMMDHg9qyOtb/leR3wJQfYZW90PFa8k2zSXunip24PCxuTcqS5Xh8XkLnDoUbCtubIUDuwxGdJGSfL2I/5zYZT0mEzuUpWnYPOYeNMEeP8Jtqg+LBywr8d1kzei+bcx1sDOmC7+VIvLLV0RdO7JEZ5lQ15XlwwdYXUf5Ik+UyobP9V5/gxvlp3stHKC5pWgUe8o0SjIi0uGcvsJqZ7vhrECCB3Q3VYrmP+XFBCbzWlZmicAY6yTE0iDmHC85E5pksrATB51Yrrpb+0lVLy8psVrYsbLCCWLJpkPU1aNf7zPuHf49KKaf0qo16Sdxn/WvC0TCUoGQhkqRrFMRKMKsyqCBmQ5xKR2btcRUsxH9QXz8tPKNpvFa60jg8AW1t+4A8Bpv3AK2TPj4XBth8=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过绑定引用module中的task和function~</title>
      <link href="/2019/09/02/%E9%80%9A%E8%BF%87%E7%BB%91%E5%AE%9A%E5%BC%95%E7%94%A8module%E4%B8%AD%E7%9A%84task%E5%92%8Cfunction/"/>
      <url>/2019/09/02/%E9%80%9A%E8%BF%87%E7%BB%91%E5%AE%9A%E5%BC%95%E7%94%A8module%E4%B8%AD%E7%9A%84task%E5%92%8Cfunction/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Cocotb快速uniTest~</title>
      <link href="/2019/08/27/%E9%87%87%E7%94%A8Cocotb%E5%BF%AB%E9%80%9FuniTest/"/>
      <url>/2019/08/27/%E9%87%87%E7%94%A8Cocotb%E5%BF%AB%E9%80%9FuniTest/</url>
      
        <content type="html"><![CDATA[<h4 id="SV语言太多，UVM太复杂"><a href="#SV语言太多，UVM太复杂" class="headerlink" title="SV语言太多，UVM太复杂~"></a>SV语言太多，UVM太复杂~</h4><p>年龄大了，确实有时候不想再学习新事物~几年前看过cocotb的优点，实在懒得看，最近拿来翻翻还是有点优势的，在对算法等方面确实秒杀SV，缺点就是其他的了，如覆盖率，断言等都缺少。自己写了tb确实快~~</p><h4 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h4><p><img src="/2019/08/27/采用Cocotb快速uniTest/test.png" alt="test"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YAML快速入门</title>
      <link href="/2019/08/20/YAML%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2019/08/20/YAML%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="YAML快速入门"><a href="#YAML快速入门" class="headerlink" title="YAML快速入门"></a>YAML快速入门</h2><h4 id="yaml文件在做验证配置的时候是个好东西，引用配置是好东西"><a href="#yaml文件在做验证配置的时候是个好东西，引用配置是好东西" class="headerlink" title="yaml文件在做验证配置的时候是个好东西，引用配置是好东西~"></a>yaml文件在做验证配置的时候是个好东西，引用配置是好东西~</h4><p>下面立刻展示YAML最基本，最常用的一些使用格式：<br> 首先YAML中允许表示三种格式，分别是常量值，对象和数组<br> 例如：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#即表示url属性值；</span><br><span class="hljs-attr">url:</span> <span class="hljs-attr">http://www.wolfcode.cn</span> <br><span class="hljs-comment">#即表示server.host属性的值；</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">    host:</span> <span class="hljs-attr">http://www.wolfcode.cn</span> <br><span class="hljs-comment">#数组，即表示server为[a,b,c]</span><br><span class="hljs-attr">server:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">120.168</span><span class="hljs-number">.117</span><span class="hljs-number">.21</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">120.168</span><span class="hljs-number">.117</span><span class="hljs-number">.22</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">120.168</span><span class="hljs-number">.117</span><span class="hljs-number">.23</span><br><span class="hljs-comment">#常量</span><br><span class="hljs-attr">pi:</span> <span class="hljs-number">3.14</span>   <span class="hljs-comment">#定义一个数值3.14</span><br><span class="hljs-attr">hasChild:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#定义一个boolean值</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">'你好YAML'</span>   <span class="hljs-comment">#定义一个字符串</span><br></code></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>和properties相同，使用#作为注释，YAML中只有行注释。</p><h4 id="基本格式要求"><a href="#基本格式要求" class="headerlink" title="基本格式要求"></a>基本格式要求</h4><p>1，YAML大小写敏感；<br> 2，使用缩进代表层级关系；<br> 3，缩进只能使用空格，不能使用TAB，不要求空格个数，只需要相同层级左对齐（一般2个或4个空格）</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>使用冒号代表，格式为key: value。冒号后面要加一个空格：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">key:</span> <span class="hljs-string">value</span><br></code></pre></td></tr></table></figure><p>可以使用缩进表示层级关系；</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">key:</span> <br><span class="hljs-attr">    child-key:</span> <span class="hljs-string">value</span><br><span class="hljs-attr">    child-key2:</span> <span class="hljs-string">value2</span><br></code></pre></td></tr></table></figure><p>YAML中还支持流式(flow)语法表示对象，比如上面例子可以写为：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">key:</span> <span class="hljs-string">&#123;child-key:</span> <span class="hljs-string">value,</span> <span class="hljs-attr">child-key2:</span> <span class="hljs-string">value2&#125;</span><br></code></pre></td></tr></table></figure><p>较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的key，配合一个冒号加一个空格代表一个value：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">?</span>  <br><span class="hljs-bullet">    -</span> <span class="hljs-string">complexkey1</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">complexkey2</span><br><span class="hljs-string">:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">complexvalue1</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">complexvalue2</span><br></code></pre></td></tr></table></figure><p>意思即对象的属性是一个数组[complexkey1,complexkey2]，对应的值也是一个数组[complexvalue1,complexvalue2]</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>使用一个短横线加一个空格代表一个数组项：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">hobby:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">Java</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">LOL</span><br></code></pre></td></tr></table></figure><p>当然也可以有这样的写法：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">Java</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">LOL</span><br></code></pre></td></tr></table></figure><p>可以简单理解为：[[Java,LOL]]<br> 一个相对复杂的例子：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">companies:</span><br><span class="hljs-bullet">    -</span><br><span class="hljs-attr">        id:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">        name:</span> <span class="hljs-string">company1</span><br><span class="hljs-attr">        price:</span> <span class="hljs-number">200</span><span class="hljs-string">W</span><br><span class="hljs-bullet">    -</span><br><span class="hljs-attr">        id:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">        name:</span> <span class="hljs-string">company2</span><br><span class="hljs-attr">        price:</span> <span class="hljs-number">500</span><span class="hljs-string">W</span><br></code></pre></td></tr></table></figure><p>意思是companies属性是一个数组，每一个数组元素又是由id,name,price三个属性构成；<br> 数组也可以使用流式(flow)的方式表示：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">companies:</span> <span class="hljs-string">[&#123;id:</span> <span class="hljs-number">1</span><span class="hljs-string">,name:</span> <span class="hljs-string">company1,price:</span> <span class="hljs-number">200</span><span class="hljs-string">W&#125;,&#123;id:</span> <span class="hljs-number">2</span><span class="hljs-string">,name:</span> <span class="hljs-string">company2,price:</span> <span class="hljs-number">500</span><span class="hljs-string">W&#125;]</span><br></code></pre></td></tr></table></figure><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>YAML中提供了多种常量结构，包括：整数，浮点数，字符串，NULL，日期，布尔，时间。下面使用一个例子来快速了解常量的基本使用：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">boolean:</span> <br><span class="hljs-bullet">    -</span> <span class="hljs-literal">TRUE</span>  <span class="hljs-comment">#true,True都可以</span><br><span class="hljs-bullet">    -</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-comment">#false，False都可以</span><br><span class="hljs-attr">float:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">3.14</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">6.8523015e+5</span>  <span class="hljs-comment">#可以使用科学计数法</span><br><span class="hljs-attr">int:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">123</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">0</span><span class="hljs-string">b1010_0111_0100_1010_1110</span>    <span class="hljs-comment">#二进制表示</span><br><span class="hljs-attr">null:</span><br><span class="hljs-attr">    nodeName:</span> <span class="hljs-string">'node'</span><br><span class="hljs-attr">    parent:</span> <span class="hljs-string">~</span>  <span class="hljs-comment">#使用~表示null</span><br><span class="hljs-attr">string:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">哈哈</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">'Hello world'</span>  <span class="hljs-comment">#可以使用双引号或者单引号包裹特殊字符</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">newline</span><br>      <span class="hljs-string">newline2</span>    <span class="hljs-comment">#字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class="hljs-attr">date:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-number">2018</span><span class="hljs-bullet">-02</span><span class="hljs-bullet">-17</span>    <span class="hljs-comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class="hljs-attr">datetime:</span> <br><span class="hljs-bullet">    -</span>  <span class="hljs-number">2018</span><span class="hljs-bullet">-02</span><span class="hljs-bullet">-17</span><span class="hljs-attr">T15:02:31+08:00</span>    <span class="hljs-comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></code></pre></td></tr></table></figure><h4 id="一些特殊符号"><a href="#一些特殊符号" class="headerlink" title="一些特殊符号"></a>一些特殊符号</h4><p>YAML中提供了很多特殊符号，在这里简单介绍常用的一些：<br> 1，—  YAML可以在同一个文件中，使用—表示一个文档的开始；比如Springboot中profile的定义：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">    address:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.100</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">    profiles:</span> <span class="hljs-string">development</span><br><span class="hljs-attr">    server:</span><br><span class="hljs-attr">        address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">    profiles:</span> <span class="hljs-string">production</span><br><span class="hljs-attr">    server:</span><br><span class="hljs-attr">        address:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.120</span><br></code></pre></td></tr></table></figure><p>代表定义了两个profile，一个是development，一个production；也常常使用—来分割不同的内容，比如记录日志：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">Time:</span> <span class="hljs-number">2018</span><span class="hljs-bullet">-02</span><span class="hljs-bullet">-17</span><span class="hljs-attr">T15:02:31+08:00</span><br><span class="hljs-attr">User:</span> <span class="hljs-string">ed</span><br><span class="hljs-attr">Warning:</span><br>     <span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">error</span> <span class="hljs-string">message</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">log</span> <span class="hljs-string">file</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">Time:</span> <span class="hljs-number">2018</span><span class="hljs-bullet">-02</span><span class="hljs-bullet">-17</span><span class="hljs-attr">T15:05:21+08:00</span><br><span class="hljs-attr">User:</span> <span class="hljs-string">ed</span><br><span class="hljs-attr">Warning:</span><br>    <span class="hljs-string">A</span> <span class="hljs-string">slightly</span> <span class="hljs-string">different</span> <span class="hljs-string">error</span> <span class="hljs-string">message.</span><br></code></pre></td></tr></table></figure><p>2，… 和—配合使用，在一个配置文件中代表一个文件的结束：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">time:</span> <span class="hljs-number">20</span><span class="hljs-string">:03:20</span><br><span class="hljs-attr">player:</span> <span class="hljs-string">Sammy</span> <span class="hljs-string">Sosa</span><br><span class="hljs-attr">action:</span> <span class="hljs-string">strike</span> <span class="hljs-string">(miss)</span><br><span class="hljs-string">...</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">time:</span> <span class="hljs-number">20</span><span class="hljs-string">:03:47</span><br><span class="hljs-attr">player:</span> <span class="hljs-string">Sammy</span> <span class="hljs-string">Sosa</span><br><span class="hljs-attr">action:</span> <span class="hljs-string">grand</span> <span class="hljs-string">slam</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>相当于在一个yaml文件中连续写了两个yaml配置项。</p><p>3，!! YAML中使用!!做类型强行转换：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">string:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-type">!!str</span> <span class="hljs-number">54321</span><br><span class="hljs-bullet">    -</span> <span class="hljs-type">!!str</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>相当于把数字和布尔类型强转为字符串。当然允许转型的类型很多，比如：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span><span class="hljs-bullet">--</span> <span class="hljs-type">!!set</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Mark</span> <span class="hljs-attr">McGwire:</span> <span class="hljs-number">65</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Sammy</span> <span class="hljs-attr">Sosa:</span> <span class="hljs-number">63</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Sammy</span> <span class="hljs-attr">Sosa:</span> <span class="hljs-number">63</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Ken</span> <span class="hljs-attr">Griffy:</span> <span class="hljs-number">58</span><br></code></pre></td></tr></table></figure><p>将数组解析为set，简单理解，转化的内容就是：[{Ken Griffy=58}, {Mark McGwire=65}, {Sammy Sosa=63}]，重复的Sammy Sosa去掉；</p><p>4，&gt;在字符串中折叠换行，| 保留换行符，这两个符号是YAML中字符串经常使用的符号，比如：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">accomplishment:</span> <span class="hljs-string">&gt;<br> Mark set a major league<br> home run record in 1998.<br></span><span class="hljs-attr">stats:</span> <span class="hljs-string">|<br> 65 Home Runs<br> 0.278 Batting Average</span><br></code></pre></td></tr></table></figure><p>那么结果是：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">stats=65</span> <span class="hljs-string">Home</span> <span class="hljs-string">Runs</span><br> <span class="hljs-number">0.278</span> <span class="hljs-string">Batting</span> <span class="hljs-string">Average,</span><br></code></pre></td></tr></table></figure><p>即| 符号保留了换行符，而accomplishment的结果为：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">accomplishment=Mark</span> <span class="hljs-string">set</span> <span class="hljs-string">a</span> <span class="hljs-string">major</span> <span class="hljs-string">league</span> <span class="hljs-string">home</span> <span class="hljs-string">run</span> <span class="hljs-string">record</span> <span class="hljs-string">in</span> <span class="hljs-number">1998.</span><br></code></pre></td></tr></table></figure><p>即将换行符转化成了空格；要注意一点的是，每行的文本前一定要有一个空格。<br> |符号常见用于在YAML中配置HTML片段：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">phraseTemplate:</span> <span class="hljs-string">|<br>  &lt;p style="color: red"&gt;<br>    some template $&#123;msg&#125;<br>  &lt;/p&gt;</span><br></code></pre></td></tr></table></figure><p>5，引用。重复的内容在YAML中可以使用&amp;来完成锚点定义，使用*来完成锚点引用，例如：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">hr:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Mark</span> <span class="hljs-string">McGwire</span><br><span class="hljs-bullet">-</span> <span class="hljs-meta">&amp;SS</span> <span class="hljs-string">Sammy</span> <span class="hljs-string">Sosa</span><br><span class="hljs-attr">rbi:</span><br><span class="hljs-bullet">-</span> <span class="hljs-meta">*SS</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">Ken</span> <span class="hljs-string">Griffey</span><br></code></pre></td></tr></table></figure><p>可以看到，在hr中，使用&amp;SS为Sammy Sosa设置了一个锚点（引用），名称为SS，在rbi中，使用*SS完成了锚点使用，那么结果为：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&#123;rbi=[Sammy</span> <span class="hljs-string">Sosa,</span> <span class="hljs-string">Ken</span> <span class="hljs-string">Griffey],</span> <span class="hljs-string">hr=[Mark</span> <span class="hljs-string">McGwire,</span> <span class="hljs-string">Sammy</span> <span class="hljs-string">Sosa]&#125;</span><br></code></pre></td></tr></table></figure><p>我们也可以这样定义：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">SS:</span> <span class="hljs-meta">&amp;SS</span> <span class="hljs-string">Sammy</span> <span class="hljs-string">Sosa</span><br><span class="hljs-attr">hr:</span><br><span class="hljs-bullet"> -</span> <span class="hljs-string">Mark</span> <span class="hljs-string">McGwire</span><br><span class="hljs-bullet"> -</span> <span class="hljs-meta">*SS</span><br><span class="hljs-attr">rbi:</span><br><span class="hljs-bullet"> -</span> <span class="hljs-meta">*SS</span> <br><span class="hljs-bullet"> -</span> <span class="hljs-string">Ken</span> <span class="hljs-string">Griffey</span><br></code></pre></td></tr></table></figure><p>注意，不能独立的定义锚点，比如不能直接这样写： &amp;SS  Sammy Sosa；另外，锚点能够定义更复杂的内容，比如：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">default:</span> <span class="hljs-meta">&amp;default</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">Mark</span> <span class="hljs-string">McGwire</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">Sammy</span> <span class="hljs-string">Sosa</span><br><span class="hljs-attr">hr:</span> <span class="hljs-meta">*default</span><br></code></pre></td></tr></table></figure><p>那么hr相当于引用了default的数组，注意，hr: *default要写在同一行。</p><p>6，合并内容。主要和锚点配合使用，可以将一个锚点内容直接合并到一个对象中。来看一个示例：</p><figure class="hljs highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">merge:</span><br><span class="hljs-bullet">  -</span> <span class="hljs-meta">&amp;CENTER</span> <span class="hljs-string">&#123;</span> <span class="hljs-attr">x:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">y:</span> <span class="hljs-number">2</span> <span class="hljs-string">&#125;</span><br><span class="hljs-bullet">  -</span> <span class="hljs-meta">&amp;LEFT</span> <span class="hljs-string">&#123;</span> <span class="hljs-attr">x:</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-attr">y:</span> <span class="hljs-number">2</span> <span class="hljs-string">&#125;</span><br><span class="hljs-bullet">  -</span> <span class="hljs-meta">&amp;BIG</span> <span class="hljs-string">&#123;</span> <span class="hljs-attr">r:</span> <span class="hljs-number">10</span> <span class="hljs-string">&#125;</span><br><span class="hljs-bullet">  -</span> <span class="hljs-meta">&amp;SMALL</span> <span class="hljs-string">&#123;</span> <span class="hljs-attr">r:</span> <span class="hljs-number">1</span> <span class="hljs-string">&#125;</span><br>  <br><span class="hljs-attr">sample1:</span> <br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-meta">*CENTER</span><br><span class="hljs-attr">    r:</span> <span class="hljs-number">10</span><br>    <br><span class="hljs-attr">sample2:</span><br>    <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">:</span> <span class="hljs-string">[</span> <span class="hljs-string">*CENTER,</span> <span class="hljs-meta">*BIG</span> <span class="hljs-string">]</span><br><span class="hljs-attr">    other:</span> <span class="hljs-string">haha</span><br>    <br><span class="hljs-attr">sample3:</span><br>    <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">:</span> <span class="hljs-string">[</span> <span class="hljs-string">*CENTER,</span> <span class="hljs-meta">*BIG</span> <span class="hljs-string">]</span><br><span class="hljs-attr">    r:</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>在merge中，定义了四个锚点，分别在sample中使用。<br> sample1中，&lt;&lt;: *CENTER意思是引用{x: 1,y: 2}，并且合并到sample1中，那么合并的结果为：sample1={r=10, y=2, x=1}</p><p>sample2中，&lt;&lt;: [<em>CENTER, </em>BIG] 意思是联合引用{x: 1,y: 2}和{r: 10}，并且合并到sample2中，那么合并的结果为：sample2={other=haha, x=1, y=2, r=10}</p><p>sample3中，引入了<em>CENTER, </em>BIG，还使用了r: 100覆盖了引入的r: 10，所以sample3值为：sample3={r=100, y=2, x=1}</p><p>有了合并，我们就可以在配置中，把相同的基础配置抽取出来，在不同的子配置中合并引用即可。</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> yaml </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LFSR妙用~</title>
      <link href="/2019/08/15/LFSR%E5%A6%99%E7%94%A8/"/>
      <url>/2019/08/15/LFSR%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/08/15/LFSR妙用/LFSR（一）：基本结构与概念.jpg" alt="lfsr1"><br><img src="/2019/08/15/LFSR妙用/LFSR（二）：LFSR在CRC中的应用.png" alt="lfsr2"><br><img src="/2019/08/15/LFSR妙用/加扰并行化算法.png" alt="lfsr3"></p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> LFSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uvm_barrier使用~</title>
      <link href="/2019/08/14/uvm-barrier%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/14/uvm-barrier%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>UVM提供uvm_barrier对多个组件进行同步协调，同时为了解决组件独立运作的封闭性需要，定义了新的类uvm_barrier_pool来全局管理uvm_barrier对象。</p><p>uvm_barrier 可以设置一定的等待阈值，仅在有不少于该阈值的进程在等待该对象时才会触发该事件，同时激活所有正在等待的进程，使其基础进行。 </p><p><strong>wait_for</strong>                  Waits for enough processes to reach the barrier before continuing.<br><strong>reset</strong>                        Resets the barrier.<br><strong>set_auto_reset</strong>       Determines if the barrier should reset itself after the threshold is reached.<br><strong>set_threshold</strong>         Sets the process threshold.<br><strong>get_threshold</strong>         Gets the current threshold setting for the barrier.<br><strong>get_num_waiters</strong>    Returns the number of processes currently waiting at the barrier.<br><strong>cancel</strong>                       Decrements the waiter count by one.</p><p>例子：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//----------------------------------------------------------------------</span><br><span class="hljs-comment">//component1</span><br><span class="hljs-comment">//----------------------------------------------------------------------</span><br><br><span class="hljs-keyword">class</span> comp1 <span class="hljs-keyword">extends</span> uvm_component;<br>  uvm_barrier b1;<br>  ...<br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>    b1 = uvm_barrier_pool::get_global(<span class="hljs-string">"b1"</span>);<br>  <span class="hljs-keyword">endfunction</span><br>  <span class="hljs-keyword">task</span> run_phase(phase);<br>    #<span class="hljs-number">5</span>ns;<br>    b1<span class="hljs-variable">.wait_for</span>();<br>  <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-comment">//----------------------------------------------------------------------</span><br><span class="hljs-comment">//component2</span><br><span class="hljs-comment">//----------------------------------------------------------------------</span><br><br><span class="hljs-keyword">class</span> comp2 <span class="hljs-keyword">extends</span> uvm_component;<br>  uvm_barrier b1;<br>  ...<br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>    b1 = uvm_barrier_pool::get_global(<span class="hljs-string">"b1"</span>);<br>  <span class="hljs-keyword">endfunction</span><br>  <span class="hljs-keyword">task</span> run_phase(phase);<br>    #<span class="hljs-number">10</span>ns;<br>    b1<span class="hljs-variable">.wait_for</span>();<br>  <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><span class="hljs-comment">//----------------------------------------------------------------------</span><br><span class="hljs-comment">//env</span><br><span class="hljs-comment">//----------------------------------------------------------------------</span><br><br><span class="hljs-keyword">class</span> env <span class="hljs-keyword">extends</span> uvm_env;<br>  comp1 c1;<br>  comp2 c2;<br>  uvm_barrier b1;<br>  ...<br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>    c1 = comp1::type_id::create(<span class="hljs-string">"c1"</span>,<span class="hljs-keyword">this</span>);<br>    c2 = comp1::type_id::create(<span class="hljs-string">"c2"</span>,<span class="hljs-keyword">this</span>);<br>    b1 = uvm_barrier_pool::get_global(<span class="hljs-string">"b1"</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">task</span> run_phase(phase);<br>    b1<span class="hljs-variable">.set_threshold</span>(<span class="hljs-number">3</span>);<br>    #<span class="hljs-number">20</span>ns;<br>    b1<span class="hljs-variable">.set_threshold</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-meta">`uvm_info("BAR",$sformatf("set b1 thrd %0d at %0t fs",b1.get_threshold(),$time),UVM_NONE)</span><br>  <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>为了同步c1和c2而定义了b1,b1为c1,c2和env共享。c1和c2通过wait_for()来等待激活，env通过设置阈值来调控“开闸”的时间。</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wait for Interface Signals in UVM</title>
      <link href="/2019/08/13/Wait-for-Interface-Signals-in-UVM/"/>
      <url>/2019/08/13/Wait-for-Interface-Signals-in-UVM/</url>
      
        <content type="html"><![CDATA[<p>In normal scenarios the synchronization of hardware events, like clocks, resets, error signals, interrupts etc., primarily takes place inside the UVM Driver &amp; Monitors for an UVM Testbench.</p><p>But there are certain conditions, some of them are listed below, which requires systematic handling of these interface signals because handling of these interface signals inside Driver, Monitor or Component is not sufficient to achieve the intended functionality.</p><p>Examples of certain conditions to handle interface signals outside Drivers &amp; Monitors could be as described below:</p><ul><li>Providing <strong>clock based delay</strong> between transmitted Transaction items inside the Sequence (Accessing Virtual Interface signals inside Sequence)</li><li>To ignore the coverage data collected during an <strong>error condition</strong> which are based on error signals</li><li>To trigger another Sequence (ISR) after receiving an <strong>interrupt</strong></li><li>To wait for <strong>reset</strong> before sampling any valid data on the Analysis side of the UVM testbench.</li></ul><p>Hence from the above mentioned specific conditions, its obvious that we need a systematic approach to handle interface signals to support these conditions where a dynamic object like Sequence may depend on the interface signal’s state for the next action to be taken.</p><p>Well, this requirement could be fulfilled by adding  <strong>hardware synchronization methods</strong> (corresponding to the interface signals) to the <strong>Configuration Object</strong> which will also contains the <strong>Virtual Interface</strong>. These methods blocks until a hardware event occurs on the Virtual Interface. Examples of these hardware synchronization methods could be:</p><ul><li><strong>wait_for_clock()</strong></li><li><strong>wait_for_reset()</strong></li><li><strong>wait_for_interrupt()</strong></li><li><strong>interrupt_cleared()</strong></li></ul><p>Now, in order to use these hardware synchronization methods inside the configuration object, the <strong>Sequence</strong> or the <strong>Components</strong> must first ensure that it has a valid pointer to the configuration object.</p><p>The pointer may already have been set during construction OR it may require Sequence or Component to call <strong>get_config()</strong> static method. Once the local configuration object pointer is set &amp; valid, the hardware synchronization methods can be accessed using the <strong>configuration object handle</strong>.</p><p>Lets see this approach by using UVM example code below:</p><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">///// Transaction Class</span><br><span class="hljs-keyword">class</span> transaction <span class="hljs-keyword">extends</span> uvm_sequence_item;<br> <span class="hljs-meta">`uvm_object_utils(transaction)</span><br> <br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] addr;<br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] write_data;<br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> read;<br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">int</span> delay;<br> <br> <span class="hljs-keyword">bit</span> error;<br> <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] read_data;<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name);<br> <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br> <span class="hljs-keyword">endfunction</span>: <span class="hljs-keyword">new</span><br> <br> <span class="hljs-keyword">constraint</span> at_least_1 &#123; delay <span class="hljs-keyword">inside</span> &#123;[<span class="hljs-number">1</span>:<span class="hljs-number">20</span>]&#125;;&#125;<br> <br> <span class="hljs-keyword">constraint</span> <span class="hljs-number">32</span>bit_align &#123;addr[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>;&#125;<br> <br><span class="hljs-keyword">endclass</span>: transaction<br><br><span class="hljs-comment">///// Bus Configuration Object</span><br><span class="hljs-keyword">class</span> bus_config <span class="hljs-keyword">extends</span> uvm_object;<br> <span class="hljs-meta">`uvm_object_utils(bus_config)</span><br> <br> <span class="hljs-keyword">virtual</span> bus_interface bus_if;<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name);<br> <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br> <span class="hljs-keyword">endfunction</span>: <span class="hljs-keyword">new</span><br> <br> <span class="hljs-comment">/// wait_for_clock</span><br> <span class="hljs-keyword">task</span> wait_for_clock( <span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span> );<br> <span class="hljs-keyword">repeat</span> ( m ) <span class="hljs-keyword">begin</span><br> @(<span class="hljs-keyword">posedge</span> bus_if<span class="hljs-variable">.clk</span>);<br> <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">endtask</span>: wait_for_clock<br> <br> <span class="hljs-comment">/// wait_for_reset</span><br> <span class="hljs-keyword">task</span> wait_for_reset;<br> @(<span class="hljs-keyword">posedge</span> bus_if<span class="hljs-variable">.reset</span>);<br> <span class="hljs-keyword">endtask</span>: wait_for_reset<br> <br><span class="hljs-keyword">endclass</span>: bus_config<br><br><span class="hljs-comment">///// Bus Sequence</span><br><span class="hljs-keyword">class</span> bus_seq <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(transaction)</span>;<br> <span class="hljs-meta">`uvm_object_utils(bus_seq)</span><br> <br> transaction txn;<br> bus_config bus_cfg;<br> <br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">int</span> limit = <span class="hljs-number">25</span>;<br> <br> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name);<br> <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br> <span class="hljs-keyword">endfunction</span>: <span class="hljs-keyword">new</span><br> <br> <span class="hljs-keyword">task</span> body;<br> <span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>;<br> txn = transaction::type_id::create(<span class="hljs-string">"txn"</span>, <span class="hljs-keyword">this</span>);<br> <span class="hljs-comment">/// Get the Configuration object</span><br> <span class="hljs-keyword">if</span>(!uvm_config_db <span class="hljs-variable">#(bus_config)::get(null, get_full_name(), "config", bus_cfg))</span> <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_error(" SEQ BODY ", "bus_config is not found")</span><br> <span class="hljs-keyword">end</span><br> <br> <span class="hljs-keyword">repeat</span> (limit)<br> <span class="hljs-keyword">begin</span><br> start_item(txn);<br> <span class="hljs-keyword">if</span>(!txn<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123;addr <span class="hljs-keyword">inside</span> &#123;[<span class="hljs-number">32'h0010_0000</span>:<span class="hljs-number">32'h0010_001C</span>]&#125;;&#125;) <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_error(" SEQ BODY ", " Transaction randomization failed")</span><br> <span class="hljs-keyword">end</span><br> finish_item(txn);<br> <span class="hljs-comment">/// wait for interface clock</span><br> bus_cfg<span class="hljs-variable">.wait_for_clock</span>(i);<br> i++;<br> <span class="hljs-comment">/// The txn handle points to the object that the driver has updated with response data</span><br> <span class="hljs-meta">`uvm_info(" SEQ BODY ", " txn.read_data ", UVM_LOW)</span><br> <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">endtask</span>: body<br> <br><span class="hljs-keyword">endclass</span>: bus_seq<br></code></pre></td></tr></table></figure><hr><p>From the above example we can see that inside the <strong>Transaction class i.e. “transaction”</strong>, we declared all the <strong>request</strong> and <strong>response</strong> data members. We also define the constraints inside it.</p><p>Next, there is a <strong>Configuration Object</strong> is being declared i.e. “<strong>bus_config</strong>“. Here we can define our <strong>hardware synchronization methods</strong> e.g. <strong>wait_for_clock</strong> &amp; <strong>wait_for_reset</strong> to be used in the UVM Testbench. Virtual Interface i.e. “<strong>bus_if</strong>” is also declared inside “<strong>bus_config</strong>“.</p><p>Finally inside a Sequence called “<strong>bus_seq</strong>” both Transaction &amp; Config Classes are instantiated. Transaction is <strong>constructed</strong> and Configuration Object is fetched using the <strong>get config</strong> method to set the valid pointer. Once its done, “<strong>wait_for_clock” method</strong> is called using the configuration object <strong>handle</strong> i.e. “<strong>bus_cfg</strong>“. By this way, we’re able to access the clock signal defined in the Virtual Interface inside a Sequence.</p><p>In the present example, delay between two transaction item transmission will be gradually increased with every loop.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interrupt Handling in UVM</title>
      <link href="/2019/08/13/Interrupt-Handling-in-UVM/"/>
      <url>/2019/08/13/Interrupt-Handling-in-UVM/</url>
      
        <content type="html"><![CDATA[<p><strong>Interrupt handling</strong> is a well known feature of any SoC which usually comprises of CPU, Bus Fabric, several Controllers, Sub-Systems &amp; many IP blocks as part of it. In some way or other Interrupts are used to act as the sideband signals of the Design/IP Blocks &amp; most of time its not the part of main bus or control bus.</p><p><strong>Fundamentally, Interrupts are the events which triggers a new thread of processing.</strong> Usually Interrupt acts in a System or Sub-System environment, where Design or IP blocks generates an event once certain design conditions are met or fulfilled. These events might be expected to propagate to the CPU via Interrupt Controller. An <strong>Interrupt Controller</strong>helps to manage several interrupts from different IPs, prioritize or arbitrate these interrupts. Interrupt Controller can be configured to enable &amp; disable interrupts &amp; can accept multiple interrupt request lines.</p><p>Coming back to the role of Interrupts in a System – it triggers a new thread of processing. This new thread which is usually called the <strong>Interrupt Service Routine (ISR)</strong> can either take the place of current execution thread, or it can be used to wake up a sleeping process to initiate some hardware activity.</p><p>Now, lets see how using UVM the Interrupt Service Routine is serviced when an interrupt is asserted. The simplest way to model interrupt handling is to trigger the <strong>execution of a Sequence</strong> that uses the <strong>grab()</strong>method to get the exclusive access of the <strong>Sequencer</strong>. In this way the current stimulus generation is disrupted but this is actually what happens when an ISR is triggered on a CPU. The interrupt service routine that is represented in the form of a <strong>Sequence</strong> can not be interrupted itself, &amp; must make an <strong>ungrab()</strong> call before it completes.</p><p>Now lets see it through an example of UVM code below:</p><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">///// Top-Level Sequence</span><br><span class="hljs-keyword">class</span> top_level_seq <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(transaction)</span>;<br> <span class="hljs-meta">`uvm_object_utils(top_level_seq)</span><br> <br> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name);<br> <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br> <span class="hljs-keyword">endfunction</span>: <span class="hljs-keyword">new</span><br> <br> <span class="hljs-keyword">task</span> body;<br>  <span class="hljs-comment">/// Sequence instantiation</span><br> main_seq MAIN_SEQ;<br> isr ISR;<br> <br> <span class="hljs-comment">/// Interrupt specific configuration class</span><br> int_config INT_CONF;<br> <br> MAIN_SEQ = main_seq::type_id::create(<span class="hljs-string">"MAIN_SEQ"</span>, <span class="hljs-keyword">this</span>);<br> ISR = isr::type_id::create(<span class="hljs-string">"ISR"</span>, <span class="hljs-keyword">this</span>);<br> <span class="hljs-keyword">if</span> (!uvm_config_db <span class="hljs-variable">#(int_config)::get(null, get_full_name(), "int_confir", INT_CONF))</span> <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_error("TOP SEQ BODY", "Failed to get int_config");</span><br> <span class="hljs-keyword">end</span><br> <br> <span class="hljs-comment">/// Two level of forked process</span><br> <span class="hljs-keyword">fork</span><br>   PRI_SEQ<span class="hljs-variable">.start</span>(m_sequencer);<br>    <span class="hljs-keyword">begin</span><br>     <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">fork</span><br>        INT_CONF<span class="hljs-variable">.wait_for_IRQ0</span>();<br>        INT_CONF<span class="hljs-variable">.wait_for_IRQ1</span>();<br>        INT_CONF<span class="hljs-variable">.wait_for_IRQ2</span>();<br>        INT_CONF<span class="hljs-variable">.wait_for_IRQ3</span>();<br>      <span class="hljs-keyword">join_any</span><br>      <span class="hljs-keyword">disable</span> <span class="hljs-keyword">fork</span>;<br>      ISR<span class="hljs-variable">.start</span>(m_sequencer)<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">join_any</span><br> <span class="hljs-keyword">disable</span> <span class="hljs-keyword">fork</span>;<br><span class="hljs-keyword">endtask</span>: body<br> <br><span class="hljs-keyword">endclass</span>: top_level_seq<br></code></pre></td></tr></table></figure><hr><p>This is the top level sequence i.e. <strong>top_level_seq</strong> which controls both main Sequence i.e. <strong>main_seq</strong> and Interrupt Service Routine (ISR) Sequence i.e. <strong>isr</strong>. In the main sequence a configuration class i.e. <strong>int_config</strong> is instantiated that contains the <strong>hardware synchronization tasks</strong> for the interrupts i.e. <strong>wait_for_IRQx()</strong>. To know more in detail about hardware synchronization tasks, please refer my previous post titled Wait for Interface Signals in UVM.</p><p>The most important piece of the main sequence is the <strong>two level forked process</strong>. <strong>In the first level</strong>, primarily two processes are spawned – The main sequence &amp; the Interrupt assertion on any one of the Interrupts out of four possibilities i.e. IRQ1-IRQ4. <strong>Second level</strong> of fork process is encapsulated in a <strong>forever</strong> loop. Once an Interrupt is sensed, other second level processes (IRQx) are disabled using <strong>disable fork</strong> and active Interrupt is serviced &amp; finally due to forever loop, all the 4 second level of processes are spawned again to poll the interrupts.</p><p>Once the main sequence is over, there is no point of keep running and waiting for the interrupts, hence the <strong>fork..join_any</strong> process is disabled using <strong>disable fork</strong> at the first level<strong>.</strong></p><p>Now lets examine the code for 2 other Sub-Sequences below:</p><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">///// Main Sequence</span><br><span class="hljs-keyword">class</span> main_seq <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(transaction)</span>;<br> <span class="hljs-meta">`uvm_object_utils(main_seq)</span><br>  <br> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name);<br>  <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br> <span class="hljs-keyword">endfunction</span>: <span class="hljs-keyword">new</span><br> <br> <span class="hljs-keyword">task</span> body;<br> <br> transaction req;<br>  req = transaction::type_id::create(<span class="hljs-string">"transaction"</span>, <span class="hljs-keyword">this</span>);<br> <br> <span class="hljs-keyword">repeat</span>(<span class="hljs-number">150</span>) <span class="hljs-keyword">begin</span><br> start_item(req);<br> <span class="hljs-keyword">if</span> (!req<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123;addr <span class="hljs-keyword">inside</span> &#123;[<span class="hljs-number">32'h0010_0000</span>:<span class="hljs-number">32'h0010_001C</span>]&#125;; read_not_write == <span class="hljs-number">0</span>;&#125;) <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_error("MAIN SEQ BODY", "req randomization failure")</span><br> <span class="hljs-keyword">end</span><br> finish_item();<br> <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">endtask</span>: body<br> <br><span class="hljs-keyword">endclass</span>: main_seq<br><br><span class="hljs-comment">///// ISR Sequence</span><br><span class="hljs-keyword">class</span> isr <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(transaction)</span>;<br> <span class="hljs-meta">`uvm_object_utils(isr)</span><br> <br> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name);<br>  <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br> <span class="hljs-keyword">endfunction</span>: <span class="hljs-keyword">new</span><br> <br> <span class="hljs-comment">/// Request data</span><br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] addr;<br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] write_data;<br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">bit</span> read_not_write;<br> <span class="hljs-keyword">rand</span> <span class="hljs-keyword">int</span> delay;<br> <span class="hljs-comment">/// Response data</span><br> <span class="hljs-keyword">bit</span> error;<br> <span class="hljs-keyword">logic</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] read_data<br> <br> <span class="hljs-keyword">task</span> body;<br> transaction req;<br> <br> <span class="hljs-comment">/// Grabbing the sequencer</span><br> m_sequencer<span class="hljs-variable">.grab</span>(<span class="hljs-keyword">this</span>);<br> <br> req = transaction::type_id::create(<span class="hljs-string">"transaction"</span>, <span class="hljs-keyword">this</span>);<br> <br> <span class="hljs-comment">///Read from the status register to determine the cause of interrupt</span><br> <span class="hljs-keyword">if</span>(!req<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123;addr == <span class="hljs-number">32</span>'<span class="hljs-number">0010_0000</span>; read_not_write == <span class="hljs-number">1</span>;&#125;) <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_error("INT SEQ BODY", "randomization failure")</span><br> <span class="hljs-keyword">end</span><br> start_item(req);<br> finish_item(req);<br> <br> <span class="hljs-comment">/// Clear the IRQ bit</span><br> req<span class="hljs-variable">.read_not_write</span> = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">if</span>(req<span class="hljs-variable">.read_data</span>[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>)<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[0] detected", UVM_LOW)</span><br> req<span class="hljs-variable">.write_data</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br> start_item(req);<br> finish_item(req);<br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[0] cleared", UVM_LOW)</span><br> <span class="hljs-keyword">end</span><br> <br> <span class="hljs-keyword">if</span>(req<span class="hljs-variable">.read_data</span>[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[1] detected", UVM_LOW)</span><br> req<span class="hljs-variable">.write_data</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br> start_item(req);<br> finish_item(req);<br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[1] cleared", UVM_LOW)</span><br> <span class="hljs-keyword">end</span><br> <br> <span class="hljs-keyword">if</span>(req<span class="hljs-variable">.read_data</span>[<span class="hljs-number">2</span>] == <span class="hljs-number">1</span>)<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[2] detected", UVM_LOW)</span><br> req<span class="hljs-variable">.write_data</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br> start_item(req);<br> finish_item(req);<br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[2] cleared", UVM_LOW)</span><br> <span class="hljs-keyword">end</span><br> <br> <span class="hljs-keyword">if</span>(req<span class="hljs-variable">.read_data</span>[<span class="hljs-number">3</span>] == <span class="hljs-number">1</span>)<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[3] detected", UVM_LOW)</span><br> req<span class="hljs-variable">.write_data</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br> start_item(req);<br> finish_item(req);<br> <span class="hljs-meta">`uvm_info("ISR SEQ BODY", "IRQ[3] cleared", UVM_LOW)</span><br> <span class="hljs-keyword">end</span><br> <span class="hljs-comment">/// Processing the transaction with interrupt line low</span><br> start_item(req);<br> finish_item(req);<br> <br> <span class="hljs-comment">/// Releasing the Sequencer for the main Sequence</span><br> m_sequencer<span class="hljs-variable">.ungrab</span>(<span class="hljs-keyword">this</span>);<br> <br> <span class="hljs-keyword">endtask</span>: body<br> <br><span class="hljs-keyword">endclass</span>: isr<br></code></pre></td></tr></table></figure><hr><p>In the above UVM code, the main sequence i.e. <strong>main_seq</strong> is pretty straight forward. It is implementing a loop (150 times) in which the <strong>transaction</strong> i.e. <strong>req</strong> is sent to the <strong>UVM Driver</strong> &amp; finally to the <strong>bus interface</strong> for that many times.</p><p><strong>Important</strong> thing to observe in the Interrupt Service Routine (ISR) Sequence i.e. <strong>isr</strong> is the use of <strong>grab()</strong> and <strong>ungrab()</strong> tasks. Another important thing to notice is the <strong>interrupt priority structure</strong>. The written order is important and top entry in IRQ[1]-IRQ[4] i.e. IRQ[1] is serviced first. Other key functional information is provided in the form of comments along with the code, please refer that. Using the grab(), <strong>isr</strong>Sequence takes full control of the Sequencer and perform the defined tasks of the ISR and later once done using ungrab() call, it releases the Sequencer for the main Sequence to continue.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to handle Reset in UVM?</title>
      <link href="/2019/08/13/How-to-handle-Reset-in-UVM/"/>
      <url>/2019/08/13/How-to-handle-Reset-in-UVM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1) Introduction:"></a>1) Introduction:</h2><p>One of the fundamental requirement in Electronic Design is to put the Design into a <strong>known state</strong> after the power is switched <strong>ON</strong>. This process of putting the Design into a known state is technically synchronized &amp; achieved using a dedicated signal popularly called “<strong>Reset</strong>” signal. We know that after power is switched ON, we <strong>Assert</strong> the Reset signal to the Design to put it into a known state and after certain time (usually in terms of number of clocks) the Reset signal is <strong>De-asserted</strong> to bring the Design Under Test (DUT) out of Reset. Assertion or De-assertion of Reset signal will depend on <strong>Active HIGH</strong> or <strong>Active LOW</strong> conditions. It is expected that after Reset signal is De-asserted, DUT achieves the known state as per the <strong>specification</strong> of the Design. So this is a simplified way to explain “How Reset signal directly relates to a Design’s operation”.</p><h2 id="2-Reset-generation-for-Module-Verification-by-UVC"><a href="#2-Reset-generation-for-Module-Verification-by-UVC" class="headerlink" title="2) Reset generation for Module Verification by UVC:"></a>2) Reset generation for Module Verification by UVC:</h2><p>To verify the <strong>Design Under Test</strong> (DUT), we know, we construct a <strong>Verification Environment</strong> aka <strong>Testbench</strong> around the DUT which may contains several Components or Transactors serving multiple purposes or tasks supporting the activities happening inside the Verification Environment. If you have not already visited, you may like to refer one of my previous posts to know more about the UVM Verification Components. In the whole given Testbench setup, once Reset process is started, the default state of the Testbench components as well as DUT needs to be achieved. The Reset process could be triggered by the <strong>initial Reset</strong> or <strong>intermediate Reset</strong> occurred during the Sequences execution in UVM. Since multiple Resets can occur in a single simulation, hence we should ensure that the DUT and Testbench can handle multiple Reset conditions.</p><p>In this post, we’ll see how to generate the Reset signal from the <strong>UVC</strong>(Universal Verification Component) which is also popularly called <strong>VIP</strong>(Verification IP) developed using <strong>UVM</strong>. The primary focus in this post is – How to use the <strong>UVM Phasing Mechanism</strong> to generate the Reset Assertion and De-Assertion conditions. Along with Reset generation, we’ll also see – How to handle the <strong>Reset handling</strong> inside UVM Testbench components like <strong>Driver, Monitor, Scoreboard &amp; Sequences</strong> along with smooth resetting of various defined <strong>Variables, Data Structures e.g. Queues, Arrays</strong> and/or <strong>temporary Memory elements</strong> whichever exists as part of the Testbench.</p><h2 id="3-UVM-Phases"><a href="#3-UVM-Phases" class="headerlink" title="3) UVM Phases:"></a>3) UVM Phases:</h2><p>Since we’re going to use UVM Phases to handle Reset generation, so at this point, lets quickly recap the UVM Phases here in brief:</p><p>For more detailed information on <strong>UMV Phases</strong>, you may like to visit my another post i.e. UVM Phasing.</p><p>Broadly UVM Phases are categorized into <strong>3 categories</strong>:</p><ol><li><strong>Build Phases</strong></li><li><strong>Run Phases</strong></li><li><strong>Clean-up Phases</strong></li></ol><p>Let’s see these categories using Figure 1 shown below:</p><p><img src="/2019/08/13/How-to-handle-Reset-in-UVM/uvm_phases.gif" alt="uvm_phases"></p><p>​                                                     <strong>Figure 1: UVM Phases (with reset phase)</strong></p><p>In the above Figure 1, we can see that <strong>Run Phase</strong> is partitioned into <strong>12 Sub-phases</strong>. All of these 12 Sub-phases are “<strong>tasks</strong>” in nature. It means, time can be consumed by these Sub-phases.</p><p>Since we know that <strong>UVM foundation principle</strong> is the <strong>automated flow of execution</strong> of these <strong>3 Phases i.e. Build, Run &amp; Cleanup Phases</strong> &amp; the proper synchronization between the Phases. There is an order of execution of different Phases which is shown in the above <strong>Figure 1</strong>. The execution sequence is designed by the Industry Experts  to cater the need of a Design to be verified. <strong>All the 12 Run Sub-phases executes in the shown order.</strong> It means once the Build Phases is over, the first Sub-phase in the Run Phase is “<strong>Reset</strong>” Phase. This Phase is being partitioned further into 3 Sub-phase i.e. <strong>pre_reset_phase()</strong>, <strong>reset_phase()</strong> &amp; <strong>post_reset_phase()</strong>.</p><h2 id="4-Reset-generation-using-UVM-reset-phase-Phase"><a href="#4-Reset-generation-using-UVM-reset-phase-Phase" class="headerlink" title="4) Reset generation using UVM reset_phase() Phase:"></a>4) Reset generation using UVM reset_phase() Phase:</h2><p>Lets first see the definitions of <strong>3 UVM Reset Sub-phases</strong>:</p><hr><h3 id="pre-reset"><a href="#pre-reset" class="headerlink" title="pre_reset:"></a>pre_reset:</h3><p>pre_reset phase starts at the same time as the run phase. Its purpose is to take care of any activity that should occur before the reset. E.g. waiting for a power signal to go active.</p><h3 id="reset"><a href="#reset" class="headerlink" title="reset:"></a>reset:</h3><p>As name indicates, reset phase is specially for DUT or Interface specific reset behavior. This phase would be used to generate reset to put the DUT/Interface into a default state.</p><h3 id="post-reset"><a href="#post-reset" class="headerlink" title="post_reset:"></a>post_reset:</h3><p>This phase is intended for any activity required just after the reset phase.</p><hr><p>Since all the Run Sub-phase are to be declared as <strong>Tasks</strong> &amp; we know that a Task <strong>can consume time</strong> in the simulation process. Hence we can utilize the <strong>reset_phase()</strong> task to generate the Reset from the <strong>UVC</strong>. Both <strong>pre_reset_phase()</strong> and <strong>post_reset_phase()</strong> are there to <strong>support</strong> the Reset process in the environment.</p><p>Lets see below a piece of UVM code to comprehend it more clearly:</p><h4 id="Driver-Code"><a href="#Driver-Code" class="headerlink" title="Driver Code:"></a>Driver Code:</h4><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">/// Driver Definition </span><br><span class="hljs-keyword">class</span> my_driver <span class="hljs-keyword">extends</span> uvm_driver <span class="hljs-variable">#(my_transaction)</span>;<br>   <span class="hljs-meta">`uvm_component_utils(my_driver)</span><br><br>...<br>...<br><br>  <span class="hljs-comment">/// Pre-reset Phase Task </span><br><span class="hljs-keyword">task</span> pre_reset_phase (uvm_phase phase);<br>  phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>  dut_vi<span class="hljs-variable">.reset</span> = <span class="hljs-number">1'b1</span>;<br>  #<span class="hljs-number">1</span>;<br>  phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endtask</span>: pre_reset_phase<br><br><span class="hljs-comment">/// Reset Phase Task, reset is Active LOW</span><br><span class="hljs-keyword">task</span> reset_phase(uvm_phase phase);<br>  phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>  dut_vi<span class="hljs-variable">.reset</span> = <span class="hljs-number">1'b0</span>;<br>  #<span class="hljs-number">13</span>;<br>  dut_vi<span class="hljs-variable">.reset</span> = <span class="hljs-number">1'b1</span>;<br>  phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endtask</span>: reset_phase <br><br><span class="hljs-keyword">endclass</span>: my_driver<br></code></pre></td></tr></table></figure><hr><p>From the above UVM Driver code inside the <strong>reset_phase</strong>(), its evident that Reset signal (i.e. <strong>dut_vi.reset</strong>) will be driven <strong>LOW</strong> (Active LOW) to assert the Reset and after some time (i.e. <strong>13ns</strong>) the Reset signal is driven <strong>HIGH</strong>to de-assert the Reset and DUT will be out of reset at this point of time.</p><p>Note: “<strong>dut_vi</strong>” is the <strong>Virtual Interface declaration</strong> made inside the <strong>Driver</strong>.</p><h2 id="5-Multiple-Reset-generation-using-UVM-Phasing"><a href="#5-Multiple-Reset-generation-using-UVM-Phasing" class="headerlink" title="5) Multiple Reset generation using UVM Phasing:"></a>5) Multiple Reset generation using UVM Phasing:</h2><p>We’ve seen above how to generate the Reset after the power is ON. There is a Test scenario where we may want to reset the DUT after the 1st Sequence is over &amp; run the same or different Sequence to test DUT behavior without getting it power down. So basically a new Reset is triggered without coming out of the UVM Phases.</p><p>Following UVM code inside the “<strong>Test”</strong> can be helpful to achieve this:</p><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"> <span class="hljs-comment">/// Test Definition</span><br><span class="hljs-keyword">class</span> my_test <span class="hljs-keyword">extends</span> uvm_test;<br> <span class="hljs-meta">`uvm_component_utils(my_test)</span><br><br>...<br>...<br><br><span class="hljs-comment">/// phase_ready_to_end function</span><br> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> phase_ready_to_end(uvm_phase phase);<br>   <span class="hljs-keyword">super</span><span class="hljs-variable">.phase_ready_to_end</span>(phase);<br>    <span class="hljs-keyword">if</span>(phase<span class="hljs-variable">.get_imp</span>() == uvm_shutdown_phase::get()) <span class="hljs-keyword">begin</span><br>     <span class="hljs-keyword">if</span> (run_count &lt;= <span class="hljs-meta">`no_of_runs) begin</span><br>      phase<span class="hljs-variable">.jump</span>(uvm_pre_reset_phase::get());<br>      run_count++;<br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">end</span> <br> <br>  <span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endclass</span>: my_test<br></code></pre></td></tr></table></figure><hr><p>We know in UVM, the Test ending mechanism is via <strong>Raise Objections</strong> and <strong>Drop Objections</strong>. So the indication of finishing a Sequence is that all the Raised Objections are Dropped and the Objection counter value will be <strong>zero</strong> at this point. Now <strong>phase_ready_to_end</strong>() function defined above comes into action. <strong>phase_ready_to_end</strong>() is called whenever the total objection count for the current phase decrements to <strong>0</strong>.</p><p>From the above code, its clear that once the phase is <strong>shutdown_phase</strong>(which is last Sub-phase out of the 12 Run Sub-phases) &amp; there is no pending Objection, phase_ready_to_end is activated and make a <strong>JUMP</strong> to the <strong>pre_reset_phase()</strong>. From there on, the whole cycle is repeated. This way, the whole process is <strong>re-started again</strong> &amp; a new RESET is generated.</p><p>This approach can be further extended to Test the scenario where Reset is triggered in-between of the Sequence execution instead of after completing the Sequence.</p><h2 id="6-Reset-handling-for-different-Testbench-components"><a href="#6-Reset-handling-for-different-Testbench-components" class="headerlink" title="6) Reset handling for different Testbench components:"></a>6) Reset handling for different Testbench components:</h2><p>Once Reset is generated inside the UVM Testbench Environment, we must take care of various different <strong>Testbench component’s</strong> behavior with respect to the Reset signal.  Following components (<strong>Static or Dynamic</strong>) needs to be prepared for Reset handling:</p><ul><li><strong>Monitor</strong></li><li><strong>Sequencer</strong></li><li><strong>Scoreboard</strong></li><li><strong>Sequences</strong></li><li><strong>Assertions</strong></li></ul><p>Now, lets see what can be done to make these UVM components Reset ready:</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor:"></a>Monitor:</h3><p>Whether the UVM Agent is <strong>ACTIVE</strong> or <strong>PASSIVE</strong>, a Monitor needs to be present in both of them. Monitor’s primary job is to receive the pin-level interface signals and based on the other Control signals like “<strong>valid_txn</strong>” or <strong>any other</strong> it transforms the <strong>pin-level signals</strong> into <strong>Transaction Objects</strong>. So as soon as the Reset signal is asserted, Monitor should disable the process of collection data from the Interfaces.</p><p>Lets see how this is achieved using the UVM code for Monitor:</p><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">/// Monitor Defintion</span><br><span class="hljs-keyword">class</span> my_monitor <span class="hljs-keyword">extends</span> uvm_monitor <span class="hljs-variable">#(my_transaction)</span>;<br> <span class="hljs-meta">`uvm_component_utils(my_monitor)</span><br><br>...<br>...<br> <br> <span class="hljs-comment">/// Run Task</span><br>  <span class="hljs-keyword">task</span> run_phase (uvm_phase phase);<br>   <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>   @(<span class="hljs-keyword">posedge</span> dut_vi<span class="hljs-variable">.reset</span>);<br>   <span class="hljs-keyword">fork</span><br>     monitor_items();<br>   <span class="hljs-keyword">join_none</span><br> <br>   @(<span class="hljs-keyword">negedge</span> dut_vi<span class="hljs-variable">.reset</span>);<br>    <span class="hljs-keyword">disable</span> <span class="hljs-keyword">fork</span>;<br>   <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endtask</span>: run_phase<br><br><span class="hljs-keyword">endclass</span>: my_monitor<br></code></pre></td></tr></table></figure><hr><p>Here we can see that inside the <strong>run_phase</strong> task <strong>forever</strong> loop, <strong>monitor_items</strong>() task is waiting for the <strong>dut_vi.reset</strong> signal <strong>positive</strong> edge (Reset de-asserted for Active LOW reset). Once the condition met, monitor_items is spawned from the fork..join_none and Monitor starts collecting the transactions. Now if there is any upcoming or intermediate Reset comes in  i.e. the <strong>negedge</strong> of the <strong>dut_vi.reset</strong> (Active LOW), the <strong>fork process</strong> is <strong>disabled</strong> which stops the monitor_items task. This is exactly what we want when RESET occurs i.e. not to collect any transactions either from Input or Output ports because only valide transactions have to be passed to the Scoreboard.</p><h3 id="Sequencer"><a href="#Sequencer" class="headerlink" title="Sequencer:"></a>Sequencer:</h3><p>UVM Phases are very handy &amp; automated in terms of handling different UVM components. Whenever there is UVM Phase <strong>JUMP</strong> instruction (as shown in point 5 above) it stops all the ongoing transactions and clears out the <strong>internal FIFOs</strong> which are involved to hold the running transactions on that Sequencer.</p><h3 id="Scoreboard"><a href="#Scoreboard" class="headerlink" title="Scoreboard:"></a>Scoreboard:</h3><p>Usually <strong>Queues</strong>, the <strong>data structure</strong>, being used inside the Scoreboards to hold the <strong>incoming stream of transactions</strong>. Once Reset occurs in the system, the declared Queues inside the Scoreboard MUST be cleared and all the existing elements needs to be flushed out. Since Scoreboard does not have direct access to the Interface and it works with UVM <strong>analysis imports</strong> and deals with <strong>transaction objects.</strong> Now again, we can utilize UVM Phases which are <strong>automated</strong> in terms of execution. So <strong>Queues</strong> can be flushed out once <strong>pre_reset_phase()</strong> occurs. It’ll be helpful in multiple RESET generation scenario.</p><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">/// Scoreboard Definition</span><br><span class="hljs-keyword">class</span> my_scoreboard <span class="hljs-keyword">extends</span> uvm_scoreboard;<br>  <span class="hljs-meta">`uvm_component_utils(my_scoreboard)</span><br> <br>  ...<br>  ...<br><br>  <span class="hljs-comment">/// A Queue declaration to hold DUT I/P &amp; O/P data</span><br>  my_transaction scb_q [$];<br>  my_transaction scb_q_o [$];<br><br>  <span class="hljs-comment">/// During reset phase Queues must be cleaned</span><br>  <span class="hljs-keyword">task</span> pre_reset_phase (uvm_phase phase);<br>   scb_q<span class="hljs-variable">.delete</span>();<br>   scb_q_o<span class="hljs-variable">.delete</span>();<br>  <span class="hljs-keyword">endtask</span><br><br><span class="hljs-keyword">endclass</span>: my_scoreboard<br></code></pre></td></tr></table></figure><hr><h3 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence:"></a>Sequence:</h3><p>Sequence is the UVM Environment <strong>dynamic</strong> <strong>component</strong> which generates Stimulus for the DUT. In terms of <strong>multiple Reset handling</strong>, definitely Sequence <strong>must be stopped</strong> once Reset is asserted and Sequence should be restarted automatically once Reset is de-asserted. UVM Phases can help us greatly to achieve what is expected out here.</p><p>Lets see below the UVM code for the <strong>Test</strong>:</p><hr><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">/// Test Definition</span><br><span class="hljs-keyword">class</span> my_test <span class="hljs-keyword">extends</span> uvm_test;<br>  <span class="hljs-meta">`uvm_component_utils(my_test)</span><br><br>...<br>...<br><span class="hljs-comment">/// Main Phase Task</span><br> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> main_phase(uvm_phase phase);<br>   my_sequence seq;<br>   seq = my_sequence::type_id::create(<span class="hljs-string">"seq"</span>);<br>   <span class="hljs-keyword">if</span>( !seq<span class="hljs-variable">.randomize</span>() ) <br>     <span class="hljs-meta">`uvm_error("", "Randomize failed")</span><br>   seq<span class="hljs-variable">.starting_phase</span> = phase;<br>   phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>   seq<span class="hljs-variable">.start</span>( m_env<span class="hljs-variable">.m_agnt</span><span class="hljs-variable">.m_seqr</span> );<br>   phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br> <span class="hljs-keyword">endtask</span><br><br><span class="hljs-keyword">endclass</span>: my_test<br></code></pre></td></tr></table></figure><hr><p>In the above UVM Test code, Sequence is started on the <strong>Sequencer</strong> i.e. <strong>m_seqr</strong> once the <strong>main_phase</strong> is entered. So if we’re able to recycle the UVM Phasing flow, Sequence will be automatically started on the defined Sequencer.</p><h3 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions:"></a>Assertions:</h3><p>We know that Assertions are to capture the live status of signals weather its <strong>Immediate</strong> or <strong>Concurrent</strong> Assertions. Assertions are most commonly used as <strong>Interface Protocol Checkers</strong> &amp; are placed inside the <strong>Interfaces</strong>or <strong>Monitors</strong>. Once <strong>Reset</strong> appears, we might want to <strong>kill</strong> the running Assertions. This can be achieved by adding following code:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">/// Assertion 1: grant0 &amp; grant1 should NOT be asserted together</span><br> <span class="hljs-keyword">assert</span> <span class="hljs-keyword">property</span> (@(<span class="hljs-keyword">posedge</span> clk) <br>                  <span class="hljs-keyword">disable</span> <span class="hljs-keyword">iff</span> (~reset) !(grant0 &amp; grant1));<br></code></pre></td></tr></table></figure><p>In the above code, once Reset appears (Active LOW), this Assertion/Property will be <strong>disabled</strong> and will not check the required condition. It will avoid flashing <strong>false errors</strong> during the <strong>RESET</strong> period.</p><hr><p>With this, we reached to the end of this post. I would like to conclude here this post on “<strong>How to handle Reset using UVM Phasing</strong>“.</p><p>As a recap, we discussed how to utilize the automated &amp; sequential Phase based execution flow and use how to use <strong>reset_phase</strong>() inside a UVM <strong>Driver</strong> to generate Reset. We touched base with different UVM Phases. We discussed how to generate multiple Resets once a Sequence is executed. Later we analyzed the different UVM environment components which needs attention &amp; work towards Reset handling situations.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM-1.2中弃用的功能</title>
      <link href="/2019/08/13/UVM-1-2%E4%B8%AD%E5%BC%83%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/08/13/UVM-1-2%E4%B8%AD%E5%BC%83%E7%94%A8%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>There are many features which are deprecated in latest <strong><em>UVM 1.2 standard</em></strong>. If you’re switching to use UVM 1.2 in your projects, its a MUST not to use following methods, variables, macros &amp; parameters in your code &amp; update your UVM 1.1/UVM 1.0 code to comply with the new UVM 1.2 standards.</p><p>In the same direction, I thought, it will be helpful to list down the primary deprecated features in UVM 1.2 to get a quick look:</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><ol><li>set_config_int</li><li>set_config_string</li><li>set_config_object</li><li>get_config_int</li><li>get_config_string</li><li>get_config_object</li><li>uvm_component::status</li><li>uvm_component::kill</li><li>uvm_component::do_kill_all</li><li>uvm_component::stop_phase</li><li>stop_request</li><li>global_stop_request</li><li>set_global_timeout</li><li>stop_timeout</li><li>set_global_stop_timeout</li><li>uvm_sequencer_base::add_sequence</li><li>uvm_sequencer_base::get_seq_kind</li><li>uvm_sequencer_base::get_sequence</li></ol><h4 id="Variables"><a href="#Variables" class="headerlink" title="Variables:"></a>Variables:</h4><ol><li>uvm_test_done</li><li>enable_stop_interrupt</li></ol><h4 id="Macros"><a href="#Macros" class="headerlink" title="Macros:"></a>Macros:</h4><ol><li>`uvm_sequence_utils</li><li>`uvm_declare_sequence_lib</li><li>`uvm_update_sequence_lib</li></ol><h4 id="Configurable-Database-Parameters"><a href="#Configurable-Database-Parameters" class="headerlink" title="Configurable Database Parameters:"></a>Configurable Database Parameters:</h4><ol><li>default_sequence</li><li>count</li><li>max_random_count</li><li>max_random_depth</li></ol>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk使用频率最多的用法总结</title>
      <link href="/2019/08/09/awk%E4%BD%BF%E7%94%A8%E9%A2%91%E7%8E%87%E6%9C%80%E5%A4%9A%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/08/09/awk%E4%BD%BF%E7%94%A8%E9%A2%91%E7%8E%87%E6%9C%80%E5%A4%9A%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><code>awk</code>是处理文本文件的一个应用程序，几乎所有 Linux 系统都自带这个程序。</p><p>它依次处理文件的每一行，并读取里面的每一个字段。对于日志、CSV 那样的每行格式相同的文本文件，<code>awk</code>可能是最方便的工具。</p><p><code>awk</code>其实不仅仅是工具软件，还是一种编程语言。不过，本文只介绍它的命令行用法，对于大多数场合，应该足够用了。</p><h2 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h2><p><code>awk</code>的基本用法就是下面的形式。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; <span class="hljs-comment"># 格式</span><br>&gt; $ awk 动作 文件名<br>&gt; <br>&gt; <span class="hljs-comment"># 示例</span><br>&gt; $ awk <span class="hljs-string">'&#123;print $0&#125;'</span> demo.txt<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面示例中，<code>demo.txt</code>是<code>awk</code>所要处理的文本文件。前面单引号内部有一个大括号，里面就是每一行的处理动作<code>print $0</code>。其中，<code>print</code>是打印命令，<code>$0</code>代表当前行，因此上面命令的执行结果，就是把每一行原样打印出来。</p><p>下面，我们先用标准输入（stdin）演示上面这个例子。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">'this is a test'</span> | awk <span class="hljs-string">'&#123;print $0&#125;'</span><br>&gt; this is a <span class="hljs-built_in">test</span><br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>print $0</code>就是把标准输入<code>this is a test</code>，重新打印了一遍。</p><p><code>awk</code>会根据空格和制表符，将每一行分成若干字段，依次用<code>$1</code>、<code>$2</code>、<code>$3</code>代表第一个字段、第二个字段、第三个字段等等。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">'this is a test'</span> | awk <span class="hljs-string">'&#123;print $3&#125;'</span><br>&gt; a<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>$3</code>代表<code>this is a test</code>的第三个字段<code>a</code>。</p><p>下面，为了便于举例，我们把<code>/etc/passwd</code>文件保存成<code>demo.txt</code>。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; root:x:0:0:root:/root:/usr/bin/zsh<br>&gt; daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>&gt; bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>&gt; sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>&gt; sync:x:4:65534:sync:/bin:/bin/sync<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>这个文件的字段分隔符是冒号（<code>:</code>），所以要用<code>-F</code>参数指定分隔符为冒号。然后，才能提取到它的第一个字段。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'&#123; print $1 &#125;'</span> demo.txt<br>&gt; root<br>&gt; daemon<br>&gt; bin<br>&gt; sys<br>&gt; sync<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><p>除了<code>$ + 数字</code>表示某个字段，<code>awk</code>还提供其他一些变量。</p><p>变量<code>NF</code>表示当前行有多少个字段，因此<code>$NF</code>就代表最后一个字段。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">'this is a test'</span> | awk <span class="hljs-string">'&#123;print $NF&#125;'</span><br>&gt; <span class="hljs-built_in">test</span><br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p><code>$(NF-1)</code>代表倒数第二个字段。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'&#123;print $1, $(NF-1)&#125;'</span> demo.txt<br>&gt; root /root<br>&gt; daemon /usr/sbin<br>&gt; bin /bin<br>&gt; sys /dev<br>&gt; sync /bin<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>print</code>命令里面的逗号，表示输出的时候，两个部分之间使用空格分隔。</p><p>变量<code>NR</code>表示当前处理的是第几行。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'&#123;print NR ") " $1&#125;'</span> demo.txt<br>&gt; 1) root<br>&gt; 2) daemon<br>&gt; 3) bin<br>&gt; 4) sys<br>&gt; 5) sync<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>print</code>命令里面，如果原样输出字符，要放在双引号里面。</p><p><code>awk</code>的其他内置变量如下。</p><blockquote><ul><li><code>FILENAME</code>：当前文件名</li><li><code>FS</code>：字段分隔符，默认是空格和制表符。</li><li><code>RS</code>：行分隔符，用于分割每一行，默认是换行符。</li><li><code>OFS</code>：输出字段的分隔符，用于打印时分隔字段，默认为空格。</li><li><code>ORS</code>：输出记录的分隔符，用于打印时分隔记录，默认为换行符。</li><li><code>OFMT</code>：数字输出的格式，默认为<code>％.6g</code>。</li></ul></blockquote><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><p><code>awk</code>还提供了一些内置函数，方便对原始数据的处理。</p><p>函数<code>toupper()</code>用于将字符转为大写。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'&#123; print toupper($1) &#125;'</span> demo.txt<br>&gt; ROOT<br>&gt; DAEMON<br>&gt; BIN<br>&gt; SYS<br>&gt; SYNC<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，第一个字段输出时都变成了大写。</p><p>其他常用函数如下。</p><blockquote><ul><li><code>tolower()</code>：字符转为小写。</li><li><code>length()</code>：返回字符串长度。</li><li><code>substr()</code>：返回子字符串。</li><li><code>sin()</code>：正弦。</li><li><code>cos()</code>：余弦。</li><li><code>sqrt()</code>：平方根。</li><li><code>rand()</code>：随机数。</li></ul></blockquote><p><code>awk</code>内置函数的完整列表，可以查看<a href="https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din" target="_blank" rel="noopener">手册</a>。</p><h2 id="四、条件"><a href="#四、条件" class="headerlink" title="四、条件"></a>四、条件</h2><p><code>awk</code>允许指定输出条件，只输出符合条件的行。</p><p>输出条件要写在动作的前面。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk <span class="hljs-string">'条件 动作'</span> 文件名<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>请看下面的例子。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'/usr/ &#123;print $1&#125;'</span> demo.txt<br>&gt; root<br>&gt; daemon<br>&gt; bin<br>&gt; sys<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>print</code>命令前面是一个正则表达式，只输出包含<code>usr</code>的行。</p><p>下面的例子只输出奇数行，以及输出第三行以后的行。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; <span class="hljs-comment"># 输出奇数行</span><br>&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'NR % 2 == 1 &#123;print $1&#125;'</span> demo.txt<br>&gt; root<br>&gt; bin<br>&gt; sync<br>&gt; <br>&gt; <span class="hljs-comment"># 输出第三行以后的行</span><br>&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'NR &gt;3 &#123;print $1&#125;'</span> demo.txt<br>&gt; sys<br>&gt; sync<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>下面的例子输出第一个字段等于指定值的行。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'$1 == "root" &#123;print $1&#125;'</span> demo.txt<br>&gt; root<br>&gt; <br>&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'$1 == "root" || $1 == "bin" &#123;print $1&#125;'</span> demo.txt<br>&gt; root<br>&gt; bin<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="五、if-语句"><a href="#五、if-语句" class="headerlink" title="五、if 语句"></a>五、if 语句</h2><p><code>awk</code>提供了<code>if</code>结构，用于编写复杂的条件。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'&#123;if ($1 &gt; "m") print $1&#125;'</span> demo.txt<br>&gt; root<br>&gt; sys<br>&gt; sync<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码输出第一个字段的第一个字符大于<code>m</code>的行。</p><p><code>if</code>结构还可以指定<code>else</code>部分。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'&#123;if ($1 &gt; "m") print $1; else print "---"&#125;'</span> demo.txt<br>&gt; root<br>&gt; ---<br>&gt; ---<br>&gt; sys<br>&gt; sync<br>&gt;<br></code></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xargs妙用~</title>
      <link href="/2019/08/08/xargs%E5%A6%99%E7%94%A8/"/>
      <url>/2019/08/08/xargs%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、标准输入与管道命令"><a href="#一、标准输入与管道命令" class="headerlink" title="一、标准输入与管道命令"></a>一、标准输入与管道命令</h2><p>Unix 命令都带有参数，有些命令可以接受”标准输入”（stdin）作为参数。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ cat /etc/passwd | grep root<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面的代码使用了管道命令（<code>|</code>）。管道命令的作用，是将左侧命令（<code>cat /etc/passwd</code>）的标准输出转换为标准输入，提供给右侧命令（<code>grep root</code>）作为参数。</p><p>因为<code>grep</code>命令可以接受标准输入作为参数，所以上面的代码等同于下面的代码。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ grep root /etc/passwd<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>但是，大多数命令都不接受标准输入作为参数，只能直接在命令行输入参数，这导致无法用管道命令传递参数。举例来说，<code>echo</code>命令就不接受管道传参。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">"hello world"</span> | <span class="hljs-built_in">echo</span><br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面的代码不会有输出。因为管道右侧的<code>echo</code>不接受管道传来的标准输入作为参数。</p><h2 id="二、xargs-命令的作用"><a href="#二、xargs-命令的作用" class="headerlink" title="二、xargs 命令的作用"></a>二、xargs 命令的作用</h2><p><code>xargs</code>命令的作用，是将标准输入转为命令行参数。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">"hello world"</span> | xargs <span class="hljs-built_in">echo</span><br>&gt; hello world<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面的代码将管道左侧的标准输入，转为命令行参数<code>hello world</code>，传给第二个<code>echo</code>命令。</p><p><code>xargs</code>命令的格式如下。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs [-options] [<span class="hljs-built_in">command</span>]<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>真正执行的命令，紧跟在<code>xargs</code>后面，接受<code>xargs</code>传来的参数。</p><p><code>xargs</code>的作用在于，大多数命令（比如<code>rm</code>、<code>mkdir</code>、<code>ls</code>）与管道一起使用时，都需要<code>xargs</code>将标准输入转为命令行参数。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">"one two three"</span> | xargs mkdir<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面的代码等同于<code>mkdir one two three</code>。如果不加<code>xargs</code>就会报错，提示<code>mkdir</code>缺少操作参数。</p><h2 id="三、xargs-的单独使用"><a href="#三、xargs-的单独使用" class="headerlink" title="三、xargs 的单独使用"></a>三、xargs 的单独使用</h2><p><code>xargs</code>后面的命令默认是<code>echo</code>。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs<br>&gt; <span class="hljs-comment"># 等同于</span><br>&gt; $ xargs <span class="hljs-built_in">echo</span><br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>大多数时候，<code>xargs</code>命令都是跟管道一起使用的。但是，它也可以单独使用。</p><p>输入<code>xargs</code>按下回车以后，命令行就会等待用户输入，作为标准输入。你可以输入任意内容，然后按下<code>Ctrl d</code>，表示输入结束，这时<code>echo</code>命令就会把前面的输入打印出来。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs<br>&gt; hello (Ctrl + d)<br>&gt; hello<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>再看一个例子。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs find -name<br>&gt; <span class="hljs-string">"*.txt"</span><br>&gt; ./foo.txt<br>&gt; ./hello.txt<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面的例子输入<code>xargs find -name</code>以后，命令行会等待用户输入所要搜索的文件。用户输入<code>&quot;*.txt&quot;</code>，表示搜索当前目录下的所有 TXT 文件，然后按下<code>Ctrl d</code>，表示输入结束。这时就相当执行<code>find -name *.txt</code>。</p><h2 id="四、-d-参数与分隔符"><a href="#四、-d-参数与分隔符" class="headerlink" title="四、-d 参数与分隔符"></a>四、-d 参数与分隔符</h2><p>默认情况下，<code>xargs</code>将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">"one two three"</span> | xargs mkdir<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>mkdir</code>会新建三个子目录，因为<code>xargs</code>将<code>one two three</code>分解成三个命令行参数，执行<code>mkdir one two three</code>。</p><p><code>-d</code>参数可以更改分隔符。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"a\tb\tc"</span> | xargs -d <span class="hljs-string">"\t"</span> <span class="hljs-built_in">echo</span><br>&gt; a b c<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面的命令指定制表符<code>\t</code>作为分隔符，所以<code>a\tb\tc</code>就转换成了三个命令行参数。<code>echo</code>命令的<code>-e</code>参数表示解释转义字符。</p><h2 id="五、-p-参数，-t-参数"><a href="#五、-p-参数，-t-参数" class="headerlink" title="五、-p 参数，-t 参数"></a>五、-p 参数，-t 参数</h2><p>使用<code>xargs</code>命令以后，由于存在转换参数过程，有时需要确认一下到底执行的是什么命令。</p><p><code>-p</code>参数打印出要执行的命令，询问用户是否要执行。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">'one two three'</span> | xargs -p touch<br>&gt; touch one two three ?...<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面的命令执行以后，会打印出最终要执行的命令，让用户确认。用户按下回车以后，才会真正执行。</p><p><code>-t</code>参数则是打印出最终要执行的命令，然后直接执行，不需要用户确认。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> <span class="hljs-string">'one two three'</span> | xargs -t rm<br>&gt; rm one two three<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="六、-0-参数与-find-命令"><a href="#六、-0-参数与-find-命令" class="headerlink" title="六、-0 参数与 find 命令"></a>六、-0 参数与 find 命令</h2><p>由于<code>xargs</code>默认将空格作为分隔符，所以不太适合处理文件名，因为文件名可能包含空格。</p><p><code>find</code>命令有一个特别的参数<code>-print0</code>，指定输出的文件列表以<code>null</code>分隔。然后，<code>xargs</code>命令的<code>-0</code>参数表示用<code>null</code>当作分隔符。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ find /path -<span class="hljs-built_in">type</span> f -print0 | xargs -0 rm<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面命令删除<code>/path</code>路径下的所有文件。由于分隔符是<code>null</code>，所以处理包含空格的文件名，也不会报错。</p><p>还有一个原因，使得<code>xargs</code>特别适合<code>find</code>命令。有些命令（比如<code>rm</code>）一旦参数过多会报错”参数列表过长”，而无法执行，改用<code>xargs</code>就没有这个问题，因为它对每个参数执行一次命令。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ find . -name <span class="hljs-string">"*.txt"</span> | xargs grep <span class="hljs-string">"abc"</span><br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面命令找出所有 TXT 文件以后，对每个文件搜索一次是否包含字符串<code>abc</code>。</p><h2 id="七、-L-参数"><a href="#七、-L-参数" class="headerlink" title="七、-L 参数"></a>七、-L 参数</h2><p>如果标准输入包含多行，<code>-L</code>参数指定多少行作为一个命令行参数。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs find -name<br>&gt; <span class="hljs-string">"*.txt"</span>   <br>&gt; <span class="hljs-string">"*.md"</span><br>&gt; find: paths must precede expression: `*.md<span class="hljs-string">'<br>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p>上面命令同时将<code>&quot;*.txt&quot;</code>和<code>*.md</code>两行作为命令行参数，传给<code>find</code>命令导致报错。</p><p>使用<code>-L</code>参数，指定每行作为一个命令行参数，就不会报错。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs -L 1 find -name<br>&gt; <span class="hljs-string">"*.txt"</span><br>&gt; ./foo.txt<br>&gt; ./hello.txt<br>&gt; <span class="hljs-string">"*.md"</span><br>&gt; ./README.md<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面命令指定了每一行（<code>-L 1</code>）作为命令行参数，分别运行一次命令（<code>find -name</code>）。</p><p>下面是另一个例子。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"a\nb\nc"</span> | xargs -L 1 <span class="hljs-built_in">echo</span><br>&gt; a<br>&gt; b<br>&gt; c<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码指定每行运行一次<code>echo</code>命令，所以<code>echo</code>命令执行了三次，输出了三行。</p><h2 id="八、-n-参数"><a href="#八、-n-参数" class="headerlink" title="八、-n 参数"></a>八、-n 参数</h2><p><code>-L</code>参数虽然解决了多行的问题，但是有时用户会在同一行输入多项。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs find -name<br>&gt; <span class="hljs-string">"*.txt"</span> <span class="hljs-string">"*.md"</span><br>&gt; find: paths must precede expression: `*.md<span class="hljs-string">'<br>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p>上面的命令将同一行的两项作为命令行参数，导致报错。</p><p><code>-n</code>参数指定每次将多少项，作为命令行参数。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ xargs -n 1 find -name<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面命令指定将每一项（<code>-n 1</code>）标准输入作为命令行参数，分别执行一次命令（<code>find -name</code>）。</p><p>下面是另一个例子。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ <span class="hljs-built_in">echo</span> &#123;0..9&#125; | xargs -n 2 <span class="hljs-built_in">echo</span><br>&gt; 0 1<br>&gt; 2 3<br>&gt; 4 5<br>&gt; 6 7<br>&gt; 8 9<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面命令指定，每两个参数运行一次<code>echo</code>命令。所以，10个阿拉伯数字运行了五次<code>echo</code>命令，输出了五行。</p><h2 id="九、-I-参数"><a href="#九、-I-参数" class="headerlink" title="九、-I 参数"></a>九、-I 参数</h2><p>如果<code>xargs</code>要将命令行参数传给多个命令，可以使用<code>-I</code>参数。</p><p><code>-I</code>指定每一项命令行参数的替代字符串。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ cat foo.txt<br>&gt; one<br>&gt; two<br>&gt; three<br>&gt; <br>&gt; $ cat foo.txt | xargs -I file sh -c <span class="hljs-string">'echo file; mkdir file'</span><br>&gt; one <br>&gt; two<br>&gt; three<br>&gt; <br>&gt; $ ls <br>&gt; one two three<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>foo.txt</code>是一个三行的文本文件。我们希望对每一项命令行参数，执行两个命令（<code>echo</code>和<code>mkdir</code>），使用<code>-I file</code>表示<code>file</code>是命令行参数的替代字符串。执行命令时，具体的参数会替代掉<code>echo file; mkdir file</code>里面的两个<code>file</code>。</p><h2 id="十、–max-procs-参数"><a href="#十、–max-procs-参数" class="headerlink" title="十、–max-procs 参数"></a>十、–max-procs 参数</h2><p><code>xargs</code>默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。</p><p><code>--max-procs</code>参数指定同时用多少个进程并行执行命令。<code>--max-procs 2</code>表示同时最多使用两个进程，<code>--max-procs 0</code>表示不限制进程数。</p><blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; $ docker ps -q | xargs -n 1 --max-procs 0 docker <span class="hljs-built_in">kill</span><br>&gt;<br></code></pre></td></tr></table></figure></blockquote><p>上面命令表示，同时关闭尽可能多的 Docker 容器，这样运行速度会快很多。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> xargs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel的BDD测试</title>
      <link href="/2019/07/25/Chisel%E7%9A%84BDD%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/07/25/Chisel%E7%9A%84BDD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="SV的CRV，Chisel的BDD！"><a href="#SV的CRV，Chisel的BDD！" class="headerlink" title="SV的CRV，Chisel的BDD！"></a>SV的CRV，Chisel的BDD！</h4><ul><li>终于到了如何验证测试Chisel代码了！</li><li>通过各种ScalaTest方法，各种Trait，晕头转向，可以参考一些高端的TDD,BDD的软件测试书籍。</li></ul><p><img src="/2019/07/25/Chisel的BDD测试/bdd1.jpg" alt="BDD1"></p><p><img src="/2019/07/25/Chisel的BDD测试/bdd2.jpg" alt="BDD2"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RawModule定制化~</title>
      <link href="/2019/07/18/RawModule%E5%AE%9A%E5%88%B6%E5%8C%96/"/>
      <url>/2019/07/18/RawModule%E5%AE%9A%E5%88%B6%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="恼人的io-xx，定制化才是最好的"><a href="#恼人的io-xx，定制化才是最好的" class="headerlink" title="恼人的io_xx，定制化才是最好的~"></a>恼人的io_xx，定制化才是最好的~</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RawModule</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> clk   = <span class="hljs-type">IO</span>(<span class="hljs-type">Input</span>(<span class="hljs-type">Clock</span>()))<br>  <span class="hljs-keyword">val</span> rst_n = <span class="hljs-type">IO</span>(<span class="hljs-type">Input</span>(<span class="hljs-type">Bool</span>()))<br>  <span class="hljs-keyword">val</span> in0   = <span class="hljs-type">IO</span>(<span class="hljs-type">Input</span>(<span class="hljs-type">Valid</span>(<span class="hljs-type">SInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))))<br>  <span class="hljs-keyword">val</span> out0  = <span class="hljs-type">IO</span>(<span class="hljs-type">Output</span>(<span class="hljs-type">Valid</span>(<span class="hljs-type">SInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))))<br><br>  withClockAndReset(clk, ~rst_n) &#123;<br>    out0 &lt;&gt; <span class="hljs-type">Pipe</span>(in0,<span class="hljs-number">4</span>)<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> pipe( <span class="hljs-comment">// @[:@3.2]</span><br>  <span class="hljs-keyword">input</span>        clk, <span class="hljs-comment">// @[:@4.4]</span><br>  <span class="hljs-keyword">input</span>        rst_n, <span class="hljs-comment">// @[:@5.4]</span><br>  <span class="hljs-keyword">input</span>        in0_valid, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in0_bits, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>       out0_valid, <span class="hljs-comment">// @[:@7.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] out0_bits <span class="hljs-comment">// @[:@7.4]</span><br>);<br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_16; <span class="hljs-comment">// @[TestDriver.scala 15:26:@9.4]</span><br>  <span class="hljs-keyword">reg</span>  <span class="hljs-number">_</span>T_19; <span class="hljs-comment">// @[Valid.scala 48:22:@10.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_0;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_21; <span class="hljs-comment">// @[Reg.scala 11:16:@12.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_1;<br>  <span class="hljs-keyword">reg</span>  <span class="hljs-number">_</span>T_24; <span class="hljs-comment">// @[Valid.scala 48:22:@16.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_2;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_26; <span class="hljs-comment">// @[Reg.scala 11:16:@18.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_3;<br>  <span class="hljs-keyword">reg</span>  <span class="hljs-number">_</span>T_29; <span class="hljs-comment">// @[Valid.scala 48:22:@22.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_4;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_31; <span class="hljs-comment">// @[Reg.scala 11:16:@24.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_5;<br>  <span class="hljs-keyword">reg</span>  <span class="hljs-number">_</span>T_34; <span class="hljs-comment">// @[Valid.scala 48:22:@28.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_6;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_36; <span class="hljs-comment">// @[Reg.scala 11:16:@30.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_7;<br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_16 = ~ rst_n; <span class="hljs-comment">// @[TestDriver.scala 15:26:@9.4]</span><br>  <span class="hljs-keyword">assign</span> out0_valid = <span class="hljs-number">_</span>T_34; <span class="hljs-comment">// @[TestDriver.scala 16:10:@38.4]</span><br>  <span class="hljs-keyword">assign</span> out0_bits = <span class="hljs-number">_</span>T_36; <span class="hljs-comment">// @[TestDriver.scala 16:10:@37.4]</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_GARBAGE_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_INVALID_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_MEM_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> RANDOM</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOM $random</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE</span><br>  <span class="hljs-keyword">integer</span> initvar;<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> INIT_RANDOM</span><br>      <span class="hljs-meta">`INIT_RANDOM</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> VERILATOR</span><br>      #<span class="hljs-number">0</span><span class="hljs-variable">.002</span> <span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_0 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_19 = <span class="hljs-number">_</span>RAND_0[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_1 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_21 = <span class="hljs-number">_</span>RAND_1[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_2 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_24 = <span class="hljs-number">_</span>RAND_2[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_3 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_26 = <span class="hljs-number">_</span>RAND_3[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_4 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_29 = <span class="hljs-number">_</span>RAND_4[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_5 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_31 = <span class="hljs-number">_</span>RAND_5[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_6 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_34 = <span class="hljs-number">_</span>RAND_6[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_7 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  <span class="hljs-number">_</span>T_36 = <span class="hljs-number">_</span>RAND_7[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE</span><br>  <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_16) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_19 &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_19 &lt;= in0_valid;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (in0_valid) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_21 &lt;= in0_bits;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_16) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_24 &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_24 &lt;= <span class="hljs-number">_</span>T_19;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_19) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_26 &lt;= <span class="hljs-number">_</span>T_21;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_16) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_29 &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_29 &lt;= <span class="hljs-number">_</span>T_24;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_24) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_31 &lt;= <span class="hljs-number">_</span>T_26;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_16) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_34 &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_34 &lt;= <span class="hljs-number">_</span>T_29;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_29) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_36 &lt;= <span class="hljs-number">_</span>T_31;<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel引入敏捷迭代测试~</title>
      <link href="/2019/07/17/Chisel%E5%BC%95%E5%85%A5%E6%95%8F%E6%8D%B7%E8%BF%AD%E4%BB%A3%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/07/17/Chisel%E5%BC%95%E5%85%A5%E6%95%8F%E6%8D%B7%E8%BF%AD%E4%BB%A3%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="引入多种高级语言的测试套件功能"><a href="#引入多种高级语言的测试套件功能" class="headerlink" title="引入多种高级语言的测试套件功能~"></a>引入多种高级语言的测试套件功能~</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> test.smr<br><br><span class="hljs-keyword">import</span> chisel3.iotesters.&#123;<span class="hljs-type">ChiselFlatSpec</span>, <span class="hljs-type">Driver</span>, <span class="hljs-type">PeekPokeTester</span>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccumulatorTests</span>(<span class="hljs-params">c: <span class="hljs-type">Accumulator</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">PeekPokeTester</span>(<span class="hljs-params">c</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> tot = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (t &lt;- <span class="hljs-number">0</span> until <span class="hljs-number">16</span>) &#123;<br>    <span class="hljs-keyword">val</span> in = rnd.nextInt(<span class="hljs-number">2</span>)<br>    poke(c.io.in, in)<br>    step(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-number">1</span>) tot += <span class="hljs-number">2</span><span class="hljs-comment">//wrong here</span><br>    expect(c.io.out, tot)<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccumulatorTester</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChiselFlatSpec</span> </span>&#123;<br>  behavior of <span class="hljs-string">"Accumulator"</span><br>  backends foreach &#123;backend =&gt;<br>    it should <span class="hljs-string">s"correctly accumulate randomly generated numbers in <span class="hljs-subst">$backend</span>"</span> in &#123;<br>      <span class="hljs-type">Driver</span>(() =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">Accumulator</span>, backend)(c =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">AccumulatorTests</span>(c)) should be (<span class="hljs-literal">true</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">TBTOP</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    <span class="hljs-type">Driver</span>.execute(<span class="hljs-type">Array</span>(<span class="hljs-string">"--backend-name"</span>,<span class="hljs-string">"vcs"</span>),() =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">Accumulator</span>()) &#123;<br>        (c) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">AccumulatorTests</span>(c)<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成多个测试套件以及测试脚本"><a href="#生成多个测试套件以及测试脚本" class="headerlink" title="生成多个测试套件以及测试脚本"></a>生成多个测试套件以及测试脚本</h4><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vcs -full64 -quiet -timescale=1ns/1ps -debug_pp -Mdir=Accumulator.csrc +v2k +vpi +vcs+lic+wait +vcs+initreg+random +define+CLOCK_PERIOD=1 -P vpi.tab -cpp g++ -O2 -LDFLAGS -lstdc++ -CFLAGS "-I$VCS_HOME/include -I$dir -fPIC -std=c++11" -o Accumulator Accumulator.v Accumulator-harness.v vpi.cpp<br></code></pre></td></tr></table></figure><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> test;<br>  <span class="hljs-keyword">reg</span> clock = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">reg</span> reset = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">reg</span>[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] io_in = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">wire</span>[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>] io_in_delay;<br>  <span class="hljs-keyword">assign</span>  io_in_delay = io_in;<br>  <span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_out_delay;<br>  <span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_out;<br>  <span class="hljs-keyword">assign</span>  io_out = io_out_delay;<br>  <span class="hljs-keyword">always</span> #<span class="hljs-meta">`CLOCK_PERIOD clock = ~clock;</span><br>  <span class="hljs-keyword">reg</span> vcdon = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">1023</span>:<span class="hljs-number">0</span>] vcdfile = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">1023</span>:<span class="hljs-number">0</span>] vpdfile = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">/*** DUT instantiation ***/</span><br>  Accumulator Accumulator(<br>    <span class="hljs-variable">.clock</span>(clock),<br>    <span class="hljs-variable">.reset</span>(reset),<br>    <span class="hljs-variable">.io_in</span>(io_in_delay),<br>    <span class="hljs-variable">.io_out</span>(io_out_delay)  );<br><br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    $init_rsts(reset);<br>    $init_ins(clock, reset, io_in);<br>    $init_outs(io_out);<br>    $init_sigs(Accumulator);<br>    <span class="hljs-comment">/*** VCD dump ***/</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">$value$plusargs</span>(<span class="hljs-string">"vcdfile=%s"</span>, vcdfile)) <span class="hljs-keyword">begin</span><br>      <span class="hljs-built_in">$dumpfile</span>(vcdfile);<br>      <span class="hljs-built_in">$dumpvars</span>(<span class="hljs-number">0</span>, Accumulator);<br>      <span class="hljs-built_in">$dumpoff</span>;<br>      vcdon = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">negedge</span> clock) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (vcdfile &amp;&amp; reset) <span class="hljs-keyword">begin</span><br>      <span class="hljs-built_in">$dumpoff</span>;<br>      vcdon = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vcdfile &amp;&amp; !vcdon) <span class="hljs-keyword">begin</span><br>      <span class="hljs-built_in">$dumpon</span>;<br>      vcdon = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br>     $tick();<br>  <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="UnitTest快速验证迭代，测试输出"><a href="#UnitTest快速验证迭代，测试输出" class="headerlink" title="UnitTest快速验证迭代，测试输出"></a>UnitTest快速验证迭代，测试输出</h4><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[info] [0.001] SEED 1563344502236<br>[info] [0.002] EXPECT AT 1   io_out got 1 expected 2 FAIL<br>[info] [0.003] EXPECT AT 2   io_out got 1 expected 2 FAIL<br>[info] [0.003] EXPECT AT 3   io_out got 2 expected 4 FAIL<br>[info] [0.003] EXPECT AT 4   io_out got 3 expected 6 FAIL<br>[info] [0.004] EXPECT AT 5   io_out got 3 expected 6 FAIL<br>[info] [0.004] EXPECT AT 6   io_out got 4 expected 8 FAIL<br>[info] [0.004] EXPECT AT 7   io_out got 4 expected 8 FAIL<br>[info] [0.005] EXPECT AT 8   io_out got 5 expected 10 FAIL<br>[info] [0.005] EXPECT AT 9   io_out got 5 expected 10 FAIL<br>[info] [0.005] EXPECT AT 10   io_out got 5 expected 10 FAIL<br>[info] [0.005] EXPECT AT 11   io_out got 5 expected 10 FAIL<br>[info] [0.006] EXPECT AT 12   io_out got 6 expected 12 FAIL<br>[info] [0.006] EXPECT AT 13   io_out got 6 expected 12 FAIL<br>[info] [0.007] EXPECT AT 14   io_out got 7 expected 14 FAIL<br>[info] [0.007] EXPECT AT 15   io_out got 7 expected 14 FAIL<br>[info] [0.007] EXPECT AT 16   io_out got 8 expected 16 FAIL<br><span class="hljs-built_in">test</span> Accumulator Success: 0 tests passed <span class="hljs-keyword">in</span> 21 cycles <span class="hljs-keyword">in</span> 0.021712 seconds 967.23 Hz<br>[info] [0.008] RAN 16 CYCLES FAILED FIRST AT CYCLE 1<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel设计规范</title>
      <link href="/2019/07/17/Chisel%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>/2019/07/17/Chisel%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="chisel设计规范"><a href="#chisel设计规范" class="headerlink" title="chisel设计规范"></a>chisel设计规范</h1><h2 id="Overall-goal"><a href="#Overall-goal" class="headerlink" title="Overall goal"></a>Overall goal</h2><p>Code is meant to be read, not written. You will spend more time searching for bugs, adding features to existing code bases, and trying to learn what other people have done, than you will writing your own code from scratch.  Code should strive to be easy to understand and easy to maintain.</p><p>As style can be a deeply personal preference, and because Chisel is still a very young language, this guide will eschew making hard edicts on DOs and DONTs. Instead, this guide will strive to provide guidance to newcomers to Chisel through a discussion on best practices.</p><h2 id="Prelude"><a href="#Prelude" class="headerlink" title="Prelude"></a>Prelude</h2><p>Chisel is a DSL embedded in Scala. However, it is still a distinct language, and so it may not follow all of Scala’s conventions.</p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#spacing">Spacing</a></li><li><a href="#naming">Naming</a></li><li><a href="#registers">Registers</a></li><li><a href="#bundles">Bundles</a></li><li><a href="#literals">Literals</a></li><li><a href="#parameters">Parameters</a></li><li><a href="#ready-valid-interfaces">Ready/Valid Interfaces</a></li><li><a href="#vector-of-modules">Vector of Modules</a></li><li><a href="#val-versus-var">Val versus Var</a></li><li><a href="#private-versus-public">Private versus Public</a></li><li><a href="#imports">Imports</a></li><li><a href="#comments">Comments</a></li><li><a href="#assertions">Assertions</a></li><li><a href="#requires">Requires</a></li><li><a href="#additional-best-practices">Additional Best Practices</a></li></ul><h2 id="Spacing"><a href="#Spacing" class="headerlink" title="Spacing"></a>Spacing</h2><p>Spaces, not tabs. Never tabs.</p><p>Follow the indent level of the existing code.</p><h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><p>Variable names should tend to be descriptive and not overly abbreviated. The smaller the scope (and the more used it is), the more abbreviated the name can be.</p><p>Bundles used for I/Os should be named SomethingIO. IO comes last. The name is Camel-cased. Example: (FreeListIO).</p><p>Any variable that is used for debugging purposes should be begin with the prefix <code>debug_</code> (i.e., things that you ideally would not synthesize).</p><p>Constants/parameters should be named in all caps, demonstrating their global nature. While most things in Scala are immutable, Chisel isn’t Scala.</p><p>Constants should be all uppercase and should be put in a companion object:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">ALU</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> <span class="hljs-type">SZ_ALU_FN</span> = <span class="hljs-number">4</span><br>  <span class="hljs-type">FN_ADD</span> = <span class="hljs-type">UInt</span>(<span class="hljs-number">0</span>, <span class="hljs-type">SZ_ALU_FN</span>)<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>Or trait (if you want a Module or Bundle to extend the trait):</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">RISCVConstants</span> </span>&#123;<br>   <span class="hljs-keyword">val</span> <span class="hljs-type">RD_MSB</span>  = <span class="hljs-number">11</span><br>   <span class="hljs-keyword">val</span> <span class="hljs-type">RD_LSB</span>  = <span class="hljs-number">7</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h2><p>Registers (and their type) should be specified as follows:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>())               <span class="hljs-comment">// good!</span><br><span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>(width=<span class="hljs-number">8.</span><span class="hljs-type">W</span>))      <span class="hljs-comment">// also good!</span><br><br><span class="hljs-type">Reg</span>(io.my_signal.clone()) <span class="hljs-comment">// good!</span><br></code></pre></td></tr></table></figure><p>This construct <code>Reg(x)</code> tells the Reg to be of type <code>x</code>. It does <strong>NOT</strong> tell Reg what initial value it should be, nor does it add a <code>Delay</code> to a signal!</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">0</span>))      <span class="hljs-comment">// bad!  Returns a Reg of type UInt and unknown width.</span><br><span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>))   <span class="hljs-comment">// bad!  Returns a Reg of type UInt with width 15.</span><br><br><span class="hljs-type">Reg</span>(io.my_signal) <span class="hljs-comment">// bad. This makes a Reg of type io.my_signal, but the intention is not clear!</span><br>                  <span class="hljs-comment">// It can be easily misread as Reg(next=io.my_signal).</span><br></code></pre></td></tr></table></figure><p>Registers should be initialized as follows:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">RegInit</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>))   <span class="hljs-comment">// good</span><br><br><span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>))       <span class="hljs-comment">// WRONG! This is exactly equivelant to Reg(UInt(width=15)),</span><br>                      <span class="hljs-comment">// and does NOT provide an initial value of UInt(0,15) to the Reg.</span><br></code></pre></td></tr></table></figure><p>Delaying a Node (i.e., piping it into a register) should be performed as follows:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">RegNext</span>(io.my_signal)  <span class="hljs-comment">// good</span><br><span class="hljs-type">Reg</span>(next=io.my_signal) <span class="hljs-comment">// okay</span><br><br><span class="hljs-type">Reg</span>(io.my_signal)      <span class="hljs-comment">// WRONG! Creates a Reg of the same type as io.a,</span><br>                       <span class="hljs-comment">// and does NOT delay the node io.a with a register.</span><br></code></pre></td></tr></table></figure><h2 id="Bundles"><a href="#Bundles" class="headerlink" title="Bundles"></a>Bundles</h2><p>Consider providing <code>def</code> functions in your Bundles. It provides a clearer level of intention to the user of how to interact with the Bundle.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// simplified example</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecoupledIO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bundle</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> ready = <span class="hljs-type">Input</span>(<span class="hljs-type">Bool</span>())<br>  <span class="hljs-keyword">val</span> valid = <span class="hljs-type">Output</span>(<span class="hljs-type">Bool</span>())<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fire</span></span>(dummy: <span class="hljs-type">Int</span> = <span class="hljs-number">0</span>): <span class="hljs-type">Bool</span> = ready &amp;&amp; valid<br>  ....<br></code></pre></td></tr></table></figure><p>Users of the DecoupledIO can now do something like <code>when(io.deq.fire())</code>!  (<strong>note:</strong> the <code>dummy: Int = 0</code> argument must be provided to functions with no arguments placed within Bundles, as Chisel is (currently) unable to differentiate between fields that are wires and fields that are functions with no arguments).</p><p>Or this example, which performs a <code>query</code> against a TLB address translation structure:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TLBIO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">VMUBundle</span></span><br>&#123;<br>  <span class="hljs-keyword">val</span> req = <span class="hljs-type">Decoupled</span>(<span class="hljs-keyword">new</span> rocket.<span class="hljs-type">TLBReq</span>)<br>  <span class="hljs-keyword">val</span> resp = <span class="hljs-keyword">new</span> rocket.<span class="hljs-type">TLBRespNoHitIndex</span>().flip<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span></span>(vpn: <span class="hljs-type">UInt</span>, store: <span class="hljs-type">Bool</span>): <span class="hljs-type">Bool</span> = &#123;<br>    <span class="hljs-keyword">this</span>.req.bits.vpn := vpn<br>    <span class="hljs-keyword">this</span>.req.bits.asid := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>    <span class="hljs-keyword">this</span>.req.bits.passthrough := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    <span class="hljs-keyword">this</span>.req.bits.instruction := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    <span class="hljs-keyword">this</span>.req.bits.store := store<br><br>    <span class="hljs-keyword">this</span>.req.ready &amp;&amp; !<span class="hljs-keyword">this</span>.resp.miss<br>  &#125;<br></code></pre></td></tr></table></figure><p>The particular example is quite interesting - the <code>query</code> function provides a clearer interface to the user, it automatically sets up the request signals, <em>and</em> it provides a combinational return value to the caller!</p><h3 id="Conditional-I-O-Fields"><a href="#Conditional-I-O-Fields" class="headerlink" title="Conditional I/O Fields"></a>Conditional I/O Fields</h3><p>Consider breaking off Conditional I/O fields into a separate Bundles (FreeListRollbackIO and FreeListSingleCycleIO).</p><h2 id="Literals"><a href="#Literals" class="headerlink" title="Literals"></a>Literals</h2><p>Be careful of using Scala Ints to describe Chisel literals. <code>0xffffffff</code> is a 32-bit signed integer with value -1, and thus will throw an error when used as <code>UInt(0xffffffff, 32)</code>. Instead, use Strings to describe large literals:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">UInt</span>(<span class="hljs-string">"hffffffff"</span>, <span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p>When instantiating an object from another package, explicitly name the arguments:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> s2d = <span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> hardfloat.<span class="hljs-type">RecFNToRecFN</span>(inExpWidth = <span class="hljs-number">8</span>, inSigWidth = <span class="hljs-number">24</span>, outExpWidth = <span class="hljs-number">11</span>, outSigWidth = <span class="hljs-number">53</span>))<br></code></pre></td></tr></table></figure><p>This safe-guards against the order (or the name) of parameters changing in an external package without your knowledge.</p><h2 id="Ready-Valid-Interfaces"><a href="#Ready-Valid-Interfaces" class="headerlink" title="Ready-Valid Interfaces"></a>Ready-Valid Interfaces</h2><p>A ready signal denotes a resource is available/is ready to be utilized.</p><p>A valid signal denotes something is valid and <em>can</em> commit a state update (it <em>will</em> commit a state update if the corresponding ready signal is high).</p><p><strong>Performance tip:</strong> a valid signal may often be a late arriving signal. Try to avoid using valid signals to drive datapath logic, and instead use valid signals to gate off state updates.</p><p>A valid signal <strong>should not</strong> depend on the ready signal (unless you really know what you are doing). This hurts the critical path and can create combinational loops if both sides get coupled.</p><h2 id="Vector-of-Modules"><a href="#Vector-of-Modules" class="headerlink" title="Vector of Modules"></a>Vector of Modules</h2><h3 id="Static-Indexing"><a href="#Static-Indexing" class="headerlink" title="Static Indexing"></a>Static Indexing</h3><p>An array of modules can be instantiated as follows:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> my_args = <span class="hljs-type">Seq</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-keyword">val</span> exe_units = <span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">0</span> until num_units) <span class="hljs-keyword">yield</span> &#123;<br>   <span class="hljs-keyword">val</span> exe_unit = <span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">AluExeUnit</span>(args = my_args(i)))<br>   <span class="hljs-comment">// any wiring or other logic can go here</span><br>   exe_unit<br>&#125;<br></code></pre></td></tr></table></figure><p>You can provide different input parameters to each constructor as required (the above toy example shows different elements of <code>my_args</code> being provided to each <code>AluExeUnit</code>).</p><p>The disadvantage is you cannot index the collection using Chisel nodes (aka, you can not dynamically index the collection during hardware execution).  If you must use a Scala collection (for the first advantage), you can still use dynamic indexing by grabbing a Vec of the IOs:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> exe_units_io = <span class="hljs-type">Vec</span>(exe_units.map(_.io))<br></code></pre></td></tr></table></figure><h3 id="Vec"><a href="#Vec" class="headerlink" title="Vec"></a>Vec</h3><p>If you need to index the vector of Modules using a Chisel node, you can also use the following structure:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> table = <span class="hljs-type">Vec</span>.fill(num_elements) &#123;<span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">TableElement</span>()).io&#125;<br><br><span class="hljs-keyword">val</span> idx = <span class="hljs-type">Wire</span>(<span class="hljs-type">UInt</span>())<br>table(idx).wen := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span> <span class="hljs-comment">// indexed by a Chisel node!</span><br></code></pre></td></tr></table></figure><p>Note that <code>table</code> is actually a <code>Vec</code> of <code>TableElement</code> <code>I/O</code> bundles.</p><h2 id="Val-versus-Var"><a href="#Val-versus-Var" class="headerlink" title="Val versus Var"></a>Val versus Var</h2><p>Only use <code>val</code>, unless you are an experienced Chisel programmer. Even then, only use <code>var</code> in constrained situations (try to abstract it within a function). The use of the <code>var</code> can make it difficult to reason about your design.</p><p>For context, a bit more background is needed. A hardware design described in Chisel is quite literally a Scala program that, when executed, generates a hardware graph composed of Chisel Nodes that is then passed to a back-end which generates a cycle-exact replica in either C++ or Verilog (or whatever other formats supported by the backend).</p><p>Thus, <code>val</code> and <code>var</code> denote Scala variables (well more exactly, <code>val</code> is an immutable value and <code>var</code> is a mutable variable).</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> my_node = <span class="hljs-type">Wire</span>(<span class="hljs-type">UInt</span>())<br></code></pre></td></tr></table></figure><p>This is a Scala value called <code>my_node</code>, which points to a Chisel Node in the hardware graph that is a <code>Wire</code> of type <code>UInt</code>. The <code>my_node</code> value can only ever point to this particular Chisel Node in the graph.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">var</span> node_ptr = <span class="hljs-type">Wire</span>(<span class="hljs-type">UInt</span>())<br></code></pre></td></tr></table></figure><p>Uh oh. The Scala variable <code>node_ptr</code> is pointing to a Chisel node in the graph, but it can later be changed to point to a new Chisel node!</p><figure class="hljs highlight Scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Scala"><span class="hljs-keyword">var</span> node_ptr = io.a<br>node_ptr := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>node_ptr = io.b<br>node_ptr := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br></code></pre></td></tr></table></figure><p>In the above (scary!) code,</p><ul><li><code>node_ptr</code> first points to <code>io.a</code>,</li><li>then uses the Chisel assignment operator <code>:=</code> to set <code>io.a</code> to <code>true.B</code></li><li><code>node_ptr</code> is then changed to point to <code>io.b</code></li><li>and finally, <code>io.b</code> is set to <code>false.B</code>!</li></ul><p>We get the following Verilog output:</p><figure class="hljs highlight Verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-keyword">module</span> Hello(<br>    <span class="hljs-keyword">output</span> io_a,<br>    <span class="hljs-keyword">output</span> io_b<br>);<br><br>  <span class="hljs-keyword">assign</span> io_b = <span class="hljs-number">1'h0</span>;<br>  <span class="hljs-keyword">assign</span> io_a = <span class="hljs-number">1'h1</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>Using <code>var</code> can make it difficult to reason about the circuit. <strong>And be CAREFUL when mixing <code>=</code> and <code>:=</code></strong>! The <code>=</code> is a Scala assignment, and sets a <code>var</code> variable to point to a new Node in the graph. Meanwhile, <code>:=</code> is a Chisel assignment and performs a new assignment <em>to</em> the Chisel Node. This distinction is important! For example, Chisel conditional <code>when</code> statements are for conditionally assigning values to Chisel Nodes - <strong>the scala <code>=</code> operator is invisible to <code>when</code> statements!!</strong></p><figure class="hljs highlight Scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Scala"><span class="hljs-keyword">var</span> my_node = io.a<br>my_node := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span> <span class="hljs-comment">// this sets io.a to "true"</span><br>my_node = <span class="hljs-literal">true</span>.<span class="hljs-type">B</span>  <span class="hljs-comment">// this sets the Scala variable my_node to point to a Chisel node that is a literal true</span><br></code></pre></td></tr></table></figure><p>Consider the incorrect code below, which tries to mix <code>when</code>, <code>var</code>, and <code>=</code> to perform an OR reduction:</p><figure class="hljs highlight Scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Scala"><span class="hljs-keyword">val</span> my_bits = <span class="hljs-type">Wire</span>(<span class="hljs-type">Bits</span>(width=n))<br><span class="hljs-keyword">var</span> temp = <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br><span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">0</span> until n) &#123;<br>   when (my_bits(i)) &#123;<br>      temp = <span class="hljs-literal">true</span>.<span class="hljs-type">B</span> <span class="hljs-comment">// wrong! always returns true.</span><br>      temp := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span> <span class="hljs-comment">// compiler error!</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>For the first statement <code>temp = true.B</code>, the Scala variable <code>temp</code> points to the Chisel node <code>true.B</code>, ignoring the when() statement.</p><p>For the second statement <code>temp := true.B</code>, a Chisel compiler error is thrown because the code is trying to reassign the node <code>false.B</code> to be <code>true.B</code>, which is nonsensical.</p><p><strong>Conclusion: don’t mix <code>when</code> and <code>var</code>‘s!</strong></p><p>For completness sake, the proper code for an OR reduction would be <code>my_bits.orR</code> (and no need to use var or when!).</p><h3 id="Valid-uses-of-Vars"><a href="#Valid-uses-of-Vars" class="headerlink" title="Valid uses of Vars"></a>Valid uses of Vars</h3><p>There are a few valid uses of var. One would be to generate cascading logic. For example, this locking arbiter from ChiselUtil:</p><figure class="hljs highlight Scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Scala"><span class="hljs-keyword">var</span> choose = (n<span class="hljs-number">-1</span>).<span class="hljs-type">U</span><br><span class="hljs-keyword">for</span> (i &lt;- n<span class="hljs-number">-2</span> to <span class="hljs-number">0</span> by <span class="hljs-number">-1</span>) &#123;<br>  choose = <span class="hljs-type">Mux</span>(io.in(i).valid, i.<span class="hljs-type">U</span>, choose)<br>&#125;<br>chosen := <span class="hljs-type">Mux</span>(locked, lockIdx, choose)<br></code></pre></td></tr></table></figure><p>After each iteration of the Scala <code>for</code> loop, <code>choose</code> is pointing to a new node in the cascading Mux tree.</p><p>Another use is forward declaring Modules that are conditionally instantiated later.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">var</span> fpu: <span class="hljs-type">FPUUnit</span> = <span class="hljs-literal">null</span><br><span class="hljs-keyword">if</span> (has_fpu) &#123;<br>   fpu = <span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">FPUUnit</span>())<br>   ...<br></code></pre></td></tr></table></figure><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><p>Try to avoid wildcard imports. They make code more obfuscated and fragile.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> rocket.&#123;<span class="hljs-type">UseFPU</span>, <span class="hljs-type">XLen</span>&#125;<br><span class="hljs-keyword">import</span> cde.&#123;<span class="hljs-type">Parameters</span>, <span class="hljs-type">Field</span>&#125;<br></code></pre></td></tr></table></figure><p>AVOID using <code>import</code> statements for bringing in new Module and Bundle definitions. Instead, explicitly invoke the namespace when instantiating the Module or Bundle. It makes the origin of the object clear.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//bad</span><br><span class="hljs-keyword">import</span> rocket._<br>...<br><span class="hljs-keyword">val</span> tlb = <span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">TLB</span>())<br><br><span class="hljs-comment">//good</span><br><span class="hljs-keyword">val</span> tlb = <span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> rocket.<span class="hljs-type">TLB</span>())<br></code></pre></td></tr></table></figure><h2 id="Private-versus-Public"><a href="#Private-versus-Public" class="headerlink" title="Private versus Public"></a>Private versus Public</h2><p>By default, all <code>val</code>s and <code>def</code>s are public in Scala. Label all <code>def</code>s private if the scope is meant to stay internal to the current object. This makes intention clearer.</p><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><p>Consider commenting the use of the I/O fields (especially if there are unintuitive timings!). Chisel I/Os aren’t functions - it isn’t obvious how to interface with a Module to other programmers.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CpuReq</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bundle</span> </span>&#123;<br>    <span class="hljs-keyword">val</span> addr = <span class="hljs-type">UInt</span>(width = ...)<br>    <span class="hljs-keyword">val</span> cmd  = <span class="hljs-type">UInt</span>(width = ...)<br>    <span class="hljs-keyword">val</span> data = <span class="hljs-type">UInt</span>(width = ...) <span class="hljs-comment">// is sent the cycle after the request is valid</span><br></code></pre></td></tr></table></figure><p>In fact, you may prefer to codify timings in the names of the signals themselves:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> io = <span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-comment">// send read addr on cycle 0, get data out on cycle 2.</span><br>    <span class="hljs-keyword">val</span> s0_r_idx = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(width = index_sz.<span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> s2_r_out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(width = fetch_width.<span class="hljs-type">W</span>))<br></code></pre></td></tr></table></figure><p>If it required cleverness to write, you should probably describe <strong>why</strong> it does what it does. The reader is never as smart as the writer. Especially when it’s yourself.</p><h2 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h2><p>If you solve a bug, strongly contemplate what <code>assert()</code> could have caught this bug and then add it.</p><p>If you are using a one-hot encoding, guard it with asserts! Especially calls to <code>OHToUInt</code>.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">assert(<span class="hljs-type">PopCount</span>(updates_oh) &lt;= <span class="hljs-number">1.</span><span class="hljs-type">U</span>, <span class="hljs-string">"[MyModuleName] ..."</span>)<br></code></pre></td></tr></table></figure><p>Note which Module the assert resides in when authoring the failure string.</p><h2 id="Requires"><a href="#Requires" class="headerlink" title="Requires"></a>Requires</h2><p>Scala provides a <code>require()</code> function that will throw a Scala run-time error when compiling your Chisel hardware if the condition is not met.</p><p>Use <code>require()</code> statements to guard against unsupported parameter values in your hardware generators.</p><p>Use <code>require()</code> statements to codify your assumptions in your code (e.g., <code>require(isPow2(num_entries))</code> for logic that only works when <code>num_entries</code> is a power of 2).</p><h2 id="Additional-Best-Practices"><a href="#Additional-Best-Practices" class="headerlink" title="Additional Best Practices"></a>Additional Best Practices</h2><p>If you ever write <code>+N</code>, ask yourself if the number will ever be <code>NonPow2</code> (and then you should write a <code>require</code> statement if the logic depends on <code>Pow2</code> properties!). For example, wrap-around logic will be needed to guard incrementing pointers to queues with <code>NonPow2</code> number of elements. Just like in software, overflows and array bounds overruns are scary!</p><p>Avoid use of <code>var</code>. If you do use <code>var</code>, try to abstract it into a function/object. If you don’t understand why <code>var</code> and <code>when()</code> don’t mix, then for the love of god AVOID <code>var</code> (See Val versus Var section).</p><p>If you solve a bug, strongly contemplate what <code>assert()</code> could have caught this bug and then add it.</p><p>Consider restraining any undefined hardware behavior. It makes writing asserts easier.  Undefined behavior may provide for a more efficient circuit, but a circuit that works is even more efficient!</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue,Valid等使用</title>
      <link href="/2019/07/16/Queue-Valid%E7%AD%89%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/16/Queue-Valid%E7%AD%89%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="Queue等抽象类型使用"><a href="#Queue等抽象类型使用" class="headerlink" title="Queue等抽象类型使用"></a>Queue等抽象类型使用</h4><ol><li><strong>Queue</strong> is a hardware module that implements a first in, first out queue with DecoupledIO inputs and outputs</li><li><strong>DecoupledIO</strong> is a ready/valid interface type with members ready, valid, and bits</li><li><strong>Decoupled</strong> is a helper to construct DecoupledIO from some other type</li><li><strong>ValidIO</strong> is similar to DecoupledIO except that it only has valid and bits</li><li><strong>Valid</strong> is similar to Decoupled for constructing ValidIOs</li></ol><p>2 DecoupledIO inputs and 1 DecoupledIO output. It buffers the inputs with queues and then connects the output to the sum of the inputs:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> chisel3._<br><span class="hljs-keyword">import</span> chisel3.util._<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> a = <span class="hljs-type">Flipped</span>(<span class="hljs-type">Decoupled</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>))) <span class="hljs-comment">// valid and bits are inputs</span><br>    <span class="hljs-keyword">val</span> b = <span class="hljs-type">Flipped</span>(<span class="hljs-type">Decoupled</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>)))<br>    <span class="hljs-keyword">val</span> z = <span class="hljs-type">Decoupled</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>)) <span class="hljs-comment">// valid and bits are outputs</span><br>  &#125;)<br>  <span class="hljs-comment">// Note that a, b, and z are all of type DecoupledIO</span><br><br>  <span class="hljs-comment">// Buffer the inputs with queues</span><br>  <span class="hljs-keyword">val</span> qa = <span class="hljs-type">Queue</span>(io.a) <span class="hljs-comment">// io.a is the input to the FIFO</span><br>                       <span class="hljs-comment">// qa is DecoupledIO output from FIFO</span><br>  <span class="hljs-keyword">val</span> qb = <span class="hljs-type">Queue</span>(io.b)<br><br>  <span class="hljs-comment">// We only dequeue when io.z is ready</span><br>  qa.nodeq() <span class="hljs-comment">// equivalent to qa.ready := false.B</span><br>  qb.nodeq()<br><br>  <span class="hljs-comment">// When qa and qb have valid inputs and io.z is ready for an output</span><br>  when (qa.valid &amp;&amp; qb.valid &amp;&amp; io.z.ready) &#123;<br>    io.z.enq(qa.deq() + qb.deq())<br>    <span class="hljs-comment">/* The above is short for<br>      io.z.valid := true.B<br>      io.z.bits := qa.bits + qb.bits<br>      qa.ready := true.B<br>      qb.ready := true.B<br>    */</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量IO的Slice赋值</title>
      <link href="/2019/07/16/%E5%90%91%E9%87%8FIO%E7%9A%84Slice%E8%B5%8B%E5%80%BC/"/>
      <url>/2019/07/16/%E5%90%91%E9%87%8FIO%E7%9A%84Slice%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="IO端口切片选择方法"><a href="#IO端口切片选择方法" class="headerlink" title="IO端口切片选择方法"></a>IO端口切片选择方法</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Slicer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">implicit</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SeqHelper</span>(<span class="hljs-params">val seq: <span class="hljs-type">Seq</span>[<span class="hljs-type">Bits</span>]</span>) </span>&#123;<br>    <span class="hljs-comment">/**<br>      * Promotes a Seq of Bits to a class that supports the connect operator<br>      */</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> </span>:= (other: <span class="hljs-type">Seq</span>[<span class="hljs-type">Bits</span>]): <span class="hljs-type">Unit</span> = &#123;<br>      seq.zip(other).foreach &#123; <span class="hljs-keyword">case</span> (a, b) =&gt; a := b&#125;<br>    &#125; <br>&#125;<br><br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in1  = <span class="hljs-type">Input</span>(<span class="hljs-type">Vec</span>(<span class="hljs-number">4</span>, <span class="hljs-type">Bool</span>()))<br>    <span class="hljs-keyword">val</span> out1 = <span class="hljs-type">Output</span>(<span class="hljs-type">Vec</span>(<span class="hljs-number">4</span>, <span class="hljs-type">Bool</span>()))<br>  &#125;)<br><br>  io.out1 := <span class="hljs-type">DontCare</span><br>  io.out1.slice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) := io.in1.slice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>您可以将SlicerHelper放在一个包对象中，这样就可以对它进行一般性的访问。</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">io.out1.slice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>).zip(io.in1.slice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)).foreach &#123; <span class="hljs-keyword">case</span> (a, b) =&gt; a:= b &#125;<br></code></pre></td></tr></table></figure><p> 或者</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">io.out1.zip(io.in1).slice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>).foreach &#123; <span class="hljs-keyword">case</span> (a, b) =&gt; a:= b &#125;<br></code></pre></td></tr></table></figure><h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> Slicer( <span class="hljs-comment">// @[:@3.2]</span><br>  <span class="hljs-keyword">input</span>   clock, <span class="hljs-comment">// @[:@4.4]</span><br>  <span class="hljs-keyword">input</span>   reset, <span class="hljs-comment">// @[:@5.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_0, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_1, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_2, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_3, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_0, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_1, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_2, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_3 <span class="hljs-comment">// @[:@6.4]</span><br>);<br>  <span class="hljs-keyword">assign</span> io_out1_0 = io_in1_0; <span class="hljs-comment">// @[TestDriver.scala 82:49:@12.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1_1 = io_in1_1; <span class="hljs-comment">// @[TestDriver.scala 82:49:@13.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1_2 = <span class="hljs-number">1'h0</span>;<br>  <span class="hljs-keyword">assign</span> io_out1_3 = <span class="hljs-number">1'h0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="选择向量中第一个大于1的端口并输出到相应输出端口"><a href="#选择向量中第一个大于1的端口并输出到相应输出端口" class="headerlink" title="选择向量中第一个大于1的端口并输出到相应输出端口"></a>选择向量中第一个大于1的端口并输出到相应输出端口</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala">io.out1 := <span class="hljs-type">DontCare</span><br><span class="hljs-comment">//io.out1.slice(0, 2) := io.in1.slice(0, 2)</span><br><span class="hljs-keyword">for</span>((key,value) &lt;- io.elements)<br>  println(<span class="hljs-string">"%s --&gt; %s"</span>.format(key,value))<br>  <span class="hljs-keyword">val</span> index_num = io.in1.indexWhere&#123;<br>    x:<span class="hljs-type">Bool</span> =&gt;  x &gt; <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  &#125;<br>println(index_num)<br>io.out1(index_num) := io.in1(index_num)<br></code></pre></td></tr></table></figure><h4 id="生成代码-1"><a href="#生成代码-1" class="headerlink" title="生成代码"></a>生成代码</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> Slicer( <span class="hljs-comment">// @[:@3.2]</span><br>  <span class="hljs-keyword">input</span>   clock, <span class="hljs-comment">// @[:@4.4]</span><br>  <span class="hljs-keyword">input</span>   reset, <span class="hljs-comment">// @[:@5.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_0, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_1, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_2, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>   io_in1_3, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_0, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_1, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_2, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>  io_out1_3 <span class="hljs-comment">// @[:@6.4]</span><br>);<br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_42; <span class="hljs-comment">// @[TestDriver.scala 96:20:@12.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_44; <span class="hljs-comment">// @[TestDriver.scala 96:20:@13.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_46; <span class="hljs-comment">// @[TestDriver.scala 96:20:@14.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_53; <span class="hljs-comment">// @[TestDriver.scala 95:38:@16.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_54; <span class="hljs-comment">// @[TestDriver.scala 95:38:@17.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] index_num; <span class="hljs-comment">// @[TestDriver.scala 95:38:@18.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_5; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_6; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_42 = io_in1_0 &gt; <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[TestDriver.scala 96:20:@12.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_44 = io_in1_1 &gt; <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[TestDriver.scala 96:20:@13.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_46 = io_in1_2 &gt; <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[TestDriver.scala 96:20:@14.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_53 = <span class="hljs-number">_</span>T_46 ? <span class="hljs-number">2'h2</span> : <span class="hljs-number">2'h3</span>; <span class="hljs-comment">// @[TestDriver.scala 95:38:@16.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_54 = <span class="hljs-number">_</span>T_44 ? <span class="hljs-number">2'h1</span> : <span class="hljs-number">_</span>T_53; <span class="hljs-comment">// @[TestDriver.scala 95:38:@17.4]</span><br>  <span class="hljs-keyword">assign</span> index_num = <span class="hljs-number">_</span>T_42 ? <span class="hljs-number">2'h0</span> : <span class="hljs-number">_</span>T_54; <span class="hljs-comment">// @[TestDriver.scala 95:38:@18.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_5 = <span class="hljs-number">2'h1</span> == index_num ? io_in1_1 : io_in1_0; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_6 = <span class="hljs-number">2'h2</span> == index_num ? io_in1_2 : <span class="hljs-number">_</span>GEN_5; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1_0 = <span class="hljs-number">2'h3</span> == index_num ? io_in1_3 : <span class="hljs-number">_</span>GEN_6; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1_1 = <span class="hljs-number">2'h3</span> == index_num ? io_in1_3 : <span class="hljs-number">_</span>GEN_6; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1_2 = <span class="hljs-number">2'h3</span> == index_num ? io_in1_3 : <span class="hljs-number">_</span>GEN_6; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1_3 = <span class="hljs-number">2'h3</span> == index_num ? io_in1_3 : <span class="hljs-number">_</span>GEN_6; <span class="hljs-comment">// @[TestDriver.scala 99:22:@19.4]</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel多Module级联</title>
      <link href="/2019/07/15/Chisel%E5%A4%9AModule%E7%BA%A7%E8%81%94/"/>
      <url>/2019/07/15/Chisel%E5%A4%9AModule%E7%BA%A7%E8%81%94/</url>
      
        <content type="html"><![CDATA[<h4 id="多模块等可以通过各种map，reduce，fold方法实现"><a href="#多模块等可以通过各种map，reduce，fold方法实现" class="headerlink" title="多模块等可以通过各种map，reduce，fold方法实现~"></a>多模块等可以通过各种map，reduce，fold方法实现~</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.smr.rtlgenpkg<br><br><span class="hljs-keyword">import</span> chisel3._<br><span class="hljs-keyword">import</span> chisel3.util._<br><span class="hljs-keyword">import</span> chisel3.experimental._<br><span class="hljs-keyword">import</span> dsptools.numbers._<br><span class="hljs-keyword">import</span> scala.math._<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Element</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in0 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in1 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out0 = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out1 = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>  &#125;)<br><br>  <span class="hljs-keyword">val</span> reg0 = <span class="hljs-type">RegNext</span>(io.in0, <span class="hljs-number">0.</span><span class="hljs-type">U</span>)<br>  <span class="hljs-keyword">val</span> reg1 = <span class="hljs-type">RegNext</span>(io.in1, <span class="hljs-number">0.</span><span class="hljs-type">U</span>)<br><br>  io.out0 := reg0<br>  io.out1 := reg1<br>&#125;<br><br><span class="hljs-comment">/**<br>  * wire together a bunch of elements, into a basic queue<br>  * @param elementCount how big is the queue<br>    */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElementQueue</span>(<span class="hljs-params">val elementCount: <span class="hljs-type">Int</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>    <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in0 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in1 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out0 = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out1 = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    &#125;)<br><br>  <span class="hljs-comment">// create a scala Seq of Elements</span><br>  <span class="hljs-keyword">val</span> elements = <span class="hljs-type">Seq</span>.fill(elementCount)(<span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Element</span>))<br><br>  <span class="hljs-comment">// wire the head to the inputs</span><br>  elements.head.io.in0 := io.in0<br>  elements.head.io.in1 := io.in1<br><br>  <span class="hljs-comment">// wire the elements of the queue</span><br>  <span class="hljs-keyword">val</span> last = elements.tail.foldLeft(elements.head) &#123; <span class="hljs-keyword">case</span> (prior, next) =&gt;<br>    next.io.in0 := prior.io.out0<br>    next.io.in1 := prior.io.out1<br>    next<br>  &#125;<br><br>  <span class="hljs-comment">// wire the end of the queue to the outputs</span><br>  io.out0 := last.io.out0<br>  io.out1 := last.io.out1<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">ArrayArgs</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">apply</span></span>(obj:<span class="hljs-type">Any</span>) = &#123;<br>    <span class="hljs-type">Array</span>(<span class="hljs-string">"--target-dir"</span>,<span class="hljs-string">"%s"</span>.format(obj.toString.split('$')(<span class="hljs-number">0</span>)))<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">App</span> </span>&#123;<br>  chisel3.<span class="hljs-type">Driver</span>.execute(<span class="hljs-type">ArrayArgs</span>(<span class="hljs-keyword">this</span>), () =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">ElementQueue</span>(<span class="hljs-number">8</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成的verilog代码"><a href="#生成的verilog代码" class="headerlink" title="生成的verilog代码"></a>生成的verilog代码</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> Element( <span class="hljs-comment">// @[:@3.2]</span><br>  <span class="hljs-keyword">input</span>        clock, <span class="hljs-comment">// @[:@4.4]</span><br>  <span class="hljs-keyword">input</span>        reset, <span class="hljs-comment">// @[:@5.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_in0, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_in1, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_out0, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_out1 <span class="hljs-comment">// @[:@6.4]</span><br>);<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] reg0; <span class="hljs-comment">// @[TestDriver.scala 17:21:@8.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_0;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] reg1; <span class="hljs-comment">// @[TestDriver.scala 18:21:@10.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_1;<br>  <span class="hljs-keyword">assign</span> io_out0 = reg0; <span class="hljs-comment">// @[TestDriver.scala 20:11:@12.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1 = reg1; <span class="hljs-comment">// @[TestDriver.scala 21:11:@13.4]</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_GARBAGE_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_INVALID_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_MEM_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> RANDOM</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOM $random</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE</span><br>  <span class="hljs-keyword">integer</span> initvar;<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> INIT_RANDOM</span><br>      <span class="hljs-meta">`INIT_RANDOM</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> VERILATOR</span><br>      #<span class="hljs-number">0</span><span class="hljs-variable">.002</span> <span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_0 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  reg0 = <span class="hljs-number">_</span>RAND_0[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_1 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  reg1 = <span class="hljs-number">_</span>RAND_1[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE</span><br>  <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clock) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      reg0 &lt;= <span class="hljs-number">8'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      reg0 &lt;= io_in0;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      reg1 &lt;= <span class="hljs-number">8'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      reg1 &lt;= io_in1;<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><span class="hljs-keyword">module</span> ElementQueue( <span class="hljs-comment">// @[:@99.2]</span><br>  <span class="hljs-keyword">input</span>        clock, <span class="hljs-comment">// @[:@100.4]</span><br>  <span class="hljs-keyword">input</span>        reset, <span class="hljs-comment">// @[:@101.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_in0, <span class="hljs-comment">// @[:@102.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_in1, <span class="hljs-comment">// @[:@102.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_out0, <span class="hljs-comment">// @[:@102.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_out1 <span class="hljs-comment">// @[:@102.4]</span><br>);<br>  <span class="hljs-keyword">wire</span>  elements_0_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@104.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_0_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@104.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_0_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@104.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_0_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@104.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_0_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@104.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_0_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@104.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_1_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@107.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_1_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@107.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_1_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@107.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_1_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@107.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_1_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@107.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_1_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@107.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_2_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@110.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_2_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@110.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_2_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@110.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_2_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@110.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_2_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@110.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_2_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@110.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_3_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@113.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_3_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@113.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_3_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@113.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_3_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@113.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_3_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@113.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_3_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@113.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_4_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@116.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_4_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@116.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_4_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@116.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_4_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@116.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_4_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@116.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_4_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@116.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_5_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@119.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_5_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@119.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_5_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@119.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_5_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@119.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_5_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@119.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_5_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@119.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_6_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@122.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_6_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@122.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_6_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@122.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_6_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@122.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_6_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@122.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_6_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@122.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_7_clock; <span class="hljs-comment">// @[TestDriver.scala 37:47:@125.4]</span><br>  <span class="hljs-keyword">wire</span>  elements_7_reset; <span class="hljs-comment">// @[TestDriver.scala 37:47:@125.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_7_io_in0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@125.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_7_io_in1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@125.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_7_io_out0; <span class="hljs-comment">// @[TestDriver.scala 37:47:@125.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] elements_7_io_out1; <span class="hljs-comment">// @[TestDriver.scala 37:47:@125.4]</span><br>  Element elements_0 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@104.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_0_clock),<br>    <span class="hljs-variable">.reset</span>(elements_0_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_0_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_0_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_0_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_0_io_out1)<br>  );<br>  Element elements_1 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@107.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_1_clock),<br>    <span class="hljs-variable">.reset</span>(elements_1_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_1_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_1_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_1_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_1_io_out1)<br>  );<br>  Element elements_2 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@110.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_2_clock),<br>    <span class="hljs-variable">.reset</span>(elements_2_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_2_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_2_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_2_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_2_io_out1)<br>  );<br>  Element elements_3 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@113.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_3_clock),<br>    <span class="hljs-variable">.reset</span>(elements_3_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_3_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_3_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_3_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_3_io_out1)<br>  );<br>  Element elements_4 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@116.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_4_clock),<br>    <span class="hljs-variable">.reset</span>(elements_4_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_4_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_4_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_4_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_4_io_out1)<br>  );<br>  Element elements_5 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@119.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_5_clock),<br>    <span class="hljs-variable">.reset</span>(elements_5_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_5_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_5_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_5_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_5_io_out1)<br>  );<br>  Element elements_6 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@122.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_6_clock),<br>    <span class="hljs-variable">.reset</span>(elements_6_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_6_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_6_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_6_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_6_io_out1)<br>  );<br>  Element elements_7 ( <span class="hljs-comment">// @[TestDriver.scala 37:47:@125.4]</span><br>    <span class="hljs-variable">.clock</span>(elements_7_clock),<br>    <span class="hljs-variable">.reset</span>(elements_7_reset),<br>    <span class="hljs-variable">.io_in0</span>(elements_7_io_in0),<br>    <span class="hljs-variable">.io_in1</span>(elements_7_io_in1),<br>    <span class="hljs-variable">.io_out0</span>(elements_7_io_out0),<br>    <span class="hljs-variable">.io_out1</span>(elements_7_io_out1)<br>  );<br>  <span class="hljs-keyword">assign</span> io_out0 = elements_7_io_out0; <span class="hljs-comment">// @[TestDriver.scala 51:11:@144.4]</span><br>  <span class="hljs-keyword">assign</span> io_out1 = elements_7_io_out1; <span class="hljs-comment">// @[TestDriver.scala 52:11:@145.4]</span><br>  <span class="hljs-keyword">assign</span> elements_0_clock = clock; <span class="hljs-comment">// @[:@105.4]</span><br>  <span class="hljs-keyword">assign</span> elements_0_reset = reset; <span class="hljs-comment">// @[:@106.4]</span><br>  <span class="hljs-keyword">assign</span> elements_0_io_in0 = io_in0; <span class="hljs-comment">// @[TestDriver.scala 40:24:@128.4]</span><br>  <span class="hljs-keyword">assign</span> elements_0_io_in1 = io_in1; <span class="hljs-comment">// @[TestDriver.scala 41:24:@129.4]</span><br>  <span class="hljs-keyword">assign</span> elements_1_clock = clock; <span class="hljs-comment">// @[:@108.4]</span><br>  <span class="hljs-keyword">assign</span> elements_1_reset = reset; <span class="hljs-comment">// @[:@109.4]</span><br>  <span class="hljs-keyword">assign</span> elements_1_io_in0 = elements_0_io_out0; <span class="hljs-comment">// @[TestDriver.scala 45:17:@130.4]</span><br>  <span class="hljs-keyword">assign</span> elements_1_io_in1 = elements_0_io_out1; <span class="hljs-comment">// @[TestDriver.scala 46:17:@131.4]</span><br>  <span class="hljs-keyword">assign</span> elements_2_clock = clock; <span class="hljs-comment">// @[:@111.4]</span><br>  <span class="hljs-keyword">assign</span> elements_2_reset = reset; <span class="hljs-comment">// @[:@112.4]</span><br>  <span class="hljs-keyword">assign</span> elements_2_io_in0 = elements_1_io_out0; <span class="hljs-comment">// @[TestDriver.scala 45:17:@132.4]</span><br>  <span class="hljs-keyword">assign</span> elements_2_io_in1 = elements_1_io_out1; <span class="hljs-comment">// @[TestDriver.scala 46:17:@133.4]</span><br>  <span class="hljs-keyword">assign</span> elements_3_clock = clock; <span class="hljs-comment">// @[:@114.4]</span><br>  <span class="hljs-keyword">assign</span> elements_3_reset = reset; <span class="hljs-comment">// @[:@115.4]</span><br>  <span class="hljs-keyword">assign</span> elements_3_io_in0 = elements_2_io_out0; <span class="hljs-comment">// @[TestDriver.scala 45:17:@134.4]</span><br>  <span class="hljs-keyword">assign</span> elements_3_io_in1 = elements_2_io_out1; <span class="hljs-comment">// @[TestDriver.scala 46:17:@135.4]</span><br>  <span class="hljs-keyword">assign</span> elements_4_clock = clock; <span class="hljs-comment">// @[:@117.4]</span><br>  <span class="hljs-keyword">assign</span> elements_4_reset = reset; <span class="hljs-comment">// @[:@118.4]</span><br>  <span class="hljs-keyword">assign</span> elements_4_io_in0 = elements_3_io_out0; <span class="hljs-comment">// @[TestDriver.scala 45:17:@136.4]</span><br>  <span class="hljs-keyword">assign</span> elements_4_io_in1 = elements_3_io_out1; <span class="hljs-comment">// @[TestDriver.scala 46:17:@137.4]</span><br>  <span class="hljs-keyword">assign</span> elements_5_clock = clock; <span class="hljs-comment">// @[:@120.4]</span><br>  <span class="hljs-keyword">assign</span> elements_5_reset = reset; <span class="hljs-comment">// @[:@121.4]</span><br>  <span class="hljs-keyword">assign</span> elements_5_io_in0 = elements_4_io_out0; <span class="hljs-comment">// @[TestDriver.scala 45:17:@138.4]</span><br>  <span class="hljs-keyword">assign</span> elements_5_io_in1 = elements_4_io_out1; <span class="hljs-comment">// @[TestDriver.scala 46:17:@139.4]</span><br>  <span class="hljs-keyword">assign</span> elements_6_clock = clock; <span class="hljs-comment">// @[:@123.4]</span><br>  <span class="hljs-keyword">assign</span> elements_6_reset = reset; <span class="hljs-comment">// @[:@124.4]</span><br>  <span class="hljs-keyword">assign</span> elements_6_io_in0 = elements_5_io_out0; <span class="hljs-comment">// @[TestDriver.scala 45:17:@140.4]</span><br>  <span class="hljs-keyword">assign</span> elements_6_io_in1 = elements_5_io_out1; <span class="hljs-comment">// @[TestDriver.scala 46:17:@141.4]</span><br>  <span class="hljs-keyword">assign</span> elements_7_clock = clock; <span class="hljs-comment">// @[:@126.4]</span><br>  <span class="hljs-keyword">assign</span> elements_7_reset = reset; <span class="hljs-comment">// @[:@127.4]</span><br>  <span class="hljs-keyword">assign</span> elements_7_io_in0 = elements_6_io_out0; <span class="hljs-comment">// @[TestDriver.scala 45:17:@142.4]</span><br>  <span class="hljs-keyword">assign</span> elements_7_io_in1 = elements_6_io_out1; <span class="hljs-comment">// @[TestDriver.scala 46:17:@143.4]</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现Inout端口~</title>
      <link href="/2019/07/15/%E5%AE%9E%E7%8E%B0Inout%E7%AB%AF%E5%8F%A3/"/>
      <url>/2019/07/15/%E5%AE%9E%E7%8E%B0Inout%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="verilog的inout实现相对麻烦点，采用Analog"><a href="#verilog的inout实现相对麻烦点，采用Analog" class="headerlink" title="verilog的inout实现相对麻烦点，采用Analog~"></a>verilog的inout实现相对麻烦点，采用Analog~</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnalogBlackBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BlackBox</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> bus = <span class="hljs-type">Analog</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnalogModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> bus = <span class="hljs-type">Analog</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>)<br>  &#125;)<br><br>  <span class="hljs-keyword">val</span> inst = <span class="hljs-type">Module</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">AnalogBlackBox</span>)<br>  inst.io.bus &lt;&gt; io.bus<br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> AnalogModule( <span class="hljs-comment">// @[:@9.2]</span><br>  <span class="hljs-keyword">input</span>         clock, <span class="hljs-comment">// @[:@10.4]</span><br>  <span class="hljs-keyword">input</span>         reset, <span class="hljs-comment">// @[:@11.4]</span><br>  <span class="hljs-keyword">inout</span>  [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] io_bus <span class="hljs-comment">// @[:@12.4]</span><br>);<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span><br>  AnalogBlackBox inst ( <span class="hljs-comment">// @[SPIDriver.scala 397:20:@14.4]</span><br>    <span class="hljs-variable">.bus</span>(io_bus)<br>  );<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel在生成Verilog时如何保留所有变量名?</title>
      <link href="/2019/07/15/Chisel%E5%9C%A8%E7%94%9F%E6%88%90Verilog%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E7%95%99%E6%89%80%E6%9C%89%E5%8F%98%E9%87%8F%E5%90%8D/"/>
      <url>/2019/07/15/Chisel%E5%9C%A8%E7%94%9F%E6%88%90Verilog%E6%97%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E7%95%99%E6%89%80%E6%9C%89%E5%8F%98%E9%87%8F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>There are several reasons why a name may be disappearing.</p><h2 id="Constant-Propagation"><a href="#Constant-Propagation" class="headerlink" title="Constant Propagation"></a>Constant Propagation</h2><p>For many reasons, including interoperability with existing CAD tools, performance, and Verilog debug-ability, Chisel (actually the FIRRTL compiler underneath Chisel) will propagate constants and direct wire connections. For example:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-keyword">val</span> wire = <span class="hljs-type">Wire</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>  wire := io.in<br>  io.out := wire<br>&#125;<br></code></pre></td></tr></table></figure><p>In the above code, <code>wire</code> will be removed because it is simply connected to <code>io.in</code>, the Verilog will just show:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> io_out = io_in;<br></code></pre></td></tr></table></figure><h2 id="Inability-to-name"><a href="#Inability-to-name" class="headerlink" title="Inability to name"></a>Inability to name</h2><p>Chisel Modules are implemented as Scala Classes. Due to implementation reasons, by default Chisel can only name “top-level” <code>vals</code> in the body of the Module, for example:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in2 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-keyword">val</span> sum = io.in + io.in2 <span class="hljs-comment">// this is a top-level val, will be named</span><br><br>  <span class="hljs-comment">// A method, we can call to help generate code:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inc</span></span>(x: <span class="hljs-type">UInt</span>): <span class="hljs-type">UInt</span> = &#123;<br>    <span class="hljs-keyword">val</span> incremented = x + <span class="hljs-number">1.</span><span class="hljs-type">U</span> <span class="hljs-comment">// We cannot name this, it's inside a method</span><br>    incremented<br>  &#125;<br><br>  io.out := inc(sum)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="suggestName"><a href="#suggestName" class="headerlink" title="suggestName"></a>suggestName</h3><p>You can manually name any signal by calling <code>.suggestName(&quot;name&quot;)</code> on it, eg.</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inc</span></span>(x: <span class="hljs-type">UInt</span>): <span class="hljs-type">UInt</span> = &#123;<br>  <span class="hljs-keyword">val</span> incremented = x + <span class="hljs-number">1.</span><span class="hljs-type">U</span> <span class="hljs-comment">// We cannot name this, it's inside a method</span><br>  incremented.suggestName(<span class="hljs-string">"incremented"</span>) <span class="hljs-comment">// Now it is named!</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Enter-chiselName"><a href="#Enter-chiselName" class="headerlink" title="Enter @chiselName"></a>Enter @chiselName</h3><p>We can fix the above issue with an experimental feature called <code>@chiselName</code> like so:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> chisel3.experimental.chiselName<br><br><span class="hljs-meta">@chiselName</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in2 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-keyword">val</span> sum = io.in + io.in2 <span class="hljs-comment">// this is a top-level val, will be named</span><br><br>  <span class="hljs-comment">// A method, we can call to help generate code:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inc</span></span>(x: <span class="hljs-type">UInt</span>): <span class="hljs-type">UInt</span> = &#123;<br>    <span class="hljs-keyword">val</span> incremented = x + <span class="hljs-number">1.</span><span class="hljs-type">U</span> <span class="hljs-comment">// We cannot name this, it's inside a method</span><br>    incremented<br>  &#125;<br><br>  io.out := inc(sum)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@chiselName</code> is an <em>annotation</em> that can be used on any <code>class</code> or <code>object</code> definition and will ensure vals like <code>incremented</code> can get named. <code>@chiselName</code> effectively rewrites your code to put <code>.suggestName</code> all over the place.</p><p>I hope this helps!</p><h2 id="EDIT-more-info"><a href="#EDIT-more-info" class="headerlink" title="EDIT more info:"></a>EDIT more info:</h2><h3 id="Disabling-Optimizations"><a href="#Disabling-Optimizations" class="headerlink" title="Disabling Optimizations"></a>Disabling Optimizations</h3><p>I don’t think it’s in a release yet (most recent being <code>3.1.7</code>, this will be in <code>3.2.0</code>), but we do have an option to disable all optimizations. You can change the “compiler” used from <code>verilog</code> to <code>mverilog</code> (for “minimum” Verilog, ie. no optimizations). This can be done with the command-line argument <code>-X mverilog</code> either in Chisel or FIRRTL.</p><h3 id="Don’t-Touch"><a href="#Don’t-Touch" class="headerlink" title="Don’t Touch"></a>Don’t Touch</h3><p>You can also use <code>chisel3.experimental.dontTouch</code> to mark a signal as something that shouldn’t be deleted. This will prevent optimizations from removing the signal. For example:</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> chisel3.experimental.dontTouch<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-keyword">val</span> wire = dontTouch(<span class="hljs-type">Wire</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>)))<br>  wire := io.in<br>  io.out := wire<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速使用已有的IP模块并嵌入Chisel中</title>
      <link href="/2019/07/15/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8%E5%B7%B2%E6%9C%89%E7%9A%84IP%E6%A8%A1%E5%9D%97%E5%B9%B6%E5%B5%8C%E5%85%A5Chisel%E4%B8%AD/"/>
      <url>/2019/07/15/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8%E5%B7%B2%E6%9C%89%E7%9A%84IP%E6%A8%A1%E5%9D%97%E5%B9%B6%E5%B5%8C%E5%85%A5Chisel%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="在ASIC-FPGA中有很多现成的IP，快速调用方法"><a href="#在ASIC-FPGA中有很多现成的IP，快速调用方法" class="headerlink" title="在ASIC/FPGA中有很多现成的IP，快速调用方法~"></a>在ASIC/FPGA中有很多现成的IP，快速调用方法~</h4><ul><li><p>例子afifo(也可以通过引入文件的方法setResource和特质HasBlackBoxResource)</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs scala">class afifo(DW:Int = 32)  extends BlackBox(Map("D_WIDTH" -&gt; DW)) with HasBlackBoxInline &#123;<br>  val io = IO(new Bundle() &#123;<br>    val wr_clk   = Input(Clock())<br>    val rd_clk   = Input(Clock())<br>    val wr_rst_n = Input(Bool())<br>    val rd_rst_n = Input(Bool())<br>    val i_data   = Input(UInt(DW.W))<br>    val o_data   = Output(UInt(DW.W))<br>    val i_push   = Input(Bool())<br>    val i_pop    = Input(Bool())<br>    val o_full   = Output(Bool())<br>    val o_empty  = Output(Bool())<br>  &#125;)<br>  setInline("afifo.v",<br>    s"""<br>      |module afifo<br>      |#(<br>      |parameter D_WIDTH = 32<br>      |)<br>      |(<br>      |input                       wr_clk,<br>      |input                       rd_clk,<br>      |input                       wr_rst_n,<br>      |input                       rd_rst_n,<br>      |<br>      |input   [D_WIDTH-1:0]       i_data,<br>      |output  [D_WIDTH-1:0]       o_data,<br>      |input                       i_push,<br>      |input                       i_pop,<br>      |<br>      |output                      o_full,<br>      |output                      o_empty<br>      |);<br>      |<br>      |reg  [2:0] wr_pointer = 'd0, rd_pointer = 'd0;<br>      |reg  [2:0] wr_pointer_d1 = 'd0, rd_pointer_d1 = 'd0;<br>      |reg  [2:0] wr_pointer_d2 = 'd0, rd_pointer_d2 = 'd0;<br>      |wire [2:0] wr_pointer_rd, rd_pointer_wr;<br>      |<br>      |<br>      |reg [D_WIDTH-1:0] data [3:0];<br>      |<br>      |//Write pointer and memory<br>      |//The memory won't be reseted<br>      |always @( posedge wr_clk, negedge wr_rst_n)<br>      |    if (~wr_rst_n)<br>      |        begin<br>      |        wr_pointer &lt;= &#123;D_WIDTH&#123;1'b0&#125;&#125;;<br>      |        end<br>      |    else if ( i_push &amp;&amp; !o_full )<br>      |        begin<br>      |        wr_pointer &lt;= wr_pointer + 1'd1;<br>      |        data[wr_pointer[1:0]] &lt;= i_data;<br>      |        end<br>      |<br>      |//Read pointer synchronizer<br>      |wire [2:0] gray8_rd_pointer;<br>      |assign gray8_rd_pointer = gray8(rd_pointer);<br>      |always @( posedge wr_clk, negedge wr_rst_n)<br>      |    if (~wr_rst_n)<br>      |        begin<br>      |        rd_pointer_d1 &lt;= &#123;D_WIDTH&#123;1'b0&#125;&#125;;<br>      |        rd_pointer_d2 &lt;= &#123;D_WIDTH&#123;1'b0&#125;&#125;;<br>      |        end<br>      |    else<br>      |        begin<br>      |        rd_pointer_d1 &lt;= gray8_rd_pointer;<br>      |        rd_pointer_d2 &lt;= rd_pointer_d1;<br>      |        end<br>      |<br>      |//Read pointer<br>      |always @( posedge rd_clk, negedge rd_rst_n)<br>      |    if (~rd_rst_n)<br>      |        rd_pointer &lt;= &#123;D_WIDTH&#123;1'b0&#125;&#125;;<br>      |    else if ( i_pop &amp;&amp; !o_empty )<br>      |        rd_pointer &lt;= rd_pointer + 1'd1;<br>      |<br>      |//Write pointer synchronizer<br>      |wire [2:0] gray8_wr_pointer;<br>      |assign gray8_wr_pointer = gray8(wr_pointer);<br>      |<br>      |always @( posedge rd_clk,negedge rd_rst_n )<br>      |    if (~rd_rst_n)<br>      |        begin<br>      |        wr_pointer_d1 &lt;= &#123;D_WIDTH&#123;1'b0&#125;&#125;;<br>      |        wr_pointer_d2 &lt;= &#123;D_WIDTH&#123;1'b0&#125;&#125;;<br>      |        end<br>      |    else<br>      |        begin<br>      |        wr_pointer_d1 &lt;= gray8_wr_pointer;<br>      |        wr_pointer_d2 &lt;= wr_pointer_d1;<br>      |        end<br>      |<br>      |<br>      |assign wr_pointer_rd = ungray8(wr_pointer_d2);<br>      |assign rd_pointer_wr = ungray8(rd_pointer_d2);<br>      |<br>      |reg [D_WIDTH-1:0] buffer_data;<br>      |always @ (posedge rd_clk, negedge rd_rst_n)<br>      |    if (~rd_rst_n)<br>      |        buffer_data &lt;= &#123;D_WIDTH&#123;1'b0&#125;&#125;;<br>      |    else<br>      |        buffer_data &lt;= data[rd_pointer[1:0]];<br>      |<br>      |assign o_data  = buffer_data;<br>      |assign o_full  = &#123;~wr_pointer[2], wr_pointer[1:0]&#125; == rd_pointer_wr;<br>      |assign o_empty = wr_pointer_rd == rd_pointer;<br>      |<br>      |<br>      |function [2:0] gray8;<br>      |input [2:0] binary;<br>      |begin<br>      |    case(binary)<br>      |        3'b000 : gray8 = 3'b000;<br>      |        3'b001 : gray8 = 3'b001;<br>      |        3'b010 : gray8 = 3'b011;<br>      |        3'b011 : gray8 = 3'b010;<br>      |        3'b100 : gray8 = 3'b110;<br>      |        3'b101 : gray8 = 3'b111;<br>      |        3'b110 : gray8 = 3'b101;<br>      |        3'b111 : gray8 = 3'b100;<br>      |    endcase<br>      |end<br>      |endfunction<br>      |<br>      |<br>      |function [2:0] ungray8;<br>      |input [2:0] gray;<br>      |begin<br>      |    case(gray)<br>      |        3'b000 : ungray8 = 3'b000;<br>      |        3'b001 : ungray8 = 3'b001;<br>      |        3'b011 : ungray8 = 3'b010;<br>      |        3'b010 : ungray8 = 3'b011;<br>      |        3'b110 : ungray8 = 3'b100;<br>      |        3'b111 : ungray8 = 3'b101;<br>      |        3'b101 : ungray8 = 3'b110;<br>      |        3'b100 : ungray8 = 3'b111;<br>      |    endcase<br>      |end<br>      |endfunction<br>      |<br>      |endmodule<br>      """.stripMargin)<br>&#125;<br><br>class UseAfifo(DW:Int)  extends  MultiIOModule&#123;<br>  val io = IO(new Bundle() &#123;<br>    val wr_clk   = Input(Clock())<br>    val rd_clk   = Input(Clock())<br>    val wr_rst_n = Input(Bool())<br>    val rd_rst_n = Input(Bool())<br>    val i_data   = Input(UInt(DW.W))<br>    val o_data   = Output(UInt(DW.W))<br>    val i_push   = Input(Bool())<br>    val i_pop    = Input(Bool())<br>    val o_full   = Output(Bool())<br>    val o_empty  = Output(Bool())<br>  &#125;)<br><br>  val bb_inst = Module(new afifo(DW))<br>  io &lt;&gt; bb_inst.io<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>生成2个文件一个afifo.v，另一个实例化数据端口位宽为64如下：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> UseAfifo( <span class="hljs-comment">// @[:@18.2]</span><br>  <span class="hljs-keyword">input</span>         clock, <span class="hljs-comment">// @[:@19.4]</span><br>  <span class="hljs-keyword">input</span>         reset, <span class="hljs-comment">// @[:@20.4]</span><br>  <span class="hljs-keyword">input</span>         io_wr_clk, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">input</span>         io_rd_clk, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">input</span>         io_wr_rst_n, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">input</span>         io_rd_rst_n, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">63</span>:<span class="hljs-number">0</span>] io_i_data, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">63</span>:<span class="hljs-number">0</span>] io_o_data, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">input</span>         io_i_push, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">input</span>         io_i_pop, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">output</span>        io_o_full, <span class="hljs-comment">// @[:@21.4]</span><br>  <span class="hljs-keyword">output</span>        io_o_empty <span class="hljs-comment">// @[:@21.4]</span><br>);<br>  <span class="hljs-keyword">wire</span>  bb_inst_o_empty; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  bb_inst_o_full; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  bb_inst_i_pop; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  bb_inst_i_push; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">63</span>:<span class="hljs-number">0</span>] bb_inst_o_data; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">63</span>:<span class="hljs-number">0</span>] bb_inst_i_data; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  bb_inst_rd_rst_n; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  bb_inst_wr_rst_n; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  bb_inst_rd_clk; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  bb_inst_wr_clk; <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>  afifo <span class="hljs-variable">#(.D_WIDTH(64))</span> bb_inst ( <span class="hljs-comment">// @[SPIDriver.scala 381:23:@23.4]</span><br>    <span class="hljs-variable">.o_empty</span>(bb_inst_o_empty),<br>    <span class="hljs-variable">.o_full</span>(bb_inst_o_full),<br>    <span class="hljs-variable">.i_pop</span>(bb_inst_i_pop),<br>    <span class="hljs-variable">.i_push</span>(bb_inst_i_push),<br>    <span class="hljs-variable">.o_data</span>(bb_inst_o_data),<br>    <span class="hljs-variable">.i_data</span>(bb_inst_i_data),<br>    <span class="hljs-variable">.rd_rst_n</span>(bb_inst_rd_rst_n),<br>    <span class="hljs-variable">.wr_rst_n</span>(bb_inst_wr_rst_n),<br>    <span class="hljs-variable">.rd_clk</span>(bb_inst_rd_clk),<br>    <span class="hljs-variable">.wr_clk</span>(bb_inst_wr_clk)<br>  );<br>  <span class="hljs-keyword">assign</span> io_o_data = bb_inst_o_data; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@38.4]</span><br>  <span class="hljs-keyword">assign</span> io_o_full = bb_inst_o_full; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@35.4]</span><br>  <span class="hljs-keyword">assign</span> io_o_empty = bb_inst_o_empty; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@34.4]</span><br>  <span class="hljs-keyword">assign</span> bb_inst_i_pop = io_i_pop; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@36.4]</span><br>  <span class="hljs-keyword">assign</span> bb_inst_i_push = io_i_push; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@37.4]</span><br>  <span class="hljs-keyword">assign</span> bb_inst_i_data = io_i_data; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@39.4]</span><br>  <span class="hljs-keyword">assign</span> bb_inst_rd_rst_n = io_rd_rst_n; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@40.4]</span><br>  <span class="hljs-keyword">assign</span> bb_inst_wr_rst_n = io_wr_rst_n; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@41.4]</span><br>  <span class="hljs-keyword">assign</span> bb_inst_rd_clk = io_rd_clk; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@42.4]</span><br>  <span class="hljs-keyword">assign</span> bb_inst_wr_clk = io_wr_clk; <span class="hljs-comment">// @[SPIDriver.scala 382:6:@43.4]</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel模块多端口可配置</title>
      <link href="/2019/07/14/Chisel%E6%A8%A1%E5%9D%97%E5%A4%9A%E7%AB%AF%E5%8F%A3%E5%8F%AF%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/14/Chisel%E6%A8%A1%E5%9D%97%E5%A4%9A%E7%AB%AF%E5%8F%A3%E5%8F%AF%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="从命令行切到IJ-IDE了，提高下coding效率"><a href="#从命令行切到IJ-IDE了，提高下coding效率" class="headerlink" title="从命令行切到IJ-IDE了，提高下coding效率~"></a>从命令行切到IJ-IDE了，提高下coding效率~</h4><p><img src="/2019/07/14/Chisel模块多端口可配置/chisel.jpg" alt="Chisel"></p><h4 id="生成的代码"><a href="#生成的代码" class="headerlink" title="生成的代码"></a>生成的代码</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs scala">module <span class="hljs-type">RegEnaVec</span>( <span class="hljs-comment">// @[:@3.2]</span><br>  input   clock, <span class="hljs-comment">// @[:@4.4]</span><br>  input   reset, <span class="hljs-comment">// @[:@5.4]</span><br>  input   in_0, <span class="hljs-comment">// @[:@6.4]</span><br>  input   in_1, <span class="hljs-comment">// @[:@7.4]</span><br>  input   in_2, <span class="hljs-comment">// @[:@8.4]</span><br>  input   in_3, <span class="hljs-comment">// @[:@9.4]</span><br>  input   in_4, <span class="hljs-comment">// @[:@10.4]</span><br>  input   in_5, <span class="hljs-comment">// @[:@11.4]</span><br>  input   in_6, <span class="hljs-comment">// @[:@12.4]</span><br>  input   in_7, <span class="hljs-comment">// @[:@13.4]</span><br>  input   en_0, <span class="hljs-comment">// @[:@14.4]</span><br>  input   en_1, <span class="hljs-comment">// @[:@15.4]</span><br>  input   en_2, <span class="hljs-comment">// @[:@16.4]</span><br>  input   en_3, <span class="hljs-comment">// @[:@17.4]</span><br>  input   en_4, <span class="hljs-comment">// @[:@18.4]</span><br>  input   en_5, <span class="hljs-comment">// @[:@19.4]</span><br>  input   en_6, <span class="hljs-comment">// @[:@20.4]</span><br>  input   en_7, <span class="hljs-comment">// @[:@21.4]</span><br>  output  out_0, <span class="hljs-comment">// @[:@22.4]</span><br>  output  out_1, <span class="hljs-comment">// @[:@23.4]</span><br>  output  out_2, <span class="hljs-comment">// @[:@24.4]</span><br>  output  out_3, <span class="hljs-comment">// @[:@25.4]</span><br>  output  out_4, <span class="hljs-comment">// @[:@26.4]</span><br>  output  out_5, <span class="hljs-comment">// @[:@27.4]</span><br>  output  out_6, <span class="hljs-comment">// @[:@28.4]</span><br>  output  out_7 <span class="hljs-comment">// @[:@29.4]</span><br>);<br>  reg  mySeq_0; <span class="hljs-comment">// @[Reg.scala 19:20:@31.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_0;<br>  wire  _GEN_0; <span class="hljs-comment">// @[Reg.scala 20:19:@32.4]</span><br>  reg  mySeq_1; <span class="hljs-comment">// @[Reg.scala 19:20:@35.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_1;<br>  wire  _GEN_1; <span class="hljs-comment">// @[Reg.scala 20:19:@36.4]</span><br>  reg  mySeq_2; <span class="hljs-comment">// @[Reg.scala 19:20:@39.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_2;<br>  wire  _GEN_2; <span class="hljs-comment">// @[Reg.scala 20:19:@40.4]</span><br>  reg  mySeq_3; <span class="hljs-comment">// @[Reg.scala 19:20:@43.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_3;<br>  wire  _GEN_3; <span class="hljs-comment">// @[Reg.scala 20:19:@44.4]</span><br>  reg  mySeq_4; <span class="hljs-comment">// @[Reg.scala 19:20:@47.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_4;<br>  wire  _GEN_4; <span class="hljs-comment">// @[Reg.scala 20:19:@48.4]</span><br>  reg  mySeq_5; <span class="hljs-comment">// @[Reg.scala 19:20:@51.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_5;<br>  wire  _GEN_5; <span class="hljs-comment">// @[Reg.scala 20:19:@52.4]</span><br>  reg  mySeq_6; <span class="hljs-comment">// @[Reg.scala 19:20:@55.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_6;<br>  wire  _GEN_6; <span class="hljs-comment">// @[Reg.scala 20:19:@56.4]</span><br>  reg  mySeq_7; <span class="hljs-comment">// @[Reg.scala 19:20:@59.4]</span><br>  reg [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] _RAND_7;<br>  wire  _GEN_7; <span class="hljs-comment">// @[Reg.scala 20:19:@60.4]</span><br>  assign _GEN_0 = en_0 ? in_0 : mySeq_0; <span class="hljs-comment">// @[Reg.scala 20:19:@32.4]</span><br>  assign _GEN_1 = en_1 ? in_1 : mySeq_1; <span class="hljs-comment">// @[Reg.scala 20:19:@36.4]</span><br>  assign _GEN_2 = en_2 ? in_2 : mySeq_2; <span class="hljs-comment">// @[Reg.scala 20:19:@40.4]</span><br>  assign _GEN_3 = en_3 ? in_3 : mySeq_3; <span class="hljs-comment">// @[Reg.scala 20:19:@44.4]</span><br>  assign _GEN_4 = en_4 ? in_4 : mySeq_4; <span class="hljs-comment">// @[Reg.scala 20:19:@48.4]</span><br>  assign _GEN_5 = en_5 ? in_5 : mySeq_5; <span class="hljs-comment">// @[Reg.scala 20:19:@52.4]</span><br>  assign _GEN_6 = en_6 ? in_6 : mySeq_6; <span class="hljs-comment">// @[Reg.scala 20:19:@56.4]</span><br>  assign _GEN_7 = en_7 ? in_7 : mySeq_7; <span class="hljs-comment">// @[Reg.scala 20:19:@60.4]</span><br>  assign out_0 = mySeq_0; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@72.4]</span><br>  assign out_1 = mySeq_1; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@73.4]</span><br>  assign out_2 = mySeq_2; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@74.4]</span><br>  assign out_3 = mySeq_3; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@75.4]</span><br>  assign out_4 = mySeq_4; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@76.4]</span><br>  assign out_5 = mySeq_5; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@77.4]</span><br>  assign out_6 = mySeq_6; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@78.4]</span><br>  assign out_7 = mySeq_7; <span class="hljs-comment">// @[RegEnaVec.scala 19:13:@79.4]</span><br>`ifdef <span class="hljs-type">RANDOMIZE_GARBAGE_ASSIGN</span><br>`define <span class="hljs-type">RANDOMIZE</span><br>`endif<br>`ifdef <span class="hljs-type">RANDOMIZE_INVALID_ASSIGN</span><br>`define <span class="hljs-type">RANDOMIZE</span><br>`endif<br>`ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>`define <span class="hljs-type">RANDOMIZE</span><br>`endif<br>`ifdef <span class="hljs-type">RANDOMIZE_MEM_INIT</span><br>`define <span class="hljs-type">RANDOMIZE</span><br>`endif<br>`ifndef <span class="hljs-type">RANDOM</span><br>`define <span class="hljs-type">RANDOM</span> $random<br>`endif<br>`ifdef <span class="hljs-type">RANDOMIZE</span><br>  integer initvar;<br>  initial begin<br>    `ifdef <span class="hljs-type">INIT_RANDOM</span><br>      `<span class="hljs-type">INIT_RANDOM</span><br>    `endif<br>    `ifndef <span class="hljs-type">VERILATOR</span><br>      #<span class="hljs-number">0.002</span> begin end<br>    `endif<br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_0 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_0 = _RAND_0[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_1 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_1 = _RAND_1[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_2 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_2 = _RAND_2[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_3 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_3 = _RAND_3[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_4 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_4 = _RAND_4[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_5 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_5 = _RAND_5[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_6 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_6 = _RAND_6[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  `ifdef <span class="hljs-type">RANDOMIZE_REG_INIT</span><br>  _RAND_7 = &#123;<span class="hljs-number">1</span>&#123;`<span class="hljs-type">RANDOM</span>&#125;&#125;;<br>  mySeq_7 = _RAND_7[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  `endif <span class="hljs-comment">// RANDOMIZE_REG_INIT</span><br>  end<br>`endif <span class="hljs-comment">// RANDOMIZE</span><br>  always @(posedge clock) begin<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_0 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_0) begin<br>        mySeq_0 &lt;= in_0;<br>      end<br>    end<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_1 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_1) begin<br>        mySeq_1 &lt;= in_1;<br>      end<br>    end<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_2 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_2) begin<br>        mySeq_2 &lt;= in_2;<br>      end<br>    end<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_3 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_3) begin<br>        mySeq_3 &lt;= in_3;<br>      end<br>    end<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_4 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_4) begin<br>        mySeq_4 &lt;= in_4;<br>      end<br>    end<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_5 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_5) begin<br>        mySeq_5 &lt;= in_5;<br>      end<br>    end<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_6 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_6) begin<br>        mySeq_6 &lt;= in_6;<br>      end<br>    end<br>    <span class="hljs-keyword">if</span> (reset) begin<br>      mySeq_7 &lt;= <span class="hljs-number">1</span><span class="hljs-symbol">'h0</span>;<br>    end <span class="hljs-keyword">else</span> begin<br>      <span class="hljs-keyword">if</span> (en_7) begin<br>        mySeq_7 &lt;= in_7;<br>      end<br>    end<br>  end<br>endmodule<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel模块多端口扩展</title>
      <link href="/2019/07/14/Chisel%E6%A8%A1%E5%9D%97%E5%A4%9A%E7%AB%AF%E5%8F%A3%E6%89%A9%E5%B1%95/"/>
      <url>/2019/07/14/Chisel%E6%A8%A1%E5%9D%97%E5%A4%9A%E7%AB%AF%E5%8F%A3%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h4 id="端口可以继承也可以通过实验性的MultiIOModule进行扩展"><a href="#端口可以继承也可以通过实验性的MultiIOModule进行扩展" class="headerlink" title="端口可以继承也可以通过实验性的MultiIOModule进行扩展~"></a>端口可以继承也可以通过实验性的MultiIOModule进行扩展~</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiMaster</span>(<span class="hljs-params">val param:<span class="hljs-type">SpiParam</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">MultiIOModule</span> </span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiMasterExt</span>(<span class="hljs-params">val delay:<span class="hljs-type">Int</span> = 1</span>) <span class="hljs-keyword">extends</span> </span>&#123;<br>  <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> param:<span class="hljs-type">SpiParam</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">SpiParam</span> <br>&#125; <span class="hljs-keyword">with</span> <span class="hljs-type">SpiMaster</span>(param) &#123;<br><br>  require(delay &gt;= <span class="hljs-number">1</span>,<span class="hljs-string">s"delay:<span class="hljs-subst">$delay</span> &gt;= 1"</span>)<br>  <br>  ioext = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> spi_rdata_dly = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))<br>  &#125;)<br><br>  <span class="hljs-keyword">val</span> spi_rdata_dregs = <span class="hljs-type">RegInit</span>(<span class="hljs-type">VecInit</span>(<span class="hljs-type">Seq</span>.fill(delay)(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))))<br><br>  <span class="hljs-keyword">if</span>(delay == <span class="hljs-number">1</span>)<br>    spi_rdata_dregs(<span class="hljs-number">0</span>) := io.spi_rdata<br>  <span class="hljs-keyword">else</span> &#123;<br>    spi_rdata_dregs(<span class="hljs-number">0</span>) := io.spi_rdata<br>    <span class="hljs-keyword">for</span>(i &lt;- <span class="hljs-number">0</span> until spi_rdata_dregs.length - <span class="hljs-number">1</span>) &#123;<br>      spi_rdata_dregs(i+<span class="hljs-number">1</span>) := spi_rdata_dregs(i)<br>    &#125;<br>  &#125;<br><br>  ioext.spi_rdata_dly := spi_rdata_dregs(delay - <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速迭代开发SpiMaster新功能~</title>
      <link href="/2019/07/12/%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3%E5%BC%80%E5%8F%91SpiMaster%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/07/12/%E5%BF%AB%E9%80%9F%E8%BF%AD%E4%BB%A3%E5%BC%80%E5%8F%91SpiMaster%E6%96%B0%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="新需求太多，改动多，Chisel通过多种方法进行快速迭代生成代码，如下例子新需求：SpiMaster需要把读取的数据延迟可配"><a href="#新需求太多，改动多，Chisel通过多种方法进行快速迭代生成代码，如下例子新需求：SpiMaster需要把读取的数据延迟可配" class="headerlink" title="新需求太多，改动多，Chisel通过多种方法进行快速迭代生成代码，如下例子新需求：SpiMaster需要把读取的数据延迟可配~"></a>新需求太多，改动多，Chisel通过多种方法进行快速迭代生成代码，如下例子新需求：SpiMaster需要把读取的数据延迟可配~</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiIOExt</span> <span class="hljs-keyword">extends</span> </span>&#123;<br>  <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> param:<span class="hljs-type">SpiParam</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">SpiParam</span><br>&#125; <span class="hljs-keyword">with</span> <span class="hljs-type">SpiIO</span>(param) &#123;<br>  <span class="hljs-keyword">val</span> spi_rdata_dly = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiMasterExt</span>(<span class="hljs-params">val delay:<span class="hljs-type">Int</span> = 1</span>) <span class="hljs-keyword">extends</span> </span>&#123;<br>  <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> param:<span class="hljs-type">SpiParam</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">SpiParam</span> <br>&#125; <span class="hljs-keyword">with</span> <span class="hljs-type">SpiMaster</span>(param) &#123;<br><br>  require(delay &gt;= <span class="hljs-number">1</span>,<span class="hljs-string">s"delay:<span class="hljs-subst">$delay</span> &gt;= 1"</span>)<br><br>  <span class="hljs-keyword">override</span> <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">SpiIOExt</span>)<br><br>  <span class="hljs-keyword">val</span> spi_rdata_dregs = <span class="hljs-type">RegInit</span>(<span class="hljs-type">VecInit</span>(<span class="hljs-type">Seq</span>.fill(delay)(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))))<br><br>  <span class="hljs-keyword">if</span>(delay == <span class="hljs-number">1</span>)<br>    spi_rdata_dregs(<span class="hljs-number">0</span>) := io.spi_rdata<br>  <span class="hljs-keyword">else</span> &#123;<br>    spi_rdata_dregs(<span class="hljs-number">0</span>) := io.spi_rdata<br>    <span class="hljs-keyword">for</span>(i &lt;- <span class="hljs-number">0</span> until spi_rdata_dregs.length - <span class="hljs-number">1</span>) &#123;<br>      spi_rdata_dregs(i+<span class="hljs-number">1</span>) := spi_rdata_dregs(i)<br>    &#125;<br>  &#125;<br><br>  io.spi_rdata_dly := spi_rdata_dregs(delay - <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="延迟3个时钟生成代码的区别"><a href="#延迟3个时钟生成代码的区别" class="headerlink" title="延迟3个时钟生成代码的区别"></a>延迟3个时钟生成代码的区别</h4><p><img src="/2019/07/12/快速迭代开发SpiMaster新功能/diff1.jpg" alt="diff1"><br><img src="/2019/07/12/快速迭代开发SpiMaster新功能/diff2.jpg" alt="diff2"></p><h4 id="延迟3个时钟读取数据的新波形"><a href="#延迟3个时钟读取数据的新波形" class="headerlink" title="延迟3个时钟读取数据的新波形"></a>延迟3个时钟读取数据的新波形</h4><p><img src="/2019/07/12/快速迭代开发SpiMaster新功能/spiext.jpg" alt="spiext"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试用Chisel写个SpiMaster~</title>
      <link href="/2019/07/11/%E5%B0%9D%E8%AF%95%E7%94%A8Chisel%E5%86%99%E4%B8%AASpiMaster/"/>
      <url>/2019/07/11/%E5%B0%9D%E8%AF%95%E7%94%A8Chisel%E5%86%99%E4%B8%AASpiMaster/</url>
      
        <content type="html"><![CDATA[<h4 id="刚开始写，非常不顺手，难度很大。对接口类代码确实不如verilog快，而且代码出来不易读，不过在算法，架构，CPU，GPU，图像，AI等方面应该是很快的。出来还得靠DVer把关。"><a href="#刚开始写，非常不顺手，难度很大。对接口类代码确实不如verilog快，而且代码出来不易读，不过在算法，架构，CPU，GPU，图像，AI等方面应该是很快的。出来还得靠DVer把关。" class="headerlink" title="刚开始写，非常不顺手，难度很大。对接口类代码确实不如verilog快，而且代码出来不易读，不过在算法，架构，CPU，GPU，图像，AI等方面应该是很快的。出来还得靠DVer把关。"></a>刚开始写，非常不顺手，难度很大。对接口类代码确实不如verilog快，而且代码出来不易读，不过在算法，架构，CPU，GPU，图像，AI等方面应该是很快的。出来还得靠DVer把关。</h4><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> smr.rtlgenpkg<br><br><span class="hljs-keyword">import</span> scala.math._<br><span class="hljs-keyword">import</span> chisel3._<br><span class="hljs-keyword">import</span> chisel3.util._<br><span class="hljs-keyword">import</span> chisel3.experimental._<br><span class="hljs-keyword">import</span> dsptools.numbers._<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiParam</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">val</span> <span class="hljs-type">CMDWIDTH</span>  = <span class="hljs-number">1</span> <span class="hljs-comment">// 1:wirte 0:read</span><br>  <span class="hljs-keyword">val</span> <span class="hljs-type">ADDRWIDTH</span>  = <span class="hljs-number">7</span><br>  <span class="hljs-keyword">val</span> <span class="hljs-type">DATAWIDTH</span>  = <span class="hljs-number">8</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">val</span> <span class="hljs-type">TOTALWIDTH</span> = <span class="hljs-type">CMDWIDTH</span> + <span class="hljs-type">ADDRWIDTH</span> + <span class="hljs-type">DATAWIDTH</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">val</span> <span class="hljs-type">SPICNT</span>     = <span class="hljs-number">2</span>*<span class="hljs-type">TOTALWIDTH</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">val</span> <span class="hljs-type">SPICNTBITS</span> = (log(<span class="hljs-type">SPICNT</span>)/log(<span class="hljs-number">2</span>)).ceil.toInt<br>  require(<span class="hljs-type">CMDWIDTH</span> == <span class="hljs-number">1</span>,<span class="hljs-string">s"CMDWIDTH:<span class="hljs-subst">$CMDWIDTH</span> == 1"</span>)<br>  require(<span class="hljs-type">ADDRWIDTH</span> &gt; <span class="hljs-number">0</span>,<span class="hljs-string">s"ADDRWIDTH:<span class="hljs-subst">$ADDRWIDTH</span> &gt; 0"</span>)<br>  require(<span class="hljs-type">DATAWIDTH</span> &gt; <span class="hljs-number">0</span>,<span class="hljs-string">s"DATAWIDTH:<span class="hljs-subst">$DATAWIDTH</span> &gt; 0"</span>)<br>  require(pow(<span class="hljs-number">2</span>,<span class="hljs-type">SPICNTBITS</span>).toInt == <span class="hljs-type">SPICNT</span>,<span class="hljs-string">s"pow(2,SPICNTBITS:<span class="hljs-subst">$SPICNTBITS</span>).toInt == <span class="hljs-subst">$SPICNT</span>"</span>)<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiParamExt</span> <span class="hljs-keyword">extends</span> </span>&#123;<br>  <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> <span class="hljs-type">ADDRWIDTH</span>  = <span class="hljs-number">15</span><br>  <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> <span class="hljs-type">DATAWIDTH</span>  = <span class="hljs-number">16</span><br>&#125; <span class="hljs-keyword">with</span> <span class="hljs-type">SpiParam</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiIO</span>(<span class="hljs-params">val param:<span class="hljs-type">SpiParam</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Bundle</span></span>&#123;<br>  <span class="hljs-keyword">val</span> spi_start = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_cmd   = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(param.<span class="hljs-type">CMDWIDTH</span>.<span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_addr  = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(param.<span class="hljs-type">ADDRWIDTH</span>.<span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_wdata = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_rdata = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_rdvld = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_clk   = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_cs_n  = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_mosi  = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_miso  = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiMaster</span>(<span class="hljs-params">val param:<span class="hljs-type">SpiParam</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span></span>&#123;<br>  <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">SpiIO</span>(param))<br><br>  <span class="hljs-keyword">val</span> <span class="hljs-type">Seq</span>(spiseq_vld_reg,spi_clk_reg,<br>          spi_mosi_reg,spi_rdvld_reg) = <span class="hljs-type">Seq</span>.fill(<span class="hljs-number">4</span>)(<span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>)))<br>  <span class="hljs-keyword">val</span> spi_miso_reg  = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))<br>  <span class="hljs-keyword">val</span> spi_start     = io.spi_start<br><br>  <span class="hljs-keyword">val</span> (spicnt,spicnt_wrap) = <span class="hljs-type">Counter</span>(spiseq_vld_reg.asBool,param.<span class="hljs-type">SPICNT</span>)<br><br>  when(spi_start === <span class="hljs-number">1.</span><span class="hljs-type">U</span>) &#123;<br>    spiseq_vld_reg := <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>  &#125;.elsewhen(spicnt_wrap === <span class="hljs-literal">true</span>.<span class="hljs-type">B</span>) &#123;<br>    spiseq_vld_reg := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>  &#125;<br><br>  when((spi_start === <span class="hljs-number">1.</span><span class="hljs-type">U</span> || spiseq_vld_reg === <span class="hljs-number">1.</span><span class="hljs-type">U</span>) &amp;&amp; (spicnt =/= (param.<span class="hljs-type">SPICNT</span> - <span class="hljs-number">1</span>).<span class="hljs-type">U</span>)) &#123;<br>    spi_clk_reg := ~spi_clk_reg<br>  &#125;.otherwise &#123;<br>    spi_clk_reg := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>  &#125;<br><br>  <span class="hljs-keyword">val</span> spicntx2_reg = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>((param.<span class="hljs-type">SPICNTBITS</span> - <span class="hljs-number">1</span>).<span class="hljs-type">W</span>))<br>  when(spi_start === <span class="hljs-number">1.</span><span class="hljs-type">U</span> ||  (spiseq_vld_reg === <span class="hljs-number">1.</span><span class="hljs-type">U</span> &amp;&amp; spi_clk_reg === <span class="hljs-number">0.</span><span class="hljs-type">U</span> &amp;&amp; spicnt_wrap =/= <span class="hljs-literal">true</span>.<span class="hljs-type">B</span>) ) &#123;<br>    spicntx2_reg := spicntx2_reg + <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>  &#125;.elsewhen(spicnt_wrap === <span class="hljs-literal">true</span>.<span class="hljs-type">B</span>) &#123;<br>    spicntx2_reg := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>  &#125;<br>   <br>  <span class="hljs-keyword">val</span> spi_shift_wdata = <span class="hljs-type">Cat</span>(io.spi_cmd,io.spi_addr,io.spi_wdata)<br>  <span class="hljs-keyword">val</span> spi_shift_rdata = <span class="hljs-type">Cat</span>(io.spi_cmd,io.spi_addr,<span class="hljs-number">0.</span><span class="hljs-type">U</span>(param.<span class="hljs-type">DATAWIDTH</span>.<span class="hljs-type">W</span>))<br><br>  when(spi_start === <span class="hljs-number">1.</span><span class="hljs-type">U</span> || (spiseq_vld_reg === <span class="hljs-number">1.</span><span class="hljs-type">U</span> &amp;&amp; spi_clk_reg === <span class="hljs-number">0.</span><span class="hljs-type">U</span> &amp;&amp; spicnt_wrap =/= <span class="hljs-literal">true</span>.<span class="hljs-type">B</span>)) &#123;<br>    when(io.spi_cmd === <span class="hljs-number">1.</span><span class="hljs-type">U</span>) &#123;<span class="hljs-comment">//write</span><br>      spi_mosi_reg := spi_shift_wdata(param.<span class="hljs-type">TOTALWIDTH</span> - <span class="hljs-number">1</span> - spicntx2_reg)<br>    &#125;.otherwise &#123; <span class="hljs-comment">//read</span><br>      spi_mosi_reg :=spi_shift_rdata(param.<span class="hljs-type">TOTALWIDTH</span> - <span class="hljs-number">1</span> - spicntx2_reg)<br>    &#125;<br>  &#125;<br><br>  when(spi_start === <span class="hljs-number">1.</span><span class="hljs-type">U</span> || spiseq_vld_reg === <span class="hljs-number">1.</span><span class="hljs-type">U</span>) &#123;<br>     when(io.spi_cmd === <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>       when((spicnt &gt;= <span class="hljs-number">2</span>*(param.<span class="hljs-type">CMDWIDTH</span>+param.<span class="hljs-type">ADDRWIDTH</span>)) &amp;&amp; spi_clk_reg === <span class="hljs-number">1.</span><span class="hljs-type">U</span>) &#123;<br>        spi_miso_reg := <span class="hljs-type">Cat</span>(spi_miso_reg(param.<span class="hljs-type">DATAWIDTH</span> - <span class="hljs-number">2</span>,<span class="hljs-number">0</span>),io.spi_miso)<br>      &#125;<br>    &#125;<br>  &#125;.otherwise &#123;<br>    spi_miso_reg := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>  &#125;<br><br>  when(spi_start === <span class="hljs-number">1.</span><span class="hljs-type">U</span> || spiseq_vld_reg === <span class="hljs-number">1.</span><span class="hljs-type">U</span>) &#123;<br>    when(io.spi_cmd === <span class="hljs-number">0.</span><span class="hljs-type">U</span> &amp;&amp; spicnt_wrap === <span class="hljs-literal">true</span>.<span class="hljs-type">B</span>) &#123;<br>      spi_rdvld_reg := <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>    &#125;<br>  &#125;.elsewhen(spi_start === <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>    spi_rdvld_reg := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>  &#125;<br><br>  io.spi_cs_n  := ~spiseq_vld_reg <br>  io.spi_clk   := spi_clk_reg<br>  io.spi_mosi  := spi_mosi_reg<br>  io.spi_rdata := spi_miso_reg<br>  io.spi_rdvld := spi_rdvld_reg<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生成的SpiMaster-Verilog代码ADDR-7bits-DATA-8bits"><a href="#生成的SpiMaster-Verilog代码ADDR-7bits-DATA-8bits" class="headerlink" title="生成的SpiMaster Verilog代码ADDR=7bits,DATA=8bits"></a>生成的SpiMaster Verilog代码ADDR=7bits,DATA=8bits</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> SpiMaster( <span class="hljs-comment">// @[:@3.2]</span><br>  <span class="hljs-keyword">input</span>        clock, <span class="hljs-comment">// @[:@4.4]</span><br>  <span class="hljs-keyword">input</span>        reset, <span class="hljs-comment">// @[:@5.4]</span><br>  <span class="hljs-keyword">input</span>        io_spi_start, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>        io_spi_cmd, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] io_spi_addr, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_spi_wdata, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] io_spi_rdata, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>       io_spi_rdvld, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>       io_spi_clk, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>       io_spi_cs_n, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>       io_spi_mosi, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>        io_spi_miso <span class="hljs-comment">// @[:@6.4]</span><br>);<br>  <span class="hljs-keyword">reg</span>  spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@8.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_0;<br>  <span class="hljs-keyword">reg</span>  spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@9.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_1;<br>  <span class="hljs-keyword">reg</span>  spi_mosi_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@10.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_2;<br>  <span class="hljs-keyword">reg</span>  spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@11.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_3;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 128:30:@12.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_4;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] value; <span class="hljs-comment">// @[Counter.scala 26:33:@14.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_5;<br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_39; <span class="hljs-comment">// @[Counter.scala 34:24:@16.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_41; <span class="hljs-comment">// @[Counter.scala 35:22:@17.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_42; <span class="hljs-comment">// @[Counter.scala 35:22:@18.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_0; <span class="hljs-comment">// @[Counter.scala 63:17:@15.4]</span><br>  <span class="hljs-keyword">wire</span>  spicnt_wrap; <span class="hljs-comment">// @[Counter.scala 64:20:@21.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_1; <span class="hljs-comment">// @[SPIDriver.scala 135:38:@28.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_2; <span class="hljs-comment">// @[SPIDriver.scala 133:27:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_53; <span class="hljs-comment">// @[SPIDriver.scala 139:27:@33.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_55; <span class="hljs-comment">// @[SPIDriver.scala 139:65:@34.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_56; <span class="hljs-comment">// @[SPIDriver.scala 139:54:@35.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_57; <span class="hljs-comment">// @[SPIDriver.scala 140:20:@37.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_3; <span class="hljs-comment">// @[SPIDriver.scala 139:92:@36.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] spicntx2_reg; <span class="hljs-comment">// @[SPIDriver.scala 145:29:@43.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_6;<br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_66; <span class="hljs-comment">// @[SPIDriver.scala 146:69:@46.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_67; <span class="hljs-comment">// @[SPIDriver.scala 146:54:@47.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_69; <span class="hljs-comment">// @[SPIDriver.scala 146:92:@48.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_70; <span class="hljs-comment">// @[SPIDriver.scala 146:77:@49.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_71; <span class="hljs-comment">// @[SPIDriver.scala 146:26:@50.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_73; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@52.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_74; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@53.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_4; <span class="hljs-comment">// @[SPIDriver.scala 148:38:@58.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_5; <span class="hljs-comment">// @[SPIDriver.scala 146:106:@51.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] spi_shift_wdata; <span class="hljs-comment">// @[Cat.scala 30:58:@62.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] spi_shift_rdata; <span class="hljs-comment">// @[Cat.scala 30:58:@64.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_95; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@75.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_96; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@76.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_97; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@77.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_98; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@78.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_99; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@79.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_104; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@86.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_105; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@87.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_6; <span class="hljs-comment">// @[SPIDriver.scala 156:30:@74.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_7; <span class="hljs-comment">// @[SPIDriver.scala 155:104:@72.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_112; <span class="hljs-comment">// @[SPIDriver.scala 164:22:@95.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_114; <span class="hljs-comment">// @[UIntTypeClass.scala 55:50:@97.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_117; <span class="hljs-comment">// @[SPIDriver.scala 165:60:@99.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_118; <span class="hljs-comment">// @[SPIDriver.scala 166:41:@101.10]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_119; <span class="hljs-comment">// @[Cat.scala 30:58:@102.10]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_8; <span class="hljs-comment">// @[SPIDriver.scala 165:84:@100.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_9; <span class="hljs-comment">// @[SPIDriver.scala 164:31:@96.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_10; <span class="hljs-comment">// @[SPIDriver.scala 163:53:@94.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_130; <span class="hljs-comment">// @[SPIDriver.scala 174:29:@116.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_11; <span class="hljs-comment">// @[SPIDriver.scala 174:56:@117.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_133; <span class="hljs-comment">// @[SPIDriver.scala 177:24:@122.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_12; <span class="hljs-comment">// @[SPIDriver.scala 177:33:@123.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_13; <span class="hljs-comment">// @[SPIDriver.scala 173:53:@113.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_39 = value == <span class="hljs-number">5'h1f</span>; <span class="hljs-comment">// @[Counter.scala 34:24:@16.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_41 = value + <span class="hljs-number">5'h1</span>; <span class="hljs-comment">// @[Counter.scala 35:22:@17.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_42 = value + <span class="hljs-number">5'h1</span>; <span class="hljs-comment">// @[Counter.scala 35:22:@18.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_0 = spiseq_vld_reg ? <span class="hljs-number">_</span>T_42 : value; <span class="hljs-comment">// @[Counter.scala 63:17:@15.4]</span><br>  <span class="hljs-keyword">assign</span> spicnt_wrap = spiseq_vld_reg &amp; <span class="hljs-number">_</span>T_39; <span class="hljs-comment">// @[Counter.scala 64:20:@21.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_1 = spicnt_wrap ? <span class="hljs-number">1'h0</span> : spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 135:38:@28.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_2 = io_spi_start ? <span class="hljs-number">1'h1</span> : <span class="hljs-number">_</span>GEN_1; <span class="hljs-comment">// @[SPIDriver.scala 133:27:@23.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_53 = io_spi_start | spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 139:27:@33.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_55 = value != <span class="hljs-number">5'h1f</span>; <span class="hljs-comment">// @[SPIDriver.scala 139:65:@34.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_56 = <span class="hljs-number">_</span>T_53 &amp; <span class="hljs-number">_</span>T_55; <span class="hljs-comment">// @[SPIDriver.scala 139:54:@35.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_57 = ~ spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 140:20:@37.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_3 = <span class="hljs-number">_</span>T_56 ? <span class="hljs-number">_</span>T_57 : <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 139:92:@36.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_66 = spi_clk_reg == <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 146:69:@46.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_67 = spiseq_vld_reg &amp; <span class="hljs-number">_</span>T_66; <span class="hljs-comment">// @[SPIDriver.scala 146:54:@47.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_69 = spicnt_wrap != <span class="hljs-number">1'h1</span>; <span class="hljs-comment">// @[SPIDriver.scala 146:92:@48.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_70 = <span class="hljs-number">_</span>T_67 &amp; <span class="hljs-number">_</span>T_69; <span class="hljs-comment">// @[SPIDriver.scala 146:77:@49.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_71 = io_spi_start | <span class="hljs-number">_</span>T_70; <span class="hljs-comment">// @[SPIDriver.scala 146:26:@50.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_73 = spicntx2_reg + <span class="hljs-number">4'h1</span>; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@52.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_74 = spicntx2_reg + <span class="hljs-number">4'h1</span>; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@53.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_4 = spicnt_wrap ? <span class="hljs-number">4'h0</span> : spicntx2_reg; <span class="hljs-comment">// @[SPIDriver.scala 148:38:@58.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_5 = <span class="hljs-number">_</span>T_71 ? <span class="hljs-number">_</span>T_74 : <span class="hljs-number">_</span>GEN_4; <span class="hljs-comment">// @[SPIDriver.scala 146:106:@51.4]</span><br>  <span class="hljs-keyword">assign</span> spi_shift_wdata = &#123;io_spi_cmd,io_spi_addr,io_spi_wdata&#125;; <span class="hljs-comment">// @[Cat.scala 30:58:@62.4]</span><br>  <span class="hljs-keyword">assign</span> spi_shift_rdata = &#123;io_spi_cmd,io_spi_addr,<span class="hljs-number">8'h0</span>&#125;; <span class="hljs-comment">// @[Cat.scala 30:58:@64.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_95 = <span class="hljs-number">4'hf</span> - spicntx2_reg; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@75.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_96 = <span class="hljs-built_in">$unsigned</span>(<span class="hljs-number">_</span>T_95); <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@76.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_97 = <span class="hljs-number">_</span>T_96[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@77.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_98 = spi_shift_wdata &gt;&gt; <span class="hljs-number">_</span>T_97; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@78.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_99 = <span class="hljs-number">_</span>T_98[<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@79.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_104 = spi_shift_rdata &gt;&gt; <span class="hljs-number">_</span>T_97; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@86.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_105 = <span class="hljs-number">_</span>T_104[<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@87.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_6 = io_spi_cmd ? <span class="hljs-number">_</span>T_99 : <span class="hljs-number">_</span>T_105; <span class="hljs-comment">// @[SPIDriver.scala 156:30:@74.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_7 = <span class="hljs-number">_</span>T_71 ? <span class="hljs-number">_</span>GEN_6 : spi_mosi_reg; <span class="hljs-comment">// @[SPIDriver.scala 155:104:@72.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_112 = io_spi_cmd == <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 164:22:@95.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_114 = value &gt;= <span class="hljs-number">5'h10</span>; <span class="hljs-comment">// @[UIntTypeClass.scala 55:50:@97.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_117 = <span class="hljs-number">_</span>T_114 &amp; spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 165:60:@99.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_118 = spi_miso_reg[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[SPIDriver.scala 166:41:@101.10]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_119 = &#123;<span class="hljs-number">_</span>T_118,io_spi_miso&#125;; <span class="hljs-comment">// @[Cat.scala 30:58:@102.10]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_8 = <span class="hljs-number">_</span>T_117 ? <span class="hljs-number">_</span>T_119 : spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 165:84:@100.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_9 = <span class="hljs-number">_</span>T_112 ? <span class="hljs-number">_</span>GEN_8 : spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 164:31:@96.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_10 = <span class="hljs-number">_</span>T_53 ? <span class="hljs-number">_</span>GEN_9 : <span class="hljs-number">8'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 163:53:@94.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_130 = <span class="hljs-number">_</span>T_112 &amp; spicnt_wrap; <span class="hljs-comment">// @[SPIDriver.scala 174:29:@116.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_11 = <span class="hljs-number">_</span>T_130 ? <span class="hljs-number">1'h1</span> : spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 174:56:@117.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_133 = io_spi_start == <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 177:24:@122.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_12 = <span class="hljs-number">_</span>T_133 ? <span class="hljs-number">1'h0</span> : spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 177:33:@123.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_13 = <span class="hljs-number">_</span>T_53 ? <span class="hljs-number">_</span>GEN_11 : <span class="hljs-number">_</span>GEN_12; <span class="hljs-comment">// @[SPIDriver.scala 173:53:@113.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_rdata = spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 184:16:@130.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_rdvld = spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 185:16:@131.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_clk = spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 182:16:@128.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_cs_n = ~ spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 181:16:@127.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_mosi = spi_mosi_reg; <span class="hljs-comment">// @[SPIDriver.scala 183:16:@129.4]</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_GARBAGE_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_INVALID_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_MEM_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> RANDOM</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOM $random</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE</span><br>  <span class="hljs-keyword">integer</span> initvar;<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> INIT_RANDOM</span><br>      <span class="hljs-meta">`INIT_RANDOM</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> VERILATOR</span><br>      #<span class="hljs-number">0</span><span class="hljs-variable">.002</span> <span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_0 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spiseq_vld_reg = <span class="hljs-number">_</span>RAND_0[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_1 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_clk_reg = <span class="hljs-number">_</span>RAND_1[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_2 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_mosi_reg = <span class="hljs-number">_</span>RAND_2[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_3 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_rdvld_reg = <span class="hljs-number">_</span>RAND_3[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_4 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_miso_reg = <span class="hljs-number">_</span>RAND_4[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_5 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  value = <span class="hljs-number">_</span>RAND_5[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_6 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spicntx2_reg = <span class="hljs-number">_</span>RAND_6[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE</span><br>  <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clock) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spiseq_vld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (io_spi_start) <span class="hljs-keyword">begin</span><br>        spiseq_vld_reg &lt;= <span class="hljs-number">1'h1</span>;<br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (spicnt_wrap) <span class="hljs-keyword">begin</span><br>          spiseq_vld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_clk_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_56) <span class="hljs-keyword">begin</span><br>        spi_clk_reg &lt;= <span class="hljs-number">_</span>T_57;<br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        spi_clk_reg &lt;= <span class="hljs-number">1'h0</span>;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_mosi_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_71) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (io_spi_cmd) <span class="hljs-keyword">begin</span><br>          spi_mosi_reg &lt;= <span class="hljs-number">_</span>T_99;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>          spi_mosi_reg &lt;= <span class="hljs-number">_</span>T_105;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_rdvld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_53) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_130) <span class="hljs-keyword">begin</span><br>          spi_rdvld_reg &lt;= <span class="hljs-number">1'h1</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_133) <span class="hljs-keyword">begin</span><br>          spi_rdvld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_miso_reg &lt;= <span class="hljs-number">8'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_53) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_112) <span class="hljs-keyword">begin</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_117) <span class="hljs-keyword">begin</span><br>            spi_miso_reg &lt;= <span class="hljs-number">_</span>T_119;<br>          <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        spi_miso_reg &lt;= <span class="hljs-number">8'h0</span>;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      value &lt;= <span class="hljs-number">5'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (spiseq_vld_reg) <span class="hljs-keyword">begin</span><br>        value &lt;= <span class="hljs-number">_</span>T_42;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spicntx2_reg &lt;= <span class="hljs-number">4'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_71) <span class="hljs-keyword">begin</span><br>        spicntx2_reg &lt;= <span class="hljs-number">_</span>T_74;<br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (spicnt_wrap) <span class="hljs-keyword">begin</span><br>          spicntx2_reg &lt;= <span class="hljs-number">4'h0</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="仿真波形"><a href="#仿真波形" class="headerlink" title="仿真波形"></a>仿真波形</h4><p><img src="/2019/07/11/尝试用Chisel写个SpiMaster/spi1.jpg" alt="spi1"></p><h4 id="生成的SpiMaster-Verilog代码ADDR-15bits-DATA-16bits"><a href="#生成的SpiMaster-Verilog代码ADDR-15bits-DATA-16bits" class="headerlink" title="生成的SpiMaster Verilog代码ADDR=15bits,DATA=16bits"></a>生成的SpiMaster Verilog代码ADDR=15bits,DATA=16bits</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> SpiMaster( <span class="hljs-comment">// @[:@3.2]</span><br>  <span class="hljs-keyword">input</span>         clock, <span class="hljs-comment">// @[:@4.4]</span><br>  <span class="hljs-keyword">input</span>         reset, <span class="hljs-comment">// @[:@5.4]</span><br>  <span class="hljs-keyword">input</span>         io_spi_start, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>         io_spi_cmd, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">14</span>:<span class="hljs-number">0</span>] io_spi_addr, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] io_spi_wdata, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] io_spi_rdata, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>        io_spi_rdvld, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>        io_spi_clk, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>        io_spi_cs_n, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span>        io_spi_mosi, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>         io_spi_miso <span class="hljs-comment">// @[:@6.4]</span><br>);<br>  <span class="hljs-keyword">reg</span>  spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@8.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_0;<br>  <span class="hljs-keyword">reg</span>  spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@9.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_1;<br>  <span class="hljs-keyword">reg</span>  spi_mosi_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@10.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_2;<br>  <span class="hljs-keyword">reg</span>  spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 127:60:@11.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_3;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 128:30:@12.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_4;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] value; <span class="hljs-comment">// @[Counter.scala 26:33:@14.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_5;<br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_39; <span class="hljs-comment">// @[Counter.scala 34:24:@16.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_41; <span class="hljs-comment">// @[Counter.scala 35:22:@17.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_42; <span class="hljs-comment">// @[Counter.scala 35:22:@18.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_0; <span class="hljs-comment">// @[Counter.scala 63:17:@15.4]</span><br>  <span class="hljs-keyword">wire</span>  spicnt_wrap; <span class="hljs-comment">// @[Counter.scala 64:20:@21.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_1; <span class="hljs-comment">// @[SPIDriver.scala 135:38:@28.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_2; <span class="hljs-comment">// @[SPIDriver.scala 133:27:@23.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_53; <span class="hljs-comment">// @[SPIDriver.scala 139:27:@33.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_55; <span class="hljs-comment">// @[SPIDriver.scala 139:65:@34.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_56; <span class="hljs-comment">// @[SPIDriver.scala 139:54:@35.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_57; <span class="hljs-comment">// @[SPIDriver.scala 140:20:@37.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_3; <span class="hljs-comment">// @[SPIDriver.scala 139:92:@36.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] spicntx2_reg; <span class="hljs-comment">// @[SPIDriver.scala 145:29:@43.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_6;<br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_66; <span class="hljs-comment">// @[SPIDriver.scala 146:69:@46.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_67; <span class="hljs-comment">// @[SPIDriver.scala 146:54:@47.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_69; <span class="hljs-comment">// @[SPIDriver.scala 146:92:@48.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_70; <span class="hljs-comment">// @[SPIDriver.scala 146:77:@49.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_71; <span class="hljs-comment">// @[SPIDriver.scala 146:26:@50.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_73; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@52.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_74; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@53.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_4; <span class="hljs-comment">// @[SPIDriver.scala 148:38:@58.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_5; <span class="hljs-comment">// @[SPIDriver.scala 146:106:@51.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] spi_shift_wdata; <span class="hljs-comment">// @[Cat.scala 30:58:@62.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] spi_shift_rdata; <span class="hljs-comment">// @[Cat.scala 30:58:@64.4]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_95; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@75.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">5</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_96; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@76.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_97; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@77.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_98; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@78.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_99; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@79.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_104; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@86.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_105; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@87.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_6; <span class="hljs-comment">// @[SPIDriver.scala 156:30:@74.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_7; <span class="hljs-comment">// @[SPIDriver.scala 155:104:@72.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_112; <span class="hljs-comment">// @[SPIDriver.scala 164:22:@95.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_114; <span class="hljs-comment">// @[UIntTypeClass.scala 55:50:@97.8]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_117; <span class="hljs-comment">// @[SPIDriver.scala 165:60:@99.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">14</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_118; <span class="hljs-comment">// @[SPIDriver.scala 166:41:@101.10]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_119; <span class="hljs-comment">// @[Cat.scala 30:58:@102.10]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_8; <span class="hljs-comment">// @[SPIDriver.scala 165:84:@100.8]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_9; <span class="hljs-comment">// @[SPIDriver.scala 164:31:@96.6]</span><br>  <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>GEN_10; <span class="hljs-comment">// @[SPIDriver.scala 163:53:@94.4]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_130; <span class="hljs-comment">// @[SPIDriver.scala 174:29:@116.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_11; <span class="hljs-comment">// @[SPIDriver.scala 174:56:@117.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>T_133; <span class="hljs-comment">// @[SPIDriver.scala 177:24:@122.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_12; <span class="hljs-comment">// @[SPIDriver.scala 177:33:@123.6]</span><br>  <span class="hljs-keyword">wire</span>  <span class="hljs-number">_</span>GEN_13; <span class="hljs-comment">// @[SPIDriver.scala 173:53:@113.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_39 = value == <span class="hljs-number">6'h3f</span>; <span class="hljs-comment">// @[Counter.scala 34:24:@16.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_41 = value + <span class="hljs-number">6'h1</span>; <span class="hljs-comment">// @[Counter.scala 35:22:@17.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_42 = value + <span class="hljs-number">6'h1</span>; <span class="hljs-comment">// @[Counter.scala 35:22:@18.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_0 = spiseq_vld_reg ? <span class="hljs-number">_</span>T_42 : value; <span class="hljs-comment">// @[Counter.scala 63:17:@15.4]</span><br>  <span class="hljs-keyword">assign</span> spicnt_wrap = spiseq_vld_reg &amp; <span class="hljs-number">_</span>T_39; <span class="hljs-comment">// @[Counter.scala 64:20:@21.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_1 = spicnt_wrap ? <span class="hljs-number">1'h0</span> : spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 135:38:@28.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_2 = io_spi_start ? <span class="hljs-number">1'h1</span> : <span class="hljs-number">_</span>GEN_1; <span class="hljs-comment">// @[SPIDriver.scala 133:27:@23.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_53 = io_spi_start | spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 139:27:@33.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_55 = value != <span class="hljs-number">6'h3f</span>; <span class="hljs-comment">// @[SPIDriver.scala 139:65:@34.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_56 = <span class="hljs-number">_</span>T_53 &amp; <span class="hljs-number">_</span>T_55; <span class="hljs-comment">// @[SPIDriver.scala 139:54:@35.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_57 = ~ spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 140:20:@37.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_3 = <span class="hljs-number">_</span>T_56 ? <span class="hljs-number">_</span>T_57 : <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 139:92:@36.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_66 = spi_clk_reg == <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 146:69:@46.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_67 = spiseq_vld_reg &amp; <span class="hljs-number">_</span>T_66; <span class="hljs-comment">// @[SPIDriver.scala 146:54:@47.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_69 = spicnt_wrap != <span class="hljs-number">1'h1</span>; <span class="hljs-comment">// @[SPIDriver.scala 146:92:@48.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_70 = <span class="hljs-number">_</span>T_67 &amp; <span class="hljs-number">_</span>T_69; <span class="hljs-comment">// @[SPIDriver.scala 146:77:@49.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_71 = io_spi_start | <span class="hljs-number">_</span>T_70; <span class="hljs-comment">// @[SPIDriver.scala 146:26:@50.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_73 = spicntx2_reg + <span class="hljs-number">5'h1</span>; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@52.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_74 = spicntx2_reg + <span class="hljs-number">5'h1</span>; <span class="hljs-comment">// @[SPIDriver.scala 147:34:@53.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_4 = spicnt_wrap ? <span class="hljs-number">5'h0</span> : spicntx2_reg; <span class="hljs-comment">// @[SPIDriver.scala 148:38:@58.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_5 = <span class="hljs-number">_</span>T_71 ? <span class="hljs-number">_</span>T_74 : <span class="hljs-number">_</span>GEN_4; <span class="hljs-comment">// @[SPIDriver.scala 146:106:@51.4]</span><br>  <span class="hljs-keyword">assign</span> spi_shift_wdata = &#123;io_spi_cmd,io_spi_addr,io_spi_wdata&#125;; <span class="hljs-comment">// @[Cat.scala 30:58:@62.4]</span><br>  <span class="hljs-keyword">assign</span> spi_shift_rdata = &#123;io_spi_cmd,io_spi_addr,<span class="hljs-number">16'h0</span>&#125;; <span class="hljs-comment">// @[Cat.scala 30:58:@64.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_95 = <span class="hljs-number">5'h1f</span> - spicntx2_reg; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@75.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_96 = <span class="hljs-built_in">$unsigned</span>(<span class="hljs-number">_</span>T_95); <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@76.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_97 = <span class="hljs-number">_</span>T_96[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[UIntTypeClass.scala 28:50:@77.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_98 = spi_shift_wdata &gt;&gt; <span class="hljs-number">_</span>T_97; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@78.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_99 = <span class="hljs-number">_</span>T_98[<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[SPIDriver.scala 157:38:@79.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_104 = spi_shift_rdata &gt;&gt; <span class="hljs-number">_</span>T_97; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@86.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_105 = <span class="hljs-number">_</span>T_104[<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[SPIDriver.scala 159:37:@87.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_6 = io_spi_cmd ? <span class="hljs-number">_</span>T_99 : <span class="hljs-number">_</span>T_105; <span class="hljs-comment">// @[SPIDriver.scala 156:30:@74.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_7 = <span class="hljs-number">_</span>T_71 ? <span class="hljs-number">_</span>GEN_6 : spi_mosi_reg; <span class="hljs-comment">// @[SPIDriver.scala 155:104:@72.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_112 = io_spi_cmd == <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 164:22:@95.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_114 = value &gt;= <span class="hljs-number">6'h20</span>; <span class="hljs-comment">// @[UIntTypeClass.scala 55:50:@97.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_117 = <span class="hljs-number">_</span>T_114 &amp; spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 165:60:@99.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_118 = spi_miso_reg[<span class="hljs-number">14</span>:<span class="hljs-number">0</span>]; <span class="hljs-comment">// @[SPIDriver.scala 166:41:@101.10]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_119 = &#123;<span class="hljs-number">_</span>T_118,io_spi_miso&#125;; <span class="hljs-comment">// @[Cat.scala 30:58:@102.10]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_8 = <span class="hljs-number">_</span>T_117 ? <span class="hljs-number">_</span>T_119 : spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 165:84:@100.8]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_9 = <span class="hljs-number">_</span>T_112 ? <span class="hljs-number">_</span>GEN_8 : spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 164:31:@96.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_10 = <span class="hljs-number">_</span>T_53 ? <span class="hljs-number">_</span>GEN_9 : <span class="hljs-number">16'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 163:53:@94.4]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_130 = <span class="hljs-number">_</span>T_112 &amp; spicnt_wrap; <span class="hljs-comment">// @[SPIDriver.scala 174:29:@116.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_11 = <span class="hljs-number">_</span>T_130 ? <span class="hljs-number">1'h1</span> : spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 174:56:@117.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>T_133 = io_spi_start == <span class="hljs-number">1'h0</span>; <span class="hljs-comment">// @[SPIDriver.scala 177:24:@122.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_12 = <span class="hljs-number">_</span>T_133 ? <span class="hljs-number">1'h0</span> : spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 177:33:@123.6]</span><br>  <span class="hljs-keyword">assign</span> <span class="hljs-number">_</span>GEN_13 = <span class="hljs-number">_</span>T_53 ? <span class="hljs-number">_</span>GEN_11 : <span class="hljs-number">_</span>GEN_12; <span class="hljs-comment">// @[SPIDriver.scala 173:53:@113.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_rdata = spi_miso_reg; <span class="hljs-comment">// @[SPIDriver.scala 184:16:@130.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_rdvld = spi_rdvld_reg; <span class="hljs-comment">// @[SPIDriver.scala 185:16:@131.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_clk = spi_clk_reg; <span class="hljs-comment">// @[SPIDriver.scala 182:16:@128.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_cs_n = ~ spiseq_vld_reg; <span class="hljs-comment">// @[SPIDriver.scala 181:16:@127.4]</span><br>  <span class="hljs-keyword">assign</span> io_spi_mosi = spi_mosi_reg; <span class="hljs-comment">// @[SPIDriver.scala 183:16:@129.4]</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_GARBAGE_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_INVALID_ASSIGN</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_MEM_INIT</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOMIZE</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> RANDOM</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> RANDOM $random</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE</span><br>  <span class="hljs-keyword">integer</span> initvar;<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> INIT_RANDOM</span><br>      <span class="hljs-meta">`INIT_RANDOM</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">ifndef</span> VERILATOR</span><br>      #<span class="hljs-number">0</span><span class="hljs-variable">.002</span> <span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_0 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spiseq_vld_reg = <span class="hljs-number">_</span>RAND_0[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_1 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_clk_reg = <span class="hljs-number">_</span>RAND_1[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_2 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_mosi_reg = <span class="hljs-number">_</span>RAND_2[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_3 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_rdvld_reg = <span class="hljs-number">_</span>RAND_3[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_4 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spi_miso_reg = <span class="hljs-number">_</span>RAND_4[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_5 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  value = <span class="hljs-number">_</span>RAND_5[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> RANDOMIZE_REG_INIT</span><br>  <span class="hljs-number">_</span>RAND_6 = &#123;<span class="hljs-number">1</span>&#123;<span class="hljs-meta">`RANDOM&#125;&#125;;</span><br>  spicntx2_reg = <span class="hljs-number">_</span>RAND_6[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>];<br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE_REG_INIT</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span> // RANDOMIZE</span><br>  <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clock) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spiseq_vld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (io_spi_start) <span class="hljs-keyword">begin</span><br>        spiseq_vld_reg &lt;= <span class="hljs-number">1'h1</span>;<br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (spicnt_wrap) <span class="hljs-keyword">begin</span><br>          spiseq_vld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_clk_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_56) <span class="hljs-keyword">begin</span><br>        spi_clk_reg &lt;= <span class="hljs-number">_</span>T_57;<br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        spi_clk_reg &lt;= <span class="hljs-number">1'h0</span>;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_mosi_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_71) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (io_spi_cmd) <span class="hljs-keyword">begin</span><br>          spi_mosi_reg &lt;= <span class="hljs-number">_</span>T_99;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>          spi_mosi_reg &lt;= <span class="hljs-number">_</span>T_105;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_rdvld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_53) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_130) <span class="hljs-keyword">begin</span><br>          spi_rdvld_reg &lt;= <span class="hljs-number">1'h1</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_133) <span class="hljs-keyword">begin</span><br>          spi_rdvld_reg &lt;= <span class="hljs-number">1'h0</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spi_miso_reg &lt;= <span class="hljs-number">16'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_53) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_112) <span class="hljs-keyword">begin</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_117) <span class="hljs-keyword">begin</span><br>            spi_miso_reg &lt;= <span class="hljs-number">_</span>T_119;<br>          <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        spi_miso_reg &lt;= <span class="hljs-number">16'h0</span>;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      value &lt;= <span class="hljs-number">6'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (spiseq_vld_reg) <span class="hljs-keyword">begin</span><br>        value &lt;= <span class="hljs-number">_</span>T_42;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      spicntx2_reg &lt;= <span class="hljs-number">5'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">_</span>T_71) <span class="hljs-keyword">begin</span><br>        spicntx2_reg &lt;= <span class="hljs-number">_</span>T_74;<br>      <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (spicnt_wrap) <span class="hljs-keyword">begin</span><br>          spicntx2_reg &lt;= <span class="hljs-number">5'h0</span>;<br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="仿真波形-1"><a href="#仿真波形-1" class="headerlink" title="仿真波形"></a>仿真波形</h4><p><img src="/2019/07/11/尝试用Chisel写个SpiMaster/spi2.jpg" alt="spi2"></p><h4 id="DVer工作量不少反增加"><a href="#DVer工作量不少反增加" class="headerlink" title="DVer工作量不少反增加~~~"></a>DVer工作量不少反增加~~~</h4>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chisel硬件构建语言入门</title>
      <link href="/2019/07/10/Chisel%E7%A1%AC%E4%BB%B6%E6%9E%84%E5%BB%BA%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
      <url>/2019/07/10/Chisel%E7%A1%AC%E4%BB%B6%E6%9E%84%E5%BB%BA%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="Scala-难度接近C艹优雅度超Python的语言我就不多说了"><a href="#Scala-难度接近C艹优雅度超Python的语言我就不多说了" class="headerlink" title="Scala 难度接近C艹优雅度超Python的语言我就不多说了~"></a>Scala 难度接近C艹优雅度超Python的语言我就不多说了~</h4><h4 id="新建Chisel项目-转"><a href="#新建Chisel项目-转" class="headerlink" title="新建Chisel项目(转)"></a>新建Chisel项目(转)</h4><ul><li><p>方式一<br>将如下链接中的项目下载至本地。<br><a href="https://github.com/freechipsproject/chisel-template" target="_blank" rel="noopener">enter description here</a><br>更改工程名称。<br>删除.git，并将build.sbt中的name改成自己项目的名称。<br>删除source&gt;main&gt;scala中的文件和source&gt;test&gt;scala中的文件。<br>得到纯净版。</p></li><li><p>方式二<br>新建scala项目，选择sbt<br>scala版本选择2.11.12,sbt版本随意<br>将下方sbt替换build.sbt</p></li></ul><p><em>build.sbt</em><br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scalacOptionsVersion</span></span>(scalaVersion: <span class="hljs-type">String</span>): <span class="hljs-type">Seq</span>[<span class="hljs-type">String</span>] = &#123;<br>  <span class="hljs-type">Seq</span>() ++ &#123;<br>    <span class="hljs-comment">// If we're building with Scala &gt; 2.11, enable the compile option</span><br>    <span class="hljs-comment">//  switch to support our anonymous Bundle definitions:</span><br>    <span class="hljs-comment">//  https://github.com/scala/bug/issues/10047</span><br>    <span class="hljs-type">CrossVersion</span>.partialVersion(scalaVersion) <span class="hljs-keyword">match</span> &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-type">Some</span>((<span class="hljs-number">2</span>, scalaMajor: <span class="hljs-type">Long</span>)) <span class="hljs-keyword">if</span> scalaMajor &lt; <span class="hljs-number">12</span> =&gt; <span class="hljs-type">Seq</span>()<br>      <span class="hljs-keyword">case</span> _ =&gt; <span class="hljs-type">Seq</span>(<span class="hljs-string">"-Xsource:2.11"</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">javacOptionsVersion</span></span>(scalaVersion: <span class="hljs-type">String</span>): <span class="hljs-type">Seq</span>[<span class="hljs-type">String</span>] = &#123;<br>  <span class="hljs-type">Seq</span>() ++ &#123;<br>    <span class="hljs-comment">// Scala 2.12 requires Java 8. We continue to generate</span><br>    <span class="hljs-comment">//  Java 7 compatible code for Scala 2.11</span><br>    <span class="hljs-comment">//  for compatibility with old clients.</span><br>    <span class="hljs-type">CrossVersion</span>.partialVersion(scalaVersion) <span class="hljs-keyword">match</span> &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-type">Some</span>((<span class="hljs-number">2</span>, scalaMajor: <span class="hljs-type">Long</span>)) <span class="hljs-keyword">if</span> scalaMajor &lt; <span class="hljs-number">12</span> =&gt;<br>        <span class="hljs-type">Seq</span>(<span class="hljs-string">"-source"</span>, <span class="hljs-string">"1.7"</span>, <span class="hljs-string">"-target"</span>, <span class="hljs-string">"1.7"</span>)<br>      <span class="hljs-keyword">case</span> _ =&gt;<br>        <span class="hljs-type">Seq</span>(<span class="hljs-string">"-source"</span>, <span class="hljs-string">"1.8"</span>, <span class="hljs-string">"-target"</span>, <span class="hljs-string">"1.8"</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br>name := <span class="hljs-string">"Module-2.1"</span><span class="hljs-comment">//项目名称</span><br>version := <span class="hljs-string">"0.1"</span><span class="hljs-comment">//自己给项目起的版本号</span><br>scalaVersion := <span class="hljs-string">"2.11.12"</span><span class="hljs-comment">//scala版本</span><br>crossScalaVersions := <span class="hljs-type">Seq</span>(<span class="hljs-string">"2.11.12"</span>, <span class="hljs-string">"2.12.4"</span>)<span class="hljs-comment">//scala版本的扩充</span><br>resolvers ++= <span class="hljs-type">Seq</span>(<br>  <span class="hljs-type">Resolver</span>.sonatypeRepo(<span class="hljs-string">"snapshots"</span>),<br>  <span class="hljs-type">Resolver</span>.sonatypeRepo(<span class="hljs-string">"releases"</span>)<br>)<br><span class="hljs-comment">// Provide a managed dependency on X if -DXVersion="" is supplied on the command line.</span><br><span class="hljs-keyword">val</span> defaultVersions = <span class="hljs-type">Map</span>(<br>  <span class="hljs-string">"chisel3"</span> -&gt; <span class="hljs-string">"3.1.+"</span>,<br>  <span class="hljs-string">"chisel-iotesters"</span> -&gt; <span class="hljs-string">"1.2.5+"</span><br>)<br><br>libraryDependencies ++= <span class="hljs-type">Seq</span>(<span class="hljs-string">"chisel3"</span>,<span class="hljs-string">"chisel-iotesters"</span>).map &#123;<br>  dep: <span class="hljs-type">String</span> =&gt; <span class="hljs-string">"edu.berkeley.cs"</span> %% dep % sys.props.getOrElse(dep + <span class="hljs-string">"Version"</span>, defaultVersions(dep)) &#125;<br><br>scalacOptions ++= scalacOptionsVersion(scalaVersion.value)<br>javacOptions ++= javacOptionsVersion(scalaVersion.value)<br></code></pre></td></tr></table></figure></p><h4 id="Chisel例子、测试、verilog生成"><a href="#Chisel例子、测试、verilog生成" class="headerlink" title="Chisel例子、测试、verilog生成"></a>Chisel例子、测试、verilog生成</h4><ul><li><p>样例模块</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> <span class="hljs-type">Passthrough</span><br><span class="hljs-keyword">import</span> chisel3._<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MAC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span></span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span>&#123;<br>    <span class="hljs-keyword">val</span> in_a = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in_b = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in_c = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">8.</span><span class="hljs-type">W</span>))<br>  &#125;)<br><br>  io.out := io.in_a * io.in_b + io.in_c<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对模块进行测试</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> <span class="hljs-type">Passthrough</span><br><span class="hljs-keyword">import</span> chisel3._<br><span class="hljs-keyword">import</span> chisel3.iotesters.&#123;<span class="hljs-type">Driver</span>, <span class="hljs-type">PeekPokeTester</span>&#125;<br><br><span class="hljs-comment">//测试样例如下所示</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MACTester</span>(<span class="hljs-params">c: <span class="hljs-type">MAC</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">PeekPokeTester</span>(<span class="hljs-params">c</span>) </span>&#123;<br>  <span class="hljs-keyword">val</span> cycles = <span class="hljs-number">100</span><br>  <span class="hljs-keyword">import</span> scala.util.<span class="hljs-type">Random</span><br>  <span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">0</span> until cycles) &#123;<br>    <span class="hljs-keyword">val</span> in_a = <span class="hljs-type">Random</span>.nextInt(<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">val</span> in_b = <span class="hljs-type">Random</span>.nextInt(<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">val</span> in_c = <span class="hljs-type">Random</span>.nextInt(<span class="hljs-number">16</span>)<br>    poke(c.io.in_a, in_a)<br>    poke(c.io.in_b, in_b)<br>    poke(c.io.in_c, in_c)<br>    expect(c.io.out, in_a*in_b+in_c)<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">//测试类如下所示</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>assert(<span class="hljs-type">Driver</span>(() =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">MAC</span>) &#123;c =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">MACTester</span>(c)&#125;)<br>println(<span class="hljs-string">"SUCCESS!!"</span>)<br>&#125;<br><br><span class="hljs-comment">//运行测试</span><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">RunAppDemo</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args:<span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]) &#123;<br>    <span class="hljs-keyword">new</span> test<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>转换成verilog<br>经过测试后，将上述模块转换生成verilog的代码如下</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    println(<span class="hljs-string">"Generating the Adder hardware"</span>)<br>    chisel3.<span class="hljs-type">Driver</span>.execute(<span class="hljs-type">Array</span>(<span class="hljs-string">"--target-dir"</span>, <span class="hljs-string">"generated"</span>), () =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">MAC</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Chisel中的组合逻辑"><a href="#Chisel中的组合逻辑" class="headerlink" title="Chisel中的组合逻辑"></a>Chisel中的组合逻辑</h4><ul><li>Input与Output<br>Chisel中的所有类都要继承Module。<br>类中必须要定义io类型，用来表示该模块的输入输出端口。<br>每一个输入输出端口，需要说明是有符号数还是无符号数，以及数据位宽。</li></ul><p>class MyOperatorsTwo extends Module {<br>  val io = IO(new Bundle {<br>    val in      = Input(UInt(4.W))<br>    val out_mux = Output(UInt(4.W))<br>    val out_cat = Output(UInt(4.W))<br>  })<br>}</p><p>class MyOperators(val length : Int) extends Module {<br>  val io = IO(new Bundle {<br>    val in      = Input(UInt(length.W))<br>    val out_mux = Output(UInt(length.W))<br>    val out_cat = Output(UInt(length.W))<br>  })<br>}</p><ul><li>数据类型与赋值<br>Chisel中所有的变量只能用val，不能用var。<br>Chisel中的数据类型有UInt,SInt,Bool，并且Chisel中的数据类型只能和Chisel中的数据类型进行运算，因此运算时如果需要操作常数，需写成2.U的形式。<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyOperators</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in      = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out_add = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out_sub = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out_mul = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>  &#125;)<br><br>  <span class="hljs-keyword">val</span> s = <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.out_add := <span class="hljs-number">1.</span><span class="hljs-type">U</span> + <span class="hljs-number">4.</span><span class="hljs-type">U</span><br>  io.out_sub := <span class="hljs-number">2.</span><span class="hljs-type">U</span> - <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>  io.out_mul := <span class="hljs-number">4.</span><span class="hljs-type">U</span> * <span class="hljs-number">2.</span><span class="hljs-type">U</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>在变量初始化时使用等号，在赋值时使用:=，代表左侧变量由右侧表达式驱动<br>另外scala中提供比较常见的如多选器，连接器<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> s = <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>io.out_mux := <span class="hljs-type">Mux</span>(s, <span class="hljs-number">3.</span><span class="hljs-type">U</span>, <span class="hljs-number">0.</span><span class="hljs-type">U</span>) <br>io.out_cat := <span class="hljs-type">Cat</span>(<span class="hljs-number">2.</span><span class="hljs-type">U</span>, <span class="hljs-number">1.</span><span class="hljs-type">U</span>)<br></code></pre></td></tr></table></figure></p><p>对于加法运算，Chisel提供了两种加法运算，+&amp;表示会保留进位，+不保留进位</p><ul><li>控制语句<br>如果有多条赋值语句驱动相同左侧变量，则选择最后一个，如下:<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LastConnect</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">4.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  io.out := <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>  io.out := <span class="hljs-number">2.</span><span class="hljs-type">U</span><br>  io.out := <span class="hljs-number">3.</span><span class="hljs-type">U</span><br>  io.out := <span class="hljs-number">4.</span><span class="hljs-type">U</span><span class="hljs-comment">//编译器选择这一条</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>when, elsewhen, otherwise<br>Chisel中提供条件语句when, elsewhen和otherwise<br>使用方式和if-else语句一样<br>语法如下：</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala">when(someBooleanCondition) &#123;<br>  <span class="hljs-comment">// things to do when true</span><br>&#125;.elsewhen(someOtherBooleanCondition) &#123;<br>  <span class="hljs-comment">// things to do on this condition</span><br>&#125;.otherwise &#123;<br>  <span class="hljs-comment">// things to do if none of th boolean conditions are true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例如下：<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Max3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in1 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in2 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in3 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>    <br>  when(io.in1 &gt; io.in2 &amp;&amp; io.in1 &gt; io.in3) &#123;<br>    io.out := io.in1  <br>  &#125;.elsewhen(io.in2 &gt; io.in1 &amp;&amp; io.in2 &gt; io.in3) &#123;<br>    io.out := io.in2 <br>  &#125;.otherwise &#123;<br>    io.out := io.in3<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>需要注意的是，Chisel中的条件语句不像scala中的那样，最后一行为返回值<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> result = when(squareIt) &#123; x * x &#125;.otherwise &#123; x &#125;<br></code></pre></td></tr></table></figure></p><h4 id="Chisel中的时序逻辑"><a href="#Chisel中的时序逻辑" class="headerlink" title="Chisel中的时序逻辑"></a>Chisel中的时序逻辑</h4><ul><li>寄存器reg<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> register = <span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in  = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <br>  <span class="hljs-keyword">val</span> register = <span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>  register := io.in + <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>  io.out := register<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>还可以通过RegNext来实例化出来一个寄存器<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegNextModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in  = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <br>  <span class="hljs-comment">// register bitwidth is inferred from io.out</span><br>  io.out := <span class="hljs-type">RegNext</span>(io.in + <span class="hljs-number">1.</span><span class="hljs-type">U</span>)<br>&#125;<br></code></pre></td></tr></table></figure></p><p>step(n)可以改变n次时钟，常用于测试中<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterModuleTester</span>(<span class="hljs-params">c: <span class="hljs-type">RegisterModule</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">PeekPokeTester</span>(<span class="hljs-params">c</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">0</span> until <span class="hljs-number">100</span>) &#123;<br>    poke(c.io.in, i)<br>    step(<span class="hljs-number">1</span>)<br>    expect(c.io.out, i+<span class="hljs-number">1</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>可以通过RegInit来让寄存器中初始附带特定值<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> myReg = <span class="hljs-type">RegInit</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>), <span class="hljs-number">0.</span><span class="hljs-type">U</span>)<br><span class="hljs-keyword">val</span> myReg = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br></code></pre></td></tr></table></figure></p><p>有如下例子<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala">classclass  <span class="hljs-type">RegInitModuleRegInit</span>  <span class="hljs-keyword">extends</span> <span class="hljs-type">Module</span> &#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in  = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <br>  <span class="hljs-keyword">val</span> register = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">12.</span><span class="hljs-type">W</span>))<br>  register := io.in + <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>  io.out := register<br>&#125;<br></code></pre></td></tr></table></figure></p><p>必须要使用RegInit，否则寄存器里的初值未知<br>可以在测试时使用reset(n)来使reset信号有效n个周期</p><ul><li>精确时钟和复位<br>Chisel中对于寄存器有默认的同步复位reset和时钟clk，但如果想自己加入额外的复位信号和额外的时钟信号，就要用到withClock/withReset/withClockAndReset。<br>withClock(a){}意味着在a的上升沿会触发什么。<br>withReset(a){}意味着在标准时钟上升沿a有效时复位。<br>withClockAndReset(a,b){}意味着在a的上升沿,b有效时复位。<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClockExamples</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">10.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> alternateReset    = <span class="hljs-type">Input</span>(<span class="hljs-type">Bool</span>())<br>    <span class="hljs-keyword">val</span> alternateClock    = <span class="hljs-type">Input</span>(<span class="hljs-type">Clock</span>())<br>    <span class="hljs-keyword">val</span> outImplicit       = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>())<br>    <span class="hljs-keyword">val</span> outAlternateReset = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>())<br>    <span class="hljs-keyword">val</span> outAlternateClock = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>())<br>    <span class="hljs-keyword">val</span> outAlternateBoth  = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>())<br>  &#125;)<br><br>  <span class="hljs-keyword">val</span> imp = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">10.</span><span class="hljs-type">W</span>))<br>  imp := io.in<br>  io.outImplicit := imp<br><br>  withReset(io.alternateReset) &#123;<br>    <span class="hljs-comment">// everything in this scope with have alternateReset as the reset</span><br>    <span class="hljs-keyword">val</span> altRst = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">10.</span><span class="hljs-type">W</span>))<br>    altRst := io.in<br>    io.outAlternateReset := altRst<br>  &#125;<br><br>  withClock(io.alternateClock) &#123;<br>    <span class="hljs-keyword">val</span> altClk = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">10.</span><span class="hljs-type">W</span>))<br>    altClk := io.in<br>    io.outAlternateClock := altClk<br>  &#125;<br><br>  withClockAndReset(io.alternateClock, io.alternateReset) &#123;<br>    <span class="hljs-keyword">val</span> alt = <span class="hljs-type">RegInit</span>(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">10.</span><span class="hljs-type">W</span>))<br>    alt := io.in<br>    io.outAlternateBoth := alt<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>    println(<span class="hljs-string">"Generating the Adder hardware"</span>)<br>    chisel3.<span class="hljs-type">Driver</span>.execute(<span class="hljs-type">Array</span>(<span class="hljs-string">"--target-dir"</span>, <span class="hljs-string">"generated"</span>), () =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">ClockExamples</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>生成的verilog中相关部分如下<br><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> ClockExamples( <span class="hljs-comment">// @[:@3.2]</span><br>  <span class="hljs-keyword">input</span>        clock, <span class="hljs-comment">// @[:@4.4]</span><br>  <span class="hljs-keyword">input</span>        reset, <span class="hljs-comment">// @[:@5.4]</span><br>  <span class="hljs-keyword">input</span>  [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] io_in, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>        io_alternateReset, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">input</span>        io_alternateClock, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] io_outImplicit, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] io_outAlternateReset, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] io_outAlternateClock, <span class="hljs-comment">// @[:@6.4]</span><br>  <span class="hljs-keyword">output</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] io_outAlternateBoth <span class="hljs-comment">// @[:@6.4]</span><br>);<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] imp; <span class="hljs-comment">// @[Passthrough.scala 137:20:@8.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_0;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_23; <span class="hljs-comment">// @[Passthrough.scala 143:25:@11.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_1;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_26; <span class="hljs-comment">// @[Passthrough.scala 149:25:@14.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_2;<br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>T_29; <span class="hljs-comment">// @[Passthrough.scala 155:22:@17.4]</span><br>  <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] <span class="hljs-number">_</span>RAND_3;<br>  <span class="hljs-keyword">assign</span> io_outImplicit = imp; <span class="hljs-comment">// @[Passthrough.scala 139:18:@10.4]</span><br>  <span class="hljs-keyword">assign</span> io_outAlternateReset = <span class="hljs-number">_</span>T_23; <span class="hljs-comment">// @[Passthrough.scala 145:26:@13.4]</span><br>  <span class="hljs-keyword">assign</span> io_outAlternateClock = <span class="hljs-number">_</span>T_26; <span class="hljs-comment">// @[Passthrough.scala 151:26:@16.4]</span><br>  <span class="hljs-keyword">assign</span> io_outAlternateBoth = <span class="hljs-number">_</span>T_29; <span class="hljs-comment">// @[Passthrough.scala 157:25:@19.4]</span><br><br>  <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clock) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      imp &lt;= <span class="hljs-number">10'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      imp &lt;= io_in;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (io_alternateReset) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_23 &lt;= <span class="hljs-number">10'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_23 &lt;= io_in;<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> io_alternateClock) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_26 &lt;= <span class="hljs-number">10'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_26 &lt;= io_in;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> (io_alternateReset) <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_29 &lt;= <span class="hljs-number">10'h0</span>;<br>    <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>      <span class="hljs-number">_</span>T_29 &lt;= io_in;<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure></p><h4 id="Chisel中参数"><a href="#Chisel中参数" class="headerlink" title="Chisel中参数"></a>Chisel中参数</h4><ul><li>样例1<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala">classclass  <span class="hljs-type">ParameterizedWidthAdderParamet</span> (in0Width: <span class="hljs-type">Int</span>, in1Width: <span class="hljs-type">Int</span>, sumWidth: <span class="hljs-type">Int</span>) <span class="hljs-keyword">extends</span> <span class="hljs-type">Module</span> &#123;<br>  require(in0Width &gt;= <span class="hljs-number">0</span>)<br>  require(in1Width &gt;= <span class="hljs-number">0</span>)<br>  require(sumWidth &gt;= <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in0 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(in0Width.<span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> in1 = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(in1Width.<span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> sum = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(sumWidth.<span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-comment">// a +&amp; b 包括进位, a + b 则不包括</span><br>  io.sum := io.in0 +&amp; io.in1<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>上述样例中的require关键字表示对参数做了一些限制，这种操作在我们只想实例化某些特定情况的参数、者要保证参数互斥或有意义时使用</p><ul><li>可选或默认的参数<br>可选的参数可以通过Option关键字实现，观察如下代码<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelayBy1</span>(<span class="hljs-params">resetValue: <span class="hljs-type">Option</span>[<span class="hljs-type">UInt</span>] = <span class="hljs-type">None</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>    <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>        <span class="hljs-keyword">val</span> in  = <span class="hljs-type">Input</span>( <span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>        <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>    &#125;)<br>    <span class="hljs-keyword">val</span> reg = <span class="hljs-keyword">if</span> (resetValue.isDefined) &#123; <span class="hljs-comment">// resetValue = Some(number)</span><br>        <span class="hljs-type">RegInit</span>(resetValue.get)<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//resetValue = None</span><br>        <span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>())<br>    &#125;<br>    reg := io.in<br>    io.out := reg<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>利用Option类，实现可选的Chisel类生成，即当有初始设定值时,resetValue.isDefined为真，这样做可以使得代码更美观</p><ul><li>match/case语句<br>Scala中提供了类似于C语言的case语句，且提供了更加便捷的功能，包括异种类型变量的匹配，基本语法如下，下方代码将匹配到的值返回给x。<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> y = <span class="hljs-number">7</span><br><span class="hljs-comment">/// ...</span><br><span class="hljs-keyword">val</span> x = y <span class="hljs-keyword">match</span> &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> =&gt; <span class="hljs-string">"zero"</span> <span class="hljs-comment">// One common syntax, preferred if fits in one line</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> =&gt;        <span class="hljs-comment">// Another common syntax, preferred if does not fit in one line.</span><br>      <span class="hljs-string">"one"</span>        <span class="hljs-comment">// Note the code block continues until the next case</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> =&gt; &#123;      <span class="hljs-comment">// Another syntax, but curly braces are not required</span><br>      <span class="hljs-string">"two"</span><br>  &#125;<br>  <span class="hljs-keyword">case</span> _ =&gt; <span class="hljs-string">"many"</span> <span class="hljs-comment">// _ is a wildcard that matches all values</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>需要注意的是，case a =&gt;后为匹配到则执行的语句，且不会像c那样一直执行到底，执行完一个case就结束match。其次，match是顺序匹配的，从上向下一次匹配。case _ 代表其他情况。并且多个变量可以同时匹配，如下。<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span>  <span class="hljs-title">animalTypeanimalT</span> </span>(biggerThanBreadBox: <span class="hljs-type">Boolean</span>, meanAsCanBe: <span class="hljs-type">Boolean</span>): <span class="hljs-type">String</span> = &#123;<br>  (biggerThanBreadBox, meanAsCanBe) <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-keyword">case</span> (<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>) =&gt; <span class="hljs-string">"wolverine"</span><br>    <span class="hljs-keyword">case</span> (<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>) =&gt; <span class="hljs-string">"elephant"</span><br>    <span class="hljs-keyword">case</span> (<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>) =&gt; <span class="hljs-string">"shrew"</span><br>    <span class="hljs-keyword">case</span> (<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>) =&gt; <span class="hljs-string">"puppy"</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>Scala中的match也提供对类型的匹配<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> sequence = <span class="hljs-type">Seq</span>(<span class="hljs-string">"a"</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.0</span>)<br>sequence.foreach &#123; x =&gt;<br>  x <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-keyword">case</span> s: <span class="hljs-type">String</span> =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is a String"</span>)<br>    <span class="hljs-keyword">case</span> s: <span class="hljs-type">Int</span>    =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is an Int"</span>)<br>    <span class="hljs-keyword">case</span> s: <span class="hljs-type">Double</span> =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is a Double"</span>)<br>    <span class="hljs-keyword">case</span> _ =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is an unknown type!"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>如果想一次匹配多个类型，则需要这样写<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> sequence = <span class="hljs-type">Seq</span>(<span class="hljs-string">"a"</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.0</span>)<br>sequence.foreach &#123; x =&gt;<br>  x <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-keyword">case</span> _: <span class="hljs-type">Int</span> | _: <span class="hljs-type">Double</span> =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is a number!"</span>)<br>    <span class="hljs-keyword">case</span> _ =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is an unknown type!"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>但是对类型的匹配只能精确到最顶层，对下层类型的匹配是不允许的，比如下方代码就是不符合规则的，这叫做类型擦除。<br><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> sequence = <span class="hljs-type">Seq</span>(<span class="hljs-type">Seq</span>(<span class="hljs-string">"a"</span>), <span class="hljs-type">Seq</span>(<span class="hljs-number">1</span>), <span class="hljs-type">Seq</span>(<span class="hljs-number">0.0</span>))<br>sequence.foreach &#123; x =&gt;<br>  x <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-keyword">case</span> s: <span class="hljs-type">Seq</span>[<span class="hljs-type">String</span>] =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is a String"</span>)<br>    <span class="hljs-keyword">case</span> s: <span class="hljs-type">Seq</span>[<span class="hljs-type">Int</span>]    =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is an Int"</span>)<br>    <span class="hljs-keyword">case</span> s: <span class="hljs-type">Seq</span>[<span class="hljs-type">Double</span>] =&gt; println(<span class="hljs-string">s"<span class="hljs-subst">$x</span> is a Double"</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><ul><li><p>实例<br>对“可选或默认的参数”中的例子，也可以这样写。</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelayBy1</span>(<span class="hljs-params">resetValue: <span class="hljs-type">Option</span>[<span class="hljs-type">UInt</span>] = <span class="hljs-type">None</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> in  = <span class="hljs-type">Input</span>( <span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> out = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">16.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-keyword">val</span> reg = resetValue <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">Some</span>(r) =&gt; <span class="hljs-type">RegInit</span>(r)<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">None</span>    =&gt; <span class="hljs-type">Reg</span>(<span class="hljs-type">UInt</span>())<br>  &#125;<br>  reg := io.in<br>  io.out := reg<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可选的IO<br>参数可选的情况我们在上方讨论过，下面看一下IO模块可选时的情况（使用Some关键字）<br>以是否包含低位进位的全加器来说，有如下两种实现方式。</p><figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HalfFullAdder</span>(<span class="hljs-params">val hasCarry: <span class="hljs-type">Boolean</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> a = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> b = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> carryIn = <span class="hljs-keyword">if</span> (hasCarry) <span class="hljs-type">Some</span>(<span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))) <span class="hljs-keyword">else</span> <span class="hljs-type">None</span><br>    <span class="hljs-keyword">val</span> s = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> carryOut = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-keyword">val</span> sum = io.a +&amp; io.b +&amp; io.carryIn.getOrElse(<span class="hljs-number">0.</span><span class="hljs-type">U</span>)<br>  io.s := sum(<span class="hljs-number">0</span>)<br>  io.carryOut := sum(<span class="hljs-number">1</span>)<br>&#125;<br><br>classclass  <span class="hljs-type">HalfFullAdderHalfFul</span> (<span class="hljs-keyword">val</span> hasCarry: <span class="hljs-type">Boolean</span>) <span class="hljs-keyword">extends</span> <span class="hljs-type">Module</span> &#123;<br>  <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>    <span class="hljs-keyword">val</span> a = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> b = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> carryIn = <span class="hljs-type">Input</span>(<span class="hljs-keyword">if</span> (hasCarry) <span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>) <span class="hljs-keyword">else</span> <span class="hljs-type">UInt</span>(<span class="hljs-number">0.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> s = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>    <span class="hljs-keyword">val</span> carryOut = <span class="hljs-type">Output</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>))<br>  &#125;)<br>  <span class="hljs-keyword">val</span> sum = io.a +&amp; io.b +&amp; io.carryIn<br>  io.s := sum(<span class="hljs-number">0</span>)<br>  io.carryOut := sum(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>第二种实现方式避免了使用getOrElse，对于Chisel，0宽度的数字是允许的，生成verilog时会被直接剪枝，任何使用0位宽的变量会被当作0</p><ul><li>隐式声明<br>隐式的声明可以帮助代码在不同情况下省去冗余的部分，使用implicit关键字即可做到，观察如下代码<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">CatDog</span> </span>&#123;<br>  <span class="hljs-keyword">implicit</span> <span class="hljs-keyword">val</span> numberOfCats: <span class="hljs-type">Int</span> = <span class="hljs-number">3</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tooManyCats</span></span>(nDogs: <span class="hljs-type">Int</span>)(<span class="hljs-keyword">implicit</span> nCats: <span class="hljs-type">Int</span>): <span class="hljs-type">Boolean</span> = nCats &gt; nDogs<br>    <br>  <span class="hljs-keyword">val</span> imp = tooManyCats(<span class="hljs-number">2</span>)    <span class="hljs-comment">//隐式传参，结果为真</span><br>  <span class="hljs-keyword">val</span> exp = tooManyCats(<span class="hljs-number">2</span>)(<span class="hljs-number">1</span>) <span class="hljs-comment">// 显示传参，结果为假</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>这段代码在第一行隐式地说明了猫的数量，需要注意的是，在一段代码块中，对于一种类型只能有一条隐式说明，在随后定义的函数中，有两个参数列表，分别是参数列表和隐式参数列表，隐式参数列表在未显示说明时，会找到该代码段的隐式说明语句，即numberOfCats。因此，imp的值是真，exp的值是假。对于这段代码，必须有一个隐式说明的整型值，否则函数定义会因找不到隐式的值而出错</p><ul><li>隐式转换<br>利用定义“隐式”，我们可以将两个不相关的量做隐式转换，而不要求父子类关系，如下代码所示<figure class="hljs highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>(<span class="hljs-params">val name: <span class="hljs-type">String</span>, val species: <span class="hljs-type">String</span></span>)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span>(<span class="hljs-params">val name: <span class="hljs-type">String</span></span>)</span><br><span class="hljs-keyword">implicit</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">human2animal</span></span>(h: <span class="hljs-type">Human</span>): <span class="hljs-type">Animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">Animal</span>(h.name, <span class="hljs-string">"Homo sapiens"</span>)<br><span class="hljs-keyword">val</span> me = <span class="hljs-keyword">new</span> <span class="hljs-type">Human</span>(<span class="hljs-string">"Adam"</span>)<br>println(me.species)<br></code></pre></td></tr></table></figure></li></ul><p>通过隐式转换，使Human类有了species属性</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> RTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继续试用Chisel~</title>
      <link href="/2019/07/08/%E7%BB%A7%E7%BB%AD%E8%AF%95%E7%94%A8Chisel/"/>
      <url>/2019/07/08/%E7%BB%A7%E7%BB%AD%E8%AF%95%E7%94%A8Chisel/</url>
      
        <content type="html"><![CDATA[<h4 id="自从使用了之后背后发凉，这就是硬件敏捷开发-HDL硅工妥妥的要被抛弃"><a href="#自从使用了之后背后发凉，这就是硬件敏捷开发-HDL硅工妥妥的要被抛弃" class="headerlink" title="自从使用了之后背后发凉，这就是硬件敏捷开发~HDL硅工妥妥的要被抛弃~"></a>自从使用了之后背后发凉，这就是硬件敏捷开发~HDL硅工妥妥的要被抛弃~</h4><p><img src="/2019/07/08/继续试用Chisel/testChisel.jpg" alt="testChisel"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> RTL </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RTL需要一场革命了~</title>
      <link href="/2019/07/04/RTL%E9%9C%80%E8%A6%81%E4%B8%80%E5%9C%BA%E9%9D%A9%E5%91%BD%E4%BA%86/"/>
      <url>/2019/07/04/RTL%E9%9C%80%E8%A6%81%E4%B8%80%E5%9C%BA%E9%9D%A9%E5%91%BD%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h4 id="40年都在修修补补，最近RISC-V火了，RTL硬件代码需要一场革命"><a href="#40年都在修修补补，最近RISC-V火了，RTL硬件代码需要一场革命" class="headerlink" title="40年都在修修补补，最近RISC-V火了，RTL硬件代码需要一场革命~"></a>40年都在修修补补，最近RISC-V火了，RTL硬件代码需要一场革命~</h4><ul><li>试了下chisel，感觉非常适合本人从高层次写抽象代码，然后快速原型FPGA或者ASIC，设计人员再次要失业~</li></ul><p><img src="/2019/07/04/RTL需要一场革命了/chisel.jpg" alt="chisel"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chisel </tag>
            
            <tag> Verilog </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同的TBTOP如何merge底下的同一个DUT？</title>
      <link href="/2019/07/03/%E4%B8%8D%E5%90%8C%E7%9A%84TBTOP%E5%A6%82%E4%BD%95merge%E5%BA%95%E4%B8%8B%E7%9A%84%E5%90%8C%E4%B8%80%E4%B8%AADUT%EF%BC%9F/"/>
      <url>/2019/07/03/%E4%B8%8D%E5%90%8C%E7%9A%84TBTOP%E5%A6%82%E4%BD%95merge%E5%BA%95%E4%B8%8B%E7%9A%84%E5%90%8C%E4%B8%80%E4%B8%AADUT%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="经常有一些小年轻还有资深设计人员问我这个问题，那就写这篇文章给RTLer的"><a href="#经常有一些小年轻还有资深设计人员问我这个问题，那就写这篇文章给RTLer的" class="headerlink" title="经常有一些小年轻还有资深设计人员问我这个问题，那就写这篇文章给RTLer的~~"></a>经常有一些小年轻还有资深设计人员问我这个问题，那就写这篇文章给RTLer的~~</h4><ul><li><p>设计人员通常自己写UT，也要做些基本的代码覆盖率，但是只会Verilog做仿真，肯定每次一个用例写一个TB顶层，默认EDA工具是不支持的只能用EDA自带的特殊方法进行merge。</p></li><li><p>例子（摘抄VCS手册）</p><p>The following procedure explains how to map coverage information:</p></li></ul><ol><li>Compile the base design for coverage and then simulate that design while monitoring for coverage. For example:</li></ol><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">cd /work/design1<br><br>vcs -cm line dut<span class="hljs-variable">.v</span> test1<span class="hljs-variable">.v</span><br><br>simv -cm line<br></code></pre></td></tr></table></figure><ol start="2"><li><p>Compile the mapped design for coverage and then simulate that design while monitoring for coverage. For example:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">cd /work/design2<br><br>vcs -cm line dut<span class="hljs-variable">.v</span> test2<span class="hljs-variable">.v</span><br><br>simv -cm line<br></code></pre></td></tr></table></figure></li><li><p>Run URG specifying the name of the top-level module in the subhierarchy. Also, specify the coverage directory for the base design, then specify the mapped design. For example:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">urg -dir /work/design1/simv<span class="hljs-variable">.vdb</span> /work/design2/simv<span class="hljs-variable">.vdb</span> -map dut<br></code></pre></td></tr></table></figure></li></ol><h4 id="DVer肯定保证每次不能动TBTOP，而且SUB到TOP覆盖率要自动merge"><a href="#DVer肯定保证每次不能动TBTOP，而且SUB到TOP覆盖率要自动merge" class="headerlink" title="DVer肯定保证每次不能动TBTOP，而且SUB到TOP覆盖率要自动merge~"></a>DVer肯定保证每次不能动TBTOP，而且SUB到TOP覆盖率要自动merge~</h4>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒人就用DIC吧</title>
      <link href="/2019/06/27/%E6%87%92%E4%BA%BA%E5%B0%B1%E7%94%A8DIC%E5%90%A7/"/>
      <url>/2019/06/27/%E6%87%92%E4%BA%BA%E5%B0%B1%E7%94%A8DIC%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="PLI、DPI太烦人，那就用DIC吧"><a href="#PLI、DPI太烦人，那就用DIC吧" class="headerlink" title="PLI、DPI太烦人，那就用DIC吧~"></a>PLI、DPI太烦人，那就用DIC吧~</h4><p>PLI 、DPI语法多，懒得看~，错误一堆堆~</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>直接VCS~，NCsim有点对不住~<br>extern “C” void func(input <em>, input </em>, output *);<br>或者<br>extern “A” void func(vc_handle, vc_handle, vc_handle); </p><h4 id="快速导入仿真定位，后期重构兼容"><a href="#快速导入仿真定位，后期重构兼容" class="headerlink" title="快速导入仿真定位，后期重构兼容~"></a>快速导入仿真定位，后期重构兼容~</h4>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SystemVerilog </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒人编写AOP代替OOP测试用例</title>
      <link href="/2019/06/20/%E6%87%92%E4%BA%BA%E7%BC%96%E5%86%99AOP%E4%BB%A3%E6%9B%BFOOP%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
      <url>/2019/06/20/%E6%87%92%E4%BA%BA%E7%BC%96%E5%86%99AOP%E4%BB%A3%E6%9B%BFOOP%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="AOP-vs-OOP"><a href="#AOP-vs-OOP" class="headerlink" title="AOP vs OOP"></a>AOP vs OOP</h4><ol><li>面向对象编程(OOP)<br>针对业务处理过程中的实体,属性,行为进行封装,以获得更加清晰高效的逻辑单元划分。<br>OOP主要特点：<br>封装、继承性、多态性</li><li>面向切面编程(AOP)<br>针对业务处理过程中的切面进行提取,更偏重于业务处理过程中的某个步骤或阶段,以获得逻辑处理过程中各部分之间低耦合的隔离效果,使代码具有更好的可移植性。<br>AOP主要的特点：<br>源码无关性:在不改变源码的前提下,给程序动态统一添加功能 。<br>隔离性、低耦合</li><li>OOP和AOP的区别<br>a. AOP是对OOP的补充。<br>b. OOP是将程序分解成各个层次的对象,面向业务中的名词领域,侧重点在与抽象。<br>c. AOP是将程序运行过程分解成各个切面,从程序运行角度考虑程序的结构,面向业务中的动词领域,侧重点在于解耦。<h4 id="SV是不支持AOP的，e等语言才支持，必须采用EDA工具进行处理。"><a href="#SV是不支持AOP的，e等语言才支持，必须采用EDA工具进行处理。" class="headerlink" title="SV是不支持AOP的，e等语言才支持，必须采用EDA工具进行处理。"></a>SV是不支持AOP的，e等语言才支持，必须采用EDA工具进行处理。</h4><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> test;<br>    <span class="hljs-keyword">class</span> pkt;<br><br>        <span class="hljs-keyword">int</span> data;<br>    <br>        <span class="hljs-keyword">task</span> send();<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Send data:%0d"</span>,data);<br>        <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">endclass</span><br><br>    <span class="hljs-keyword">class</span> driver;<br>    <br>        <span class="hljs-keyword">task</span> drive(pkt p);<br>            <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Drive data"</span>);<br>            p<span class="hljs-variable">.send</span>();<br>        <span class="hljs-keyword">endtask</span><br>    <br>    <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br><br><span class="hljs-keyword">program</span> top;<br>    <span class="hljs-keyword">import</span> test::*;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        pkt p = <span class="hljs-keyword">new</span>();<br>        driver drv = <span class="hljs-keyword">new</span>();<br>        drv<span class="hljs-variable">.drive</span>(p);<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endprogram</span><br><br><span class="hljs-keyword">extends</span> aop_pkt(test::pkt);<br><br>    around <span class="hljs-keyword">task</span> send();<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Around before send.."</span>);<br>        proceed;<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Around end send.."</span>);<br>    <span class="hljs-keyword">endtask</span><br><br>    <span class="hljs-keyword">before</span> <span class="hljs-keyword">task</span> send();<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Before send.."</span>);<br>    <span class="hljs-keyword">endtask</span><br><br>    after <span class="hljs-keyword">task</span> send();<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">"After send.."</span>);<br>    <span class="hljs-keyword">endtask</span><br><br>endextends<br><br><span class="hljs-keyword">extends</span> aop_driver(test::driver);<br><br>    around <span class="hljs-keyword">task</span> drive(pkt p);<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Around before drive.."</span>);<br>        p<span class="hljs-variable">.data</span> = <span class="hljs-number">100</span>;<br>        proceed;<br>        <span class="hljs-built_in">$display</span>(<span class="hljs-string">"Around end drive.."</span>);<br>    <span class="hljs-keyword">endtask</span><br><br>endextends<br></code></pre></td></tr></table></figure></li></ol><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">Around before drive..<br>Drive data<br>Before send..<br>Around before send..<br>Send data:100<br>Around end send..<br>After send..<br>Around end drive..<br></code></pre></td></tr></table></figure><h3 id="扩展uvm-test，uvm-driver等自然也就可以得心应手"><a href="#扩展uvm-test，uvm-driver等自然也就可以得心应手" class="headerlink" title="扩展uvm_test，uvm_driver等自然也就可以得心应手~"></a>扩展uvm_test，uvm_driver等自然也就可以得心应手~</h3>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> EDA </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCS运行错误后保持ucli进行后续诊断~</title>
      <link href="/2019/06/19/VCS%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%E5%90%8E%E4%BF%9D%E6%8C%81ucli%E8%BF%9B%E8%A1%8C%E5%90%8E%E7%BB%AD%E8%AF%8A%E6%96%AD/"/>
      <url>/2019/06/19/VCS%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%E5%90%8E%E4%BF%9D%E6%8C%81ucli%E8%BF%9B%E8%A1%8C%E5%90%8E%E7%BB%AD%E8%AF%8A%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="VCS主要说明"><a href="#VCS主要说明" class="headerlink" title="VCS主要说明"></a>VCS主要说明</h4><p>VCS allows you to debug an unexpected error condition by not exiting and keeping the UCLI or DVE command prompt active for debugging commands.<br>DVE or UCLI command prompt remains active when there is an error condition, allowing you to examine the current simulation state (the simulation stack, variable values, and so on) so you can debug the error condition.</p><ul><li>Specify the following UCLI configuration command in a Tcl file or in  $HOME/.synopsys_ucli_prefs.tcl file:<br><strong>config onfail enable [failure_type]</strong><br>Where failure_type is optional. It allows you to specify the failure type. </li><li>错误类型表格</li></ul><table><thead><tr><th>错误类型</th><th>描述</th></tr></thead><tbody><tr><td>sysfault</td><td>Assertion or signal (including segfault)</td></tr><tr><td>{error regex}</td><td>Error for which the tag matches regex. The tag of an error can be seen in the error message (Error-[TAG]).</td></tr><tr><td>fatal</td><td>Fatal error for which VCS currently dumps a stack trace.</td></tr><tr><td>all</td><td>All failures (default)</td></tr></tbody></table><ul><li><p>例子</p><ul><li><p>Tcl File (test.tcl)</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">onfail &#123;<br>set err_msg "Stopped in"<br>append err_msg [scope]<br>puts $err_msg<br>&#125;<br>config onfail enable &#123;error NOA&#125;<br>run<br></code></pre></td></tr></table></figure></li><li><p>运行</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> simv -ucli -i test.tcl</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>对运行时段错误进行定位是个不错的选择~</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SystemVerilog </tag>
            
            <tag> EDA </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simv返回值大有用处</title>
      <link href="/2019/06/19/simv%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A4%A7%E6%9C%89%E7%94%A8%E5%A4%84/"/>
      <url>/2019/06/19/simv%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A4%A7%E6%9C%89%E7%94%A8%E5%A4%84/</url>
      
        <content type="html"><![CDATA[<h3 id="VCS-MX说明如下"><a href="#VCS-MX说明如下" class="headerlink" title="VCS-MX说明如下"></a>VCS-MX说明如下</h3><p>Simulation executable generated by VCS MX returns non-zero value in case of errors, fatal errors, and assertion failures.<br>The simulation executable return values on errors, fatal errors, and assertion values are:<br>• 0 (no indication)<br>• 1 (as in runtime crash or system crash)<br>• 2 (error)<br>• 3 (fatal)</p><ul><li>一些返回值说明</li></ul><table><thead><tr><th>场景</th><th>返回值</th></tr></thead><tbody><tr><td>$fatal/UVM_FATAL/OVM_FATAL/VMM_FATAL</td><td>3</td></tr><tr><td>$error/UVM_ERROR/ OVM_ERROR/ VMM_ERROR/ Errors promoted from warning messages to errors</td><td>2</td></tr><tr><td>NLP ERROR</td><td>2</td></tr><tr><td>Assertion failure Verilog</td><td>2</td></tr><tr><td>$warning /UVM_WARNING/ OVM_WARNING/ VMM_WARNING</td><td>0</td></tr><tr><td>NLP WARNING</td><td>0</td></tr><tr><td>Unique/priority RT warnings</td><td>0</td></tr><tr><td>-xzcheck</td><td>0</td></tr></tbody></table><ul><li><p>参数使用</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> simv -exitstatus</span><br><span class="hljs-meta">%</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$status</span></span><br></code></pre></td></tr></table></figure></li><li><p>用处：~回归测试、并行测试、触发机制等~</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SystemVerilog </tag>
            
            <tag> EDA </tag>
            
            <tag> VCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM工厂实例覆盖</title>
      <link href="/2019/06/18/UVM%E5%B7%A5%E5%8E%82%E5%AE%9E%E4%BE%8B%E8%A6%86%E7%9B%96/"/>
      <url>/2019/06/18/UVM%E5%B7%A5%E5%8E%82%E5%AE%9E%E4%BE%8B%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM工厂类覆盖</title>
      <link href="/2019/06/18/UVM%E5%B7%A5%E5%8E%82%E7%B1%BB%E8%A6%86%E7%9B%96/"/>
      <url>/2019/06/18/UVM%E5%B7%A5%E5%8E%82%E7%B1%BB%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<h3 id="UVM工厂类覆盖"><a href="#UVM工厂类覆盖" class="headerlink" title="UVM工厂类覆盖"></a>UVM工厂类覆盖</h3><p>When working with UVM, the phrase “you gotta use the factory!” gets drilled into our heads constantly. This is because in object oriented programming (OOP) extendability doesn’t come for free. We need to plan for it by structuring our code in certain ways. Why the factory is important, though, and how it helps us achieve that goal may be kind of difficult for a beginner to understand (I know I was pretty confused back in the day). The UVM user guide doesn’t explain things all that well, either. Note that I haven’t cracked it open in a while, so apologies if everything I’m going to talk about in this post is already presented crystal clearly over there.</p><p>And even if it is, by all means, you should still read on. For the seasoned professionals it’s going to be a walk down memory lane and maybe we’ll manage to rekindle the old Specmaniac a little. For the energetic youth that’s only ever worked with <em>SystemVerilog</em>, it’s going to be interesting to see how the other guys do it. It might also make for a nice side by side comparison of the two languages.</p><p>A lot of of our state-of-the-art verification methodology concepts can trace their roots back to <em>e</em>. Many such ideas were pushed by Cadence to OVM and they were subsequently inherited by UVM. In <em>e</em>, a lot of neat stuff like sequences is already built into the language. Its support for aspect oriented programming (AOP) also provides a really cool way of extending the behavior of existing code without touching it. Because of this, a task where <em>e</em> really shines is in how easy it is to write tests.</p><p>Let’s look at a small example. We’ll assume we have an AHB slave that we want to verify. To keep things simple, we won’t consider the full gamut of protocol aspects. We’ll focus on an AHB item that contains fields for the transfer direction, its size and its timing:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>struct ahb_item like any_sequence_item &#123;<br>  direction : [ READ, WRITE ];<br>  size : [ BYTE, HALFWORD, WORD ];<br>  delay : [ NONE, SMALL, MEDIUM, LARGE ];<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>Declaring a sequence is done using the <strong>sequence</strong> keyword:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>sequence ahb_sequence using item = ahb_item;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>The <strong>sequence</strong> block also declares the sequence driver (aka sequencer in UVM speak). This sequencer communicates with a bus functional model (which has the same role as a UVM driver). For this example, let’s just have the driver print the items it receives:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>unit ahb_bfm &#123;<br>  driver : ahb_sequence_driver;<br><br>  event clock;<br><br>  on clock &#123;<br>    emit driver.clock;<br>  &#125;;<br><br>  run() is also &#123;<br>    start execute_items();<br>  &#125;;<br><br>  execute_items() @clock is &#123;<br>    while TRUE &#123;<br>      var item : ahb_item;<br>      item = driver.get_next_item();<br>      drive(item);<br>      emit driver.item_done;<br>    &#125;;<br>  &#125;;<br><br>  drive(item : ahb_item) @clock is &#123;<br>    print item;<br>  &#125;;<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>Now that we have our building blocks, we need to instantiate and connect them. This is typically done in an agent unit:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>unit ahb_agent &#123;<br>  driver : ahb_sequence_driver is instance;<br>  bfm : ahb_bfm is instance;<br><br>  keep bfm.driver == driver;<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>Once we instantiate the agent we’re ready to go:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>import ahb;<br><br>extend sys &#123;<br>  ahb : ahb_agent is instance;<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>With the environment in place, let’s write a very simple test that sends some traffic to the DUT:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>import env;<br><br>extend MAIN ahb_sequence &#123;<br>  !item : ahb_item;<br><br>  keep count in [ 10..20 ];<br><br>  body() @driver.clock is only &#123;<br>    for i from 1 to count &#123;<br>      do item;<br>    &#125;;<br>  &#125;;<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>The <em>MAIN</em> sequence gets started automatically on the sequencer.</p><p>From a run perspective, things work a bit differently in <em>e</em> than we’re used to in <em>SystemVerilog</em>. The verification environment is typically compiled for performance. Tests are then read in on top of the compiled code by an interpreter to make additions to it. Those additions are only valid throughout the single test run. Typically, there are multiple test files, each creating a slightly different version of the verification environment.</p><p>In this very simple test we’re blindly randomizing what sequence items get sent to the DUT. Eventually we’d get all combinations through, but we’d have to run this test quite a few times. Let’s assume that after discussing with our designers, we find out that our device contains some special logic to treat back-to-back reads. We’d need to test it sooner rather than later. This is where the <em>constrained</em> in <em>constrained random</em> comes in.</p><p>We could add a constraint to the AHB item that makes all items reads without delays. This is done by extending our sequence item:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>import test1;<br><br>extend ahb_item &#123;<br>  keep direction == READ;<br>  keep delay == NONE;<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>This constraint is valid for this test. If we try to run the first test, it will still generate unconstrained items.</p><p>If we would also ascertain from our spec that doing word accesses is really important, then we could create a dedicated test for that too:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>import test1;<br><br>extend ahb_item &#123;<br>  keep size == WORD;<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>Now let’s suppose we find a bug relating to byte accesses. We could create a test like we did for word accesses. At the same time, we know that back-to-back reads are special, so why not double check that they work as byte accesses? We could create a very directed test by adding another constraint on top of our read test:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;&apos;<br>import test2;<br><br>extend ahb_item &#123;<br>  keep size == BYTE;<br>&#125;;<br>&apos;&gt;<br></code></pre></td></tr></table></figure><p>As we could see, <em>e</em> makes it very easy to write one test template and then fine tune it’s parameters using constraints to home in on those pesky bugs much faster. The power of AOP enables us to write once and tweak everywhere.</p><p><em>SystemVerilog</em> lacks AOP. Vis-à-vis the release of the 2012 LRM, Tom Fitzpatrick (a Mentor Graphics technologist) even said that his “favorite enhancement in SV-2012 is that it doesn’t have AOP”. Despite that, I remember reading that one Big Three EDA vendor used to support proprietary AOP extensions. Even though some users still want the flexibility of <em>e</em>, it doesn’t seem likely that anything like this will get added in the future.</p><p>This doesn’t mean that we can’t achieve the same effect without AOP; we’re just going to have to pay an extra cost to do it. We can implement a similar scheme in OOP by using the factory pattern, It allows for the type of object that gets instantiated to be controlled at run-time. Instead of getting an object of a certain class we can get one of a subclass by configuring the factory to perform this replacement. UVM comes with an implementation of a (too) generic factory pattern.</p><p>Let’s see how our verification environment would look like when implemented using UVM. First we need to define our sequence item:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; READ, WRITE &#125; direction_t;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; BYTE, HALFWORD, WORD &#125; size_t;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, SMALL, MEDIUM, LARGE &#125; delay_t;<br><br><br><span class="hljs-keyword">class</span> ahb_item <span class="hljs-keyword">extends</span> uvm_sequence_item;<br>  <span class="hljs-meta">`uvm_object_utils(ahb_item)</span><br><br>  <span class="hljs-keyword">rand</span> direction_t direction;<br>  <span class="hljs-keyword">rand</span> size_t size;<br>  <span class="hljs-keyword">rand</span> delay_t delay;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"ahb_item"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> do_print(uvm_printer printer);<br>    <span class="hljs-meta">`uvm_print_enum(direction_t, direction, "direction", printer)</span><br>    <span class="hljs-meta">`uvm_print_enum(size_t, size, "size", printer)</span><br>    <span class="hljs-meta">`uvm_print_enum(delay_t, delay, "delay", printer)</span><br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>We need to set up the machinery to allow objects of this class to be instantiated by the UVM factory. To do this, we register it with the factory using the <em>`uvm_object_utils</em> macro. Typical operations such as printing or packing aren’t implemented for us, so we’ll need to provide the compiler with our own implementations of these functions. This makes <em>SystemVerilog</em> more verbose than <em>e</em>.</p><p>Sequences aren’t built into the language (at least not in the same sense as <em>e</em> sequences). <em>SystemVerilog</em> defines the <strong>sequence</strong>keyword, but that is an assertion construct. The sequences we’re looking for are implemented as part of the UVM library. It’s customary to define a base sequence that test writers would extend to implement their own scenarios:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> ahb_sequence_base <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(ahb_item)</span>;<br>  <span class="hljs-meta">`uvm_declare_p_sequencer(uvm_sequencer #(ahb_item))</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> pre_body();<br>    <span class="hljs-keyword">if</span> (starting_phase != <span class="hljs-literal">null</span>)<br>      starting_phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endtask</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> post_body();<br>    <span class="hljs-keyword">if</span> (starting_phase != <span class="hljs-literal">null</span>)<br>      starting_phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>We’ll implement the same simple driver that just prints the items it receives:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> ahb_driver <span class="hljs-keyword">extends</span> uvm_driver <span class="hljs-variable">#(ahb_item)</span>;<br>  <span class="hljs-meta">`uvm_component_utils(ahb_driver)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>    execute_items();<br>  <span class="hljs-keyword">endtask</span><br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">task</span> execute_items();<br>    <span class="hljs-keyword">forever</span> <span class="hljs-keyword">begin</span><br>      ahb_item item;<br>      seq_item_port<span class="hljs-variable">.get_next_item</span>(item);<br>      drive(item);<br>      seq_item_port<span class="hljs-variable">.item_done</span>();<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endtask</span><br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> drive(ahb_item item);<br>    item<span class="hljs-variable">.print</span>();<br>  <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The agent instantiates and connects the driver and the sequencer:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> ahb_agent <span class="hljs-keyword">extends</span> uvm_agent;<br>  <span class="hljs-meta">`uvm_component_utils(ahb_agent)</span><br><br>  ahb_driver driver;<br>  uvm_sequencer <span class="hljs-variable">#(ahb_item)</span> sequencer;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    driver = ahb_driver::type_id::create(<span class="hljs-string">"driver"</span>, <span class="hljs-keyword">this</span>);<br>    sequencer = uvm_sequencer <span class="hljs-variable">#(ahb_item)::type_id::create("sequencer", this)</span>;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br>    driver<span class="hljs-variable">.seq_item_port</span><span class="hljs-variable">.connect</span>(sequencer<span class="hljs-variable">.seq_item_export</span>);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>For tests, we have a different use model as for <em>e</em>. All tests in <em>SystemVerilog</em> are compiled together into one big library and selecting which one to run is done based on the <em>+UVM_TESTNAME</em> plusarg.</p><p>We’ll need a base class that sets up our environment, which tests will extend:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> test_base <span class="hljs-keyword">extends</span> uvm_test;<br>  ahb_agent ahb;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    ahb = ahb_agent::type_id::create(<span class="hljs-string">"ahb"</span>, <span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Now that we’ve got our infrastructure sorted out, we can start writing our tests. Let’s begin with the fully random test that just sends out a stream of items. We’ll need to define the sequence:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> main_ahb_sequence <span class="hljs-keyword">extends</span> ahb_sequence_base;<br>  <span class="hljs-meta">`uvm_object_utils(main_ahb_sequence)</span><br><br>  <span class="hljs-keyword">rand</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> count;<br><br>  <span class="hljs-keyword">constraint</span> count_range &#123;<br>    count <span class="hljs-keyword">inside</span> &#123; [<span class="hljs-number">10</span>:<span class="hljs-number">20</span>] &#125;;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"main_ahb_sequence"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> body();<br>    <span class="hljs-keyword">repeat</span> (count) <span class="hljs-keyword">begin</span><br>      ahb_item item;<br>      <span class="hljs-meta">`uvm_do(item)</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The <em>`uvm_do</em> macro will request an instance of an <em>ahb_item</em> from the factory using a call to <em>ahb_item::type_id::create(…)</em>. This sequence won’t get started automatically like in <em>e</em>. We’ll have to start it from the test:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test1 <span class="hljs-keyword">extends</span> test_base;<br>  <span class="hljs-meta">`uvm_component_utils(test1)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>    uvm_config_db <span class="hljs-variable">#(uvm_object_wrapper)</span>::set(<span class="hljs-keyword">this</span>, <span class="hljs-string">"ahb.sequencer.run_phase"</span>,<br>      <span class="hljs-string">"default_sequence"</span>, main_ahb_sequence::get_type());<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Up to now, so far, so good. We’ve had to write similar code in both languages (albeit a little more on the <em>SystemVerilog</em> side). Now, the two paths begin to diverge. Let’s try to write the test that targets back-to-back reads. We’ll need to add the constraint to the AHB item, but we can’t do it inside the <em>ahb_item</em> class. We can only do it in a subclass:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> fast_read_ahb_item <span class="hljs-keyword">extends</span> ahb_item;<br>  <span class="hljs-meta">`uvm_object_utils(fast_read_ahb_item)</span><br><br>  <span class="hljs-keyword">constraint</span> fast_read &#123;<br>    direction == READ;<br>    delay == NONE;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"fast_read_ahb_item"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Now, for a specific test run, we need to replace all instances of <em>ahb_item</em> with <em>fast_read_ahb_item</em>. You’ll remember that this is exactly what the factory is for. We can instruct the factory that whenever an <em>ahb_item</em> is requested, it should return an instance of <em>fast_read_ahb_item</em>. Since the latter is a subclass of the former, it is assignment compatible. This replacement is done by applying a type override:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test2 <span class="hljs-keyword">extends</span> test1;<br>  <span class="hljs-meta">`uvm_component_utils(test2)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.end_of_elaboration_phase</span>(phase);<br>    ahb_item::type_id::set_type_override(fast_read_ahb_item::get_type());<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>When running <em>test2</em>, wherever an <em>ahb_item</em> is requested, a <em>fast_ahb_item</em> will be created in its place, thereby making sure that all AHB transfers are constrained to be back-to-back reads. We’ve had to write quite a bit more code, but it does the job. This is a recurring theme when comparing AOP to pure OOP.</p><p>Writing the test for word accesses is done in the same way:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> word_ahb_item <span class="hljs-keyword">extends</span> ahb_item;<br>  <span class="hljs-meta">`uvm_object_utils(word_ahb_item)</span><br><br>  <span class="hljs-keyword">constraint</span> word &#123;<br>    size == WORD;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"word_ahb_item"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">class</span> test3 <span class="hljs-keyword">extends</span> test1;<br>  <span class="hljs-meta">`uvm_component_utils(test3)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.end_of_elaboration_phase</span>(phase);<br>    ahb_item::type_id::set_type_override(word_ahb_item::get_type());<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Things get interesting when we want to stress byte back-to-back reads. We need to define the new item. It makes the most sense to extend the <em>fast_read_ahb_item</em> class to leverage its constraints. This way we just need to add a constraint for byte accesses:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> fast_read_byte_ahb_item <span class="hljs-keyword">extends</span> fast_read_ahb_item;<br>  <span class="hljs-meta">`uvm_object_utils(fast_read_byte_ahb_item)</span><br><br>  <span class="hljs-keyword">constraint</span> byte_sized &#123;<br>    size == BYTE;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"fast_read_byte_ahb_item"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Since <em>fast_read_byte_ahb_item</em> is a subclass of <em>ahb_item</em> we can set a type override to it:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test4a <span class="hljs-keyword">extends</span> test1;<br>  <span class="hljs-meta">`uvm_component_utils(test4a)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.end_of_elaboration_phase</span>(phase);<br>    ahb_item::type_id::set_type_override(fast_read_byte_ahb_item::get_type());<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Notice that we’ve extended our test from <em>test1</em>. This isn’t optimal, since if <em>test2</em> would have made any other modification to the initial test (like setting overrides for any other interfaces) then we won’t get these. A better way is to extend <em>test2</em> and set the same override:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test4b <span class="hljs-keyword">extends</span> test2;<br>  <span class="hljs-meta">`uvm_component_utils(test4b)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.end_of_elaboration_phase</span>(phase);<br>    ahb_item::type_id::set_type_override(fast_read_byte_ahb_item::get_type());<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>What happens in this case is that during <em>super.end_of_elaboration_phase(…)</em> the <em>ahb_item</em> class is set to be replaced by <em>fast_read_ahb_item</em>. Setting another type override on <em>ahb_item</em> will replace the previous one, so what we will get from now are <em>fast_read_byte_ahb_items</em>.</p><p>At the same time, a very nifty feature the UVM factory supports is override chaining. We already have a test that overrides <em>ahb_item</em> with <em>fast_read_ahb_item</em>. We can also set up an override from <em>fast_read_ahb_item</em> to <em>fast_read_byte_ahb_item</em>.</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test4c <span class="hljs-keyword">extends</span> test2;<br>  <span class="hljs-meta">`uvm_component_utils(test4c)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.end_of_elaboration_phase</span>(phase);<br>    fast_read_ahb_item::type_id::set_type_override(<br>      fast_read_byte_ahb_item::get_type());<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The factory will chain the overrides. Whenever an <em>ahb_item</em> is requested, the factory will want to return a <em>fast_read_ahb_item</em>. At the same time, when trying to return a <em>fast_read_ahb_item</em>, the factory will notice that that type is also overridden and it will return a <em>fast_read_byte_ahb_item</em>. This has the same effect as overriding <em>ahb_item</em> directly with <em>fast_read_byte_ahb_item</em>. Both methods can be useful so it’s good to keep them in mind.</p><p>We’ve seen that the factory is indispensable in writing compact tests that leverage each other. Being able to direct the randomization helps find bugs earlier and close coverage faster. The type override mechanism, while powerful, is an all or nothing approach that suffers a bit in terms of flexibility. </p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Constraints 的混入模式</title>
      <link href="/2019/06/17/Constraints-%E7%9A%84%E6%B7%B7%E5%85%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/17/Constraints-%E7%9A%84%E6%B7%B7%E5%85%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coverage的可扩展性设计</title>
      <link href="/2019/06/17/Coverage%E7%9A%84%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/06/17/Coverage%E7%9A%84%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV反射功能</title>
      <link href="/2019/06/17/SV%E5%8F%8D%E5%B0%84%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/06/17/SV%E5%8F%8D%E5%B0%84%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CrossXXXType使用方法</title>
      <link href="/2019/06/14/CrossXXXType%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/06/14/CrossXXXType%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>If-and-only-if约束</title>
      <link href="/2019/06/14/If-and-only-if%E7%BA%A6%E6%9D%9F/"/>
      <url>/2019/06/14/If-and-only-if%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">bit</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] ubyte; <br><span class="hljs-keyword">class</span> Packet <span class="hljs-keyword">extends</span> some_useful_base_class; <br><br>  <span class="hljs-keyword">rand</span> ubyte addr[<span class="hljs-number">4</span>]; <br>  <span class="hljs-keyword">rand</span> <span class="hljs-keyword">enum</span> &#123;BROADCAST, LOCAL, WAN&#125; addr_kind; <br><br>  <span class="hljs-keyword">constraint</span> c_address_kind &#123; <br>     (addr_kind==BROADCAST) == (addr[<span class="hljs-number">0</span>] == <span class="hljs-number">255</span>); <br>     (addr_kind==LOCAL) ==  <br>       (   addr[<span class="hljs-number">0</span>]==<span class="hljs-number">192</span> &amp;&amp; addr[<span class="hljs-number">1</span>]==<span class="hljs-number">168</span> <br>        || addr[<span class="hljs-number">0</span>]==<span class="hljs-number">10</span>  &amp;&amp; addr[<span class="hljs-number">1</span>]==<span class="hljs-number">0</span> <br>       ); <br>    &#125; <br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>It may be of interest that we have avoided using implication constraints, which are of the form<br>expr1 -&gt; expr2, in the c_address_kind constraint. Instead we have insisted that the<br>truth  values  of  two  comparison  operations  should  be  the  same,  using  an  “if  and  only  if”<br>constraint of the form expr1 == expr2. To understand why this might be valuable, consider<br>the implication constraint </p>  <figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">(addr_kind==BROADCAST) -&gt; (addr[<span class="hljs-number">0</span>] == <span class="hljs-number">255</span>);<br></code></pre></td></tr></table></figure><p>This constraint specifies that if addr_kind is BROADCAST, then addr[0] must be equal to 255.  However,  it  specifies  nothing  about  the  value  of  addr[0]  when  addr_kind  is  not BROADCAST.  It  would  therefore  be  possible  to  get  a  non-broadcast  packet  having addr[0]==255, which was not our intent. By contrast, the if-and-only-if formulation insists that  addr[0]  being  equal  to  255  is  exactly the  same  condition  as  addr_kind  being BROADCAST. </p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在UVM TEST中控制断言</title>
      <link href="/2019/06/14/%E5%9C%A8UVM-TEST%E4%B8%AD%E6%8E%A7%E5%88%B6%E6%96%AD%E8%A8%80/"/>
      <url>/2019/06/14/%E5%9C%A8UVM-TEST%E4%B8%AD%E6%8E%A7%E5%88%B6%E6%96%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testbench中的断言使用</title>
      <link href="/2019/06/14/Testbench%E4%B8%AD%E7%9A%84%E6%96%AD%E8%A8%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/06/14/Testbench%E4%B8%AD%E7%9A%84%E6%96%AD%E8%A8%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Testbench中的断言使用"><a href="#Testbench中的断言使用" class="headerlink" title="Testbench中的断言使用"></a>Testbench中的断言使用</h3><p>Developing verification environments revolves around writing checks. We need to separate the concepts of checking the DUT from checking testbench code. DUT checks represent the “business logic” of our verification software. The code we write isn’t perfect, though. Sprinkling the testbench with checks of its own helps to ensure its correctness by catching programming errors at their source.</p><p>Both <em>SystemVerilog</em> and <em>e</em> provide language constructs to reason about the DUTs behavior. In <em>SystemVerilog</em> we have the <strong>assert</strong>keyword, while <em>e</em> programmers use <strong>check</strong> in procedural code and <strong>expect</strong> to verify temporal behavior. These keywords are tightly integrated with EDA tools, allowing users to tag individual checks, inspect their states (for example, using an assertion browser) or annotate them to their verification plans.</p><p>If you’ve ever read up on <em>SystemVerilog</em>, chances are you’ve seen code snippets similar to this one:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">byte</span> some_var;<br><span class="hljs-keyword">assert</span> (std::randomize(some_var) <span class="hljs-keyword">with</span> &#123; some_var == <span class="hljs-number">1000</span>; &#125;);<br></code></pre></td></tr></table></figure><p>Checking the return value of <em>randomize()</em> is in general a good idea, because it helps us find cases where we have contradicting constraints. It’s pretty clear that randomization will fail in the code snippet above, since a byte can only hold values up to <em>255</em>. The reason it fails is because we made a mistake when setting our constraint, resulting in buggy testbench code.</p><p>While we will see see an error message when executing this code, using <strong>assert</strong> to do implement such checks is not the way to go. This is because the <em>IEEE 1800-2012</em> LRM states that “Assertions are primarily used to validate the behavior of a <strong>design</strong>.”. It also says that the <strong>assert</strong> statement is supposed to be used “to specify the property as an obligation for the <strong>design</strong> that is to be checked to verify that the property holds.”. The fact that the randomization call was successful doesn’t relate in any way to the DUT. It is purely a testbench issue, so we shouldn’t be using <strong>assert</strong> to check it.</p><p>There are multiple problems that misusing <strong>assert</strong> like this will cause. First, since EDA tools interpret <strong>assert</strong> statements as DUT checks and track them, any such testbench checks will appear alongside “real” assertions and pollute the overview. This is more of an annoyance than a major problem. The problems come when we realize that assertions can be disabled using the <em>$assertoff(…)</em>system task. If before executing the <em>randomize()</em> call above the simulator would encounter an <em>$assertoff(…)</em>, we wouldn’t get any error flagged since the check would be disabled. This means that in cases where we would expect assertion errors (like error injection or fault simulations) and would disable some DUT checks, we might accidentally disable some our testbench’s checks in the process. Let’s also look at what happens when we disable assertions that would pass. Consider the following code snippet:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">byte</span> some_var;<br><span class="hljs-keyword">assert</span> (std::randomize(some_var) <span class="hljs-keyword">with</span> &#123; some_var == <span class="hljs-number">10</span>; &#125;);<br></code></pre></td></tr></table></figure><p>This <em>randomize()</em> call will always be successful, but if we were to disable all assertions, then we’d have the nice surprise of seeing that <em>some_var</em> will remain <em>0</em>. This is because the <em>randomize()</em> doesn’t get executed anymore. There was also a rumor at one point that some simulators might execute the statement, while others might not, leading to more potential for inconsistency between different vendors (as if there wasn’t enough variation in <em>SystemVerilog</em> simulator implementations…). I’m not sure what the status right now is (all the ones I’ve tested won’t execute the <em>randomize()</em> statement), but I hope this and the other reasons above convinced you that using <strong>assert</strong> in this way is a very bad idea.</p><p>The <strong>assert</strong> keyword is also part of the <em>e</em> language, where it’s meant to be used to check <em>e</em> code for correct behavior (remember that the keywords to check the design for correct behavior were <strong>check</strong> and <strong>expect</strong>). <em>SystemVerilog</em> doesn’t have such a language construct dedicated to checking our own code, but then again neither does <em>C</em>. In <em>C</em>, assertions are implemented using the preprocessor. Programmers include the <a href="https://en.wikipedia.org/wiki/Assert.h" target="_blank" rel="noopener">assert.h</a> header, which defines the <em>assert(…)</em> macro. If the expression passed as an argument to the macro fails, an error message is printed which contains the location of the error (file and line) and the program is stopped.</p><p>We can implement something similar for <em>SystemVerilog</em>. Since <strong>assert</strong> is already taken, I’ve had the not so original idea of calling our macro <em>uvm_assert</em> (for program, not progressive). If you’ve got a better name for it, please let me know in the comments. Our header will be called “<em>uvm_assert.svh”</em>. The macro needs to check the expression and in case of a fail, trigger a <em>$fatal(…)</em> call:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> uvm_assert(expr) \</span><br>  <span class="hljs-keyword">begin</span> \<br>    <span class="hljs-keyword">if</span> (!(expr)) \<br>      <span class="hljs-built_in">$fatal</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Assertion '%s' failed."</span>, <span class="hljs-meta">`"expr`")); \</span><br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>The <em>$fatal(…)</em> message generated by the tool will already contain the location of the message (the file, line and scope - this is mandated by the standard). In addition to this, we can also print the expression that caused the fail. Let’s see the macro in action. Let’s say that we want to implement a <em>rectangle</em> class that takes the sides as constructor arguments:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> rectangle;<br>  <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> side0, <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> side1);<br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>It doesn’t make any sense to pass negative numbers for their lengths, so we can enforce them to be positive by declaring them as <strong>int unsigned</strong>. It also doesn’t make any sense to allow any of the sides to be <em>0</em>. This is something that we need to check at run time, when the constructor gets called:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> rectangle::<span class="hljs-keyword">new</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> side0, <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> side1);<br>  <span class="hljs-meta">`uvm_assert(side0 &gt; 0)</span><br>  <span class="hljs-meta">`uvm_assert(side1 &gt; 0)</span><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p>This way we can ensure that the code that is instantiating a rectangle isn’t buggy.</p><p>Another feature of the <em>C</em> <em>assert</em> “library” is the ability to disable checks for deployed code. The idea behind this is that while software is being developed, it has bugs. We want to be able to track down those bugs quickly when they cause an assertion to fail and fix them. Production software should (ideally) be free of bugs, so any checks we have will only slow us down without any added benefit (since we know they’re all going to pass anyway). Assertions are disabled when the <em>NDEBUG</em> symbol is defined. We can have our macro work the same way:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> NDEBUG</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> uvm_assert(expr) \</span><br>    <span class="hljs-keyword">begin</span> \<br>    <span class="hljs-keyword">end</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">else</span></span><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>When <em>NDEBUG</em> is defined before including <em>uvm_assert.svh</em>, the <em>uvm_assert</em> macro will expand to basically nothing (as compilers should be able to optimize the empty <strong>begin…end</strong> block away). This means that the code passed as the expression won’t be seen by the compiler. This makes it interesting to look at what happens if we use <em>uvm_assert</em> with a <em>randomize()</em> call:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">byte</span> some_var;<br><span class="hljs-meta">`uvm_assert(std::randomize(some_var) with &#123; some_var == 10; &#125;)</span><br><span class="hljs-built_in">$display</span>(<span class="hljs-string">"some_var = %0d"</span>, some_var);<br></code></pre></td></tr></table></figure><p>If we simply execute this code, we won’t see any error message (since the <em>randomize()</em> call can’t fail) and we’ll see that <em>some_var</em>got the value <em>10</em>. If however we define the <em>NDEBUG</em> symbol beforehand, we’ll notice that <em>some_var</em> stays <em>0</em>. This is because the <em>randomize()</em> call never happens. This is a feature, not a bug as the <em>C</em> library also works like this. Programmers are only supposed to use expressions without any side-effects inside <em>assert</em> statements.</p><p>After a bit of research I learned that the <em>Unreal engine</em> (a big library used by a lot of video games) has some very nice assertion mechanisms in place. Aside from the <em>assert</em> style statement provided by <em>assert.h</em> (which they call <em>check</em>), it also defines two others. Most of them do basically the same thing, with some extra sugar on top. The more interesting one is called <em>verify</em> and the difference between it and <em>assert</em> is that the expression it operates on also gets executed in production builds, i.e. in cases where <em>assert</em> would expand to nothing. This is exactly the behavior we need to check the status of <em>randomize()</em>:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> NDEBUG</span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> uvm_verify(expr) \</span><br>    <span class="hljs-keyword">begin</span> \<br>      <span class="hljs-keyword">void</span>'(expr); \<br>    <span class="hljs-keyword">end</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">else</span></span><br>  <span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> uvm_verify(expr) \</span><br>    <span class="hljs-meta">`uvm_assert(expr)</span><br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>During the development stage, <em>uvm_verify(…)</em> acts just like <em>uvm_assert(…)</em> (it checks the expression and issues an error when it evaluates to false). After deployment, it merely evaluates the expression. Why do we need both macros? Wouldn’t <em>uvm_verify(…)</em>suffice? Well, evaluating the expression uses up processor time, but if it doesn’t have any side-effects there’s no point in doing it. The safest bet would be to always use <em>uvm_verify(…)</em>, but for cases where we know that executing the expression doesn’t change the state of the testbench we can gain more performance in production mode by using <em>uvm_assert(…)</em>.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Constraints和Covergroups保持同步</title>
      <link href="/2019/06/13/Constraints%E5%92%8CCovergroups%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/06/13/Constraints%E5%92%8CCovergroups%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由上到下约束Sequence item</title>
      <link href="/2019/06/12/%E7%94%B1%E4%B8%8A%E5%88%B0%E4%B8%8B%E7%BA%A6%E6%9D%9FSequence-item/"/>
      <url>/2019/06/12/%E7%94%B1%E4%B8%8A%E5%88%B0%E4%B8%8B%E7%BA%A6%E6%9D%9FSequence-item/</url>
      
        <content type="html"><![CDATA[<h3 id="由上到下约束Sequence-item"><a href="#由上到下约束Sequence-item" class="headerlink" title="由上到下约束Sequence item"></a>由上到下约束Sequence item</h3><p>After reading the title, some of you might be asking yourselves “What are constraints from above?”. Constraints from above (CFAs) are an <em>e</em> term. As Reuven Naveh explains in <a href="http://www.cadence.com/community/blogs/fv/archive/2009/03/24/generation-action-constraints-from-above.aspx" target="_blank" rel="noopener">this post</a> on Team Specman’s blog, CFAs have the following properties:</p><ul><li><em>They constrain a do-not-generate field or its descendants.</em></li><li><em>The constraint is declared not in the type in which the field is declared, but at a higher level.</em></li><li><em>The field is later generated on-the-fly.</em></li></ul><p>For those of you who opened the link, they look remarkably similar to in-line constraints, but in modern <em>e</em> CFAs are more complicated than what that article presents. We won’t go into that as this is a <em>SystemVerilog</em> post.</p><p>Why are CFAs useful? To best answer that question, let’s look at an example. Let’s say we have a trivial sequence item that models accessing a communication device:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; CONFIG, TX_SHORT, TX_LONG, RX_SHORT, RX_LONG, SHUTDOWN &#125; mode_e;<br><br><span class="hljs-keyword">class</span> some_item <span class="hljs-keyword">extends</span> uvm_sequence_item;<br>  <span class="hljs-meta">`uvm_object_utils(some_item)</span><br>  <br>  <span class="hljs-keyword">rand</span> mode_e mode;<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"some_item"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span> <span class="hljs-comment">// new</span><br><br><span class="hljs-keyword">endclass</span> <span class="hljs-comment">// some_item</span><br></code></pre></td></tr></table></figure><p>We also have some sequence that operates with these items:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> some_sequence <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(some_item)</span>;<br>  <span class="hljs-meta">`uvm_object_utils(some_sequence)</span><br>  <br>  <span class="hljs-keyword">rand</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> num_items;<br>  <br>  <span class="hljs-keyword">constraint</span> max_items_c &#123;<br>    num_items &gt;= <span class="hljs-number">5</span>;<br>    num_items &lt;= <span class="hljs-number">10</span>;<br>  &#125;<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"some_sequence"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span> <span class="hljs-comment">// new</span><br>  <br>  <span class="hljs-keyword">task</span> body();<br>    start_item(req);<br>    <span class="hljs-keyword">if</span> (!req<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123; mode == CONFIG; &#125;)<br>      <span class="hljs-meta">`uvm_error("RANDERR", "Randomization error")</span><br>    finish_item(req);<br><br>    <span class="hljs-comment">// start num_items comms</span><br>    <span class="hljs-keyword">repeat</span> (num_items) <span class="hljs-keyword">begin</span><br>      start_item(req);<br>      <span class="hljs-keyword">if</span> (!req<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123; mode <span class="hljs-keyword">inside</span> &#123; TX_SHORT, TX_LONG, RX_SHORT, RX_LONG &#125;; &#125;)<br>        <span class="hljs-meta">`uvm_error("RANDERR", "Randomization error")      </span><br>      finish_item(req);<br>    <span class="hljs-keyword">end</span><br><br>    start_item(req);<br>    <span class="hljs-keyword">if</span> (!req<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123; mode == SHUTDOWN; &#125;)<br>      <span class="hljs-meta">`uvm_error("RANDERR", "Randomization error")</span><br>    finish_item(req);<br>  <span class="hljs-keyword">endtask</span> <span class="hljs-comment">// body</span><br>  <br><span class="hljs-keyword">endclass</span> <span class="hljs-comment">// some_sequence</span><br></code></pre></td></tr></table></figure><p>We need to send an initial configuration command to set up the device. We follow up with the main test, throwing a few communication commands at the DUT and end it all with a shutdown. Pretty easy stuff up to now. Next, what if we want to have another sequence that restricts our traffic to only short communication commands? This already hints at class inheritance because a short communication sequence is just a specialization of our current sequence.</p><p>What disturbs us is the inline constraint on <em>req</em>, because we hardcoded the values that we want our communication commands to take. The most naïve and inefficient approach would be to just re-implement the <em>body()</em> task. In this case it’s not a big deal, because we don’t do much aside from running our traffic, right? Aside from the traffic loop which we need to slightly change, It’s just two little 4-line blocks we need to copy. But what happens if a new command gets added and we have to run that as well prior to starting our traffic? We would have a second place we have to patch. Not good.</p><p>What we could also do is spin-off our traffic loop to it’s own method and override that. This could work, but it’s so C++. The little <em>e</em>angel on my shoulder is telling me: “This would be a great time to use a constraint from above.”.</p><p>Instead of hardcoding the constraint inside the <em>with</em> block, we can put a constraint on <em>req</em> in <em>some_sequence</em>‘s scope:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> some_sequence <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(some_item)</span>;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">rand</span> some_item req;<br>    <br>  <span class="hljs-keyword">constraint</span> only_comms_c &#123;<br>    req<span class="hljs-variable">.mode</span> <span class="hljs-keyword">inside</span> &#123; TX_SHORT, TX_LONG, RX_SHORT, RX_LONG &#125;;<br>  &#125;;<br>  <br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span> <span class="hljs-comment">// some_sequence</span><br></code></pre></td></tr></table></figure><p>Now, we don’t want to randomize the whole sequence, because that would mess up the <em>num_items</em> field. Fortunately, <em>SystemVerilog</em> provides an easy way to randomize just a subset of an object’s fields. The mechanism is called <strong>in-line random variable control</strong>. Here it is in action, randomizing just the <em>req</em> field:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> some_sequence <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(some_item)</span>;<br>  <span class="hljs-comment">// ...</span><br>  <br>  <span class="hljs-keyword">task</span> body();<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// start num_items comms</span><br>    <span class="hljs-keyword">repeat</span> (num_items) <span class="hljs-keyword">begin</span><br>      start_item(req);<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span><span class="hljs-variable">.randomize</span>(req))<br>        <span class="hljs-meta">`uvm_error("RANDERR", "Randomization error")</span><br>      req<span class="hljs-variable">.set_item_context</span>(<span class="hljs-keyword">this</span>, get_sequencer);      <br>      finish_item(req);<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endtask</span> <span class="hljs-comment">// body</span><br>  <br><span class="hljs-keyword">endclass</span> <span class="hljs-comment">// some_sequence</span><br></code></pre></td></tr></table></figure><p>What is happening here is that we are randomizing inside <em>some_sequence</em>‘s scope.The solver will take all of the constraints defined in <em>some_item</em> together with the one we defined above on <em>req.mode</em>, but it will only update <em>req</em>. Think of it like disabling randomization for all fields except for <em>req</em> via calls to <em>rand_mode(0)</em>.</p><p>For some reason, the call to <em>randomize()</em> allocates a new object, even though the standard explicitly states that “[randomize] does not allocate any class objects” (IEEE Std. 1800-2012). I’ve noticed this behavior on two different simulators and can’t explain it (in a stripped down example this doesn’t happen; the object is randomized in-place). This new sequence item doesn’t have it’s context (parent sequence and sequencer) set, hence the call to <em>set_item_context(…)</em>.</p><p>If we want to create a sequence that starts only short communication commands sequences, it’s enough to extend <em>some_sequence</em>and add another constraint saying that <em>req</em> should be either <em>TX_SHORT</em> or <em>RX_SHORT</em>:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> some_other_sequence <span class="hljs-keyword">extends</span> some_sequence;<br>  <span class="hljs-meta">`uvm_object_utils(some_other_sequence)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">"some_other_sequence"</span>);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>  <span class="hljs-keyword">endfunction</span> <span class="hljs-comment">// new</span><br><br>  <span class="hljs-keyword">constraint</span> only_short_c &#123;<br>    req<span class="hljs-variable">.mode</span> <span class="hljs-keyword">inside</span> &#123; TX_SHORT, RX_SHORT &#125;;<br>  &#125;<br>  <br><span class="hljs-keyword">endclass</span> <span class="hljs-comment">// some_other_sequence</span><br></code></pre></td></tr></table></figure><p>Short and sweet, just like in <em>e</em> (well, almost, if it weren’t for all of that boilerplate code for factory registration and the trivial constructor).</p><p>We got points 2 and 3 of Reuven’s quote down, but what about point 1? The cool thing about this approach is that it could also work for non-random fields, with the caveat that the semantics of constraints are slightly different for <em>e</em> than for <em>SystemVerilog</em>. We could just as well not tag <em>req</em> as random, but we would need to take care that it’s initial value is legal with respect to the constraints (or we would need to tag the constraints as soft). This is because <em>SystemVerilog</em> checks that even constraints on just state variables also hold, whereas (I think) <em>e</em> discards them.</p><p>We could do crazy stuff like disable the constraint inside the constructor and re-enable it inside <em>post_randomize()</em>. This would ensure that when the initial randomization of the whole sequence was executed our CFA doesn’t lead to a contradiction. After re-enabling the constraint we could randomize only <em>req</em> (also in <em>post_randomize()</em>) to protect ourselves from another randomization of the sequence. You know what? Too complicated, forget it. I’ll gladly call what we did here a CFAs even though it doesn’t apply to a state variable, if it makes things simpler.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog多重继承实现</title>
      <link href="/2019/06/12/SystemVerilog%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/06/12/SystemVerilog%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog接口Class</title>
      <link href="/2019/06/12/SystemVerilog%E6%8E%A5%E5%8F%A3Class/"/>
      <url>/2019/06/12/SystemVerilog%E6%8E%A5%E5%8F%A3Class/</url>
      
        <content type="html"><![CDATA[<h3 id="SystemVerilog接口Class"><a href="#SystemVerilog接口Class" class="headerlink" title="SystemVerilog接口Class"></a>SystemVerilog接口Class</h3><p>An <strong>interface class</strong> has nothing to do with the <strong>interface</strong> construct. It represents the same concept as an interface in <em>Java</em> (a lot of <em>SystemVerilog</em>‘s object oriented programming constructs are pretty similar similar to <em>Java</em>‘s). What does an interface class do? It’s basically a collection of method declarations. Notice I’ve used the word ‘declarations’ and not ‘definitions’, as all methods of an <strong>interface class</strong> must be pure. Another class can implement an interface class, which requires it to implement all of the methods declared in that interface.</p><p>Why is this useful? I’ll answer this question with the help of an example. Let’s say I have my own library. In this library I expect to operate on a certain type of objects (by operating on objects I mean calling methods on them). Concretely, let’s say I have the ‘drivable’ interface, which defines the capabilities of an object that can be driven (I don’t want ‘car’ here and you’ll see why in just a bit). What can a drivable object do? Well, it can accelerate, it can turn and it can brake, to name a few things. We model these as functions that a drivable object has:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">interface</span> <span class="hljs-keyword">class</span> drivable_if;<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> accelerate();<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> turn_left();<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> turn_right();<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> brake();<br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>A driver can use these methods to drive a drivable object:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> driver;<br>  <span class="hljs-keyword">protected</span> drivable_if m_drivable;<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(drivable_if drivable);<br>    m_drivable = drivable;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> drive();<br>    m_drivable<span class="hljs-variable">.accelerate</span>();<br>    m_drivable<span class="hljs-variable">.turn_right</span>();<br>    m_drivable<span class="hljs-variable">.accelerate</span>();<br>    m_drivable<span class="hljs-variable">.turn_left</span>();<br>    m_drivable<span class="hljs-variable">.brake</span>();<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Our <strong>driver</strong> class can operate on any object that provides the methods of the <strong>drivable_if</strong> interface, regardless of how these methods are implemented. (I’ll use the term ‘interface’ instead of ‘interface class’ in this post, but just know that this is what I mean.)</p><p>In our code (outside of the library), we define the <strong>car</strong> class, that implements the <strong>drivable_if</strong> interface:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> car <span class="hljs-keyword">implements</span> drivable_if;<br>  <br>  <span class="hljs-comment">//----------------------------------------</span><br>  <span class="hljs-comment">// methods of drivable_if  </span><br>  <span class="hljs-comment">//----------------------------------------</span><br>  <br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> accelerate();<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"I'm accelerating"</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> turn_left();<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"I'm turning left"</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> turn_right();<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"I'm turning right"</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> brake();<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"I'm braking"</span>);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>We can now use an instance of this class, together with an instance of the driver class:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top;<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">static</span> car the_car = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">static</span> driver the_driver = <span class="hljs-keyword">new</span>(the_car);<br>    the_driver<span class="hljs-variable">.drive</span>();<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>Remember, the <strong>driver</strong> class and the <strong>drivable_if</strong> interface are defined in an own package (that we downloaded, bought, etc.), which we’ll assume we can’t change. We could, however, let our own <strong>car</strong> object be driven by the <strong>driver</strong> object, even though the <strong>driver</strong> class did not know anything about the <strong>car</strong> class. This is because the <strong>car</strong> class provides the methods that the driver expects to be able to drive it. It doesn’t matter how those methods were implemented, just that they were implemented.</p><p>What you’re now probably going to ask is: “But Tudor, why didn’t you just implement a virtual class? You can essentially get the same thing: you define the methods and you can’t create any instances of that class.”. And you would be right, but what if we want our <strong>car</strong> class to implement another interface at the same time? If I use a virtual class, I’m in trouble, because you can only extend one base class. You can, however, implement as many interfaces as you want.</p><p>What else do you want to do with a car besides drive it? You want to insure it. I don’t know how it is in other places, but in most (if not all) European countries, the insurance premium depends on the size of the car’s engine. What it may also depend on is the accident history of the car (not technically true in the real world, but please bear with me on this one). Insuring a car is a different aspect than driving it, so it makes sense to have a separate library the handles this topic. Following the example from above, this is how the interface for an insurable object (notice I didn’t say car) might look like:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">interface</span> <span class="hljs-keyword">class</span> insurable_if;<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> get_engine_size();<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> get_num_accidents();<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> get_damages(<span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> accident_index);<br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Using these methods to query an object, an insurer could compute the premium for that object:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> insurer;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> insure(insurable_if insurable);<br>    <span class="hljs-keyword">int</span> engine_size = insurable<span class="hljs-variable">.get_engine_size</span>();<br>    <span class="hljs-keyword">int</span> num_accidents = insurable<span class="hljs-variable">.get_num_accidents</span>();<br>    <span class="hljs-keyword">int</span> damages;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num_accidents; i++)<br>      damages += insurable<span class="hljs-variable">.get_damages</span>(i);<br><br>    <span class="hljs-comment">// do some bogus calculation</span><br>    <span class="hljs-keyword">return</span> engine_size * <span class="hljs-number">10</span> + damages * <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Let’s take our previous <strong>car</strong> class and expand it to be insurable. What we need to do is implement the <strong>insurable_if</strong> interface and define its methods:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> car <span class="hljs-keyword">implements</span> drivable_if, insurable_if;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> m_engine_size;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> m_damages[];<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> engine_size);<br>    m_engine_size = engine_size;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> crash(<span class="hljs-keyword">int</span> damages);<br>    m_damages = <span class="hljs-keyword">new</span>[m_damages<span class="hljs-variable">.size</span>() + <span class="hljs-number">1</span>] (m_damages);<br>    m_damages[m_damages<span class="hljs-variable">.size</span>() - <span class="hljs-number">1</span>] = damages;<br>  <span class="hljs-keyword">endfunction</span><br>  <br>  <br>  <span class="hljs-comment">//----------------------------------------</span><br>  <span class="hljs-comment">// methods of insurable_if  </span><br>  <span class="hljs-comment">//----------------------------------------</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> get_engine_size();<br>    <span class="hljs-keyword">return</span> m_engine_size;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> get_num_accidents();<br>    <span class="hljs-keyword">return</span> m_damages<span class="hljs-variable">.size</span>();<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> get_damages(<span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> accident_index);<br>    <span class="hljs-keyword">assert</span> (accident_index &lt; get_num_accidents());<br>    <span class="hljs-keyword">return</span> m_damages[accident_index];<br>  <span class="hljs-keyword">endfunction</span><br>  <br>  <br>  <span class="hljs-comment">//----------------------------------------</span><br>  <span class="hljs-comment">// methods of drivable_if  </span><br>  <span class="hljs-comment">//----------------------------------------</span><br>  <br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>I’ve added a <strong>crash()</strong> method to simulate an accident. Let’s insure our car:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top;<br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">static</span> car the_car = <span class="hljs-keyword">new</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">static</span> driver the_driver = <span class="hljs-keyword">new</span>(the_car);<br>    <span class="hljs-keyword">static</span> insurer the_insurer = <span class="hljs-keyword">new</span>();<br>    <br>    the_driver<span class="hljs-variable">.drive</span>();<br>    the_car<span class="hljs-variable">.crash</span>(<span class="hljs-number">500</span>);<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"The insurance premium is "</span>, the_insurer<span class="hljs-variable">.insure</span>(the_car));<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>What we can do now is drive the car, like before, but we can also insure it. We’ve managed to glue together two different behaviors into one single class (<strong>car</strong>) and then use them in objects that are each concerned with only one of these behaviors (<strong>driver</strong>and <strong>insurer</strong>). We also didn’t mix in any information about insurability in the drivability package and vice-versa  This wouldn’t have been possible without interface classes.</p><p>If we were to use only inheritance, this would mean that we would need to have a base class that contained both the <strong>drivable_if</strong>and the <strong>insurable_if</strong> methods. Then, both of these libraries could operate on subclasses of this class. The biggest (and I really mean big) problem with this is that this creates tight coupling between the two libraries. What if we want to use a third library? Our base class would need to contain the methods this library uses to operate on objects as well. Throw a forth library in the mix and it already becomes unmanageable. If we would want to implement just one of these behaviors in a subclass, we would still be cluttered with methods from the others. Using only inheritance results in big class hierarchies, with a lot of duplication and parallel branches.</p><p>Look at the UVM for example. It tries to do everything, simply because it has to do as much as possible. The reason is that once you’re inheriting from a UVM class, you’re kind of stuck in that class hierarchy. You have to use libraries that can operate with UVM classes. By using interface classes, you can happily extend from any UVM class, but at the same class implement any number of interfaces you want. This means you can now work with libraries that are completely agnostic of UVM. With interface classes using UVM stops being an “either/or” proposition.</p><p>The UVM BCL could also use a makeover. The current implementation of TLM is a mess in my opinion. It relies heavily on macros, with all TLM methods declared in all port types. The ones that are not supposed to be used in a certain port are blocked at run time by issuing an error. Ideally, calling a method not intended for a specific port should not make it past compile. Have a look at the implementation and tell me if that code is clear and maintainable to you (the files are uvm_tlm_ifs.svh, uvm_ports.svh and uvm_tlm_imps.svh).</p><p>TLM is implemented very cleanly in SystemC, using the interface concept. Dave Rich already touched on this subject in his DVCon Paper, “The Problems with Lack of Multiple Inheritance in SystemVerilog and a Solution”. He already stated that interfaces would solve the problem of having to copy-paste a lot of code between classes. The paper was written in 2010, so there wasn’t any <strong>interface class</strong> yet (though I suspect it was in the works). Here’s a short example of how the TLM get interfaces could be implemented:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">interface</span> <span class="hljs-keyword">class</span> uvm_blocking_get_if <span class="hljs-variable">#(type T=int)</span>;<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> get(<span class="hljs-keyword">output</span> T t);<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> peek(<span class="hljs-keyword">output</span> T t);<br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-keyword">class</span> uvm_nonblocking_get_if <span class="hljs-variable">#(type T=int)</span>;<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span> try_get(<span class="hljs-keyword">output</span> T t);<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span> can_get();<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span> try_peek(<span class="hljs-keyword">output</span> T t);<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span> can_peek();<br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-keyword">class</span> uvm_get_if <span class="hljs-variable">#(type T)</span> <span class="hljs-keyword">extends</span><br>  blocking_get_if <span class="hljs-variable">#(T)</span>,<br>  nonblocking_get_if <span class="hljs-variable">#(T)</span>;<br></code></pre></td></tr></table></figure><p>Here we also see another cool fact: an interface class can extend as many interface classes as it wants. This means that the <strong>uvm_get_if</strong> will declare all of the methods of both the <strong>uvm_blocking_get_if</strong> and of the <strong>uvm_nonblocking_get_if</strong>. The family of <em>get</em> ports will implement these interfaces:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_blocking_get_port <span class="hljs-variable">#(type T=int)</span> <span class="hljs-keyword">implements</span><br>  uvm_blocking_get_if <span class="hljs-variable">#(T)</span>;<br>  <span class="hljs-comment">// ...</span><br>  <br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> get(<span class="hljs-keyword">output</span> T t);<br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endtask</span><br>  <br>  <span class="hljs-comment">// other uvm_blocking_get_if interface methods ...</span><br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">class</span> uvm_nonblocking_get_port <span class="hljs-variable">#(type T=int)</span> <span class="hljs-keyword">implements</span><br>  uvm_nonblocking_get_if <span class="hljs-variable">#(T)</span>;<br>  <span class="hljs-comment">// ...</span><br>  <br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span> try_get(<span class="hljs-keyword">output</span> T t);<br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endfunction</span><br>  <br>  <span class="hljs-comment">// other uvm_nonblocking_get_if interface methods ...</span><br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">class</span> uvm_get_port <span class="hljs-variable">#(type T=int)</span> <span class="hljs-keyword">implements</span><br>  uvm_get_if <span class="hljs-variable">#(T)</span>;<br>  <span class="hljs-comment">// ...</span><br>  <br>  <span class="hljs-comment">// uvm_blocking_get_if interface methods ...</span><br>  <br>  <span class="hljs-comment">// uvm_nonblocking_get_if interface methods ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Doing the following will now result in a compile error:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog">uvm_nonblocking_get_port some_port = <span class="hljs-keyword">new</span>();<br>some_item item;<br><br>some_port<span class="hljs-variable">.get</span>(item);<br></code></pre></td></tr></table></figure><p>The <strong>get(…)</strong> method is not defined in the <strong>uvm_nonblocking_get_port_if</strong> interface, so the compiler can immediately flag an error, something that isn’t possible in the current release of the UVM library.</p><p>Now, dare I say that the whole TLM aspect could be spun out into a standalone library that could be used by others that want to use TLM, but not the whole UVM? Yes I do dare, but whether this will happen is doubtful. Many more such examples could be found in the UVM BCL; to name one, the whole sequence mechanism is also a pretty unwieldy beast.</p><p>I hope this post inspires you to incorporate interface classes into your coding to enable the creation of reusable libraries that are orthogonal to each other, but can be used together. A great example of this is the <em>Java</em> standard library. I also hope that this new feature will lead to the creation of more open source packages that can accomplish various tasks. </p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog枚举Class</title>
      <link href="/2019/06/12/SystemVerilog%E6%9E%9A%E4%B8%BEClass/"/>
      <url>/2019/06/12/SystemVerilog%E6%9E%9A%E4%B8%BEClass/</url>
      
        <content type="html"><![CDATA[<h3 id="SystemVerilog枚举Class"><a href="#SystemVerilog枚举Class" class="headerlink" title="SystemVerilog枚举Class"></a>SystemVerilog枚举Class</h3><p>A well known <em>SystemVerilog</em> limitation is that the same literal cannot appear in more enumerated types within a package (or more precisely within a scope).</p><p>Let’s look at a concrete example. We’ll assume that we’re verifying a DUT that can receive data from the outside world, perform some mathematical operations on it and sends it back. We want to model the operations that our DUT performs and the best way to do that is by using two enumerated types:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> my_pkg;<br><br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, TX, RX &#125; comm_action_t;<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, ADD, SUB &#125; math_action_t;<br>  <br>  <span class="hljs-comment">// code that uses the enums</span><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>The DUT doesn’t continuously crunch data, so we want to add a literal for each <strong>enum</strong> to represent it not doing anything. Let’s use the value <strong>NONE</strong> (I know that for math operations the value <strong>NOP</strong> would have been more appropriate, but please bear with me, I’m trying to illustrate a point). As discussed above, this code won’t compile, because <strong>NONE</strong> is declared in both types.</p><p>What I’ve seen people do in this case is try to uniquify the names by adding either prefixes or suffixes. I, too, plead guilty to this. For example, the <strong>math_action_t</strong> type would contain the value <strong>NONE2</strong>, in order not to clash with the <strong>NONE</strong> from <strong>comm_action_t</strong>. This solution seems clumsy to me. Not only that, but if you’re trying to connect to a <em>VHDL</em> DUT one “Big Three” simulator is going to complain because the literals don’t exactly match (note: <em>VHDL</em> allows the same literal to be present in multiple types).</p><p>A very naïve solution would be to define each type in its own package. In the main package we would then import both of these packages:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> pkg1;<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, TX, RX &#125; comm_action_t;<br><span class="hljs-keyword">endpackage</span><br><br><span class="hljs-keyword">package</span> pkg2;<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, ADD, SUB &#125; math_action_t;<br><span class="hljs-keyword">endpackage</span><br><br><br><span class="hljs-keyword">package</span> my_pkg;<br>  <span class="hljs-keyword">import</span> pkg1::*;<br>  <span class="hljs-keyword">import</span> pkg2::*;<br>  <br>  <span class="hljs-keyword">class</span> model;<br>    comm_action_t comm_action;<br>    math_action_t math_action;<br>    <br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endclass</span><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>We’ve solved the collision problem, because each type is now defined in its own scope. We can have our cake and eat it too! Or can we? Let’s see what happens if we try to use the <strong>NONE</strong> literal in some procedural code:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> model;<br>  <span class="hljs-comment">// ...</span><br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();    <br>    comm_action = NONE;<br>    math_action = NONE;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Your simulator should, at this point, cowardly refuse to compile the code above, because the literal <strong>NONE</strong> was imported via wildcards multiple times and it’s ambiguous. The correct way to do it is to qualify it with the appropriate packages:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> model;<br>  <span class="hljs-comment">// ...</span><br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();    <br>    comm_action = pkg1::NONE;<br>    math_action = pkg2::NONE;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>This solution works as well as the first one. In some respects it’s more elegant, but it’s also clumsier. Creating a package for each <strong>enum</strong> will pollute our work library. Also, when using literals in our code, the values <strong>ADD</strong> and <strong>TX</strong>, for example, can be written as-is, but we have to write <strong>pkg1::NONE</strong>. This isn’t uniform at all. In addition, think of what would happen if we had to add a new type to a third package that doubled up the value <strong>ADD</strong>. We’d have to go and scope all of the existing references to <strong>ADD</strong> with <strong>pkg2</strong>.</p><p>Let’s take a step back and consider another situation. What if we want to model each area of functionality separately? What I mean is, instead of creating a big <strong>model</strong> class that can handle everything, let’s assume that we can create a clean split between the communication side and the math side. In this case, each model would be an own class. This means that each class can just embed the enumerated variable definition:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> comm_model;<br>  <span class="hljs-keyword">enum</span> &#123; NONE, TX, RX &#125; comm_action;<br>  <br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">class</span> math_model;<br>  <span class="hljs-keyword">enum</span> &#123; NONE, ADD, SUB &#125; math_action;<br>  <br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Since each class represents a different scope, we don’t have any problem with the definition of <strong>NONE</strong>. What we defined here for <strong>comm_model</strong>, for example, is just a variable called <strong>comm_action</strong> that can take any of the three values. We can use this as we would any enumerated variable. Hey, you know what else we can define inside a class? An actual type. I guess you already know why I made this little detour…</p><p>What if we mixed the two approaches and just defined each type in its own class instead of in its own package? Here’s how this would look like:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> my_pkg;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> comm_action_wrap;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, TX, RX &#125; t;<br>  <span class="hljs-keyword">endclass</span><br>  <br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> math_action_wrap;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, ADD, SUB &#125; t;<br>  <span class="hljs-keyword">endclass</span><br>  <br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>Again, since each class is its own scope, we don’t have any problem with collisions. Also, to prevent anyone from instantiating these classes, we define them virtual; their only purpose is to wrap the type definitions. If we want to use these wrapped enumerations, we have to scope them with their containing classes:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> model;<br>  comm_action_wrap::t comm_action;<br>  math_action_wrap::t math_action;<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>();<br>    comm_action = comm_action_wrap::NONE;<br>    math_action = math_action_wrap::NONE;<br>  <span class="hljs-keyword">endfunction</span><br>    <br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Notice that we also need to scope the <strong>enum</strong> literals. This solution is more uniform, in that it treats all literals the same (we have to scope all of them). It’s also better encapsulated, since we only create extra class types inside our own package. It is, of course, more verbose, but we can’t getting something for nothing.</p><p><em>C++</em> had the same problem with enumerated types, but the C++11 standard fixed that by adding a new construct, the <strong>enum class</strong>. This is basically the same thing as we just saw above, but it is a first class construct in the language.</p><p>I for one would like to see a similar enhancement to <em>SystemVerilog</em> in the future. What I would avoid, however, is calling it an <strong>enum class</strong>, as I think the word “class” carries a different connotation and would just confuse users (we anyway have the problem that the word “interface” has a double meaning). What might be practical though is to add scoping to the current construct and to allow the compiler to determine the type of a literal based on the context (à la <em>VHDL</em> or <em>e</em>). Here’s what I mean:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123; NONE, TX, RX &#125; comm_action_t;<br><br><span class="hljs-keyword">class</span> some_class;<br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> do_stuff();<br>    comm_action_t comm_action = TX;<br>    <span class="hljs-comment">// ...</span><br>    <br>    <span class="hljs-keyword">if</span> (comm_action == RX) <span class="hljs-keyword">begin</span><br>      <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endfunction</span><br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> do_other_stuff();<br>    <span class="hljs-keyword">int</span> some_int = <span class="hljs-keyword">int</span>'(comm_action_t::NONE);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>In the code snippet above, when assigning a value to <strong>comm_action</strong> we can just omit the scope operator, because from the context we know that the left hand side of the expression is of type <strong>comm_action_t</strong>, so we would expect the right hand side to be of the same type. The situation is similar for the logical operator inside the <strong>if</strong> statement. If however we want to do a cast, we can’t figure out from the context what <strong>enum</strong> the value <strong>NONE</strong> belongs to (as it could be multiply defined), so we have to use the <strong>::</strong> operator. This solution would mean that code written in SV2012 could potentially be incompatible to the SV2099 version (that includes this proposal), but I would expect the occurrences of the third construct (the casting) to be far fewer than those of the first two constructs (where we can determine the type from the context).</p><p>In the meantime, our best bet is to just wrap enumerated types in virtual classes to avoid name collisions between literals.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM RAL中的保留字段如何模拟？</title>
      <link href="/2019/06/11/UVM-RAL%E4%B8%AD%E7%9A%84%E4%BF%9D%E7%95%99%E5%AD%97%E6%AE%B5%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%EF%BC%9F/"/>
      <url>/2019/06/11/UVM-RAL%E4%B8%AD%E7%9A%84%E4%BF%9D%E7%95%99%E5%AD%97%E6%AE%B5%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog文档生成~代码检视~</title>
      <link href="/2019/06/11/SystemVerilog%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90-%E4%BB%A3%E7%A0%81%E6%A3%80%E8%A7%86/"/>
      <url>/2019/06/11/SystemVerilog%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90-%E4%BB%A3%E7%A0%81%E6%A3%80%E8%A7%86/</url>
      
        <content type="html"><![CDATA[<h3 id="借用Accellera-生成器，UVM-SV代码检视可以用了"><a href="#借用Accellera-生成器，UVM-SV代码检视可以用了" class="headerlink" title="借用Accellera 生成器，UVM-SV代码检视可以用了~"></a>借用Accellera 生成器，UVM-SV代码检视可以用了~</h3><p><img src="/2019/06/11/SystemVerilog文档生成-代码检视/doc.png" alt="doc"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM-RAL自定义字段访问策略</title>
      <link href="/2019/06/11/UVM-RAL%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%AD%96%E7%95%A5/"/>
      <url>/2019/06/11/UVM-RAL%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM-RAL Burst R/W的三种基本方法</title>
      <link href="/2019/06/10/UVM-RAL-Burst-R-W%E7%9A%84%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/"/>
      <url>/2019/06/10/UVM-RAL-Burst-R-W%E7%9A%84%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向UVM工厂注册抽象基类</title>
      <link href="/2019/06/10/%E5%90%91UVM%E5%B7%A5%E5%8E%82%E6%B3%A8%E5%86%8C%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB/"/>
      <url>/2019/06/10/%E5%90%91UVM%E5%B7%A5%E5%8E%82%E6%B3%A8%E5%86%8C%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>Every now and again I stumble upon a situation where it’s natural to use an abstract class. A typical example is when working with parameterized classes and wanting to swap parameterizations:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> some_abstract_component <span class="hljs-keyword">extends</span> uvm_component;<br>  <span class="hljs-keyword">pure</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> do_stuff();<br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>    do_stuff();<br>  <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br><br><br><span class="hljs-keyword">class</span> some_concrete_param_component <span class="hljs-variable">#(type T = int)</span> <span class="hljs-keyword">extends</span><br>  some_abstract_component;<br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> do_stuff();<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"I'm doing %s stuff"</span>, <span class="hljs-built_in">$typename</span>(T));<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>This is something we used on coverage extendability, when we talked about having policy classes as parameters to coverage collector components.</p><p>Each parameterization of a class creates an own inheritance tree independent of the others. If we want to be able to store any parameterization in a variable, we need a common base class:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog">some_abstract_component comp;<br>some_concrete_param_component <span class="hljs-variable">#(bit) bit_comp = new()</span>;<br>some_concrete_param_component <span class="hljs-variable">#(real) real_comp = new()</span>;<br><br><span class="hljs-comment">// allowed</span><br>comp = bit_comp;<br><br><span class="hljs-comment">// also allowed</span><br>comp = real_comp;<br></code></pre></td></tr></table></figure><p>By tagging the base class as <strong>virtual</strong> we’ve marked it as incomplete. We’ve declared that it can do something (via the <em>do_stuff()</em>function), but we haven’t yet told the compiler how it can do it. This is left to sub-classes. We want to be able to easily swap parameterizations, without resorting to a big <strong>if/else</strong> cascade or a long <strong>case</strong> statement. This is what the UVM factory is for. Assuming that both types are registered with the factory we could do the following:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog">some_abstract_component comp = some_abstract_component::type_id::create(...);<br><br><span class="hljs-comment">// In a test, before creating 'comp'</span><br>some_abstract_component::type_id::set_type_override(<br>  some_concrete_param_component <span class="hljs-variable">#(bit)::get_type())</span>;<br><br><span class="hljs-comment">// In a different test, also before creating 'comp'</span><br>some_abstract_component::type_id::set_type_override(<br>  some_concrete_param_component <span class="hljs-variable">#(real)::get_type())</span>;<br></code></pre></td></tr></table></figure><p>The type overrides let the factory know that wherever we wanted to instantiate <em>some_abstract_component</em> it should instantiate the overridden type instead. We can’t (officially) do this out of the box.</p><p>Depending on your simulator you can see one of the following outcomes when using the <em>uvm_object_utils</em> macro with a virtual class:</p><ol><li>the code compiles without any problems; if the virtual class constructor ends up being called (which would happen if we’d forget to set an override) a fatal error is issued</li><li>you get a warning that you’re trying to instantiate a virtual class, but the code still compiles; as above, actually calling the constructor is not allowed</li><li>the compiler stops with an error saying that it’s illegal to instantiate a virtual class</li></ol><p>Out of the three above, only outcome number 3 follows the LRM strictly. In the interest of portability, we shouldn’t be writing code that relies on vendor “features” to compile. This is the whole reason why we as an industry have moved to <em>SystemVerilog</em>, isn’t it?</p><p>Let’s look at what the uvm_component_utils macro expands to:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> some_abstract_class <span class="hljs-keyword">extends</span> uvm_component;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-comment">// `uvm_component_utils(some_abstract_class)</span><br>  <span class="hljs-meta">`m_uvm_component_registry_internal(some_abstract_class, some_abstract_class)</span><br>  <span class="hljs-meta">`m_uvm_get_type_name_func(some_abstract_class)</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Let’s dig deeper and see how factory registration is done by also expanding the <em>m_uvm_component_registry_internal(…)</em> macro:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> some_abstract_class <span class="hljs-keyword">extends</span> uvm_component;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-comment">// `m_uvm_component_registry_internal(some_abstract_class, ...)</span><br>  <span class="hljs-keyword">typedef</span> uvm_component_registry #(some_abstract_class,<br>    <span class="hljs-string">"some_abstract_class"</span>) type_id;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> type_id get_type();<br>    <span class="hljs-keyword">return</span> type_id::get();<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_object_wrapper get_object_type();<br>    <span class="hljs-keyword">return</span> type_id::get();<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The veil of secrecy is being lifted. The ominous <em>type_id</em> that we’ve been using is actually a <strong>typedef</strong> that is shorthand for a parameterization of <em>uvm_component_registry</em>. If we open up its source code we can find the offending function:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_component_registry <span class="hljs-variable">#(...)</span> <span class="hljs-keyword">extends</span> uvm_object_wrapper;<br><br>  <span class="hljs-comment">// After elaboration with 'some_abstract_class' as an parameter</span><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_component create_component (<span class="hljs-keyword">string</span> name,<br>                                                   uvm_component parent);<br>    some_abstract_class obj;<br>    obj = <span class="hljs-keyword">new</span>(name, parent);  <span class="hljs-comment">// !!!</span><br>    <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The <em>create_component(…)</em> function calls <em>new(…)</em> to get an object of the type its parameterized with, which in our case is <em>some_abstract_class</em>. Because of this, we can’t parameterize <em>uvm_component_registry</em> with a virtual class. The same point also applies for classes that inherit directly from <em>uvm_object</em> and its corresponding <em>uvm_object_registry</em>.</p><p>Before we continue, it might be a good idea to take a step back and look at what exactly happens when we create an object using the factory. The first cog in the machine is the <em>uvm_object_wrapper</em> class, which contains two methods, <em>create_object(…)</em> and <em>create_component(…)</em>. The class itself is <strong>virtual</strong> and these methods are almost <strong>pure virtual</strong> (in the sense that they don’t do anything)<strong>:</strong></p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">class</span> uvm_object_wrapper;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_object create_object (<span class="hljs-keyword">string</span> name=<span class="hljs-string">""</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_component create_component (<span class="hljs-keyword">string</span> name,<br>                                                   uvm_component parent);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>A class that can be created by the factory must have a corresponding <em>uvm_object_wrapper</em> associated with it, that implements the corresponding <em>create_\</em>(…)* function to call that class’s constructor, thereby returning an instance of that class:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> some_class <span class="hljs-keyword">extends</span> uvm_object;<br>  <span class="hljs-keyword">extern</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name);<br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">class</span> some_class_wrapper <span class="hljs-keyword">extends</span> uvm_object_wrapper;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_object create_object(<span class="hljs-keyword">string</span> name);<br>    some_class obj = <span class="hljs-keyword">new</span>(name);<br>    <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The factory can create an instance of <em>some_class</em> by using its wrapper:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_factory;<br>  <span class="hljs-keyword">function</span> uvm_object create_object_by_type(uvm_object_wrapper requested_type,<br>    <span class="hljs-keyword">string</span> name = <span class="hljs-string">""</span><br>  );<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> requesed_type<span class="hljs-variable">.create_object</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>It would be rather boring if this is all it would do, because what would then be the point of using the factory? We could just as easily create an object in our user code. What the factory first does is it checks if there is an override in place. If there is, instead of calling <em>create_object(…)</em> on the wrapper it got as an argument, it’s going to call it on the wrapper of the overriding type:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_factory;<br>  <span class="hljs-keyword">function</span> uvm_object create_object_by_type(uvm_object_wrapper requested_type,<br>    <span class="hljs-keyword">string</span> name = <span class="hljs-string">""</span><br>  );<br>    uvm_object_wrapper returned_type;<br>    <span class="hljs-keyword">if</span> (has_override(requested_type))<br>      returned_type = get_override(requested_type);<br>    <span class="hljs-keyword">else</span><br>      returned_type = requested_type;<br>    <span class="hljs-keyword">return</span> returned_type<span class="hljs-variable">.create_object</span>(name);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>For simplicity, we can imagine that the lookup mechanism works like a look up table, which maps one wrapper to a potentially different wrapper.</p><p>Let’s go back to how wrappers are defined. What we’ve looked at up to now are the classes behind the curtain of encapsulation, that we as users don’t normally see. As the task of registering a class with the factory is something that we need to do quite often, the nice people at Accellera defined some classes that can handle this easily: <em>uvm_object_registry</em> and <em>uvm_component_registry</em>. These are sub-classes of <em>uvm_object_wrapper</em> and parameterized with the class they are supposed to create:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_object_registry <span class="hljs-variable">#(type T=uvm_object)</span> <span class="hljs-keyword">extends</span> uvm_object_wrapper;<br>  <span class="hljs-keyword">typedef</span> uvm_object_registry <span class="hljs-variable">#(T)</span> this_type;<br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>This way, these classes can provide generic implementations of <em>create_object(…)</em> and <em>create_component(…)</em>, respectively:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_object_registry <span class="hljs-variable">#(type T=uvm_object)</span> <span class="hljs-keyword">extends</span> uvm_object_wrapper;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_object create_object(<span class="hljs-keyword">string</span> name);<br>    T obj = <span class="hljs-keyword">new</span>(name);<br>    <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>By having the class of interest as a parameter, we avoid having to always declare a sub-class for each new class we want to use with the factory. The <em>*_registry</em> classes also provide the famous <em>create(…)</em> function we’ve been told to always call instead of <em>new(…)</em>. This function gets an instance of the registry class its being called on and passes it to the factory to do the actual creation:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_object_registry <span class="hljs-variable">#(type T=uvm_object)</span> <span class="hljs-keyword">extends</span> uvm_object_wrapper;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> T create(<span class="hljs-keyword">string</span> name);<br>    uvm_object obj;<br>    uvm_factory f = uvm_factory::get();<br>    obj = f<span class="hljs-variable">.create_object_by_type</span>(get());<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">$cast</span>(create, obj))<br>      uvm_report_fatal(<span class="hljs-string">"FCTTYP"</span>, <span class="hljs-string">"..."</span>, UVM_NONE);<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The registry classes are implemented as singletons; this means that there can only ever be a single instance of a certain registry and the <em>get(…)</em> function will return it. The object returned by the factory needs to be cast to make sure that it’s compatible with the original class. This means it has to be of either the same type or a sub-class.</p><p>Now that we know a little more about how the factory mechanism is implemented, we can get back to the problem at hand: associating abstract classes with registry classes.</p><p>A cool feature that <em>C++</em> has is template specialization. This means that it’s possible to modify the implementation of the code that gets generated when a template is specialized with a certain type. For our example, this would mean that we would writing something like:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> uvm_component_registry <span class="hljs-variable">#(some_abstract_class, ...)</span> <span class="hljs-keyword">extends</span><br>  uvm_object_wrapper;<br><br>  <span class="hljs-comment">// After elaboration with 'some_abstract_class' as an parameter</span><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_component create_component (<span class="hljs-keyword">string</span> name,<br>                                                   uvm_component parent);<br>    <span class="hljs-meta">`uvm_fatal("NEWERR", "Trying to create a virtual class")</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>This means that for all other classes except <em>some_abstract_class</em> the <em>create_component(…)</em> function does exactly what it used to do in the generic implementation (i.e. it instantiates an object). For <em>some_abstract_class</em> it issues a fatal error instead, because this means that the user forgot something (most likely a factory override). This mechanism isn’t supported by <em>SystemVerilog</em>, so we’ll have to find another solution.</p><p>If we go back to the macro expansion, we can see that we can replace the type of <em>type_id</em> with something other than <em>uvm_component_registry</em>. We need a different class that extends <em>uvm_object_wrapper</em>, but doesn’t call the constructor of the class it’s parameterized with and instead issues a fatal error:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> vgm_abstract_component_registry #(<span class="hljs-keyword">type</span> T=uvm_component,<br>  <span class="hljs-keyword">string</span> Tname=<span class="hljs-string">"&lt;unknown&gt;"</span>) <span class="hljs-keyword">extends</span> uvm_object_wrapper;<br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_component create_component(<span class="hljs-keyword">string</span> name,<br>    uvm_component parent<br>  );<br>    <span class="hljs-meta">`uvm_fatal("INTERR", $sformatf("Trying to create an instance of class %s",</span><br>      Tname))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>We also need to implement the singleton infrastructure required to get an instance of the class:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> vgm_abstract_component_registry #(<span class="hljs-keyword">type</span> T=uvm_component,<br>  <span class="hljs-keyword">string</span> Tname=<span class="hljs-string">"&lt;unknown&gt;"</span>) <span class="hljs-keyword">extends</span> uvm_object_wrapper;<br><br>  <span class="hljs-keyword">typedef</span> vgm_abstract_component_registry <span class="hljs-variable">#(T, Tname)</span> this_type;<br><br>  <span class="hljs-keyword">local</span> <span class="hljs-keyword">static</span> this_type me = get();<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> this_type get();<br>    <span class="hljs-keyword">if</span> (me == <span class="hljs-literal">null</span>) <span class="hljs-keyword">begin</span><br>      uvm_factory f = uvm_factory::get();<br>      me = <span class="hljs-keyword">new</span>();<br>      f<span class="hljs-variable">.register</span>(me);<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> me;<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The key part of the whole mechanism, the <em>create(…)</em> function is still missing. Notice that we’ve extended our class from <em>uvm_object_wrapper</em> directly. What I first tried was to extend <em>uvm_component_registry</em>, so I would only need to override the methods of interest and inherit the rest from the base class. This didn’t work, because that would mean elaborating the base class with a virtual class as its parameter, which results in an instant compile error. Even if the latter doesn’t happen, since the <em>create(…)</em> function of <em>uvm_component_registry</em> calls the class’s <em>get()</em> function (which is <strong>static</strong>) it won’t ever be possible to get it to call the <em>get()</em> function defined in the sub-class. This means that the factory would always receive an instance of <em>uvm_component_registry</em>.</p><p>What we need to do is (gasp!) duplicate the code that implements <em>create(…)</em> and <em>set_\</em>_override(…)*, to allow users to use the new registry class in the same way as the original one from UVM:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> vgm_abstract_component_registry #(<span class="hljs-keyword">type</span> T=uvm_component,<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> T create(<span class="hljs-keyword">string</span> name, uvm_component parent, <span class="hljs-keyword">string</span> contxt=<span class="hljs-string">""</span>);<br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endfunction</span><br><br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set_type_override (uvm_object_wrapper override_type,<br>                                          <span class="hljs-keyword">bit</span> replace=<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endfunction</span><br><br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> set_inst_override(uvm_object_wrapper override_type,<br>                                         <span class="hljs-keyword">string</span> inst_path,<br>                                         uvm_component parent=<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>A lot of this clipboard based inheritance could have been avoided with some better choice of class hierarchy. Even the <em>uvm_object_registry</em> and <em>uvm_component_registry</em> classes contain a lot of duplicated code that could have been refactored. For example, a <em>uvm_registry</em> base class could have provided the required infrastructure for creation and factory overrides.</p><p>Aside from registering a class with the factory, we’ve seen that the <em>uvm_\</em>_utils<em> macros do a bit more, like implementing the </em>get_type_name()* function. To have a similar look and feel to the UVM macros, we could define their abstract counterparts:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> vgm_abstract_component_utils(T) \</span><br>   <span class="hljs-meta">`m_vgm_abstract_component_registry_internal(T,T) \</span><br>   <span class="hljs-meta">`m_uvm_get_type_name_func(T)</span><br><br><span class="hljs-meta">`<span class="hljs-meta-keyword">define</span> m_vgm_abstract_component_registry_internal(T,S) \</span><br>   <span class="hljs-keyword">typedef</span> vgm_abstract_component_registry <span class="hljs-variable">#(T,`"S`")</span> type_id; \<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> type_id get_type(); \<br>     <span class="hljs-keyword">return</span> type_id::get(); \<br>   <span class="hljs-keyword">endfunction</span> \<br>   <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> uvm_object_wrapper get_object_type(); \<br>     <span class="hljs-keyword">return</span> type_id::get(); \<br>   <span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p>I’ve only shown the <em>abstract_component_utils</em> macro, but we can extend the concept to the <em>abstract_object_utils</em> macro, their <em>begin/end</em> variants and the <em>param</em> versions. I know we’re not supposed to be using the <em>m_uvm_*</em> versions of the macros, but I like to live on the wild side. For code that is supposed to enhance the library, I guess it’s not a big problem if it’s tightly coupled to its implementation.</p><h3 id="读到这里说明你毅力不错，最重要的是UVM-1-2已经可以直接注册了，是不是被欺骗了得感觉？！！哈哈！"><a href="#读到这里说明你毅力不错，最重要的是UVM-1-2已经可以直接注册了，是不是被欺骗了得感觉？！！哈哈！" class="headerlink" title="读到这里说明你毅力不错，最重要的是UVM-1.2已经可以直接注册了，是不是被欺骗了得感觉？！！哈哈！"></a>读到这里说明你毅力不错，最重要的是UVM-1.2已经可以直接注册了，是不是被欺骗了得感觉？！！哈哈！</h3>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心跳测试</title>
      <link href="/2019/06/10/%E5%BF%83%E8%B7%B3%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/06/10/%E5%BF%83%E8%B7%B3%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="心跳测试"><a href="#心跳测试" class="headerlink" title="心跳测试"></a>心跳测试</h3><ul><li>查找死循环~~~<figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> test;<br><br><span class="hljs-comment">//UVM Library</span><br><span class="hljs-keyword">import</span> uvm_pkg::*;<br><span class="hljs-meta">`<span class="hljs-meta-keyword">include</span> "uvm_macros.svh"</span><br><br><span class="hljs-comment">// Declare an objection for the heartbeat mechanism</span><br>uvm_callbacks_objection hb_obj = <span class="hljs-keyword">new</span>(<span class="hljs-string">"hb_obj"</span>);<br><br><span class="hljs-keyword">class</span> child_component <span class="hljs-keyword">extends</span> uvm_component;<br>  <span class="hljs-keyword">int</span> num_hb = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><br>  <span class="hljs-meta">`uvm_component_utils_begin(child_component)</span><br>    <span class="hljs-meta">`uvm_field_int(num_hb, UVM_DEFAULT)</span><br>  <span class="hljs-meta">`uvm_component_utils_end</span><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>    <span class="hljs-meta">`uvm_info("HBS", $sformatf("####: NUM HB: %0d", num_hb), UVM_LOW);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;num_hb; i++) <span class="hljs-keyword">begin</span><br>      <span class="hljs-comment">// Raise an objection num_hb times - at #90 intervals</span><br>      #<span class="hljs-number">90</span> hb_obj<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">end</span>  <br>  <span class="hljs-keyword">endtask</span> : run_phase<br><span class="hljs-keyword">endclass</span> : child_component<br><br><span class="hljs-keyword">class</span> parent_component <span class="hljs-keyword">extends</span> uvm_agent;<br>  child_component child_0, child_1, child_2;<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><br>  <span class="hljs-meta">`uvm_component_utils(parent_component)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>    child_0 = child_component::type_id::create(<span class="hljs-string">"child_0"</span>, <span class="hljs-keyword">this</span>);<br>    child_1 = child_component::type_id::create(<span class="hljs-string">"child_1"</span>, <span class="hljs-keyword">this</span>);<br>    child_2 = child_component::type_id::create(<span class="hljs-string">"child_2"</span>, <span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endfunction</span> : build_phase<br><span class="hljs-keyword">endclass</span> : parent_component<br><br><span class="hljs-keyword">class</span> simple_test <span class="hljs-keyword">extends</span> uvm_test;<br>  parent_component parent_0;<br>  <span class="hljs-comment">// Declare the heartbeat event and component</span><br>  uvm_event hb_e;<br>  uvm_heartbeat my_heartbeat;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>  <span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><br>  <span class="hljs-meta">`uvm_component_utils(simple_test)</span><br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.build_phase</span>(phase);<br>    uvm_config_int::set(<span class="hljs-keyword">this</span>, <span class="hljs-string">"parent_0.child_0"</span>, <span class="hljs-string">"num_hb"</span>, <span class="hljs-number">3</span>);<br>    uvm_config_int::set(<span class="hljs-keyword">this</span>, <span class="hljs-string">"parent_0.child_1"</span>, <span class="hljs-string">"num_hb"</span>, <span class="hljs-number">5</span>);<br>    uvm_config_int::set(<span class="hljs-keyword">this</span>, <span class="hljs-string">"parent_0.child_2"</span>, <span class="hljs-string">"num_hb"</span>, <span class="hljs-number">2</span>);<br>    parent_0 = parent_component::type_id::create(<span class="hljs-string">"parent_0"</span>, <span class="hljs-keyword">this</span>);<br>    my_heartbeat = <span class="hljs-keyword">new</span>(<span class="hljs-string">"my_heartbeat"</span>, <span class="hljs-keyword">this</span>, hb_obj);<br>    hb_e = <span class="hljs-keyword">new</span>(<span class="hljs-string">"hb_e"</span>);<br>  <span class="hljs-keyword">endfunction</span> : build_phase<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br>    uvm_component hb_l[$];<br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase);<br>    <span class="hljs-comment">// Set the heartbeat mode (default is UVM_ALL_ACTIVE)</span><br>    <span class="hljs-comment">//    UVM_ALL_ACTIVE: All registered components must emit a heartbeat during the window</span><br>    <span class="hljs-comment">//    UVM_ANY_ACTIVE: One or more components must emit a heartbeat during the window</span><br>    <span class="hljs-comment">//    UVM_ONE_ACTIVE: Exactly one component must emit the heartbeat during the window</span><br>    <span class="hljs-keyword">void</span>'(my_heartbeat<span class="hljs-variable">.set_mode</span>(UVM_ANY_ACTIVE));<br>    <span class="hljs-comment">// Set the heartbeat event and component list</span><br>    my_heartbeat<span class="hljs-variable">.set_heartbeat</span>(hb_e, hb_l);<br>    <span class="hljs-comment">// Add each component to the heartbeat component list</span><br>    my_heartbeat<span class="hljs-variable">.add</span>(parent_0<span class="hljs-variable">.child_0</span>);<br>    my_heartbeat<span class="hljs-variable">.add</span>(parent_0<span class="hljs-variable">.child_1</span>);<br>    my_heartbeat<span class="hljs-variable">.add</span>(parent_0<span class="hljs-variable">.child_2</span>);<br>  <span class="hljs-keyword">endfunction</span> : connect_phase<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> start_of_simulation_phase(uvm_phase phase);<br>    <span class="hljs-keyword">this</span><span class="hljs-variable">.print</span>();<br>  <span class="hljs-keyword">endfunction</span>  : start_of_simulation_phase<br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>    phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">"Raising in the test"</span>);<br><span class="hljs-meta">`<span class="hljs-meta-keyword">ifdef</span> PASSING</span><br>    <span class="hljs-keyword">repeat</span> (<span class="hljs-number">5</span>)  #<span class="hljs-number">100</span> hb_e<span class="hljs-variable">.trigger</span>;<br><span class="hljs-meta">`<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-keyword">repeat</span> (<span class="hljs-number">10</span>)  #<span class="hljs-number">100</span> hb_e<span class="hljs-variable">.trigger</span>;<br><span class="hljs-meta">`<span class="hljs-meta-keyword">endif</span></span><br>    phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">"Dropping in the test"</span>);<br><br>  <span class="hljs-keyword">endtask</span> : run_phase<br><br><span class="hljs-keyword">endclass</span> : simple_test<br><br><span class="hljs-keyword">initial</span><br>   run_test(<span class="hljs-string">"simple_test"</span>);<br><br><span class="hljs-keyword">endmodule</span> : test<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 消除讨厌的UVM_WARNING:[TPRGED]</title>
      <link href="/2019/06/10/%E6%B6%88%E9%99%A4%E8%AE%A8%E5%8E%8C%E7%9A%84UVM-WARNING-TPRGED/"/>
      <url>/2019/06/10/%E6%B6%88%E9%99%A4%E8%AE%A8%E5%8E%8C%E7%9A%84UVM-WARNING-TPRGED/</url>
      
        <content type="html"><![CDATA[<h3 id="包，类名和UVM-的前缀、后缀？"><a href="#包，类名和UVM-的前缀、后缀？" class="headerlink" title="包，类名和UVM 的前缀、后缀？"></a>包，类名和UVM 的前缀、后缀？</h3><p>Some time ago I wrote a post that challenged some of the established coding conventions of modern <em>SystemVerilog</em>. In particular, I expressed my displeasure with the fact that all training material from EDA companies, tutorial sites and other learning resources state that packages should always contain a <em>“_pkg”</em> suffix appended to the package name and that all identifiers in the package (class/function/constant names) should contain the package name as a prefix. I attribute this to the significant <em>C</em> legacy that exists in our field, as the <em>C</em> language doesn’t have any construct for packaging code.</p><p>I’ve started to drop the package name prefix from any new code I’m writing, both for the blog (as you might have noticed), but also at work. By seeing how this works out in “real life”, I’ve noticed some pitfalls. The first is, of course, that people will come and complain that this doesn’t satisfy the commandments given to us by the lords of <em>SystemVerilog</em>. I’ve yet to hear any compelling argument against dropping package names from classes. Moreover, the only arguments I’ve ever heard were “this isn’t how everybody else is doing it” and my favorite “we’ve always done it this way”. Until someone can come up with something better, I’ll continue to believe that the much larger communities of <em>C++</em>, <em>Java</em> and other modern programming languages are onto something.</p><p>Now let’s look at what happens when applying this idea when also using UVM. Normally, we’d have a package that contains a class definition. Inside this class, we’d use the utils macro to reduce the amount of boilerplate code needed to make it a productive member of a UVM environment:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> some_package;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">class</span> some_class <span class="hljs-keyword">extends</span> uvm_object;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-meta">`uvm_object_utils(some_class)</span><br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>If we’d try to print an object of this class, we’d get something like this:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">---------------------------------<br>Name      Type        Size  Value<br>---------------------------------<br>some_obj  some_class  -     @<span class="hljs-number">338</span><br>---------------------------------<br></code></pre></td></tr></table></figure><p>The type column would rightly show <em>some_class</em>, but that isn’t very informative, as some colleague pointed out. Having the package name as a prefix made it instantly possible to identify the scope where the class is defined. This is particularly helpful when classes from different packages use the same name.</p><p>And speaking of using the same name for multiple classes… Let’s say that we also have another package that defines a <em>some_class</em>type:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">package</span> some_other_package;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">class</span> some_class <span class="hljs-keyword">extends</span> uvm_object;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-meta">`uvm_object_utils(some_class)</span><br>  <span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">endpackage</span><br></code></pre></td></tr></table></figure><p>Because the classes have the same name, when they get registered with the factory, we’ll get the following warning:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">UVM_WARNING @ <span class="hljs-number">0</span>: reporter [TPRGED] Type name 'some_class' already registered <span class="hljs-keyword">with</span> factory. No <span class="hljs-keyword">string</span>-based lookup support <span class="hljs-keyword">for</span> multiple types <span class="hljs-keyword">with</span> the same <span class="hljs-keyword">type</span> name.<br></code></pre></td></tr></table></figure><p>Aside from disabling the <em>set_\</em>_override_by_name(…)<em> functions (which I anyway wouldn’t recommend using), it doesn’t do anything else. Everything else still works just fine. Nevertheless, extra warning message aren’t nice, because they clutter the log file. For one or two classes it might be ok, but try working with multiple UVC packages that each define a </em>driver<em>, </em>monitor<em>, </em>agent*, etc. class… I tried to come up with a way to disable the warning, but I wasn’t successful.</p><p>I’ve thought about these problems on multiple occasions, went down a few dead ends and dreamt up some silly solutions. I kept thinking that the problem was with UVM, that the macros were to restrictive because they don’t consider the class’s parent package. Then I realized that the name that gets displayed by the <em>print(…)</em> function and that gets registered with the factory is merely the one supplied as the macro argument. Instead of using just the class name, we can just as well use its fully qualified name, that includes the package name and the scope operator, <em>“::”</em>. This means we can change our code to this:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> some_class <span class="hljs-keyword">extends</span> uvm_object;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-meta">`uvm_object_utils(some_package::some_class)</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Now we won’t get any more warning from the UVM factory and the text displayed by <em>print(…)</em> will make it clear which class we’re dealing with:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">-----------------------------------------------<br>Name      Type                      Size  Value<br>-----------------------------------------------<br>some_obj  some_package::some_class  -     @<span class="hljs-number">338</span><br>-----------------------------------------------<br></code></pre></td></tr></table></figure><p>With this small tweak, it’s possible to drop the package prefix from classes while still getting nice prints in UVM and avoiding any warnings from the factory. Now we have two reasons less against shortening our class names.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的结束UVM Test？</title>
      <link href="/2019/06/05/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E7%BB%93%E6%9D%9FUVM-Test%EF%BC%9F/"/>
      <url>/2019/06/05/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E7%BB%93%E6%9D%9FUVM-Test%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="如何优雅的结束UVM-Test？"><a href="#如何优雅的结束UVM-Test？" class="headerlink" title="如何优雅的结束UVM Test？"></a>如何优雅的结束UVM Test？</h3><p>End-of-test relies on objections. Each component can raise objections during the run phase, meaning that it’s not yet ready to let the test finishthe test finish. We typically raise an objection in the test, when starting our root sequence:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test <span class="hljs-keyword">extends</span> uvm_test;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>    phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>    seq<span class="hljs-variable">.start</span>(sequencer);<br>    phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endtask</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>This means that while the sequence is running, the test will keep going. Once we’ve finished pushing all of our traffic into the DUT, it will stop. This works great for designs without any latency. If our design processes data in the clock cycle it got it, then it’s fine if we just stop the simulation at that point. The isn’t usually the case. Due to the sequential nature of today’s designs, the effect of any kind of transaction fed to the DUT can only be seen one or more clock cycles later. If we stop the simulation at the time the transaction was accepted by the design, then we won’t be able to check what happens as an effect of that transaction.</p><p>As an example, let’s take a very boring design. Our DUT will have two APB interfaces, one slave and one master. Whatever comes in on the north (master) interface is going to come out of the south (slave) interface 16 clock cycles later. </p><p>We’ll need to instantiate two agents:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> env <span class="hljs-keyword">extends</span> uvm_env;<br>  apb_master_agent master_agent;<br>  apb_slave_agent slave_agent;<br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>I’ll spare you the code for actually instantiating and configuring the agents, since it’s pretty much boilerplate.</p><p>What every testbench needs is a scoreboard to check that the DUT is doing what it’s supposed to do. In this case, the scoreboard is pretty trivial. Whenever an item comes from the master agent, we should expect another item with identical characteristics to come from the slave agent.</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> scoreboard <span class="hljs-keyword">extends</span> uvm_scoreboard;<br>  <span class="hljs-meta">`uvm_analysis_imp_decl(_north)</span><br>  <span class="hljs-meta">`uvm_analysis_imp_decl(_south)</span><br><br>  uvm_analysis_imp_north <span class="hljs-variable">#(apb_mon_item, scoreboard)</span> north_aimp;<br>  uvm_analysis_imp_south <span class="hljs-variable">#(apb_mon_item, scoreboard)</span> south_aimp;<br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Since it can be a while until a south side item comes, in the meantime we’ll need to buffer the north side items in a queue. The APB UVC sends out two items per transfer through its analysis port, one for the setup phase and another for the access phase. I don’t particularly like this approach, since it forces us to implement logic to throw out the setup phase item (two analysis ports would have been better):</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> scoreboard <span class="hljs-keyword">extends</span> uvm_scoreboard;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> num_seen_north_items;<br><br>  <span class="hljs-keyword">protected</span> apb_mon_item item_stream[$];<br><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> write_north(apb_mon_item item);<br>    num_seen_north_items++;<br>    <span class="hljs-keyword">if</span> (num_seen_north_items % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-meta">`uvm_info("WRNORTH", "Got a north item", UVM_NONE)</span><br>    item_stream<span class="hljs-variable">.push_back</span>(item);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>When a south side item comes, we’ll need to compare it with the first item in the queue:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> scoreboard <span class="hljs-keyword">extends</span> uvm_scoreboard;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">unsigned</span> num_seen_south_items;<br><br>  <span class="hljs-keyword">protected</span> apb_mon_item item_stream[$];<br><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> write_south(apb_mon_item item);<br>    num_seen_south_items++;<br>    <span class="hljs-keyword">if</span> (num_seen_south_items % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-meta">`uvm_info("WRSOUTH", "Got a south item", UVM_NONE)</span><br>    <span class="hljs-keyword">if</span> (!item<span class="hljs-variable">.compare</span>(item_stream<span class="hljs-variable">.pop_front</span>()))<br>      <span class="hljs-meta">`uvm_error("DUTERR", "Mismatch")</span><br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ..</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>What we absolutely need to check is that at the end of the simulation there aren’t any outstanding north side items that didn’t yet make it to the south side. This means our queue must be empty. A great place to put this check is the <em>check_phase(…)</em> function:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> scoreboard <span class="hljs-keyword">extends</span> uvm_scoreboard;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> check_phase(uvm_phase phase);<br>    <span class="hljs-keyword">if</span> (item_stream<span class="hljs-variable">.size</span>() != <span class="hljs-number">0</span>)<br>      <span class="hljs-meta">`uvm_error("DUTERR", "There are still unchecked items")</span><br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>Here’s where gracious test termination becomes important. If we just stop the simulation once the last north side item was sent, we’re going have at least one item in our queue, which will cause the test to fail. This means we can’t just simply start our sequence in this way:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test <span class="hljs-keyword">extends</span> uvm_test;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>    apb_pipeline_tb::pipeline_sequence seq =<br>      apb_pipeline_tb::pipeline_sequence::type_id::create(<span class="hljs-string">"seq"</span>, <span class="hljs-keyword">this</span>);<br><br>    phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>    seq<span class="hljs-variable">.start</span>(tb_env<span class="hljs-variable">.master_agent</span><span class="hljs-variable">.sequencer</span>);<br>    phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endtask</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>We need to make sure that the objection gets dropped once the last item comes out through the south side APB interface. The naive approach would be to add a delay inside the test between the sequence finishing and dropping the objection:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_delay <span class="hljs-keyword">extends</span> test;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>    apb_pipeline_tb::pipeline_sequence seq =<br>      apb_pipeline_tb::pipeline_sequence::type_id::create(<span class="hljs-string">"seq"</span>, <span class="hljs-keyword">this</span>);<br><br>    phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>    seq<span class="hljs-variable">.start</span>(tb_env<span class="hljs-variable">.master_agent</span><span class="hljs-variable">.sequencer</span>);<br><br>    <span class="hljs-variable">#(16 * 2)</span>;<br><br>    phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endtask</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>This is going to work, though it might need an extra time step to avoid any race conditions when stopping the simulation (because the south side monitor might not get a chance to publish its item). There are a few drawbacks, though:</p><ol><li>We’re going to have to add such a delay to each test we write. Once our designers decide that they need a 17 cycle deep pipeline, we’re going to have to modify each and every one of these tests. This can, of course, be solved by writing a function that drops the objection and applies the delay beforehand.</li><li>We’ve implemented the delay in terms of simulation steps, when we’re actually interested in clock cycles (hence the multiplication with 2 - a clock cycle takes two simulation time steps). The same argument applies also if we were to wait for a certain number of time units. If someone decides that we need a longer clock, we’re going to have to update the delays. This can also be solved by sending the APB clock to the test and using it for the delay. This is easier said than done in <em>SystemVerilog</em>, since what this entails is defining an interface, instantiating it, putting it into the config DB and getting it in the test.</li><li>For complicated designs it might be difficult, if not impossible, to figure out how much time to wait before dropping the objection.</li><li>It’s very easy to forget to add the delay, leading to wasted debug time.</li></ol><p>What UVM also provides is a “drain time” mechanism. After all objections have been dropped, the simulation end is delayed by the drain time configured by the user. The cool thing about it is that it can be set once in the base test and other tests don’t need to take care of it anymore. A good place to do it is before the run phase starts, in either one of the <em>end_of_elaboration_phase(…)</em> or the <em>start_of_simulation_phase(…)</em> functions:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> test_drain_time <span class="hljs-keyword">extends</span> test;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>    uvm_phase run_phase = uvm_run_phase::get();<br>    run_phase<span class="hljs-variable">.phase_done</span><span class="hljs-variable">.set_drain_time</span>(<span class="hljs-keyword">this</span>, <span class="hljs-number">16</span> * <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The drawback here is, as in the previous case, that we are specifying the duration in simulation steps, not clock cycles. Moreover, in this case, the actual delay will be done by code in the UVM package. This means the time settings used when compiling UVM will be taken into account, so it might get really funky when working with a pre-compiled library from a vendor (which is usually the case).</p><p>The best thing would be if the scoreboard itself could decide when to allow the test to stop. What it could do is raise an objection whenever a north side item is received. This means that the DUT is processing something. Once a south side item comes out, it can drop an objection. Since (ideally) the number of north and south side items should match, once the DUT is done processing everything the scoreboard should drop all of its objections:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> scoreboard_with_objection <span class="hljs-keyword">extends</span> apb_pipeline_tb::scoreboard;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> write_north(apb_pkg::apb_mon_item item);<br>    uvm_phase run_phase;<br><br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.write_north</span>(item);<br>    <span class="hljs-keyword">if</span> (num_seen_north_items % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">return</span>;<br><br>    run_phase = uvm_run_phase::get();<br>    run_phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> write_south(apb_pkg::apb_mon_item item);<br>    uvm_phase run_phase;<br><br>    <span class="hljs-keyword">super</span><span class="hljs-variable">.write_south</span>(item);<br>    <span class="hljs-keyword">if</span> (num_seen_south_items % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">return</span>;<br><br>    run_phase = uvm_run_phase::get();<br>    run_phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endfunction</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>The great thing about this approach is that it works regardless of what pipeline depth we have. The only reason why someone might not want to implement a scoreboard like this is if they hang out too much . The guys at Mentor Graphics say that raising objections in any place other than the test is a performance killer, particularly if its done on a per item basis, like we have here. This is because objections have to propagate throughout the hierarchy, which can take a significant toll on the simulator. In a toy example like this one it’s probably not going to make much of a dent, but I can imagine that things can go overboard fast when dealing with complicated designs with many interfaces. With the (rather) new UVM 1.2 release, objections have gotten leaner, so the argument might not hold up anymore.</p><p>If you have a really big design and you’re stuck using UVM 1.1, don’t despair! There is a way to leave the scoreboard in control of when to end the test, without having to raise and drop objections for each item it gets. Each <em>uvm_component</em> has a <em>phase_ready_to_end(…)</em> function that is called before the phase is stopped. If our scoreboard still has items queued when the test sequence finishes, it can raise an objection to delay the end of the simulation. Once the queue becomes empty, it can drop the objection and allow the test to end:</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> scoreboard_with_phase_ready_to_end <span class="hljs-keyword">extends</span> apb_pipeline_tb::scoreboard;<br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> phase_ready_to_end(uvm_phase phase);<br>    <span class="hljs-keyword">if</span> (phase<span class="hljs-variable">.get_name</span> != <span class="hljs-string">"run"</span>)<br>      <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (item_stream<span class="hljs-variable">.size</span>() != <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>      phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>);<br>      <span class="hljs-keyword">fork</span><br>        delay_phase_end(phase);<br>      <span class="hljs-keyword">join_none</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">endfunction</span><br><br><br>  <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">task</span> delay_phase_end(uvm_phase phase);<br>    <span class="hljs-keyword">wait</span> (item_stream<span class="hljs-variable">.size</span>() == <span class="hljs-number">0</span>);<br>    phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">endtask</span><br><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure><p>This combines the best of both worlds. It works regardless of pipeline depth, since we don’t have to specify any kind of delay. It’s also very efficient in terms of performance, since we don’t need to execute anything for each item that the scoreboard receives. We only need to fork the drain task in the last stage of the simulation, which should have a negligible impact on the run time. There is one caveat, though. In more complicated testbenches, it might be the case that multiple components want to delay the end of the test. This could lead to situations where all objections for the run phase (for example) are dropped, <em>phase_ready_to_end(…)</em> gets called and a component decides to prolong the phase by raising another objection, eventually drops it, <em>phase_ready_to_end(…)</em> gets called again, another component wants to prolong the phase, and so on. If this process repeats too many times, a fatal error is flagged, Such a situation shouldn’t happened very often in practice.</p><p>These are the ways of handling end-of-test that currently come to mind. If I missed anything, do let me know in the comments section.  Out of all outlined methods, using <em>phase_ready_to_end(…)</em>seems to be the best by far. I’m definitely using it in my future projects.</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh:oh-my-zsh插件收集</title>
      <link href="/2019/06/05/zsh-oh-my-zsh%E6%8F%92%E4%BB%B6%E6%94%B6%E9%9B%86/"/>
      <url>/2019/06/05/zsh-oh-my-zsh%E6%8F%92%E4%BB%B6%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<ul><li><p>bash/csh再见了~~</p></li><li><p>启用zsh：oh-my-zsh 安装参考网络吧~</p></li><li><p>插件收集</p><ul><li>zsh-syntax-highlighting<br>作用 平常用的ls、cd 等命令输入正确会绿色高亮显示，输入错误会显示其他的颜色。</li><li>zsh-autosuggestions<br>输入命令时，会给出建议的命令（灰色部分）按键盘 → 补全。</li><li>autojump<br>作用 目录间快速跳转,不用再一直 cd 了。</li><li>extract<br>所有类型的文件解压一个命令x全搞定，再也不需要去记tar后面到底是哪几个参数了。</li><li>history</li><li>sudo</li></ul></li><li><p>bashrc导入<br>懒癌患者在.zshrc中写入：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[[ -e  ~/.profile ]] &amp;&amp; emulate sh -c 'source ~/.profile'<br>[[ -e  ~/.profile ]] &amp;&amp; emulate sh -c 'source ~/.bashrc'<br></code></pre></td></tr></table></figure></li><li><p>以后就zsh吧~~~<br>​    <img src="/2019/06/05/zsh-oh-my-zsh插件收集/zsh.png" alt="zsh"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> zsh </tag>
            
            <tag> oh-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下的xshell替代品</title>
      <link href="/2019/06/03/Linux%E4%B8%8B%E7%9A%84xshell%E6%9B%BF%E4%BB%A3%E5%93%81/"/>
      <url>/2019/06/03/Linux%E4%B8%8B%E7%9A%84xshell%E6%9B%BF%E4%BB%A3%E5%93%81/</url>
      
        <content type="html"><![CDATA[<ul><li>最近经常用Linux系统做终端连接服务器，用惯了xshell，实在不习惯ssh+tmux流，找了个替代品~~~</li><li>ubuntu安装</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -s https://packagecloud.io/install/repositories/asbru-cm/asbru-cm/script.deb.sh |sudo bash<br>sudo apt install asbru-cm<br></code></pre></td></tr></table></figure><ul><li><p>界面</p><p><img src="/2019/06/03/Linux下的xshell替代品/ssh.jpg" alt="ssh"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漂亮的仿真LogParser输出</title>
      <link href="/2019/05/27/%E6%BC%82%E4%BA%AE%E7%9A%84%E4%BB%BF%E7%9C%9FLogParser%E8%BE%93%E5%87%BA/"/>
      <url>/2019/05/27/%E6%BC%82%E4%BA%AE%E7%9A%84%E4%BB%BF%E7%9C%9FLogParser%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="盗用了CTest思想，做了一个ErrorPattern漂亮的查找Dashboard"><a href="#盗用了CTest思想，做了一个ErrorPattern漂亮的查找Dashboard" class="headerlink" title="盗用了CTest思想，做了一个ErrorPattern漂亮的查找Dashboard~~~"></a>盗用了CTest思想，做了一个ErrorPattern漂亮的查找Dashboard~~~</h4><ul><li>假设所有的仿真log都在文件夹LOG下，并且都是以.log结尾<br>LOG/<br>├── test0.log<br>├── test1.log<br>├── test2.log<br>└── test3.log</li><li>个别文件中可能含有mismatch关键字， 用于判断此testcase 是否fail.</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">./logcheck.sh mismatch</span><br>Input cmd is ./logcheck.sh mismatch ./LOG<br>Running LogPasering ...<br>-- TestName is : test0 &gt;&gt; LogName:./LOG/test0.log<br>-- TestName is : test1 &gt;&gt; LogName:./LOG/test1.log<br>-- TestName is : test2 &gt;&gt; LogName:./LOG/test2.log<br>-- TestName is : test3 &gt;&gt; LogName:./LOG/test3.log<br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: ./LOG/build<br>Test project ./LOG/build<br>    Start 1: test0<br>1/4 Test #1: test0 ............................   Passed    0.00 sec<br>    Start 2: test1<br>2/4 Test #2: test1 ............................***Failed    0.00 sec<br>    Start 3: test2<br>3/4 Test #3: test2 ............................***Failed    0.00 sec<br>    Start 4: test3<br>4/4 Test #4: test3 ............................   Passed    0.00 sec<br><span class="hljs-meta"><br>50%</span><span class="bash"> tests passed, 2 tests failed out of 4</span><br><br>Total Test time (real) =   0.02 sec<br><br>The following tests FAILED:<br>  2 - test1 (Failed)<br>  3 - test2 (Failed)<br></code></pre></td></tr></table></figure><ul><li><p>只重新运行fails的用例Parser</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">./logcheck.sh mismatch ./LOG/ --rerun-failed</span><br>Input cmd is ./logcheck.sh mismatch ./LOG/ --rerun-failed...<br>Running LogPasering ...<br>-- TestName is : test0 &gt;&gt; ./LOG/test0.log<br>-- TestName is : test1 &gt;&gt; ./LOG/test1.log<br>-- TestName is : test2 &gt;&gt; ./LOG/test2.log<br>-- TestName is : test3 &gt;&gt; ./LOG/test3.log<br>-- Configuring done<br>-- Generating done<br>-- Build files have been written to: ./LOG/build<br>Test project ./LOG/build<br>    Start 2: test1<br>1/2 Test #2: test1 ............................***Failed    0.00 sec<br>    Start 3: test2<br>2/2 Test #3: test2 ............................***Failed    0.00 sec<br><span class="hljs-meta"><br>0%</span><span class="bash"> tests passed, 2 tests failed out of 2</span><br><br>Total Test time (real) =   0.01 sec<br><br>The following tests FAILED:<br>  2 - test1 (Failed)<br>  3 - test2 (Failed)<br></code></pre></td></tr></table></figure></li><li><p>多线程运行</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">./logcheck.sh mismatch ./LOG/  -parallel 4</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>代码片段，详细代码@QQ.</p><p><img src="/2019/05/27/漂亮的仿真LogParser输出/log.png" alt="log"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> Linux </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机油：git和tig</title>
      <link href="/2019/05/26/%E6%9C%BA%E6%B2%B9%EF%BC%9Agit%E5%92%8Ctig/"/>
      <url>/2019/05/26/%E6%9C%BA%E6%B2%B9%EF%BC%9Agit%E5%92%8Ctig/</url>
      
        <content type="html"><![CDATA[<h4 id="tig-是一款优化-git-命令行的工具，使-git-命令行更加的便捷人性化-。"><a href="#tig-是一款优化-git-命令行的工具，使-git-命令行更加的便捷人性化-。" class="headerlink" title="tig 是一款优化 git 命令行的工具，使 git 命令行更加的便捷人性化 。"></a>tig 是一款优化 git 命令行的工具，使 git 命令行更加的便捷人性化 。</h4><p><em>感觉不错，试用中，网络copy下操作啦。。。。。</em></p><p>在 Repo 文件夹下，输入 【 tig 】+ 【 Enter 】即可进入 tig 模式。</p><p><img src="/2019/05/26/机油：git和tig/tig.jpg" alt="tig"></p><p>此时展现在面前的将会是本地所有的 commit 记录以及分支的演化。<br>【 j 】【 k 】可上下切换选中的行，【 Enter 】可分屏查看当前 commit 记录详情，【 l 】小写的 L，全屏查看 commit 记录。<br>【 r 】进入 refs view  模式，查看所有分支，使用 【 j/k 】上下切换， 【 Enter 】查看分支演化。<br>【 s 】进入 status view，效果同 git status 命令，会展示所有 Untracked 和 UnStaged 文件。 选中 Unstaged 的文件键入【 u 】效果同 git add ，选中 staged 的文件键入 【 u 】效果同 git reset，即撤销 add 操作。【 Enter 】查看分屏查看当前文件的修改记录。<br>status view 模式下键入 【 C 】进入 vim 编辑器，【 i 】进入编辑模式，在第一行输入 commit 信息，【 :x 】退出并保存。【 m 】查看 commit 记录。<br>【 c 】进入 stash view 模式，全屏查看修改记录，可配合 【 s 】 使用。<br>【 t 】进入 tree view 模式，git 目录会以文件夹的形式展示。【 Enter】进入子目录，【 , 】返回上一级目录。<br>【 m 】进入 main view 查看当前分支的所有 commit 记录，使用 【 j/k 】上下切换，【 回车 】可分屏查看 commit  详情。同样，【 j/k 】上下移动，【空格】翻页。<br>main view 可以认为是主页。<br>【 / 】输入关键字可进行搜索。<br>【 R 】刷新当前页面，可退出搜索的高亮状态。<br>【 Q 】退出 tig。<br>【 h 】查看快捷键帮助。<br>tig 可以设置作用域，如果只想关注某个文件夹的修改记录，可使用 【 tig 文件夹名】。<br>如果只想展示某一段时间的 commit 记录， tig –after=“2018-01-01 –before=”2018-05-12”。如果希望不写引号，可以使用tig –after==May.10th。<br>在分屏状态下，使用 Tab 切换左右屏幕，也可以在选中右侧屏幕时，按住 【 shift 】上下切换操作效果会在左侧屏幕生效。<br>从以上的介绍来看，tig 更偏向于查看（view）。</p><p>上文快捷键其实是默认的配置，所以我们可以自定义。自定义文件在~/.tigrc目录，如果安装完成后没有这个文件，需自行创建，并拷贝系统配置 后进行修改。<br>例如，不喜欢【 t 】显示的文件夹颜色，可以将 blue 改为 red。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">color <span class="hljs-string">"tree "</span>    blue    default<br></code></pre></td></tr></table></figure><p>tig 支持 bind 的语法，来实现自定义快捷键，映射到具体的 git 命令。bind status 意思是在 statsu view  模式下（【 s 】键进入）才会生效，P 的功能为 git push。<br>bind status P !git push</p><p>! 代表立即执行。<br>在 .tigrc 文件中：</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> refs  C  ?git checkout %(branch)<br></code></pre></td></tr></table></figure><p>代表 refs view 模式下，键入【 C 】checkout 分支，执行前会请求确认。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> tig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog PrettyPrint For Struct Display.</title>
      <link href="/2019/05/24/SystemVerilog-PrettyPrint-For-Struct-Display/"/>
      <url>/2019/05/24/SystemVerilog-PrettyPrint-For-Struct-Display/</url>
      
        <content type="html"><![CDATA[<h4 id="因为SytemVerilog没有反射特性，只能自己写一个层次化显示结构体的包。通常EDA工具只是一行显示，非常ugly，如下所示。如果拷贝走的，请自觉在自己代码上面贴上神秘人版权，或者给予红包支持，谢谢！x3-。"><a href="#因为SytemVerilog没有反射特性，只能自己写一个层次化显示结构体的包。通常EDA工具只是一行显示，非常ugly，如下所示。如果拷贝走的，请自觉在自己代码上面贴上神秘人版权，或者给予红包支持，谢谢！x3-。" class="headerlink" title="因为SytemVerilog没有反射特性，只能自己写一个层次化显示结构体的包。通常EDA工具只是一行显示，非常ugly，如下所示。如果拷贝走的，请自觉在自己代码上面贴上神秘人版权，或者给予红包支持，谢谢！x3 。"></a>因为SytemVerilog没有反射特性，只能自己写一个层次化显示结构体的包。通常EDA工具只是一行显示，非常ugly，如下所示。如果拷贝走的，请自觉在自己代码上面贴上神秘人版权，或者给予红包支持，谢谢！x3 。</h4><h5 id="EDA丑陋显示："><a href="#EDA丑陋显示：" class="headerlink" title="EDA丑陋显示："></a>EDA丑陋显示：</h5><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">'&#123;m:<span class="hljs-number">2</span>, n:<span class="hljs-number">'h3</span>, que:'&#123;'&#123;a:<span class="hljs-number">1</span>, b:<span class="hljs-number">'h3</span>, que1:'&#123;<span class="hljs-number">'h1</span>, <span class="hljs-number">'h0</span>, <span class="hljs-number">'h0</span>&#125;&#125;&#125;, k:'&#123;a:<span class="hljs-number">1</span>, b:<span class="hljs-number">'h2</span>,str:'&#123;<span class="hljs-number">1</span>:<span class="hljs-string">"sttt"</span>, <span class="hljs-number">2</span>:<span class="hljs-string">"eeeee"</span>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="代码包以及测试"><a href="#代码包以及测试" class="headerlink" title="代码包以及测试"></a>代码包以及测试</h5><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//Package for PrettyPrint for struct data</span><br><span class="hljs-keyword">package</span> PrettyPrint;<br><br><span class="hljs-keyword">class</span> stack <span class="hljs-variable">#(type T = int)</span>;<br><span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>    <span class="hljs-keyword">typedef</span> T m_que_t[$];<br>    m_que_t m_que;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> push(T item);<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.m_que</span><span class="hljs-variable">.push_back</span>(item);<br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">function</span> T pop();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><span class="hljs-variable">.m_que</span><span class="hljs-variable">.pop_back</span>();<br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">function</span> T top();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><span class="hljs-variable">.m_que</span>[$];<br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">int</span> size();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><span class="hljs-variable">.m_que</span><span class="hljs-variable">.size</span>();<br>    <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">bit</span> empty();<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span><span class="hljs-variable">.m_que</span><span class="hljs-variable">.size</span>() == <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">endfunction</span><br>    <br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> clear();<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.m_que</span><span class="hljs-variable">.delete</span>();<br>    <span class="hljs-keyword">endfunction</span><br><br>    <span class="hljs-keyword">function</span> m_que_t acquire();<br>        <span class="hljs-keyword">return</span> m_que;<br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">automatic</span> <span class="hljs-keyword">string</span> spprint(<span class="hljs-keyword">string</span> strin,<br>    <span class="hljs-keyword">string</span> padding = <span class="hljs-string">" "</span>,<br>    <span class="hljs-keyword">byte</span> indent = <span class="hljs-number">2</span>,<br>    <span class="hljs-keyword">byte</span> extend = <span class="hljs-number">1</span><br>);<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> sspace = <span class="hljs-string">" "</span>;<span class="hljs-comment">/*&#123;&#123;&#123;*/</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> slbrace = <span class="hljs-string">"&#123;"</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> srbrace = <span class="hljs-string">"&#125;"</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> scomma = <span class="hljs-string">","</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> smark = <span class="hljs-string">"'"</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> senter = <span class="hljs-string">"\n"</span>;<br>    <span class="hljs-keyword">string</span> strout;<br>    <span class="hljs-keyword">string</span> strin_nospace;<br>    <span class="hljs-keyword">string</span> strin_nospace_nomark;<br>    <span class="hljs-keyword">int</span>    strin_nospace_nomark_len;<br>    stack <span class="hljs-variable">#(string)</span> sstack = <span class="hljs-keyword">new</span>;<br>    <span class="hljs-keyword">foreach</span>(strin[i]) <span class="hljs-keyword">begin</span>:DEL_SPACE<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">string</span>'(strin[i]) != sspace)<br>            strin_nospace = &#123;strin_nospace,strin[i]&#125;;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">foreach</span>(strin_nospace[i]) <span class="hljs-keyword">begin</span>:DEL_MARK<br>        sstack<span class="hljs-variable">.push</span>(strin_nospace[i]);<br>        <span class="hljs-keyword">if</span>(sstack<span class="hljs-variable">.top</span>() == slbrace) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">void</span>'(sstack<span class="hljs-variable">.pop</span>());<br>            <span class="hljs-keyword">void</span>'(sstack<span class="hljs-variable">.pop</span>());<br>            sstack<span class="hljs-variable">.push</span>(slbrace);<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">//here vcs must change if not support,use follow</span><br>    <span class="hljs-comment">//begin</span><br>    <span class="hljs-comment">//    string str_que_tmp[$] = sstack.acquire();</span><br>    <span class="hljs-comment">//    foreach(str_que_tmp[i])begin</span><br>    <span class="hljs-comment">//        strin_nospace_nomark = &#123;strin_nospace_nomark,str_que_tmp[i]&#125;;</span><br>    <span class="hljs-comment">//    end</span><br>    <span class="hljs-comment">//end</span><br>    strin_nospace_nomark = <span class="hljs-keyword">string</span>'(sstack<span class="hljs-variable">.acquire</span>());<br>    sstack<span class="hljs-variable">.clear</span>();<br>    <span class="hljs-comment">/*&#125;&#125;&#125;*/</span><br>    strin_nospace_nomark_len = strin_nospace_nomark<span class="hljs-variable">.len</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; strin_nospace_nomark_len;++i) <span class="hljs-keyword">begin</span>:STACK_INDENT_PRINT<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">string</span>'(strin_nospace_nomark[i]) == slbrace) <span class="hljs-keyword">begin</span><br>            sstack<span class="hljs-variable">.push</span>(slbrace);<br>            strout = &#123;strout,senter,&#123;(sstack<span class="hljs-variable">.size</span>()*indent)&#123;padding&#125;&#125;,strin_nospace_nomark[i]&#125;;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">string</span>'(strin_nospace_nomark[i]) == scomma) <span class="hljs-keyword">begin</span><br>            strout = &#123;strout,strin_nospace_nomark[i],senter,&#123;(sstack<span class="hljs-variable">.size</span>()*indent+extend)&#123;padding&#125;&#125;&#125;;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">string</span>'(strin_nospace_nomark[i]) == srbrace) <span class="hljs-keyword">begin</span><br>            strout = &#123;strout,senter,&#123;(sstack<span class="hljs-variable">.size</span>()*indent)&#123;padding&#125;&#125;,strin_nospace_nomark[i]&#125;;<br>            <span class="hljs-keyword">void</span>'(sstack<span class="hljs-variable">.pop</span>());<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">string</span>'(strin_nospace_nomark[i-<span class="hljs-number">1</span>]) == slbrace)<br>                strout = &#123;strout,senter,&#123;(sstack<span class="hljs-variable">.size</span>()*indent+extend)&#123;padding&#125;&#125;,strin_nospace_nomark[i]&#125;;<br>            <span class="hljs-keyword">else</span><br>                strout = &#123;strout,strin_nospace_nomark[i]&#125;;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> strout;<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">endpackage</span>:PrettyPrint<br><br><span class="hljs-keyword">module</span> PrettyPrintTB;<br><br><span class="hljs-keyword">import</span> PrettyPrint::spprint;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">byte</span> b;<br>    <span class="hljs-keyword">string</span> str[<span class="hljs-keyword">int</span>];<br>&#125; stx;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">byte</span> b;<br>    <span class="hljs-keyword">bit</span> que1[$];<br>&#125; st1;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">byte</span> n;<br>    st1 que[$];<br>    stx k;<br>&#125; st2;<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">automatic</span> st2 stt = '&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,'&#123;'&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,'&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;&#125;&#125;,'&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,'&#123;<span class="hljs-number">1</span>:<span class="hljs-string">"sttt"</span>,<span class="hljs-number">2</span>:<span class="hljs-string">"eeeee"</span>&#125;&#125;&#125;;<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"%p"</span>,stt));<br>    <span class="hljs-built_in">$display</span>(spprint(<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"%p"</span>,stt),<span class="hljs-string">" "</span>,<span class="hljs-number">2</span>));<br>    <span class="hljs-built_in">$display</span>(spprint(<span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"%p"</span>,stt),<span class="hljs-string">"*"</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs verilog">'&#123;m:<span class="hljs-number">2</span>, n:<span class="hljs-number">'h3</span>, que:'&#123;'&#123;a:<span class="hljs-number">1</span>, b:<span class="hljs-number">'h3</span>, que1:'&#123;<span class="hljs-number">'h1</span>, <span class="hljs-number">'h0</span>, <span class="hljs-number">'h0</span>&#125;&#125;&#125;, k:'&#123;a:<span class="hljs-number">1</span>, b:<span class="hljs-number">'h2</span>, str:'&#123;<span class="hljs-number">1</span>:<span class="hljs-string">"sttt"</span>, <span class="hljs-number">2</span>:<span class="hljs-string">"eeeee"</span>&#125;&#125;&#125;<br><br>  &#123;<br>   m:<span class="hljs-number">2</span>,<br>   n:<span class="hljs-number">'h3</span>,<br>   que:<br>    &#123;<br>      &#123;<br>       a:<span class="hljs-number">1</span>,<br>       b:<span class="hljs-number">'h3</span>,<br>       que1:<br>        &#123;<br>         <span class="hljs-number">'h1</span>,<br>         <span class="hljs-number">'h0</span>,<br>         <span class="hljs-number">'h0</span><br>        &#125;<br>      &#125;<br>    &#125;,<br>   k:<br>    &#123;<br>     a:<span class="hljs-number">1</span>,<br>     b:<span class="hljs-number">'h2</span>,<br>     str:<br>      &#123;<br>       <span class="hljs-number">1</span>:<span class="hljs-string">"sttt"</span>,<br>       <span class="hljs-number">2</span>:<span class="hljs-string">"eeeee"</span><br>      &#125;<br>    &#125;<br>  &#125;<br><br>**&#123;<br>****m:<span class="hljs-number">2</span>,<br>****n:<span class="hljs-number">'h3</span>,<br>****que:<br>****&#123;<br>******&#123;<br>********a:<span class="hljs-number">1</span>,<br>********b:<span class="hljs-number">'h3</span>,<br>********que1:<br>********&#123;<br>**********<span class="hljs-number">'h1</span>,<br>**********<span class="hljs-number">'h0</span>,<br>**********<span class="hljs-number">'h0</span><br>********&#125;<br>******&#125;<br>****&#125;,<br>****k:<br>****&#123;<br>******a:<span class="hljs-number">1</span>,<br>******b:<span class="hljs-number">'h2</span>,<br>******str:<br>******&#123;<br>********<span class="hljs-number">1</span>:<span class="hljs-string">"sttt"</span>,<br>********<span class="hljs-number">2</span>:<span class="hljs-string">"eeeee"</span><br>******&#125;<br>****&#125;<br>**&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SV的Function可以调用Task吗？</title>
      <link href="/2019/05/22/SV%E7%9A%84Function%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8Task%E5%90%97%EF%BC%9F/"/>
      <url>/2019/05/22/SV%E7%9A%84Function%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8Task%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<ul><li><p>SV要求<br>nonblocking assignments, event triggers, clocking drives, and fork-join_none constructs shall be allowed inside a function.<br>代码例子：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><br><span class="hljs-meta">`<span class="hljs-meta-keyword">timescale</span> 1ns/1ps</span><br><br><span class="hljs-keyword">module</span> DetachThreadTB;<br><br><span class="hljs-keyword">task</span> rw_task(<span class="hljs-keyword">byte</span> addr,<span class="hljs-keyword">output</span> <span class="hljs-keyword">byte</span> data);<br>    #<span class="hljs-number">10</span>ns;<br>    data = addr + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"%m:%h"</span>,data);<br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">byte</span> rw_func(<span class="hljs-keyword">byte</span> addr);<br>    <span class="hljs-keyword">byte</span> data; <br>    <span class="hljs-keyword">fork</span><br>        rw_task(addr,data);<br>    <span class="hljs-keyword">join_none</span><br>    <span class="hljs-keyword">return</span> data;<br><span class="hljs-keyword">endfunction</span><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">byte</span> data ;<br>    data = rw_func(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">$display</span>(<span class="hljs-string">"rw_func:%h"</span>,data);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure></li><li><p>输出</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">rw_func:<span class="hljs-number">00</span><br>DetachThreadTB<span class="hljs-variable">.rw_task</span>:<span class="hljs-number">65</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>结论<br>主要是为了边际效应，可以在多线程中通道中操作等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog和UVM编程基本规范</title>
      <link href="/2019/05/20/SystemVerilog%E5%92%8CUVM%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/"/>
      <url>/2019/05/20/SystemVerilog%E5%92%8CUVM%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="UVM-SV验证代码规范"><a href="#UVM-SV验证代码规范" class="headerlink" title="UVM-SV验证代码规范"></a>UVM-SV验证代码规范</h2><h4 id="词汇指南和命名约定"><a href="#词汇指南和命名约定" class="headerlink" title="词汇指南和命名约定"></a>词汇指南和命名约定</h4><ul><li><p>每行只有一个声明或定义。</p></li><li><p>为 SystemVerilog 变量和类创建用户定义的名称时，请使用以下划线分隔的小写单词。</p></li><li><p>为 SystemVerilog 枚举文字，常量和参数创建用户定义的名称时，请使用以下划线分隔的<br>大写单词。</p></li><li><p>将所有用户定义的 UVM 实例名称（即组件实例名称等字符串）限制为字符集 a-z，A-Z，0-9 和_（下划线）。</p></li><li><p>对局部变量使用较短的名称，对类名和包名等全局项使用更长，更具描述性的名称。</p></li><li><p>在用户定义的类成员变量的名称之前使用前缀 m_（在 SystemVerilog 中官方称为类属性）</p></li><li><p>在每个 agent 中分别使用名称 m_sequencer，m_driver 和 m_monitor 作为 sequencer，driver<br>和 monitor 的实例名称。</p></li><li><p>分别在每个 env 和 agent 的实例名后面加上后缀_env 和_agent。</p></li><li><p>使用名称 m_config 作为具有一个组件或 sequence 的配置对象的实例名称。</p></li><li><p>在用户定义的配置类名后使用后缀_config。</p></li><li><p>在用户定义的 port 名称后使用后缀_port。</p></li><li><p>在用户定义的 export 名称后使用后缀_export。</p></li><li><p>在用户定义的虚拟接口名称后使用后缀_vif。</p></li><li><p>使用关键字 typedef 引入的用户定义类型定义后，使用后缀_t。</p></li><li><p>在用户定义的软件包名称后使用后缀_pkg。</p></li><li><p>在任何可以为源代码增加价值的地方写评论，并帮助读者理解代码的用途。</p></li><li><p>在有助于使代码更具可读性的任何地方包括空格（空行，缩进）。</p></li><li><p>覆盖内置 UVM 虚拟方法时，请勿在重写方法定义的开头插入 virtual 关键字。</p></li></ul><h4 id="一般准则"><a href="#一般准则" class="headerlink" title="一般准则"></a>一般准则</h4><ul><li><p>不要使用在 UVM 类参考或基类库中特别标记为已弃用的 UVM 功能。</p></li><li><p>请勿使用 UVM 类参考中未记录的 UVM 基类库代码的内部功能。</p></li></ul><h4 id="通用代码结构"><a href="#通用代码结构" class="headerlink" title="通用代码结构"></a>通用代码结构</h4><ul><li><p>在构建和编码验证环境时，主要考虑重用。</p></li><li><p>始终使用一致的文件结构和一致的文件命名约定。</p></li><li><p>每个类都应该在一个包中定义（而不是在模块或文件范围内定义类）。</p></li><li><p>在包中使用`include 指令允许将每个类放在一个单独的文件中。</p></li><li><p>使用条件编译保护措施避免多次编译同一个包含文件。</p></li><li><p>不要在编译单元范围内使用通配符导入。</p></li><li><p>包含 uvm_macros.svh 并在引用 UVM 基类库的每个包或模块中导入 uvm_pkg :: *。</p></li><li><p>每个接口使用一个 agent ，带有 passive monitor 和可选的 sequence 和 driver ，其存<br>在性由类 uvm_agent 的 get_is_active 方法的值决定。</p></li><li><p>agent 不应实例化除一个 sequencer，一个 driver 和一个 monitor 的规范 agent 结构之<br>外的组件。</p></li><li><p>使用虚拟 sequence 协调多个并行 agent 的激励生成活动。</p></li><li><p>检查和功能覆盖收集应在检查器，记分板，覆盖收集器和其他临时订户组件中执行，这些<br>组件在任何 agent 外部实例化并连接到 monitor 的 analysis port。</p></li><li><p>通常使用 analysis port 和 export 连接 agent，检查器，记分板和 coverage 收集器。</p></li><li><p>应编写 UVM 环境，使其可用作顶级环境，或在其他较大的验证环境中作为子环境重复使<br>用。</p></li><li><p>使用 factory 覆盖和/或配置数据库，使重新调整的 UVM 组件的行为适应新验证环境的需<br>要。</p></li><li><p>顶级模块应设置由测试检索的配置参数，测试应设置 env 检索的参数，并且 env 应设置由<br>较低级别的 env 或 agent 检索的参数。</p></li><li><p>通过使用多个 sequencer 来表示分层协议，每个 sequencer 都有自己的 transaction 类型。</p></li></ul><h4 id="时钟、定时、同步和接口"><a href="#时钟、定时、同步和接口" class="headerlink" title="时钟、定时、同步和接口"></a>时钟、定时、同步和接口</h4><ul><li><p>在 SystemVerilog 的 module 中生成时钟和复位，而从不在基于 UVM class 的验证环境中，也从不在 SystemVerilog program 中生成。否则，SystemVerilog scheduler 可能会给出不正确的行为。</p></li><li><p>优先使用 SystemVerilog module，而不是 SystemVerilog program。</p></li><li><p>使用 SystemVerilog 接口内的 clocking block 来检测和驱动一个同步 DUT 接口。</p></li><li><p>使用 modports 强制使用时钟块，通过 UVM 验证环境中的虚拟接口访问这些时钟块。</p></li><li><p>使用将 clocking block 与异步信号组合在一起的 modports，以访问同时包含同步和异步信<br>号的接口。</p></li><li><p>尽可能确保 DUT 接口信号与 driver 和 monitor 的精确延时。</p></li><li><p>如果一个 driver 在驱动 DUT 接口时需要在 transaction 之间或者 transaction 内插入可变<br>延迟，那么这个可变延迟应当存储在 transaction 中传递给 driver。</p></li><li><p>driver 应使用非阻塞 try_ *方法从 sequencer 中获取 transaction，以便在作者无法知道<br>sequence 是否会阻塞 driver 执行的情况下最大限度地提高可重用性。</p></li><li><p>driver 只应在需要时从 sequencer 中提取 transaction。</p></li><li><p>使用 uvm_event 或 uvm_barrier 在 sequence 和/或 analysis 组件（如记分板）之间进行临时<br>同步。</p></li><li><p>monitor 不应在 SystemVerilog 接口中为变量或 wire 赋值。</p></li><li><p>在接口中使用并发断言和 cover property，以进行协议检查和相关的覆盖率收集。</p></li></ul><h4 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h4><ul><li><p>通过扩展类 uvm_sequence_item 来创建用户定义的 transaction 类。</p></li><li><p>尽量减少不同 transaction 类的数量。</p></li><li><p>在现在或将来可能需要随机化的类成员变量前面使用 rand 限定符。</p></li><li><p>在成员变量之后，定义一个构造函数，该构造函数包含一个字符串名称参数，其默认值可<br>为空字符串，并调用 super.new。</p></li><li><p>推荐重写 convert2string，do_copy，do_compare，do_print 和 do_record 等方法（可使<br>用相关宏<code>uvm_record_attribute 和</code>uvm_record_field 等）。</p></li><li><p>推荐重写 do_pack 和 do_unpack 方法（可使用相关宏`uvm_pack_int 等）。</p></li><li><p>使用 factory 实例化 transaction 对象。</p></li></ul><h4 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h4><ul><li><p>通过扩展类 uvm_sequence 来创建用户定义的 sequence 类。</p></li><li><p>在现在或将来可能需要随机化的类成员变量前面使用 rand 限定符。</p></li><li><p>在成员变量之后，定义一个构造函数，该构造函数包含一个字符串名称参数，其默认值可<br>为空字符串，并调用 super.new。</p></li><li><p>与 sequence 执行相关的任何 housekeeping 代码，例如提出和撤销 objection，都应放在<br>sequence 的 pre_start 和 post_start 方法中。sequence 的 body 方法应该只执行 sequence 的原始功能行为。pre_start 和 post_start 被称为用户可定义的回调。</p></li><li><p>在 body 任务中使用如下通用模板：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog">req = tx_type::type_id::create(<span class="hljs-string">"req"</span>);<br>start_item(req);<br><span class="hljs-keyword">assert</span>( req<span class="hljs-variable">.randomize</span>() <span class="hljs-keyword">with</span> &#123;…;&#125; ) <span class="hljs-keyword">else</span> <span class="hljs-meta">`uvm_error( ... );</span><br>finish_item(req);<br></code></pre></td></tr></table></figure></li><li><p>不要使用`uvm_do 系列宏。</p></li><li><p>推荐在 sequence 中使用内建的 transaction 变量 req 和 rsp。</p></li><li><p>通过调用 start 方法在启动 sequence。</p></li><li><p>仅覆盖 sequence 类的 pre_do，mid_do 和/或 post_do 回调，以修改预先存在的“不可变”<br>sequence 类的行为。</p><p>也就是说，只对那些你无权访问源代码或不希望修改源代码的 sequence 覆盖这些回调。不<br>要覆盖 pre_do，mid_do 和/或 post_do 回调，来作为修改直接封闭的 sequence 类的 body 任<br>务的行为的方法，而仅仅是作为修改你正在扩展的其他 sequence 类的行为的方法。 定义了<br>一个或多个这些回调后，您需要使用 factory 覆盖来将原始 sequence 类替换为扩展 sequence<br>类。<br>例如：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// Original sequence class that we do not want to modify</span><br><span class="hljs-keyword">class</span> vip_seq <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(my_tx)</span>;<br>    <span class="hljs-meta">`uvm_object_utils(vip_seq)</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name = <span class="hljs-string">""</span>);<br>        <span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">task</span> body;<br>        req = my_tx::type_id::create(<span class="hljs-string">"req"</span>);<br>        start_item(req);<br>        <span class="hljs-keyword">if</span>( !req<span class="hljs-variable">.randomize</span>() ) <br>            ...<br>        finish_item(req);...<br><span class="hljs-comment">// Sequence extended for a specific test</span><br><span class="hljs-keyword">class</span> alt_seq <span class="hljs-keyword">extends</span> vip_seq;<br>    <span class="hljs-meta">`uvm_object_utils(alt_seq)</span><br>    ...<br>    <span class="hljs-keyword">int</span> prev_addr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> mid_do(uvm_sequence_item this_item);<br>        my_tx tx;<br>        <span class="hljs-built_in">$cast</span>(tx, this_item);<br>        tx<span class="hljs-variable">.m_addr</span> = prev_addr + $urandom_range(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>); <span class="hljs-comment">// Overwrite the address field</span><br>    <span class="hljs-keyword">endfunction</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> post_do(uvm_sequence_item this_item);<br>        my_tx tx;<br>        <span class="hljs-built_in">$cast</span>(tx, this_item);<br>        prev_addr = tx<span class="hljs-variable">.m_addr</span>; <span class="hljs-comment">// Store the address to constrain the next transaction</span><br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br><br><span class="hljs-keyword">class</span> my_test <span class="hljs-keyword">extends</span> existing_test;<br>    <span class="hljs-meta">`uvm_component_utils(my_test);</span><br>    ...<br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> start_of_simulation_phase(uvm_phase phase);<br>        <span class="hljs-comment">// Factory override to replace the original sequence</span><br>        vip_seq::type_id::set_type_override( alt_seq::get_type() );<br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure></li><li><p>在 sequence 需要访问运行它的 sequencer 的情况下，使用宏 uvm_declare_p_sequencer 声明变量 p_sequencer。</p><p>使用 p_sequencer 变量访问运行 sequence 的 sequencer，有助于阐明 sequence 和 sequencer之间的结构关系。 可以使用方法 uvm_sequence_item :: get_sequencer（）来返回 sequencer，但返回值的 base 类型为 uvm_sequencer_base。 宏 uvm_declare_p_sequence 允许您定义特定的 sequencer 类型。 不要使用内部变量 uvm_sequence_item :: m_sequencer。</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog">例如：<br><span class="hljs-keyword">class</span> my_sequence <span class="hljs-keyword">extends</span> uvm_sequence <span class="hljs-variable">#(my_tx)</span>;<br>    <span class="hljs-meta">`uvm_object_utils(my_sequence)</span><br>    <span class="hljs-meta">`uvm_declare_p_sequencer(the_sequencer_class_name)</span><br>    ...<br>    <span class="hljs-keyword">task</span> pre_start;<br>        <span class="hljs-comment">// Get the configuration object associated with the sequencer component</span><br>        <span class="hljs-comment">// on which this sequence is currently running</span><br>        uvm_config_db <span class="hljs-variable">#(my_config)::get(p_sequencer, "", "config", m_config)</span>;<span class="hljs-keyword">endtask</span><br>    <span class="hljs-keyword">task</span> body;<br>        <span class="hljs-comment">// Set the arbitration algorithm of the current sequencer</span><br>        p_sequencer<span class="hljs-variable">.set_arbitration</span>(SEQ_ARB_STRICT_RANDOM);<br>    <span class="hljs-keyword">begin</span><br>        sequence2 seq2;<br>        seq2 = sequence2::type_id::create(<span class="hljs-string">"seq2"</span>);<br>        <span class="hljs-keyword">if</span> ( !seq2<span class="hljs-variable">.randomize</span>() )<br>            <span class="hljs-meta">`uvm_error(get_type_name(), "Randomize failed")</span><br>            <span class="hljs-comment">// Start a child sequence on the current sequencer</span><br>            seq2<span class="hljs-variable">.start</span>(p_sequencer, <span class="hljs-keyword">this</span>);<br>        ...<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endtask</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure></li><li><p>如果 sequence 需要访问自身运行的 sequencer 以外的 sequencer，请在 sequence 对象中添加成员变量，并在启动 sequence 之前分配该变量以引用到其他 sequencer。</p><h4 id="Stimulus和Phasing"><a href="#Stimulus和Phasing" class="headerlink" title="Stimulus和Phasing"></a>Stimulus和Phasing</h4></li><li><p>使用 virtual sequence 协调多个 agent 的行为。</p></li><li><p>应在 null sequencer 上启动 virtual sequence。</p></li><li><p>一个 top_level sequence 运行在每个 agent 上，在所有允许的子 sequence 中随机选择。</p></li><li><p>尽可能保持 sequence 通用。 避免编写定向 sequence，除非绝对必要。</p></li><li><p>sequence 不应是 phase-aware 的，Sequence 应该在所有 run-time phase 中都能够被启动，<br>这样有利于重用。</p></li><li><p>可以重写 run-time phase 的 reset_phase，configure_phase，main_phase，shutdown_phase<br>以生成激励，通常是通过启动 sequence，但绝不会在 driver，monitor，subscriber 或记分板<br>等组件中生成。</p></li><li><p>在引入用户自定义的 run-time phase 时，phase 名不应该与预定义的 run-time 相重合。</p></li><li><p>在集成多个环境时，如果每个 env 都覆盖了预定义或用户定义的 run-time phase，请注意<br>通过引入 phase 域和跨域同步 phase 来正确排序 phase。</p><p>UVM 不会对每个内置 run-time phase 可以执行的操作施加任何明确的规则。在集成使用预定义或用户定义的 run-time phase 的组件时，可以将不同的组件放在不同的域中，并通过跨域同步 phase 明确定义不同域中的 phase 之间的关系。</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> top_level_env <span class="hljs-keyword">extends</span> uvm_env;<br>...<br>env m_env1;<br>env m_env2; <span class="hljs-comment">// Environments to be integrated</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>uvm_domain domain1, domain2;<br>m_env1 = env::type_id::create(<span class="hljs-string">"m_env1"</span>, <span class="hljs-keyword">this</span>);<br>        m_env2 = env::type_id::create(<span class="hljs-string">"m_env2"</span>, <span class="hljs-keyword">this</span>);<br>        domain1 = <span class="hljs-keyword">new</span>(<span class="hljs-string">"domain1"</span>);<br>        m_env1<span class="hljs-variable">.set_domain</span>(domain1);<br>        domain2 = <span class="hljs-keyword">new</span>(<span class="hljs-string">"domain2"</span>);<br>        m_env2<span class="hljs-variable">.set_domain</span>(domain2); <span class="hljs-comment">// Two new phase domains</span><br>        <span class="hljs-comment">// Synchronize specific run-time phases across domains</span><br>        domain1<span class="hljs-variable">.sync</span>(domain2, uvm_reset_phase::get(), uvm_configure_phase::get());<br>        ...<br>    <span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure></li><li><p>不要覆盖预定义的 pre-和 post-方法（例如 pre_reset_phase），而是保留这些 phase 以便在跨域同步 phase 时使用。</p></li><li><p>如果您选择执行 phase 跳转，则必须非常小心地在 phase 中止时正确清理。不要随便使用相位跳转，因为没有内置的安全措施。向后跳转应限制为跳转到其他 run-time phase。前向跳转应限制为跳转到 run-time phase 之后的常见 phase。</p><h4 id="Objections"><a href="#Objections" class="headerlink" title="Objections"></a>Objections</h4></li><li><p>在任何 class 中都可以通过提起和撤销 objection 来控制验证平台的起始与结束。</p><p>通常，driver 从 sequencer 中获取 transaction 时都应该提起 objection，在处理完该 transaction后撤销 objection。Monitor 在检测到新的 transaction 时应该提起 objection，在通过 analysis port发生出该 transaction 后应该撤销 objection。当 Scoreboard 需要等待多个 item 时，应该提起objection。</p></li><li><p>调用每个 objection（UVM 1.2 以后）的 set_propagate_mode（0）方法来禁用该 objection的分层传播。</p></li><li><p>考虑在内部循环中提起和撤销 objection 的对仿真速度影响，例如：各个 transaction。如果仿真速度损失很大，则从内部循环中删除 objection。</p></li><li><p>如果 sequence 要提出和撤销 objection，则应在其 pre_start 方法中调用 raise_objection，在其 post_start 方法中调用 drop_objection。</p></li><li><p>在 sequence 中调用 raise_objection 与 drop_objection 方法时，将其置于 if (starting_phase ！= null)条件中。</p><p>在 uvm-1.2 之前，starting_phase 是类 uvm_sequence_base 的成员。从 uvm-1.2 开始，不推荐使用 starting_phase 变量，而必须使用 get_starting_phase 方法访问它。</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">task</span> pre_start;<br>uvm_phase starting_phase = get_starting_phase(); <span class="hljs-comment">// uvm-1.2</span><br><span class="hljs-keyword">if</span> (starting_phase != <span class="hljs-literal">null</span>)<br>starting_phase<span class="hljs-variable">.raise_objection</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">"Sequence started"</span>);<br><span class="hljs-keyword">endtask</span><br></code></pre></td></tr></table></figure></li><li><p>在启动 sequence 之前，如果要提起 objection，则需要先设置 starting_phase 成员变量。从uvm-1.2 开始，不推荐使用 starting_phase 变量，必须使用 set_starting_phase 方法设置：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>my_sequence seq;<br>seq = my_sequence::type_id::create(<span class="hljs-string">"seq"</span>);<br>    <span class="hljs-keyword">if</span> ( !seq<span class="hljs-variable">.randomize</span>() )<br><span class="hljs-meta">`uvm_error( ... )</span><br>seq<span class="hljs-variable">.set_starting_phase</span>(phase); <span class="hljs-comment">// uvm-1.2</span><br>seq<span class="hljs-variable">.start</span>( ... );<br><span class="hljs-keyword">endtask</span><br></code></pre></td></tr></table></figure></li><li><p>调用 raise_objection 或 drop_objection 时，总是传递一个字符串作为第二个参数来描述objection 以帮助调试。<br>命令行参数+ UVM_OBJECTION_TRACE 打开 objection 跟踪，打印出每个被调用objection 的description 参数。</p></li><li><p>如果调用 sequence 的 kill 方法并且 sequence 可以提出 objection，请确保覆盖 sequence 的do_kill 方法以能够撤销 objection。</p><p>否则，objection 可能永远不会被撤销，这将阻止 phase 结束。如果 sequence 由于 phase 跳<br>转而过早结束，则所有 objection 计数都会自动清除，因此不需要明确撤销 objection。在 phase<br>跳转时也不会自动调用 kill。例如：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> do_kill;<br><span class="hljs-keyword">if</span> (starting_phase != <span class="hljs-literal">null</span>)<br>starting_phase<span class="hljs-variable">.drop_objection</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">"Sequence ended prematurely"</span>);<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h4><ul><li><p>通过扩展 uvm_component 的相应子类来创建用户定义的组件类，以实现需要的功能。</p></li><li><p>在类中的第一行使用宏`uvm_component_utils 在 factory 中注册组件类。</p></li><li><p>在 factory 注册宏之后，使用规范命名方式的后缀声明 ports，exports 和 virtual interface。</p></li><li><p>声明了 ports，exports 和 virtual interface 后，再声明类的成员变量。</p></li><li><p>然后是构造函数 new，构造函数应包含 string name 和无默认值的 parent 参数，需要调用super.new。</p></li><li><p>在 build_phase 中实例化组件类，而不应该在其他 phase 或者构造函数中实例化组件类。</p></li><li><p>总是使用 factory 实例化组件</p></li><li><p>组件的 string 名称”var_name”应与变量名称 var_name 相同，除非有特定原因使字符串名称与变量名称不同，例如在使用相同变量的循环中创建多个组件对象时。</p></li><li><p>第二个参数 this 表示此组件的父类。</p></li><li><p>如果用户定义的组件类扩展了另一个用户定义的组件类，则应注意在适当的位置插入super.&lt;phase_name&gt; _phase 形式的调用，即执行相应的基类 phase 方法。</p></li><li><p>如果用户定义的组件类是直接从 UVM 基类库进行扩展得到的，则内建 phase 方法不必调用super.&lt;phase_name&gt; _phase，尽管这曾经在 OVM 中是一个推荐。</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br><span class="hljs-keyword">super</span><span class="hljs-variable">.connect_phase</span>(phase); <span class="hljs-comment">// Not necessary when extending uvm_component</span><br>...<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure></li><li><p>如果用户定义的组件类是直接从 UVM 基类库扩展得到的，在覆盖内建的 build_phase 方法时，请不要调用 super.build_phase。</p><p>相反，如果您确实需要调用 super.build_phase，则必须需要理解 uvm_component :: build_phase方法调用了 apply_config_settings，它将在组件的字段名称和层次名称恰好与配置数据库中的名称和范围匹配的情况下，使用字段宏注册的字段的值设置为从配置数据库获取的相应值。一个标准的写法如下：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_component <span class="hljs-keyword">extends</span> uvm_env;<br><span class="hljs-meta">`uvm_component_utils(my_component)</span><br><span class="hljs-comment">// Transaction-level ports and exports</span><br>uvm_analysis_port <span class="hljs-variable">#(my_tx)</span> a_port;<br><span class="hljs-comment">// Virtual interfaces</span><br><span class="hljs-keyword">virtual</span> dut_if vif;<br><span class="hljs-comment">// Internal data members (variables)</span><br>my_agent m_agent;<br><span class="hljs-comment">// Constructor</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span> (<span class="hljs-keyword">string</span> name, uvm_component parent);<br><span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-comment">// Standard phase methods</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>a_port = <span class="hljs-keyword">new</span>(<span class="hljs-string">"a_port"</span>, <span class="hljs-keyword">this</span>);<br>m_agent = my_agent::type_id::create(<span class="hljs-string">"m_agent"</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> connect_phase(uvm_phase phase);<br>...<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">task</span> run_phase(uvm_phase phase);<br>...<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Connection-to-the-DUT"><a href="#Connection-to-the-DUT" class="headerlink" title="Connection to the DUT"></a>Connection to the DUT</h4><ul><li>每个 DUT 接口使用一个 SystemVerilog 接口实例。</li><li>在 UVM 验证环境使用虚拟接口访问 SystemVerilog 接口实例。</li><li>在配置数据库中的 configuration object 配置对象里将虚拟接口封装。</li><li>将顶层配置对象中的虚拟接口复制到顶层 env 的 build_phase 方法中的 agent 或较低级别env 相关联的配置对象。</li><li>agent 应检查其虚拟接口是否已被 set。</li></ul><h4 id="TLM-Connections"><a href="#TLM-Connections" class="headerlink" title="TLM Connections"></a>TLM Connections</h4><ul><li>在 connect_phase 中建立 TLM port/export 连接，分配虚拟接口。</li><li>使用 port 和 export 在 UVM 组件之间进行通信，包括 analysis ports 和相应的 exports。</li><li>当 UVM 组件之间需要实现一对多的连接时，使用 analysis ports 和 analysis exports（或者是 uvm_subscriber 的对象）。</li><li>在组件之间建立对等（peer-to-peer）连接时，将 ports（或 analysis ports）直接连接到 exports（或 analysis exports），而无需任何中间 FIFO。</li><li>与 agent 进行通信的两种方式：将 agent 的 analysis ports 连接到 uvm_subscriber，或从外部的使用直接对象引用（direct object reference）来访问 agent 中的 sequencer。</li></ul><h4 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h4><ul><li><p>使用配置数据库 uvm_config_db 而不是资源数据库 uvm_resource_db。</p><p>使用 uvm_resource_db 的唯一情况是，在多次设置相同 item（即同名和相同范围）时，它们具有不同的规则。但是，不必学习两组规则，单独使用 uvm_config_db 就可以完成所需的一切。</p></li><li><p>将给定组件的配置参数分组到配置对象中，并将该配置对象设置到配置数据库中。</p></li><li><p>顶层配置对象应包含对所有低层配置对象的引用。</p></li><li><p>通过扩展类 uvm_object 来创建用户定义的配置类。</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_agent_config <span class="hljs-keyword">extends</span> uvm_object;<br><span class="hljs-keyword">virtual</span> my_if vif;<br>uvm_active_passive_enum is_active;<br><span class="hljs-keyword">bit</span> coverage_enable; <span class="hljs-comment">// From the UVM User Guide</span><br><span class="hljs-keyword">bit</span> checks_enable;<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name = <span class="hljs-string">""</span>);<br><span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name);<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure></li><li><p>将类名&lt;component_class&gt; _config 或&lt;sequence_class&gt; _config 分别用于与组件或 sequence关联的配置类，其中&lt;component_class&gt;是组件的类名，&lt;sequence_class&gt;是 sequence 的类名。</p></li><li><p>在配置数据库中的配置对象使用字段名称“config”。</p></li><li><p>不要使用 factory 注册用户定义的配置类。因此，配置类可以具有带有任意数量的用户自定义参数的构造函数。将配置对象视为一组参数值，而不是激励。</p></li><li><p>组件在 build_phase 中 get 和 set 配置参数（通常是配置的对象）。</p><p>例：</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs verilog">class my_agent_config extends uvm_object;<br>virtual my_agent_if vif;<br>uvm_active_passive_enum is_active = UVM_ACTIVE;<br>bit coverage_enable;<br>bit checks_enable;<br>    function new(string name = "");<br>        super.new(name);<br>    endfunction<br>endclass<br><br>class top_config extends uvm_object;<br>rand my_agent_config m_my_agent_config;<br>function new(string name = "");<br>super.new(name);<br>    endfunction : new<br>endclass : top_config<br><br>module top_tb;<br>...<br>top_config top_env_config;<br>initial begin<br>        top_env_config = new("top_env_config");<br>        if ( !top_env_config.randomize() )<br>`uvm_error("top_tb","Failed to randomize top-level configuration object" )<br>top_env_config.m_my_agent_config.vif = th.my_agent_if_0;<br>        uvm_config_db#(top_config)::set(null,"uvm_test_top", "config",top_env_config);<br>        uvm_config_db#(top_config)::set(null,"uvm_test_top.m_env","config",top_env_c<br>onfig);<br>run_test();<br>end<br>endmodule<br><br>class top_env extends uvm_env;<br>`uvm_component_utils(top_env)<br>my_agent_config m_my_agent_config;<br>my_agent_agent m_my_agent_agent;<br>my_agent_coverage m_my_agent_coverage;<br>top_config m_config;<br>...<br>function void build_phase(uvm_phase phase);<br>if (!uvm_config_db #(top_config)::get(this, "", "config", m_config))<br>`uvm_error(get_type_name(), "Unable to get top_config")<br>m_my_agent_config = m_config.m_my_agent_config;<br>uvm_config_db #(my_agent_config)::set(this, "m_my_agent_agent", "config",<br>m_my_agent_config);<br>if (m_my_agent_config.is_active == UVM_ACTIVE )<br>uvm_config_db #(my_agent_config)::set(this,"m_my_agent_agent.m_sequencer", "config", m_my_agent_config);<br>uvm_config_db #(my_agent_config)::set(this, "m_my_agent_coverage", "config",<br>m_my_agent_config);<br>m_my_agent_agent=my_agent_agent::type_id::create("m_my_agent_agent",this);<br>m_my_agent_coverage=my_agent_coverage::type_id::create("m_my_agent_cover<br>age",this);<br>endfunction : build_phase<br>...<br><br>endclass<br></code></pre></td></tr></table></figure></li><li><p>始终检查 uvm_config_db#(T):: get 的返回值（bit），以确保配置数据库中存在这个配置参数。</p></li><li><p>如果 uvm_config_db#(T):: get 返回 0（即 get 失败），则应选择合理的默认值。</p></li><li><p>每个组件都应该是仅仅 get 自己实例对应的配置对象，而不应该 get 到其他组件实例的配置对象。</p></li><li><p>组件实例相关联的配置对象应由其 parent 组件或该组件实例的其他直接祖先进行 set，而不应由任何其他组件实例设置。</p></li><li><p>避免使用绝对层次路径名作为 uvm_config_db#T(T):: set 的第二个参数，并提供尽可能短的唯一路径名。</p></li><li><p>组件实例可以与一个配置对象关联，也可以不与配置对象关联，并且多个组件实例可以与同一配置对象关联。</p></li><li><p>对于 agent，其配置对象的 is_active 变量决定这个 agent 是 active 或者 passive 的。覆盖 virtual get_is_active 方法以返回此值。在 agent 中创建和连接 sequencer 和 driver 之前，请检查get_is_active。</p><p>例：</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs verilog">class my_agent extends uvm_agent;<br>`uvm_component_utils(my_agent)<br>uvm_analysis_port#(my_transaction) a_port;<br>my_config m_config;<br>my_sequencer m_sequencer;<br>my_driver m_driver;<br>my_monitor m_monitor;<br>function new(string name, uvm_component parent);<br>super.new(name, parent);<br>endfunction<br>function void build_phase(uvm_phase phase);<br>if (!uvm_config_db #(my_config)::get(this, "", "config", m_config))<br>`uvm_error(get_type_name(), "Agent config object is missing from<br>config_db")<br>if (get_is_active() == UVM_ACTIVE) begin<br>m_sequencer = my_sequencer::type_id::create("m_sequencer", this);<br>m_driver = my_driver ::type_id::create("m_driver", this);<br>end<br>m_monitor = my_monitor::type_id::create("m_monitor", this);<br>a_port = new("a_port", this);<br>endfunction<br>function void connect_phase(uvm_phase phase);<br>if (get_is_active() == UVM_ACTIVE)<br>m_driver.seq_item_port.connect( m_sequencer.seq_item_export );<br>m_monitor.a_port.connect( a_port );<br>endfunction<br>virtual function uvm_active_passive_enum get_is_active();<br>return uvm_active_passive_enum'( m_config.is_active );<br>endfunction<br>/*<br>// Alternative version that includes defensive programming to check for conflicts<br>// between the config object and the "is_active" field<br>local int m_is_active = -1;<br>virtual function uvm_active_passive_enum get_is_active();<br>if (m_is_active == -1)begin<br>if(uvm_config_db#(uvm_bitstream_t)::get(this,"","is_active",m_is_active))begin<br>if (m_is_active != m_config.is_active)<br>`uvm_warning(get_type_name(), "is_active field in config_db conflicts with config object")<br>end<br>else<br>m_is_active = m_config.is_active;<br>end<br>return uvm_active_passive_enum'(m_is_active);<br>endfunction<br>*/<br>endclass: my_agent<br></code></pre></td></tr></table></figure></li><li><p>如果要对 sequence 进行参数化，则应将 sequence 的参数放入配置数据库中的配置对象中。配置对象应与 sequence 运行的 sequencer 相关联。</p></li><li><p>与 sequence 关联的配置对象都应该从 sequence 的 start 中从配置数据库中获取，并且sequence 对象中的变量指向该配置对象。</p></li><li><p>如果一个组件在其子组件中对自己的变量（包括虚拟接口）进行连接，那么应该在build_phase 中创建子组件并完成连接操作。</p></li></ul><h4 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h4><ul><li><p>总是使用 factory 实例化 transaction，sequence以及组件的对象。不要简单使用 new 函数来实例化对象。</p></li><li><p>使用 factory 将 transaction，sequence，以及组件对象替换为其类的扩展类的另一个对象时，factory 覆盖应采用以下形式之一：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">old_type_name::type_id::set_type_override(new_type_name::get_type());<br>old_type_name::type_id::set_inst_override(new_type_name::get_type() ... );<br></code></pre></td></tr></table></figure></li><li><p>当您需要访问 factory 时，请调用静态方法 uvm_factory :: get( )。不要使用全局变量 factory 来访问某个factory（全局变量 factory 在 uvm_1.2 中被丢弃）。</p></li></ul><h4 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h4><ul><li>不要直接从测试中生成激励，而是使用测试来设置配置参数和 factory 覆盖。</li><li>通常最好从 env 而不是从测试中启动 sequence，并将测试限制为参数化或重配置环境。环境应该知道如何激励 DUT。</li><li>设置验证环境的默认配置，并在 env 类中生成默认激励，而不是测试类，以便即使使用空测试也能运行 env。</li><li>在适当的情况下，使用 text_base 类来定义一组测试中常见的结构和行为，并通过扩展这些 base 类来创建各个测试。</li><li>为了重复使用，请避免根据验证环境的具体细节进行测试。</li><li><p>使用命令行参数修改测试行为，无需重新编译。</p><h4 id="Messaging"><a href="#Messaging" class="headerlink" title="Messaging"></a>Messaging</h4></li><li><p>要报告消息，请始终使用八个标准报告宏之一<code>uvm_info，</code>uvm_info_context 等，而不是$display 及类似语句。</p></li><li>将消息 ID 设置为静态 string 或 get_type_name( )。</li><li>在整个代码中仔细，有条理地和一致地设置消息详细级别，以避免日志文件中不必要的数据，并区分在验证环境开发调试期间使用的消息和在运行 testcase 时使用的消息。</li><li>默认情况下，将各个报告宏的详细级别设置为较大的数字，以便不太可能报告 message。</li><li>仔细设置消息严重性级别，以区分纯信息性消息，可能代表错误的消息和肯定是错误的消息。</li></ul><h4 id="RAL"><a href="#RAL" class="headerlink" title="RAL"></a>RAL</h4><ul><li><p>如果使用生成器为寄存器模型创建 SystemVerilog 代码，请不要修改生成的代码。</p></li><li><p>顶层 UVM 环境应使用 factory 实例化寄存器块，并应调用寄存器模型的 build 方法。</p></li><li><p>对于子环境使用寄存器模型的层次结构 UVM 环境，应该有一个顶层寄存器块，用于实例化与子环境关联的寄存器块，依此类推。</p></li><li><p>任何使用寄存器模型的 UVM env 都应该有一个名为 regmodel 的变量，该变量存储对该特定环境的寄存器块的引用。</p></li><li><p>具有寄存器模型的 UVM env 应设置所有子组件的 regmodel 变量，如果子组件也使用了寄存器模型到其寄存器块的相应子块。</p></li><li><p>如果 env 的 regmodel 变量的值为 null，则 UVM 环境应仅实例化一个寄存器块。</p><p>对于顶层环境，regmodel 的值将为 null，因此 env 应实例化寄存器块并设置 regmodel 的值。对于较低层次的 env，regmodel 的值不应为 null，因为它应该由更高层次的 env 设置。此机制允许将相同的 env 实例化为顶层 env（具有寄存器模型）或作为较低层次的 env（没有自己的寄存器模型）。例：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog">top_reg_block regmodel;<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> top_env::build_phase(uvm_phase phase);<br><span class="hljs-keyword">if</span> (regmodel == <span class="hljs-literal">null</span>)<span class="hljs-keyword">begin</span><br><span class="hljs-comment">// Instantiate register model for top-level env</span><br>regmodel = top_reg_block::type_id::create(<span class="hljs-string">"regmodel"</span>);<br>regmodel = build();<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">// Set regmodel variable of lower-level env through config object</span><br>m_bus_env_cfg = <span class="hljs-keyword">new</span>(<span class="hljs-string">"m_bus_env_cfg"</span>);<br>m_bus_env_cfg<span class="hljs-variable">.regmodel</span> = regmodel<span class="hljs-variable">.bus</span>;<br>...<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure></li><li><p>寄存器模型中每个子寄存器块的变量名称和 UVM 实例名称应与相应 agent 的名称相对应。</p></li><li><p>寄存器块应仅模拟 DUT 寄存器，这些寄存器可由与 UVM 环境相关联的 UVM sequence 访问。</p></li><li><p>使用寄存器模型并实例化了 agent 的 UVM 环境应实例化并连接寄存器 adapter 和该 agent的寄存器 predictor。</p></li><li><p>寄存器模型应使用显式预测，以使其镜像值与 DUT 中的寄存器值保持同步。</p></li><li><p>应分配每个子寄存器块中预测器的地址映射变量.map，以引用顶层寄存器块的相应地址映射。</p><p>这确保了使用系统地址映射中的全局地址而不是本地地址映射中的偏移来访问寄存器。例：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// To connect the register layer to an agent named bus</span><br>bus_agent m_bus_agent;<br>bus_reg_block regmodel;<br>reg2bus_adapter m_reg2bus;<br>uvm_reg_predictor <span class="hljs-variable">#(bus_tx)</span> m_bus2reg_predictor;<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> bus_env::build_phase(uvm_phase phase);<br>...<br>m_bus_agent = bus_agent ::type_id::create(<span class="hljs-string">"m_bus_agent"</span>, <span class="hljs-keyword">this</span>);<br>m_reg2bus = reg2bus_adapter::type_id::create(<span class="hljs-string">"m_reg2bus"</span>, <span class="hljs-keyword">this</span>);<br>m_bus2reg_predictor =<br>uvm_reg_predictor <span class="hljs-variable">#(bus_tx)::type_id::create("m_bus2reg_predictor", this)</span>;<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> top_env::connect_phase(uvm_phase phase);<br><span class="hljs-keyword">if</span> (regmodel<span class="hljs-variable">.get_parent</span>() == <span class="hljs-literal">null</span>)<br>regmodel<span class="hljs-variable">.default_map</span><span class="hljs-variable">.set_sequence</span>(m_bus_agent<span class="hljs-variable">.m_sequencer</span>, m_reg2bus);<br>m_bus2reg_predictor<span class="hljs-variable">.map</span> = regmodel<span class="hljs-variable">.bus_map</span>;<br>m_bus2reg_predictor<span class="hljs-variable">.adapter</span> = m_reg2bus;<br>regmodel<span class="hljs-variable">.bus_map</span><span class="hljs-variable">.set_auto_predict</span>(<span class="hljs-number">0</span>);<br>m_bus_agent<span class="hljs-variable">.m_monitor</span><span class="hljs-variable">.ap</span><span class="hljs-variable">.connect</span>( m_bus2reg_predictor<span class="hljs-variable">.bus_in</span> );<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p>在验证环境的开发过程中，为了调试，打印寄存器模型中的寄存器的详细信息可能会有所帮<br>助。这应该在 end_of_elaboration_phase 方法中完成。例：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> end_of_elaboration_phase(uvm_phase phase);<br>uvm_reg regs[$];<br><span class="hljs-keyword">string</span> name;<br>regmodel<span class="hljs-variable">.bus_map</span><span class="hljs-variable">.get_registers</span>(regs);<br><span class="hljs-meta">`uvm_info(get_type_name(),</span><br><span class="hljs-built_in">$sformatf</span>(<span class="hljs-string">"Found %d registers"</span>, regs<span class="hljs-variable">.size</span>()), UVM_MEDIUM)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; regs<span class="hljs-variable">.size</span>(); j++)<br><span class="hljs-meta">`uvm_info(get_type_name(),$sformatf("regs[%0d]:%s",j,regs[j].get_name()),UVM_</span><br>HIGH)<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure></li><li><p>在寄存器模型中读取或写入寄存器的寄存器 sequence 应扩展自 uvm_sequence，并且应具有名为 regmodel 的变量，该变量存储着对相应寄存器块的指针。</p></li><li><p>在启动读取或写入寄存器的 sequence 之前，请先设置该 sequence 的 regmodel 变量。</p></li></ul><h4 id="Functional-Coverage"><a href="#Functional-Coverage" class="headerlink" title="Functional Coverage"></a>Functional Coverage</h4><ul><li><p>使用 SystemVerilog covergroup 结构在 UVM 验证环境中收集功能覆盖率。</p><p>处理或转换来自 DUT 的值以创建为实际采样覆盖点的派生值，有时这是必要的或更方便的。例如，您可以计算在总线上连续出现的两个地址之间的差异，并将结果值用作覆盖点。该技术可以克服在覆盖组实例化时就进行了定义但覆盖点的定义不能动态地改变的基本限制。例：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">class</span> my_agent_coverage <span class="hljs-keyword">extends</span> uvm_subscriber <span class="hljs-variable">#(bus_tx)</span>;<br><span class="hljs-meta">`uvm_component_utils(my_agent_coverage)</span><br>bus_tx m_item;<br><span class="hljs-keyword">int</span> m_address_delta;<br><span class="hljs-keyword">covergroup</span> m_cov;<br>cp_address_delta: <span class="hljs-keyword">coverpoint</span> m_address_delta &#123;<br><span class="hljs-keyword">bins</span> zero = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">bins</span> one = &#123;<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">bins</span> negative = &#123; [-<span class="hljs-number">128</span>:-<span class="hljs-number">1</span>] &#125;;<br><span class="hljs-keyword">bins</span> positive = &#123; [<span class="hljs-number">1</span>: <span class="hljs-number">127</span>] &#125;;<br>option<span class="hljs-variable">.at_least</span> = <span class="hljs-number">16</span>;<br>&#125;<br><span class="hljs-keyword">endgroup</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">new</span>(<span class="hljs-keyword">string</span> name, uvm_component parent);<br><span class="hljs-keyword">super</span><span class="hljs-variable">.new</span>(name, parent);<br>m_cov = <span class="hljs-keyword">new</span>;<span class="hljs-keyword">endfunction</span> : <span class="hljs-keyword">new</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> write(<span class="hljs-keyword">input</span> bus_tx t);<br>m_item = t;<br>m_address_delta = m_item<span class="hljs-variable">.current_address</span> - m_item<span class="hljs-variable">.previous_address</span>;<br>m_cov<span class="hljs-variable">.sample</span>();<br><span class="hljs-keyword">endfunction</span> : write<br><span class="hljs-keyword">endclass</span> : my_agent_coverage<br></code></pre></td></tr></table></figure></li><li><p>在适当的情况下，使用 cover property 在 interface 中收集功能覆盖信息。</p></li><li><p>将 covergroup 作为嵌入式 covergroup 放置在类中，或者将 covergroup 放在 package 中并参数化 covergroup，以便可以从该 package 中的类进行实例化。</p></li><li><p>Covergroups 应该在 UVM 组件类中实例化，而不是在 sequence 或 transaction 中。</p></li><li><p>Covergroups 应在 UVM subscribers 或 scoreboards 中实例化，并且 scoreboard 是在 UVM env类中实例化并连接到 monitor/agent 的 analysis port。</p></li><li><p>在 coverage 收集器类的构造函数中实例化 covergroup。</p></li><li><p>为了收集 DUT 内部信号的功能覆盖信息，在单个 SystemVerilog module（或接口）中封装对 DUT 层次路径的引用，然后使用虚拟接口和 interface 从 UVM 环境访问该模块。可以使用层次路径或使用 bind 语句访问 DUT 中的内部信号。在单个模块（或接口）中封装所有层次路径可以使得验证环境保持干净。</p></li><li><p>如果 coverage 收集跨越多个 DUT 接口，因此需要从多个 agent 接收 analysis transaction，请使用`uvm_analysis_imp_decl 宏在 coverage collector 类中提供多个 analysis exports。</p><p>uvm_subscriber 类仅仅只有一个 analysis export，`uvm_analysis_imp_decl 宏提供了接受多个传入 transaction 流的最方便的方法，每个传入 transaction 流都有自己独立的 write 方法。例：</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`uvm_analysis_imp_decl(_expected)</span><br><span class="hljs-meta">`uvm_analysis_imp_decl(_actual)</span><br><span class="hljs-keyword">class</span> my_cov_collector <span class="hljs-keyword">extends</span> uvm_scoreboard;<br><span class="hljs-meta">`uvm_component_utils(my_cov_collector)</span><br>uvm_analysis_imp_expected <span class="hljs-variable">#(tx_t, my_cov_collector)</span> expected_export;<br>uvm_analysis_imp_actual <span class="hljs-variable">#(tx_t, my_cov_collector)</span> actual_export;<br>...<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> build_phase(uvm_phase phase);<br>        expected_export = <span class="hljs-keyword">new</span>(<span class="hljs-string">"expected_export"</span>, <span class="hljs-keyword">this</span>);actual_export =                    <span class="hljs-keyword">new</span>(<span class="hljs-string">"actual_export"</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">endfunction</span><br>...<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> write_expected(tx_t t);<br>...<br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">function</span> <span class="hljs-keyword">void</span> write_actual(tx_t t);<br>...<br><span class="hljs-keyword">endfunction</span><br>...<br><span class="hljs-keyword">endclass</span><br></code></pre></td></tr></table></figure></li><li><p>将覆盖点分为多个覆盖组，以便将的 specification features 的 coverage 与 implementation features 的 coverage 分开。这将有助于重新使用 coverage 模型。</p></li><li><p>在 coverage 收集器的配置对象中使用变量 coverage_enable 来启用或禁用 coverage 收集。</p></li><li><p>通过调用 sample 方法而不是为 covergroup 指定时钟事件来对进行采样。</p></li><li><p>不要频繁地过度对覆盖组进行采样。考虑对每个覆盖点使用条件表达式 iff( …)来降低采样频率。</p></li><li><p>在 DUT 端口或者 DUT 内部进行采样，不要在激励上面进行采样。在采样 DUT 的寄存器的值时，应该等到 DUT 寄存器值发生变化后才采样，而不是在激励发生变化时就进行采样。</p></li><li><p>考虑将每个覆盖组和覆盖点的 option.at_least 设置为默认值 1 以外的某个值。option.at_least 的默认值仅确保每个状态被命中一次，这通常不足以测试状态是否已经锁定。</p></li><li><p>不要设置覆盖组和覆盖点的 option.weight 或 option.goal。</p></li><li><p>仔细设计 coverpoint bin，以确保涵盖功能重要的 case。</p><p>由于 100％覆盖状态空间是不现实的，因此仔细设计 coverage bin 对于验证质量至关重要。一种解决方案的是为典型值，特殊值和边界条件创建单独的 bin。bin 的选择应与验证计划有关。</p></li><li><p>设计覆盖点时，请指定非法值或不需要覆盖的值为 ignore_bins。不要使用 illegal_bins。</p><p>Covergroups 应限于收集功能覆盖率信息，而不是直接与错误报告相关联。应使用断言或使用 UVM 报告处理程序来捕获非法值。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解内存模型的Memory-Order?</title>
      <link href="/2019/05/17/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84Memory-Order/"/>
      <url>/2019/05/17/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84Memory-Order/</url>
      
        <content type="html"><![CDATA[<h3 id="（转载）"><a href="#（转载）" class="headerlink" title="（转载）"></a>（转载）</h3><h3 id="理解-Memory-Order"><a href="#理解-Memory-Order" class="headerlink" title="理解 Memory Order"></a><strong>理解 Memory Order</strong></h3><h2 id="为什么需要-Memory-Order"><a href="#为什么需要-Memory-Order" class="headerlink" title="为什么需要 Memory Order"></a>为什么需要 Memory Order</h2><p>　　如果不使用任何同步机制（例如 mutex 或 atomic），在多线程中读写同一个变量，那么，程序的结果是难以预料的。简单来说，编译器以及 CPU 的一些行为，会影响到程序的执行结果：</p><ul><li>即使是简单的语句，C++ 也不保证是原子操作。</li><li>CPU 可能会调整指令的执行顺序。</li><li>在 CPU cache 的影响下，一个 CPU 执行了某个指令，不会立即被其它 CPU 看见。</li></ul><p>　　原子操作说的是，一个操作的状态要么就是未执行，要么就是已完成，不会看见中间状态。例如，在 C++11 中，下面程序的结果是未定义的：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">int64_t i = 0;     // global variable<br><br>Thread-1:              Thread-2:<br>i = 100;               std::cout &lt;&lt; i;<br></code></pre></td></tr></table></figure><p>C++ 并不保证i = 100是原子操作，因为在某些 CPU Architecture 中，写入int64_t需要两个 CPU 指令，所以 Thread-2 可能会读取到i在赋值过程的中间状态。</p><hr><p>另一方面，为了优化程序的执行性能，CPU 可能会调整指令的执行顺序。为阐述这一点，下面的例子中，让我们假设所有操作都是原子操作：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;     <span class="hljs-comment">// global variable</span><br>   <span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>;     <span class="hljs-comment">// global variable</span><br>  <br>Thread<span class="hljs-number">-1</span>:              Thread<span class="hljs-number">-2</span>:<br>x = <span class="hljs-number">100</span>;               <span class="hljs-keyword">while</span> (y != <span class="hljs-number">200</span>) ;<br>y = <span class="hljs-number">200</span>;               <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; x;<br></code></pre></td></tr></table></figure><p>如果 CPU 没有乱序执行指令，那么 Thread-2 将输出<code>100</code>。然而，对于 Thread-1 来说，<code>x = 100;</code>和<code>y = 200;</code>这两个语句之间没有依赖关系，因此，Thread-1 允许调整语句的执行顺序：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">Thread<span class="hljs-number">-1</span>:<br>y = <span class="hljs-number">200</span>;<br>x = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>　在这种情况下，Thread-2 将输出<code>0</code>或<code>100</code>。</p><hr><p>CPU cache 也会影响到程序的行为。下面的例子中，假设从时间上来讲，A 操作先于 B 操作发生：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;     <span class="hljs-comment">// global variable</span><br>  <br>Thread<span class="hljs-number">-1</span>:                      Thread<span class="hljs-number">-2</span>:<br>x = <span class="hljs-number">100</span>;    <span class="hljs-comment">// A               std::cout &lt;&lt; x;    // B</span><br></code></pre></td></tr></table></figure><p>尽管从时间上来讲，A 先于 B，但 CPU cache 的影响下，Thread-2 不能保证立即看到 A 操作的结果，所以 Thread-2 可能输出<code>0</code>或<code>100</code>。</p><hr><p>从上面的三个例子可以看到，多线程读写同一变量需要使用同步机制，最常见的同步机制就是<code>std::mutex</code>和<code>std::atomic</code>。然而，从性能角度看，通常使用<code>std::atomic</code>会获得更好的性能。<br>　　C++11 为<code>std::atomic</code>提供了 4 种 memory ordering:</p><ul><li>Relaxed ordering</li><li>Release-Acquire ordering</li><li>Release-Consume ordering</li><li>Sequentially-consistent ordering</li></ul><p>　　默认情况下，<code>std::atomic</code>使用的是 Sequentially-consistent ordering。但在某些场景下，合理使用其它三种 ordering，可以让编译器优化生成的代码，从而提高性能。</p><h2 id="Relaxed-ordering"><a href="#Relaxed-ordering" class="headerlink" title="Relaxed ordering"></a>Relaxed ordering</h2><p>　　在这种模型下，<code>std::atomic</code>的<code>load()</code>和<code>store()</code>都要带上<code>memory_order_relaxed</code>参数。Relaxed ordering 仅仅保证<code>load()</code>和<code>store()</code>是原子操作，除此之外，不提供任何跨线程的同步。<br>　　先看看一个简单的例子：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-built_in">std</span>::atomic&lt;<span class="hljs-keyword">int</span>&gt; x = <span class="hljs-number">0</span>;     <span class="hljs-comment">// global variable</span><br> <span class="hljs-built_in">std</span>::atomic&lt;<span class="hljs-keyword">int</span>&gt; y = <span class="hljs-number">0</span>;     <span class="hljs-comment">// global variable</span><br>  <br>Thread<span class="hljs-number">-1</span>:                                  Thread<span class="hljs-number">-2</span>:<br>r1 = y.load(memory_order_relaxed); <span class="hljs-comment">// A    r2 = x.load(memory_order_relaxed); // C</span><br>x.store(r1, memory_order_relaxed); <span class="hljs-comment">// B    y.store(42, memory_order_relaxed); // D</span><br></code></pre></td></tr></table></figure><p>执行完上面的程序，可能出现<code>r1 == r2 == 42</code>。理解这一点并不难，因为编译器允许调整 C 和 D 的执行顺序。如果程序的执行顺序是 D -&gt; A -&gt; B -&gt; C，那么就会出现<code>r1 == r2 == 42</code>。</p><hr><p>如果某个操作只要求是原子操作，除此之外，不需要其它同步的保障，就可以使用 Relaxed ordering。程序计数器是一种典型的应用场景：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atomic&gt;</span></span><br><span class="hljs-built_in">std</span>::atomic&lt;<span class="hljs-keyword">int</span>&gt; cnt = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">1000</span>; ++n) &#123;<br>        cnt.fetch_add(<span class="hljs-number">1</span>, <span class="hljs-built_in">std</span>::memory_order_relaxed);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::thread&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">10</span>; ++n) &#123;<br>        v.emplace_back(f);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; t : v) &#123;<br>        t.join();<br>    &#125;<br>    assert(cnt == <span class="hljs-number">10000</span>);    <span class="hljs-comment">// never failed</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Release-Acquire-ordering"><a href="#Release-Acquire-ordering" class="headerlink" title="Release-Acquire ordering"></a>Release-Acquire ordering</h2><p>在这种模型下，<code>store()</code>使用<code>memory_order_release</code>，而<code>load()</code>使用<code>memory_order_acquire</code>。这种模型有两种效果，第一种是可以限制 CPU 指令的重排：</p><ul><li>在<code>store()</code>之前的所有读写操作，不允许被移动到这个<code>store()</code>的后面。</li><li>在<code>load()</code>之后的所有读写操作，不允许被移动到这个<code>load()</code>的前面。</li></ul><p>　　除此之外，还有另一种效果：假设 Thread-1 <code>store()</code>的那个值，成功被 Thread-2 <code>load()</code>到了，那么 Thread-1 在<code>store()</code>之前对内存的所有写入操作，此时对 Thread-2 来说，都是可见的。<br>　　下面的例子阐述了这种模型的原理：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-built_in">std</span>::atomic&lt;<span class="hljs-keyword">bool</span>&gt; ready&#123; <span class="hljs-literal">false</span> &#125;;<br><span class="hljs-keyword">int</span> data = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">producer</span><span class="hljs-params">()</span><br></span>&#123;<br>    data = <span class="hljs-number">100</span>;                                       <span class="hljs-comment">// A</span><br>    ready.store(<span class="hljs-literal">true</span>, <span class="hljs-built_in">std</span>::memory_order_release);     <span class="hljs-comment">// B</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">consumer</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">while</span> (!ready.load(<span class="hljs-built_in">std</span>::memory_order_acquire))    <span class="hljs-comment">// C</span><br>        ;<br>    assert(data == <span class="hljs-number">100</span>); <span class="hljs-comment">// never failed              // D</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-function">thread <span class="hljs-title">t1</span><span class="hljs-params">(producer)</span></span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-function">thread <span class="hljs-title">t2</span><span class="hljs-params">(consumer)</span></span>;<br>    t1.join();<br>    t2.join();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>让我们分析一下这个过程：</p><ul><li>首先 A 不允许被移动到 B 的后面。</li><li>同样 D 也不允许被移动到 C 的前面。</li><li>当 C 从 while 循环中退出了，说明 C 读取到了 B <code>store()</code>的那个值，此时，Thread-2 保证能够看见 Thread-1 执行 B 之前的所有写入操作（也即是 A）。</li></ul><hr><ol><li><p>Relaxed ordering: 在单个线程内，所有原子操作是顺序进行的。按照什么顺序？基本上就是代码顺序（sequenced-before）。这就是唯一的限制了！两个来自不同线程的原子操作是什么顺序？两个字：任意。</p></li><li><p>Release – acquire: 来自不同线程的两个原子操作顺序不一定？那怎么能限制一下它们的顺序？这就需要两个线程进行一下同步（synchronize-with）。同步什么呢？同步对一个变量的读写操作。线程 A 原子性地把值写入 x (release), 然后线程 B 原子性地读取 x 的值（acquire）. 这样线程 B 保证读取到 x 的最新值。注意 release – acquire 有个牛逼的副作用：线程 A 中所有发生在 release x 之前的写操作，对在线程 B acquire x 之后的任何读操作都可见！本来 A, B 间读写操作顺序不定。这么一同步，在 x 这个点前后， A, B 线程之间有了个顺序关系，称作 inter-thread happens-before.</p></li><li><p>Release – consume: 我去，我只想同步一个 x 的读写操作，结果把 release 之前的写操作都顺带同步了？如果我想避免这个额外开销怎么办？用 release – consume 呗。同步还是一样的同步，这回副作用弱了点：在线程 B acquire x 之后的读操作中，有一些是依赖于 x 的值的读操作。管这些依赖于 x 的读操作叫 赖B读. 同理在线程 A 里面, release x 也有一些它所依赖的其他写操作，这些写操作自然发生在 release x 之前了。管这些写操作叫 赖A写. 现在这个副作用就是，只有 赖B读 能看见 赖A写. （卧槽真累）</p></li></ol><p>​       有人问了，说什么叫数据依赖（carries dependency）？其实这玩意儿巨简单：</p><figure class="hljs highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">S1. c = a + b;<br>S2. e = c + d;<br></code></pre></td></tr></table></figure><p>S2 数据依赖于 S1，因为它需要 c 的值。</p><ol start="4"><li>Sequential consistency: 理解了前面的几个，顺序一致性就最好理解了。Release – acquire 就同步一个 x，顺序一致就是对所有的变量的所有原子操作都同步。这么一来，我擦，所有的原子操作就跟由一个线程顺序执行似的。</li></ol><hr><p>进一步参考：<a href="https://blog.csdn.net/lvdan1/article/details/54098559" target="_blank" rel="noopener">https://blog.csdn.net/lvdan1/article/details/54098559</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么如下SV代码不报错？</title>
      <link href="/2019/05/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A6%82%E4%B8%8BSV%E4%BB%A3%E7%A0%81%E4%B8%8D%E6%8A%A5%E9%94%99%EF%BC%9F/"/>
      <url>/2019/05/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A6%82%E4%B8%8BSV%E4%BB%A3%E7%A0%81%E4%B8%8D%E6%8A%A5%E9%94%99%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs undefined">module top();<br> <br>class class_A;<br>  function void compare( int a1, int a2);<br> <br>      if(a1 &gt; a2)<br>         $display(&quot;%d  &gt; %d\n&quot;,a1,a2);<br>      if(a1 &lt; a2)<br>         $display(&quot;%d  &lt; %d\n&quot;,a1,a2);<br>      if(a1 == a2)<br>         $display(&quot;%d  ==  %d\n&quot;,a1,a2);<br> <br>  endfunction<br>endclass<br> <br>class class_B;<br> <br>   class_A  A;<br> <br>   //function calling class_A&apos;s comapre function<br>   function void new_compare(int a , int b);;<br>      A.compare(a,b);<br>   endfunction<br> <br>endclass<br> <br> //class B instance<br>  class_B  B;<br> <br>  initial begin<br> <br>     $display(&quot;Start Test\n&quot;);<br>     B = new;<br>     B.new_compare(32,24);<br> <br>  end<br> <br> <br>endmodule : top<br></code></pre></td></tr></table></figure><ul><li>解释</li></ul><p>You code “works？？” because the method class_A::compare makes no references to any non-static class properties. Most implementations add an implicit this handle argument to non-static class methods, and it would not be until the method tries to reference the null this handle that you would see an error. However, the LRM does not guarantee this behavior and you should declare compare() as a static method so the compiler will check that compare does not access any non-static class properties.</p><p>Accessing non-static members (see 8.9) or virtual methods (see 8.20) via a null object handle is illegal. The result of an illegal access via a null object is indeterminate, and implementations may issue an error.</p><ul><li>试下公式~~~~</li></ul><p>$$ \bbox[red,5px,border:2px solid black]<br>{<br>E=mc^2<br>}<br>$$</p><p>$$ \bbox[yellow,5px,border:2px solid red]<br>{<br>e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n<br>\qquad (1)<br>}<br>$$</p><p>$$ \bbox[blue,5px,border:2px solid yellow]<br>{<br>\begin{matrix}<br>1 &amp; 2 &amp; 3 \\<br>4 &amp; 5 &amp; 6 \\<br>7 &amp; 8 &amp; 9<br>\end{matrix}<br>}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试SystemVerilog代码片段性能可否？</title>
      <link href="/2019/05/14/%E6%B5%8B%E8%AF%95SystemVerilog%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%80%A7%E8%83%BD%E5%8F%AF%E5%90%A6%EF%BC%9F/"/>
      <url>/2019/05/14/%E6%B5%8B%E8%AF%95SystemVerilog%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E6%80%A7%E8%83%BD%E5%8F%AF%E5%90%A6%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<ul><li>SV性能咋测试？</li></ul><ul><li>粗略测试方法：<br><img src="/2019/05/14/测试SystemVerilog代码片段性能可否？/1.png" alt="代码"><br><img src="/2019/05/14/测试SystemVerilog代码片段性能可否？/2.png" alt="运行"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> C/C++ </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何去除恼人的VHDL-IP的ASSERT/WARNING?</title>
      <link href="/2019/05/14/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%81%BC%E4%BA%BA%E7%9A%84VHDL-IP%E7%9A%84ASSERT-WARNING/"/>
      <url>/2019/05/14/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%81%BC%E4%BA%BA%E7%9A%84VHDL-IP%E7%9A%84ASSERT-WARNING/</url>
      
        <content type="html"><![CDATA[<h4 id="IP采用的是VHDL代码，Verilog和VHDL混合仿真出现恼人的无关紧要的Waning"><a href="#IP采用的是VHDL代码，Verilog和VHDL混合仿真出现恼人的无关紧要的Waning" class="headerlink" title="IP采用的是VHDL代码，Verilog和VHDL混合仿真出现恼人的无关紧要的Waning"></a>IP采用的是VHDL代码，Verilog和VHDL混合仿真出现恼人的无关紧要的Waning</h4><font color="red"><br>    ASSERT/WARNING (time 543162800 FS) from package ieee.NUMERIC_STD, this builtin function called  from process xxx.xxx.xxx.xxx<br></font><ul><li>采用如下命令瞬间清净了。。。</li><li><p>NCsim命令行控制</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ncsim&gt; set severity_pack_assert_off &#123;warning&#125;<br>ncsim&gt; set pack_assert_off &#123; std_logic_arith numeric_std &#125;<br></code></pre></td></tr></table></figure></li><li><p>VCS参考handbook吧。。。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> EDA </tag>
            
            <tag> NCsim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>库映射问题(续)：相同module不同映射</title>
      <link href="/2019/05/09/%E5%BA%93%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98-%E7%BB%AD-%EF%BC%9A%E7%9B%B8%E5%90%8Cmodule%E4%B8%8D%E5%90%8C%E6%98%A0%E5%B0%84/"/>
      <url>/2019/05/09/%E5%BA%93%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98-%E7%BB%AD-%EF%BC%9A%E7%9B%B8%E5%90%8Cmodule%E4%B8%8D%E5%90%8C%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="上节中运用的config标准，这次采用EDA工具自带支持的uselib宏"><a href="#上节中运用的config标准，这次采用EDA工具自带支持的uselib宏" class="headerlink" title="上节中运用的config标准，这次采用EDA工具自带支持的uselib宏"></a>上节中运用的config标准，这次采用EDA工具自带支持的uselib宏</h3><h4 id="采用如下运行"><a href="#采用如下运行" class="headerlink" title="采用如下运行"></a>采用如下运行</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">irun top.v<br></code></pre></td></tr></table></figure><h4 id="相关代码："><a href="#相关代码：" class="headerlink" title="相关代码："></a>相关代码：</h4><p><img src="/2019/05/09/库映射问题-续-：相同module不同映射/1.png" alt="rtl"><br><img src="/2019/05/09/库映射问题-续-：相同module不同映射/2.png" alt="compile"><br><img src="/2019/05/09/库映射问题-续-：相同module不同映射/3.png" alt="run"></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> EDA </tag>
            
            <tag> VCS </tag>
            
            <tag> NCsim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>库映射问题：相同module不同映射</title>
      <link href="/2019/05/09/%E5%BA%93%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98%EF%BC%9A%E7%9B%B8%E5%90%8Cmodule%E4%B8%8D%E5%90%8C%E6%98%A0%E5%B0%84/"/>
      <url>/2019/05/09/%E5%BA%93%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98%EF%BC%9A%E7%9B%B8%E5%90%8Cmodule%E4%B8%8D%E5%90%8C%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="想例化不一样的instance，但是用不同功能的同名module，如rtl，netlist，beh模型等。"><a href="#想例化不一样的instance，但是用不同功能的同名module，如rtl，netlist，beh模型等。" class="headerlink" title="想例化不一样的instance，但是用不同功能的同名module，如rtl，netlist，beh模型等。"></a>想例化不一样的instance，但是用不同功能的同名module，如rtl，netlist，beh模型等。</h3><h4 id="记住把HEAD预处理宏去除。。。嗨，卡了一天死活不成功，原来是预处理宏给注释同样的module名字！！！！"><a href="#记住把HEAD预处理宏去除。。。嗨，卡了一天死活不成功，原来是预处理宏给注释同样的module名字！！！！" class="headerlink" title="记住把HEAD预处理宏去除。。。嗨，卡了一天死活不成功，原来是预处理宏给注释同样的module名字！！！！"></a>记住把HEAD预处理宏去除。。。嗨，卡了一天死活不成功，原来是预处理宏给注释同样的module名字！！！！</h4><p>相关代码：<br><img src="/2019/05/09/库映射问题：相同module不同映射/rtl.png" alt="rtl"><br><img src="/2019/05/09/库映射问题：相同module不同映射/cfg.png" alt="cfg"><br><img src="/2019/05/09/库映射问题：相同module不同映射/libmap.png" alt="libmap"><br><img src="/2019/05/09/库映射问题：相同module不同映射/compile.png" alt="compile"><br><img src="/2019/05/09/库映射问题：相同module不同映射/run.png" alt="run"></p><h3 id="NCsim"><a href="#NCsim" class="headerlink" title="NCsim"></a>NCsim</h3><h4 id="config嵌入式编译"><a href="#config嵌入式编译" class="headerlink" title="config嵌入式编译"></a>config嵌入式编译</h4><ul><li><p>lib1,lib2已经预先编译时，采用如下运行：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">irun -cdslib cds.lib -compcnfg  -top mycfg -libverbose top.v -work mylib<br></code></pre></td></tr></table></figure></li><li><p>lib1,lib2没有预先编译时，采用如下运行：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">irun -compcnfg  -top mycfg -libverbose -work mylib -libmap lib.map top.v ./beh/add.v ./rtl/add.v<br></code></pre></td></tr></table></figure></li></ul><h4 id="config分离编译"><a href="#config分离编译" class="headerlink" title="config分离编译"></a>config分离编译</h4><ul><li><p>lib1,lib2已经预先编译时，采用如下运行：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">irun -cdslib cds.lib -compcnfg  -top mycfg -libverbose top.v -work mylib mycfg.v<br></code></pre></td></tr></table></figure></li><li><p>lib1,lib2没有预先编译时，不过必须先mkdir库，采用如下运行：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">irun -compcnfg  -top mycfg -libverbose -work mylib -libmap lib.map top.v ./beh/add.v ./rtl/add.v mycfg.v<br></code></pre></td></tr></table></figure></li></ul><h3 id="VCS类似：略去。"><a href="#VCS类似：略去。" class="headerlink" title="VCS类似：略去。"></a>VCS类似：略去。</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="/2019/05/09/库映射问题：相同module不同映射/SystemVerilog Configurations and Tool Flow Using SCons.pdf">库映射问题：相同module不同映射</a></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> EDA </tag>
            
            <tag> VCS </tag>
            
            <tag> NCsim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过套接字进行SV和其他语言进行交互</title>
      <link href="/2019/05/08/%E9%80%9A%E8%BF%87%E5%A5%97%E6%8E%A5%E5%AD%97%E8%BF%9B%E8%A1%8CSV%E5%92%8C%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92/"/>
      <url>/2019/05/08/%E9%80%9A%E8%BF%87%E5%A5%97%E6%8E%A5%E5%AD%97%E8%BF%9B%E8%A1%8CSV%E5%92%8C%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<ul><li>通过TCP套接字，可以进行其他语言进行交互。</li><li>外围算法计算后传输到验证平台，验证平台再传输数据回外围算法进行交互，在算法初期调试阶段，减少编写各种DPI接口，进行快速迭代开发。</li></ul><ul><li>服务器端：<br><img src="/2019/05/08/通过套接字进行SV和其他语言进行交互/ser.png" alt="服务器端"></li><li>仿真器端：<br><img src="/2019/05/08/通过套接字进行SV和其他语言进行交互/sv.png" alt="仿真器端"></li><li>sv代码端：<br><img src="/2019/05/08/通过套接字进行SV和其他语言进行交互/src.png" alt="代码片段"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SystemVerilog </tag>
            
            <tag> Linux </tag>
            
            <tag> Socket </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker启动EDA工具迅速！</title>
      <link href="/2019/05/05/Docker%E5%90%AF%E5%8A%A8EDA%E5%B7%A5%E5%85%B7%E8%BF%85%E9%80%9F%EF%BC%81/"/>
      <url>/2019/05/05/Docker%E5%90%AF%E5%8A%A8EDA%E5%B7%A5%E5%85%B7%E8%BF%85%E9%80%9F%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<ul><li>神秘人的Docker-EDA：</li></ul><ul><li>内存占用极低（&lt;100M），启动迅速，1s级别。基本上就是内嵌在Win7的应用软件。<br><img src="/2019/05/05/Docker启动EDA工具迅速！/EDA.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> EDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM虚拟机再见！Docker来了！</title>
      <link href="/2019/04/30/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%8D%E8%A7%81%EF%BC%81Docker%E6%9D%A5%E4%BA%86%EF%BC%81/"/>
      <url>/2019/04/30/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%8D%E8%A7%81%EF%BC%81Docker%E6%9D%A5%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<ul><li>VM(VMware)在宿主机器、宿主机器操作系统的基础上创建虚拟层、虚拟化的操作系统、虚拟化的仓库，然后再安装应用；</li><li><p>Container(Docker容器)，在宿主机器、宿主机器操作系统上创建Docker引擎，在引擎的基础上再安装应用。那么问题来了，没有操作系统，怎么运行程序？可以在Docker中创建一个ubuntu的镜像文件，这样就能将ubuntu系统集成到Docker中，运行的应用就都是ubuntu的应用。</p></li><li><p>区别：<br><img src="/2019/04/30/VM虚拟机再见！Docker来了！/vm-docker.png" alt="vm-docker"></p></li><li><p>神秘人的Docker：<br><img src="/2019/04/30/VM虚拟机再见！Docker来了！/docker-ubuntu.png" alt="docker-ubuntu"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约束12与34都存在number数组里或者12与34都不在number数组里里？</title>
      <link href="/2019/04/30/%E7%BA%A6%E6%9D%9F12%E4%B8%8E34%E9%83%BD%E5%AD%98%E5%9C%A8number%E6%88%96%E8%80%8512%E4%B8%8E34%E9%83%BD%E4%B8%8D%E5%9C%A8number%E9%87%8C%EF%BC%9F/"/>
      <url>/2019/04/30/%E7%BA%A6%E6%9D%9F12%E4%B8%8E34%E9%83%BD%E5%AD%98%E5%9C%A8number%E6%88%96%E8%80%8512%E4%B8%8E34%E9%83%BD%E4%B8%8D%E5%9C%A8number%E9%87%8C%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined">module cons;<br><br>  class test;<br><br>    bit [7:0] fib[7] = &apos;&#123;12,34,45,47,78,96,104&#125;;<br>    rand bit [7:0] dt[2];<br>    rand bit [7:0] number[];<br>    rand bit in_or_not_in;<br>    constraint number_cn &#123;<br>      number.size() inside &#123;[2:5]&#125;;<br>      unique &#123;dt&#125;;<br>      foreach(dt[i])<br>        dt[i] inside &#123;fib[0],fib[1]&#125;;//can change<br>      foreach(dt[i])<br>        if (in_or_not_in == 1)<br>            dt[i] inside &#123;number&#125;;<br>        else<br>            !(dt[i] inside &#123;number&#125;);<br>      in_or_not_in dist &#123;1:=8,0:=2&#125;;<br>    &#125;<br><br>  endclass<br><br>  initial begin<br>    automatic test utest = new();<br>    for(int i=0;i&lt;30;i++) begin<br>        void&apos;(utest.randomize());<br>        $display(&quot;%0d,%p&quot;,utest.in_or_not_in,utest.number);<br>    end<br>  end<br><br>endmodule<br></code></pre></td></tr></table></figure><h3 id="NCsim输出"><a href="#NCsim输出" class="headerlink" title="NCsim输出"></a>NCsim输出</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs undefined">1,&apos;&#123;&apos;h22, &apos;hc&#125;<br>1,&apos;&#123;&apos;hd9, &apos;hc, &apos;h7e, &apos;h22, &apos;hd2&#125;<br>0,&apos;&#123;&apos;hdd, &apos;h64&#125;<br>1,&apos;&#123;&apos;ha, &apos;hc, &apos;h22, &apos;hf4&#125;<br>1,&apos;&#123;&apos;h22, &apos;hc&#125;<br>1,&apos;&#123;&apos;hc, &apos;h22&#125;<br>1,&apos;&#123;&apos;hc, &apos;h9, &apos;h22&#125;<br>1,&apos;&#123;&apos;h27, &apos;hc, &apos;h17, &apos;h22&#125;<br>1,&apos;&#123;&apos;h22, &apos;hc&#125;<br>0,&apos;&#123;&apos;hb, &apos;h7c, &apos;h6a&#125;<br>1,&apos;&#123;&apos;hc, &apos;h22&#125;<br>1,&apos;&#123;&apos;h7e, &apos;hd0, &apos;hc, &apos;h22, &apos;h13&#125;<br>1,&apos;&#123;&apos;h22, &apos;hca, &apos;hc&#125;<br>1,&apos;&#123;&apos;h22, &apos;hc&#125;<br>1,&apos;&#123;&apos;hc, &apos;h22&#125;<br>1,&apos;&#123;&apos;h80, &apos;hc, &apos;hc5, &apos;h22&#125;<br>0,&apos;&#123;&apos;h83, &apos;h5c, &apos;hae, &apos;he4&#125;<br>1,&apos;&#123;&apos;h95, &apos;hb2, &apos;h22, &apos;hc&#125;<br>1,&apos;&#123;&apos;hed, &apos;hc, &apos;hd0, &apos;hac, &apos;h22&#125;<br>1,&apos;&#123;&apos;ha3, &apos;h22, &apos;hc, &apos;h16, &apos;h84&#125;<br>1,&apos;&#123;&apos;h9d, &apos;hc, &apos;h22, &apos;h16&#125;<br>1,&apos;&#123;&apos;h22, &apos;hc, &apos;haa, &apos;ha1&#125;<br>1,&apos;&#123;&apos;hc, &apos;h22&#125;<br>1,&apos;&#123;&apos;h87, &apos;hc, &apos;h22&#125;<br>1,&apos;&#123;&apos;hc, &apos;h79, &apos;h22&#125;<br>0,&apos;&#123;&apos;h60, &apos;h99, &apos;h2b&#125;<br>1,&apos;&#123;&apos;hc, &apos;h22&#125;<br>1,&apos;&#123;&apos;h22, &apos;hc&#125;<br>1,&apos;&#123;&apos;h22, &apos;hc&#125;<br>1,&apos;&#123;&apos;hc, &apos;h22&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uvm-indirect-registers</title>
      <link href="/2019/04/29/uvm-indirect-registers/"/>
      <url>/2019/04/29/uvm-indirect-registers/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19VrICxT+fPlEpCn2xIpyGtc2Pty2yC46EPJtKcoWc6rK8jHI4hDqhu7fN3ac8rNpildIvhEcmt1bv1dNJXvYuguWtaC1YC7kL/B7KQ+lFdJtucmREulbLTUVxsX8a0hHimZNp5j0QKyNKl/sC3I3ZqsigKPhNhDv9RlBMgWJXLJAF1HFXZJYeU0GKXFlwdPdN5HUiDBomsf3ZcJd6bM17QiuBCy4OjcT56GrC0szwt09yVTtX7grezlHJmYuWE6gyxEieKdZ+96DrLmk5hMSdl0VVl7+ydTqPHmAsxFQn2GeAd7s2HTK35HJH4rnFJVfg0FQySwWipWiONMSR0G7+Ywcr3hGfJsLONchbjFAcGzjQcXPusUNYLmpU4zy5JHtXsS7UAbVRSV+cR9mVPm0c3a+QzzfmcTe+yzhiGsxIDwZ/lTfGV6dYQgD/rOhpxnMMfLS6fzzbH9vQrRKrDllf9TOfaVRrcvy/QtHI1WsI68OWjjVxOTfVGrGDZ2Q66q3wX2bsmtpzGspzbVl4B2AOb+bU83df0SnfvvZf3WbqiDv1j+DH/EBZoQ8/JMizGVv93xpH+eqlb1GBX3nU5c+q+FvP69LaEhIU=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>regModel</title>
      <link href="/2019/04/29/regModel/"/>
      <url>/2019/04/29/regModel/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+lDuFYlZ477gVL0Ta4ciM/NcmrPvpReF56EI3okM05l/qo/kgQ2ZghCrOPj86Sdf6hnd4bNqpDTttlc0Q+NxLezWSDEOpcfxth/2XVkMKqgIKcXRS+Te6WB5LSnfzNZkJDtvMcptlpYPJEIf8e6VZ5AVdYmB+4nYJ1DmONp/tG/IFiJfbGgfWM4WKzhnlfRMc++NtzZBE3J/rU7htBht3kfRqkm4JQfYg++gNdpVTrgrXDBOXkKK3JktLumQ4atQaPhgMpd/796kQ9TIQ1tzeeuOxRI/DKciiVmXHkkVoBOX8U5NuWbfdbEkpI3LvsyZQG+kO57iST+31vexB47zsG5fDiJgyBP4H1u9sj9zPPwiGZK24946mhCxmAgKBJhx1MPTm+4mffUuuAqJEzvETxoTYHahWSZZKtaTA45Mqe+HgHljlYDy7schaz+9HExpTu4mCRZIaYoup0FH1p9giqcjFsFipBK3WEDK/QZj/Ls7XlbxxwAJRWNsfWlRvpZ31R136UjoyRB/FXV0bW0WUDm9qy/pGIMWn5ZOpS+74eRDwDK0EJnABV</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCS定位死循环</title>
      <link href="/2019/04/28/VCS-deadLoop/"/>
      <url>/2019/04/28/VCS-deadLoop/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EDA </tag>
            
            <tag> VCS </tag>
            
            <tag> Synopsys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM-CUTOM-FIELD-ACCESS-POLICY</title>
      <link href="/2019/04/26/UVM-CUTOM-FIELD-ACCESS-POLICY/"/>
      <url>/2019/04/26/UVM-CUTOM-FIELD-ACCESS-POLICY/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX187WVW+V7Eex05ZKvbsOe49pP0kbgr6/9M32xgLsO08eYZomons+dIztQdnebuweR0oO8Cngmcl1na8/OrXTKtihYC6nuK+y99EgtlztWGri8SBuyghq1OodJw/MOBFRPsf8wL/hoaF0ckytGJaFELzBgN404GJ/Qro9pefNntHc1jG1MAOYb+ITo1ZIQloiYhDYimp9hHalToIvi3lVsrykae1bkoU0yNOY7KI3JhC+3ugue/cgmBK1Pbp+0yEFU2reW6YkpNbm64x0cKqwljOykmt3sDYz7DLx3bmoKSZpQGcqgkZARP7YPZCkMi9SfZKNwxusutj1AX3QbRT2yfWR7P0T3s5KhBfPt/VHdJaUVBGG8WsidEJKdvsT5uX1VjXPZSsio4essL+j8qBL6BT/qT0TIB4BrADQdmztTfBL1o/58IEXQ7VFHdWlakSF258wK4ifc8fugiBPTPUgjuUQX/L0IenUKDU2fEZ2zCiFhUSbkr+RK9asW0ykOPKeQsDdriX24H+rd3o6ocZqAnRQ+tMFajcinWhYvc6XKks6XImrYayZk8V/GdUG2xzZESCq31hI1eRQr/Tcxl9lWRNUf8leWPwhtHr9T576jMUpeoPi1/fIyhU4aLlpdYiYHYRjNBGVQAfa9VhiUAXyoyh9QXHLh5lqDnJHTkLdSEYkAgyD8I2whBvSLSjZno2o0vjn4IIrYYoIcGB6MSoAml+tINnCpxApnnD/675obWrHlJ3ut8Bi70LQstOw5bRdncI20zVN+kYSGns+OB7qdfpMxZfFlJ7WESshayxShhtVtemTDSCtwsfk1KJPfiLt7ldTLTARyRzXfapJ5F31MrLBpFq7Nz0dg9Y292xueYUap7g9l+GL5j6FrrT9/GXre3C7i9Al35ZcnZntlMiqBExb9DaglWg9Ekf7cMke7lQ13rowCdZBzSX72h+MTz9xw7OpRDFzeY1i92WBQoUn+a2fLPpNUMAgdnwN1PeM9/s7FbU5tqNASZgaEGzvj5ldPk2TzsPZ47PdQIA929XkcfDPraVP4L0Hnmkzv4QvpORQEaLpjKhJZn3romfDO5mfDio+hvh1xrRR4pAvUCtOEVGN7y43XfIL250pPbX17wRMOX8ewBL3aznks9dLOnACQsQWJy+k1E4cE75mSymY0zK/iOhYLh9KsnZeiwH14je5zCn06kxWrAg80j1IvTiC0dTYXh3JgS0e18X3IjDIvc/NY+uBQlWycOnYhD6HntsA6whmC4O8RbYvtW3HlLB4eGK7SjVMwt5dedCHr69o9q6eKRQJZLszWj/cURy/ICJfOQAGJ4hbC9/YUX5I+vxsC5oxv+ejxyXQqVi0iWI2GTSbnqo+FTx43E=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-C++资源</title>
      <link href="/2019/04/25/C-C-%E8%B5%84%E6%BA%90/"/>
      <url>/2019/04/25/C-C-%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Awesome-C"><a href="#Awesome-C" class="headerlink" title="Awesome C++ "></a>Awesome C++ <a href="https://awesome.re" target="_blank" rel="noopener"><img src="https://awesome.re/badge.svg" alt="Awesome"></a></h1><p>A curated list of awesome C++ (or C) frameworks, libraries, resources, and shiny things. Inspired by awesome-… stuff.</p><ul><li><a href="#awesome-cpp">Awesome C++</a><ul><li><a href="#standard-libraries">Standard Libraries</a></li><li><a href="#frameworks">Frameworks</a></li><li><a href="#artificial-intelligence">Artificial Intelligence</a></li><li><a href="#asynchronous-event-loop">Asynchronous Event Loop</a></li><li><a href="#audio">Audio</a></li><li><a href="#biology">Biology</a></li><li><a href="#bittorrent">BitTorrent</a></li><li><a href="#cli">CLI</a></li><li><a href="#compression">Compression</a></li><li><a href="#concurrency">Concurrency</a></li><li><a href="#containers">Containers</a></li><li><a href="#cryptography">Cryptography</a></li><li><a href="#database">Database</a></li><li><a href="#debug">Debug</a></li><li><a href="#game-engine">Game Engine</a></li><li><a href="#gui">GUI</a></li><li><a href="#graphics">Graphics</a></li><li><a href="#image-processing">Image Processing</a></li><li><a href="#internationalization">Internationalization</a></li><li><a href="#inter-process-communication">Inter-process communication</a></li><li><a href="#json">JSON</a></li><li><a href="#logging">Logging</a></li><li><a href="#machine-learning">Machine Learning</a></li><li><a href="#math">Math</a></li><li><a href="#memory-allocation">Memory Allocation</a></li><li><a href="#multimedia">Multimedia</a></li><li><a href="#networking">Networking</a></li><li><a href="#pdf">PDF</a></li><li><a href="#physics">Physics</a></li><li><a href="#reflection">Reflection</a></li><li><a href="#regular-expression">Regular Expression</a></li><li><a href="#robotics">Robotics</a></li><li><a href="#scientific-computing">Scientific Computing</a></li><li><a href="#scripting">Scripting</a></li><li><a href="#serialization">Serialization</a></li><li><a href="#sorting">Sorting</a></li><li><a href="#video">Video</a></li><li><a href="#virtual-machines">Virtual Machines</a></li><li><a href="#web-application-framework">Web Application Framework</a></li><li><a href="#xml">XML</a></li><li><a href="#miscellaneous">Miscellaneous</a></li></ul></li><li><a href="#software">Software</a><ul><li><a href="#compiler">Compiler</a></li><li><a href="#online-compiler">Online Compiler</a></li><li><a href="#debugger">Debugger</a></li><li><a href="#integrated-development-environment">Integrated Development Environment</a></li><li><a href="#build-systems">Build Systems</a></li><li><a href="#static-code-analysis">Static Code Analysis</a></li><li><a href="#coding-style-tools">Coding Style Tools</a></li></ul></li><li><a href="#resources">Resources</a><ul><li><a href="#api-design">API Design</a></li><li><a href="#articles">Articles</a></li><li><a href="#books">Books</a></li><li><a href="#coding-style">Coding Style</a></li><li><a href="#podcasts">Podcasts</a></li><li><a href="#talks">Talks</a></li><li><a href="#videos">Videos</a></li><li><a href="#websites">Websites</a></li></ul></li><li><a href="#other-awesome-lists">Other Awesome Lists</a></li><li><a href="#contributing">Contributing</a></li></ul><h2 id="Standard-Libraries"><a href="#Standard-Libraries" class="headerlink" title="Standard Libraries"></a>Standard Libraries</h2><p><em>C++ Standard Library - including STL Containers, STL Aglorithm, STL Functional, etc.</em></p><ul><li><a href="https://en.wikipedia.org/wiki/C%2B%2B_Standard_Library" target="_blank" rel="noopener">C++ Standard Library</a> - A collection of classes and functions, which are written in the core language and part of the C++ ISO Standard itself.</li><li><a href="https://en.wikipedia.org/wiki/Standard_Template_Library" target="_blank" rel="noopener">Standard Template Library</a> - The Standard Template Library (STL).</li><li><a href="https://en.wikipedia.org/wiki/C_POSIX_library" target="_blank" rel="noopener">C POSIX library</a> - A specification of a C standard library for POSIX systems.</li><li><a href="https://github.com/cplusplus" target="_blank" rel="noopener">ISO C++ Standards Committee</a> - ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee. <a href="http://www.open-std.org/JTC1/SC22/WG21/" target="_blank" rel="noopener">website</a></li><li><a href="https://www.gnu.org/software/libc/manual" target="_blank" rel="noopener">The GNU C Library</a> - The purpose of this manual is to tell you how to use the facilities of the GNU C Library.</li></ul><h2 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h2><p><em>C++ generic frameworks and libraries.</em></p><ul><li><a href="https://github.com/abseil/abseil-cpp" target="_blank" rel="noopener">abseil-cpp</a> - Abseil C++ Common Libraries. [Apache2]</li><li><a href="http://stdcxx.apache.org/" target="_blank" rel="noopener">Apache C++ Standard Library</a> - STDCXX, A collection of algorithms, containers, iterators, and other fundamental components. [retired] [Apache2]</li><li><a href="http://apr.apache.org/" target="_blank" rel="noopener">APR</a> - Apache Portable Runtime. Another library of cross-platform utility functions. [Apache2]</li><li><a href="http://stlab.adobe.com/" target="_blank" rel="noopener">ASL</a> - Adobe Source Libraries provides peer-reviewed and portable C++ source libraries. [MIT]</li><li><a href="https://github.com/boostorg" target="_blank" rel="noopener">Boost</a> :zap: - A large collection of generic C++ libraries. [Boost] <a href="http://www.boost.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/bloomberg/bde" target="_blank" rel="noopener">BDE</a> - The BDE Development Environment from Bloomberg Labs. [Apache2]</li><li><a href="https://libcinder.org/" target="_blank" rel="noopener">Cinder</a> - A community-developed, free and open source library for professional-quality creative coding. [BSD]</li><li><a href="http://ryan.gulix.cl/fossil.cgi/cxxomfort/" target="_blank" rel="noopener">Cxxomfort</a> - A small, header-only library that backports various facilities from more recent C++ Standards to C++03 and later. [MIT]</li><li><a href="https://github.com/davisking/dlib" target="_blank" rel="noopener">Dlib</a> :zap: - A general purpose cross-platform C++ library designed using contract programming and modern C++ techniques. [Boost] <a href="http://dlib.net/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/electronicarts/EASTL" target="_blank" rel="noopener">EASTL</a> - Electronic Arts Standard Template Library. [BSD]</li><li><a href="https://github.com/ETLCPP/etl" target="_blank" rel="noopener">ETL</a> - Embedded Template Library. [MIT]</li><li><a href="https://github.com/sumeetchhetri/ffead-cpp" target="_blank" rel="noopener">ffead-cpp</a> - Framework for Enterprise Application Development. [Apache2]</li><li><a href="https://github.com/facebook/folly" target="_blank" rel="noopener">Folly</a> - An open-source C++ library developed and used at Facebook. [Apache2]</li><li><a href="https://github.com/Dobiasd/FunctionalPlus" target="_blank" rel="noopener">FunctionalPlus</a> - Functional Programming Library for C++. Write concise and readable C++ code. [MIT]</li><li><a href="https://wiki.gnome.org/Projects/GLib" target="_blank" rel="noopener">GLib</a> - GLib provides the core application building blocks for libraries and applications written in C. [LGPL]</li><li><a href="https://github.com/julianstorer/JUCE" target="_blank" rel="noopener">JUCE</a> - An all-encompassing C++ class library for developing cross-platform software. [Core-Module: ISC, Rest: GPL2/GPL3/Commercial] <a href="http://www.juce.com/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/facebook/libphenom" target="_blank" rel="noopener">libPhenom</a> - libPhenom is an eventing framework for building high performance and high scalability systems in C. [Apache2]</li><li><a href="https://github.com/sourcey/libsourcey" target="_blank" rel="noopener">LibSourcey</a> - C++11 evented IO for real-time video streaming and high performance networking applications. [LGPL]</li><li><a href="https://github.com/koanlogic/libu" target="_blank" rel="noopener">LibU</a> - A multiplatform utility library written in C. [BSD]</li><li><a href="http://loki-lib.sourceforge.net/" target="_blank" rel="noopener">Loki</a> - A C++ library of designs, containing flexible implementations of common design patterns and idioms. [MIT]</li><li><a href="https://bitbucket.org/fudepan/mili/" target="_blank" rel="noopener">MiLi</a> - Minimal headers-only C++ Library. [Boost]</li><li><a href="https://github.com/openframeworks/openFrameworks" target="_blank" rel="noopener">OpenFrameworks</a> - A cross platform open source toolkit for creative coding in C++. [MIT] <a href="http://www.openframeworks.cc/" target="_blank" rel="noopener">website</a></li><li><a href="https://www.qt.io/download-open-source/" target="_blank" rel="noopener">Qt</a> :zap: - A cross-platform application and UI framework. [GPL/LGPL/Commercial]</li><li><a href="http://code.google.com/p/reason/" target="_blank" rel="noopener">Reason</a> - A cross platform framework designed to bring the ease of use of Java, .Net, or Python to developers who require the performance and strength of C++. [GPL2]</li><li><a href="https://root.cern.ch/" target="_blank" rel="noopener">ROOT</a> - A set of OO frameworks with all the functionality needed to handle and analyze large amounts of data in a very efficient way. Used at CERN. [LGPL]</li><li><a href="http://www.stlport.org/" target="_blank" rel="noopener">STLport</a> - An exemplary version of STL. [Free]</li><li><a href="http://stxxl.sourceforge.net/" target="_blank" rel="noopener">STXXL</a> - Standard Template Library for Extra Large Data Sets. [Boost]</li><li><a href="https://github.com/tboox/tbox" target="_blank" rel="noopener">tbox</a> - A glib-like multi-platform c library. [Apache2] <a href="http://tboox.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.ultimatepp.org/" target="_blank" rel="noopener">Ultimate++</a> - A C++ cross-platform rapid application development framework. [BSD]</li><li><a href="http://msharov.github.io/ustl/" target="_blank" rel="noopener">uSTL</a> - The small STL library. [MIT]</li><li><a href="http://sourceforge.net/projects/wtl/" target="_blank" rel="noopener">Windows Template Library</a> - A C++ library for developing Windows applications and UI components. [Public]</li><li><a href="https://github.com/jll63/yomm2" target="_blank" rel="noopener">Yomm2</a> - Fast, Orthogonal, Open multi-methods. Supersedes <a href="https://github.com/jll63/yomm11" target="_blank" rel="noopener">Yomm11</a> [Boost]</li></ul><h2 id="Artificial-Intelligence"><a href="#Artificial-Intelligence" class="headerlink" title="Artificial Intelligence"></a>Artificial Intelligence</h2><ul><li><a href="https://github.com/ANNetGPGPU/ANNetGPGPU" target="_blank" rel="noopener">ANNetGPGPU</a> - A GPU (CUDA) based Artificial Neural Network library. [LGPL]</li><li><a href="https://github.com/aigamedev/btsk" target="_blank" rel="noopener">btsk</a> - Game Behavior Tree Starter Kit. [zlib]</li><li><a href="http://eodev.sourceforge.net/" target="_blank" rel="noopener">Evolving Objects</a> - A template-based, ANSI-C++ evolutionary computation library which helps you to write your own stochastic optimization algorithms insanely fast. [LGPL]</li><li><a href="https://github.com/Dobiasd/frugally-deep" target="_blank" rel="noopener">frugally-deep</a> - Header-only library for using Keras models in C++. [MIT]</li><li><a href="https://github.com/codeplea/genann" target="_blank" rel="noopener">Genann</a> - Simple neural network library in C. [zlib]</li><li><a href="https://github.com/apache/incubator-mxnet" target="_blank" rel="noopener">MXNet</a> - Lightweight, Portable, Flexible Distributed/Mobile Deep Learning with Dynamic, Mutation-aware Dataflow Dep Scheduler; for Python, R, Julia, Scala, Go, Javascript and more <a href="https://mxnet.apache.org" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/pytorch/pytorch" target="_blank" rel="noopener">PyTorch</a> - Tensors and Dynamic neural networks in Python with strong GPU acceleration. <a href="https://pytorch.org" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/recastnavigation/recastnavigation" target="_blank" rel="noopener">Recast/Detour</a> - (3D) Navigation mesh generator and pathfinder, mostly for games. [zlib]</li><li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow</a> - An open source software library for numerical computation using data flow graphs [Apache]</li><li><a href="https://github.com/Microsoft/CNTK" target="_blank" rel="noopener">CNTK</a> - Microsoft Cognitive Toolkit (CNTK), an open source deep-learning toolkit. [Boost]</li><li><a href="https://github.com/tiny-dnn/tiny-dnn" target="_blank" rel="noopener">tiny-dnn</a> - A header only, dependency-free deep learning framework in C++11. [BSD]</li><li><a href="https://github.com/Samsung/veles" target="_blank" rel="noopener">Veles</a> - Distributed platform for rapid Deep learning application development. [Apache]</li><li><a href="https://github.com/kaldi-asr/kaldi" target="_blank" rel="noopener">Kaldi</a> - Toolkit for speech recognition. [Apache]</li></ul><h2 id="Asynchronous-Event-Loop"><a href="#Asynchronous-Event-Loop" class="headerlink" title="Asynchronous Event Loop"></a>Asynchronous Event Loop</h2><ul><li><a href="https://github.com/chriskohlhoff/asio/" target="_blank" rel="noopener">Asio</a> - A cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach. [Boost] <a href="http://think-async.com/" target="_blank" rel="noopener">website</a></li><li><a href="http://think-async.com/" target="_blank" rel="noopener">Boost.Asio</a> - A cross-platform C++ library for network and low-level I/O programming. [Boost]</li><li><a href="https://github.com/actor-framework/actor-framework" target="_blank" rel="noopener">C++ Actor Framework</a> - An Open Source Implementation of the Actor Model in C++. [BSD-3-Clause] <a href="http://actor-framework.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://libev.schmorp.de/" target="_blank" rel="noopener">libev</a> - A full-featured and high-performance event loop that is loosely modelled after libevent, but without its limitations and bugs. [BSD and GPL]</li><li><a href="http://libevent.org/" target="_blank" rel="noopener">libevent</a> - An event notification library. [BSD]</li><li><a href="https://github.com/libuv/libuv" target="_blank" rel="noopener">libuv</a> - Cross-platform asychronous I/O. [BSD]</li><li><a href="https://github.com/skypjack/uvw" target="_blank" rel="noopener">uvw</a> - C++ wrapper for libuv. [MIT]</li></ul><h2 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h2><p><em>Audio, Sound, Music, Digitized Voice Libraries</em></p><ul><li><a href="http://www.fmod.org/" target="_blank" rel="noopener">FMOD</a> - An easy to use crossplatform audio engine and audio content creation tool for games. [Free for non-commercial/Commercial]</li><li><a href="https://www.kfrlib.com/" target="_blank" rel="noopener">KFR</a> - Fast, modern C++ DSP framework, FFT, FIR/IIR filters, Sample Rate Conversion. [GPL/Commercial]</li><li><a href="https://github.com/erikd/libsndfile/" target="_blank" rel="noopener">libsndfile</a> - C library with C++ wrapper for reading and writing files containing sampled sound through one standard library interface. [LGPL-2.1] <a href="http://www.mega-nerd.com/libsndfile/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/micknoise/Maximilian" target="_blank" rel="noopener">Maximilian</a> - C++ Audio and Music DSP Library. [MIT]</li><li><a href="http://www.openal.org/" target="_blank" rel="noopener">OpenAL</a> - Open Audio Library - A crossplatform audio API. [BSD/LGPL/Commercial]</li><li><a href="https://github.com/dr-soft/miniaudio" target="_blank" rel="noopener">miniaudio</a> - Single file audio playback and capture library. [Unlicense]</li><li><a href="http://opus-codec.org/" target="_blank" rel="noopener">Opus</a> - A totally open, royalty-free, highly versatile audio codec. [BSD]</li><li><a href="http://www.portaudio.com/" target="_blank" rel="noopener">PortAudio</a> - PortAudio is a free, cross-platform, open-source, audio I/O library. [MIT]</li><li><a href="https://github.com/sahaRatul/sela" target="_blank" rel="noopener">SELA</a> - SimplE Lossless Audio. [MIT]</li><li><a href="https://github.com/jarikomppa/soloud" target="_blank" rel="noopener">SoLoud</a> - Easy, portable audio engine for games. [zlib]</li><li><a href="http://www.speex.org/" target="_blank" rel="noopener">Speex</a> - A free codec for free speech. Obsoleted by Opus. [BSD]</li><li><a href="https://github.com/TonicAudio/Tonic" target="_blank" rel="noopener">Tonic</a> - Easy and efficient audio synthesis in C++. [Unlicense]</li><li><a href="http://xiph.org/vorbis/" target="_blank" rel="noopener">Vorbis</a> - Ogg Vorbis is a fully open, non-proprietary, patent-and-royalty-free, general-purpose compressed audio format. [BSD]</li><li><a href="https://github.com/lieff/minimp3" target="_blank" rel="noopener">minimp3</a> - Public domain, header-only MP3 decoder with clean-room implementation. [CC0]</li><li><a href="https://github.com/facebookresearch/wav2letter/" target="_blank" rel="noopener">Wav2Letter++</a> - Public domain, a fast open source speech processing toolkit written entirely in C++ and uses the ArrayFire tensor library and the flashlight machine learning library for maximum efficiency [BSD]</li></ul><h2 id="Biology"><a href="#Biology" class="headerlink" title="Biology"></a>Biology</h2><p><em>Bioinformatics, Genomics, Biotech</em></p><ul><li><a href="http://biocpp.sourceforge.net/" target="_blank" rel="noopener">BioC++</a> - C++ Computational Libraries for Bioinformatics. [BSD]</li><li><a href="http://www.cs.ox.ac.uk/chaste/" target="_blank" rel="noopener">Chaste</a> - An open source C++ library for the computational simulation of mathematical models developed for physiology and biology. [BSD]</li><li><a href="http://molpopgen.github.io/libsequence/" target="_blank" rel="noopener">libsequence</a> - A C++ library for representing and analyzing population genetics data. [GPL]</li><li><a href="http://www.seqan.de/" target="_blank" rel="noopener">SeqAn</a> - Algorithms and data structures for the analysis of sequences with the focus on biological data. [BSD/3-clause]</li><li><a href="https://github.com/ekg/vcflib" target="_blank" rel="noopener">Vcflib</a> - A C++ library for parsing and manipulating VCF files. [MIT]</li><li><a href="https://github.com/zeeev/wham" target="_blank" rel="noopener">Wham</a> - Structural variants (SVs) in Genomes by directly applying association tests to BAM files. [MIT]</li></ul><h2 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h2><ul><li><a href="https://github.com/jech/dht" target="_blank" rel="noopener">jech/dht</a> - BitTorrent DHT library in C. [MIT]</li><li><a href="https://github.com/arvidn/libtorrent" target="_blank" rel="noopener">libtorrent</a> (a.k.a. libtorrent-rasterbar) - An efficient feature complete C++ bittorrent implementation. [BSD]</li><li><a href="https://github.com/rakshasa/libtorrent" target="_blank" rel="noopener">LibTorrent</a> (a.k.a. libtorrent-rakshasa) - BitTorrent library. [GPL]</li><li><a href="https://github.com/bittorrent/libutp" target="_blank" rel="noopener">libutp</a> - uTorrent Transport Protocol library. [MIT]</li></ul><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p><em>Console/Terminal User Interface, Command Line Interface</em></p><ul><li><a href="https://github.com/adishavit/argh" target="_blank" rel="noopener">Argh!</a> - A minimalist, frustration-free, header-only argument handler. [BSD]</li><li><a href="https://github.com/taywee/args" target="_blank" rel="noopener">Taywee/args</a> - A simple header-only C++ argument parser library. [MIT]</li><li><a href="http://www.boost.org/doc/libs/1_57_0/doc/html/program_options.html" target="_blank" rel="noopener">Boost.Program_options</a> - A library to obtain program options via conventional methods such as command line and config file. [Boost]</li><li><a href="https://github.com/catchorg/Clara" target="_blank" rel="noopener">Clara</a> - A simple to use, composable, command line parser for C++ 11 and beyond. [BSL-1.0]</li><li><a href="https://github.com/CLIUtils/CLI11" target="_blank" rel="noopener">CLI11</a> - Header only single or multi-file C++11 library for simple and advanced CLI parsing. [BSD]</li><li><a href="https://github.com/jarro2783/cxxopts" target="_blank" rel="noopener">jarro2783/cxxopts</a> - Lightweight C++ command line option parser. [MIT]</li><li><a href="https://github.com/docopt/docopt.cpp" target="_blank" rel="noopener">docopt.cpp</a> - A library to generate option parser from docstring. [MIT/Boost]</li><li><a href="https://gflags.github.io/gflags/" target="_blank" rel="noopener">gflags</a> - Commandline flags module for C++. [BSD]</li><li><a href="https://github.com/antirez/linenoise" target="_blank" rel="noopener">linenoise</a> - A small self-contained alternative to readline and libedit. [BSD-2-Clause]</li><li><a href="https://github.com/arangodb/linenoise-ng" target="_blank" rel="noopener">linenoise-ng</a> - A small, portable GNU readline replacement for Linux, Windows and MacOS which is capable of handling UTF-8 characters. [BSD]</li><li><a href="http://invisible-island.net/ncurses/" target="_blank" rel="noopener">Ncurses</a> - A terminal user interfaces. [MIT]</li><li><a href="https://github.com/wmcbrine/PDCurses" target="_blank" rel="noopener">PDCurses</a> - Public domain curses library with both source code and pre-compiled library available. [PublicDomain]</li><li><a href="https://github.com/AmokHuginnsson/replxx" target="_blank" rel="noopener">replxx</a> - A readline and libedit replacement that supports UTF-8, syntax highlighting, hints, works on Unix and Windows. [BSD]</li><li><a href="http://tclap.sourceforge.net" target="_blank" rel="noopener">TCLAP</a> - A mature, stable and feature-rich library for defining and accessing command line arguments in ANSI C++. [MIT]</li><li><a href="https://github.com/nsf/termbox" target="_blank" rel="noopener">termbox</a> - A C library for writing text-based user interfaces. [MIT]</li></ul><h2 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h2><p><em>Compression and Archiving Libraries</em></p><ul><li><a href="https://github.com/google/brotli" target="_blank" rel="noopener">Brotli</a> - Brotli compression format. Developed by Google. [MIT]</li><li><a href="http://www.bzip.org/" target="_blank" rel="noopener">bzip2</a> - A freely available, patent free, high-quality data compressor. [BSD]</li><li><a href="https://github.com/Cyan4973/FiniteStateEntropy" target="_blank" rel="noopener">FiniteStateEntropy</a> - New generation entropy codecs : Finite State Entropy and Huff0.</li><li><a href="https://icculus.org/physfs/" target="_blank" rel="noopener">PhysicsFS</a> - A library to provide abstract access to various archives. It is intended for use in video games, and the design was somewhat inspired by Quake 3’s file subsystem. [zlib]</li><li><a href="https://quickgit.kde.org/?p=karchive.git" target="_blank" rel="noopener">KArchive</a> - A library for creating, reading, writing and manipulating file archives like zip and tar. It also provides transparent compression and decompression of data, using formats like gzip, via a subclass of QIODevice. [LGPL]</li><li><a href="https://github.com/libarchive/libarchive" target="_blank" rel="noopener">libarchive</a> - Multi-format archive and compression library. [New BSD] <a href="http://www.libarchive.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/lz4/lz4" target="_blank" rel="noopener">LZ4</a> - Extremely Fast Compression algorithm. [BSD] <a href="http://www.lz4.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/lzfse/lzfse" target="_blank" rel="noopener">LZFSE</a> - LZFSE compression library and command line tool. Developed by Apple.</li><li><a href="https://code.google.com/p/lzham/" target="_blank" rel="noopener">LZHAM</a> - Lossless data compression library with a compression ratio similar to LZMA but with much faster decompression. [BSD]</li><li><a href="http://www.7-zip.org/sdk.html" target="_blank" rel="noopener">LZMA</a> :zap: - The default and general compression method of 7z format. [PublicDomain]</li><li><a href="http://www.matcode.com/lzmat.htm" target="_blank" rel="noopener">LZMAT</a> - An extremely fast real-time lossless data compression library. [GPL]</li><li><a href="https://github.com/richgel999/miniz" target="_blank" rel="noopener">miniz</a> - Single C source file Deflate/Inflate compression library with zlib-compatible API, ZIP archive reading/writing, PNG writing. [MIT]</li><li><a href="https://github.com/nmoinvaz/minizip" target="_blank" rel="noopener">Minizip</a> - Zlib with latest bug fixes that supports PKWARE disk spanning, AES encryption, and IO buffering. [zlib]</li><li><a href="https://github.com/antirez/smaz" target="_blank" rel="noopener">smaz</a> - Small strings compression library. [BSD]</li><li><a href="https://google.github.io/snappy/" target="_blank" rel="noopener">Snappy</a> - A fast compressor/decompressor. [BSD]</li><li><a href="http://zlib.net/" target="_blank" rel="noopener">ZLib</a> - A very compact compression library for data streams. [zlib]</li><li><a href="https://github.com/Dead2/zlib-ng" target="_blank" rel="noopener">zlib-ng</a> - zlib for the “next generation” systems. Drop-In replacement with some serious optimizations. [zlib]</li><li><a href="https://github.com/facebook/zstd" target="_blank" rel="noopener">zstd</a> - Zstandard - Fast real-time compression algorithm. Developed by Facebook. [BSD]</li><li><a href="http://zziplib.sourceforge.net/" target="_blank" rel="noopener">ZZIPlib</a> - Provides read access on ZIP-archives. [MPL/LGPL]</li></ul><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p><em>Concurrency and Multithreading</em></p><ul><li><a href="https://github.com/ComputationalRadiationPhysics/alpaka" target="_blank" rel="noopener">alpaka</a> - Abstraction library for parallel kernel acceleration. [LGPLv3+]</li><li><a href="https://github.com/arrayfire/arrayfire" target="_blank" rel="noopener">ArrayFire</a> - A general purpose GPU library. [BSD]</li><li><a href="https://github.com/Amanieu/asyncplusplus" target="_blank" rel="noopener">Async++</a> - A lightweight concurrency framework for C++11, inspired by the Microsoft PPL library and the N3428 C++ standard proposal. [MIT]</li><li><a href="https://github.com/boostorg/compute" target="_blank" rel="noopener">Boost.Compute</a> - A C++ GPU Computing Library for OpenCL. [Boost]</li><li><a href="https://github.com/HSA-Libraries/Bolt" target="_blank" rel="noopener">Bolt</a> - A C++ template library optimized for GPUs. [Apache2]</li><li><a href="https://github.com/concurrencykit/ck" target="_blank" rel="noopener">ck</a> - Concurrency primitives, safe memory reclamation mechanisms and non-blocking data structures. [BSD]</li><li><a href="https://github.com/cameron314/concurrentqueue" target="_blank" rel="noopener">concurrentqueue</a> - A fast multi-producer, multi-consumer lock-free concurrent queue for C++11. [BSD,Boost]</li><li><a href="https://github.com/cpp-taskflow/cpp-taskflow" target="_blank" rel="noopener">Cpp-Taskflow</a> - Fast C++ Parallel Programming with Task Dependencies. [MIT]</li><li><a href="https://github.com/NVlabs/cub" target="_blank" rel="noopener">CUB</a> - CUB provides state-of-the-art, reusable software components for every layer of the CUDA programming mode. [New BSD]</li><li><a href="https://github.com/ComputationalRadiationPhysics/cupla" target="_blank" rel="noopener">cupla</a> - C++ API to run CUDA/C++ on OpenMP, Threads, TBB, … through Alpaka. [LGPLv3+]</li><li><a href="https://github.com/schlangster/cpp.react" target="_blank" rel="noopener">C++React</a> - A reactive programming library for C++11. [Boost]</li><li><a href="https://github.com/GameTechDev/GTS-GamesTaskScheduler" target="_blank" rel="noopener">Intel Games Task Scheduler</a> - A task scheduling framework designed for the needs of game developers. [MIT]</li><li><a href="https://github.com/intel/parallelstl" target="_blank" rel="noopener">Intel Parallel STL</a> - Intel® implementation of C++17 STL for C++11 and above. [Apache2]</li><li><a href="https://www.threadingbuildingblocks.org/" target="_blank" rel="noopener">Intel TBB</a> - Intel® Threading Building Blocks. [Apache2]</li><li><a href="https://github.com/preshing/junction" target="_blank" rel="noopener">junction</a> - A library of concurrent data structures in C++. [BSD]</li><li><a href="https://github.com/khizmax/libcds" target="_blank" rel="noopener">libcds</a> - A C++ library of Concurrent Data Structures. [BSD]</li><li><a href="https://github.com/libclsph/libclsph" target="_blank" rel="noopener">Libclsph</a> - An OpenCL based GPU accelerated SPH fluid simulation library. [MIT]</li><li><a href="https://github.com/sustrik/libdill/" target="_blank" rel="noopener">libdill</a> - Introduces structured concurrency in C. [MIT]</li><li><a href="https://github.com/apple/swift-corelibs-libdispatch" target="_blank" rel="noopener">libdispatch</a> - Grand Central Dispatch (GCD), developed by Apple Inc., is a task parallelism technology based on the thread pool pattern. libdispatch is a library that provides the implementation of GCD’s services. [Apache-2.0] <a href="https://apple.github.io/swift-corelibs-libdispatch/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/sustrik/libmill/" target="_blank" rel="noopener">libmill</a> - Introduces Go-style concurrency in C. [MIT]</li><li><a href="https://github.com/moderngpu/moderngpu" target="_blank" rel="noopener">moderngpu</a> - moderngpu is a productivity library for general-purpose computing on GPUs. It is a header-only C++ library written for CUDA. The unique value of the library is in its accelerated primitives for solving irregularly parallel problems. [FreeBSD &amp; Copyright, Sean Baxter]</li><li><a href="https://github.com/NVIDIA/nccl" target="_blank" rel="noopener">NCCL</a> - Optimized primitives for collective multi-GPU communication. [BSD]</li><li><a href="https://www.khronos.org/opencl/" target="_blank" rel="noopener">OpenCL</a> - The open standard for parallel programming of heterogeneous systems.</li><li><a href="http://openmp.org/" target="_blank" rel="noopener">OpenMP</a> - The OpenMP API.</li><li><a href="http://raftlib.io/" target="_blank" rel="noopener">RaftLib</a> - The RaftLib C++ library, streaming/dataflow concurrency via C++ iostream-like operators [Apache2]</li><li><a href="https://github.com/cameron314/readerwriterqueue" target="_blank" rel="noopener">readerwriterqueue</a> - A fast single-producer, single-consumer lock-free queue for C++. [BSD]</li><li><a href="http://thrust.github.io/" target="_blank" rel="noopener">Thrust</a> - A parallel algorithms library which resembles the C++ Standard Template Library (STL). [Apache2]</li><li><a href="https://github.com/bloomen/transwarp" target="_blank" rel="noopener">transwarp</a> - A header-only C++ library for task concurrency. [MIT]</li><li><a href="https://github.com/STEllAR-GROUP/hpx/" target="_blank" rel="noopener">HPX</a> - A general purpose C++ runtime system for parallel and distributed applications of any scale. [Boost]</li><li><a href="https://github.com/ddemidov/vexcl" target="_blank" rel="noopener">VexCL</a> - A C++ vector expression template library for OpenCL/CUDA. [MIT]</li><li><a href="https://github.com/bloomberg/quantum" target="_blank" rel="noopener">Quantum</a> - A powerful C++ coroutine dispatcher framework built on top of <a href="https://www.boost.org/doc/libs/1_65_0/libs/coroutine2/doc/html/index.html" target="_blank" rel="noopener">boost::coroutines2</a>.</li></ul><h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><ul><li><a href="https://code.google.com/p/cpp-btree/" target="_blank" rel="noopener">C++ B-tree</a> - A template library that implements ordered in-memory containers based on a B-tree data structure. [Apache2]</li><li><a href="https://github.com/mattreecebentley/plf_colony" target="_blank" rel="noopener">Colony</a> - An unordered “bag”-type container which outperforms std containers in high-modification scenarios while maintaining permanent pointers to non-erased elements regardless of insertion/erasure. [zLib] <a href="http://www.plflib.org/colony.htm" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/xorz57/forest" target="_blank" rel="noopener">Forest</a> - Template library implementing an AVL, a Binary Search, a KD and a Quad Tree. [MIT]</li><li><a href="https://github.com/goossaert/hashmap" target="_blank" rel="noopener">Hashmaps</a> - Implementation of open addressing hash table algorithms in C++. [MIT]</li><li><a href="https://github.com/Tessil/hopscotch-map" target="_blank" rel="noopener">Hopscotch map</a> - A fast header-only hash map which uses hopscotch hashing for collisions resolution. [MIT]</li><li><a href="https://github.com/RSIA-LIESMARS-WHU/LSHBOX" target="_blank" rel="noopener">LSHBOX</a> - A c++ toolbox of locality-sensitive hashing (LSH), provides several popular LSH algorithms, also support Python and MATLAB. [GPL]</li><li><a href="https://github.com/mattreecebentley/plf_list" target="_blank" rel="noopener">plf::list</a> - A std::list implementation which removes range splicing in order to enable cache-friendlier structure, yielding significant performance gains. [zLib] <a href="http://www.plflib.org/list.htm" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/mattreecebentley/plf_stack" target="_blank" rel="noopener">plf::stack</a> - A replacement container for the std::stack container adaptor, with better performance than any std container in a stack context. [zLib] <a href="http://www.plflib.org/stack.htm" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/martinmoene/ring-span-lite" target="_blank" rel="noopener">ring_span lite</a> - A simplified implementation of Arthur O’Dwyer’s ring_span implementation ie. a circular buffer view. [MIT]</li><li><a href="https://github.com/greg7mdp/sparsepp" target="_blank" rel="noopener">sparsepp</a> - A fast, memory efficient hash map for C++. [BSD 3-clause]</li></ul><h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><p><em>Cryptography and Encryption Libraries</em></p><ul><li><a href="http://bcrypt.sourceforge.net/" target="_blank" rel="noopener">Bcrypt</a> - A cross platform file encryption utility. Encrypted files are portable across all supported operating systems and processors. [BSD]</li><li><a href="http://beecrypt.sourceforge.net/" target="_blank" rel="noopener">BeeCrypt</a> - A portable and fast cryptography library. [LGPLv2.1+]</li><li><a href="http://botan.randombit.net/" target="_blank" rel="noopener">Botan</a> - A crypto library for C++. [BSD-2]</li><li><a href="https://github.com/weidai11/cryptopp" target="_blank" rel="noopener">Crypto++</a> - A free C++ class library of cryptographic schemes. [Boost] <a href="http://www.cryptopp.com/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/kerukuro/digestpp" target="_blank" rel="noopener">digestpp</a> - C++11 header-only message digest (hash) library. [PublicDomain]</li><li><a href="https://www.gnupg.org/" target="_blank" rel="noopener">GnuPG</a> - A complete and free implementation of the OpenPGP standard. [GPL]</li><li><a href="http://www.gnutls.org/" target="_blank" rel="noopener">GnuTLS</a> - A secure communications library implementing the SSL, TLS and DTLS protocols. [LGPL2.1]</li><li><a href="http://www.gnu.org/software/libgcrypt/" target="_blank" rel="noopener">Libgcrypt</a> - A general purpose cryptographic library originally based on code from GnuPG. [LGPLv2.1+]</li><li><a href="https://github.com/jedisct1/libhydrogen" target="_blank" rel="noopener">libhydrogen</a> - A lightweight, secure, easy-to-use crypto library for constrained environments. [ISC]</li><li><a href="http://www.libressl.org/" target="_blank" rel="noopener">LibreSSL</a> - A free version of the SSL/TLS protocol forked from OpenSSL in 2014. [?]</li><li><a href="https://github.com/jedisct1/libsodium" target="_blank" rel="noopener">libsodium</a> - P(ortable|ackageable) NaCl-based crypto library, opinionated and easy to use. [ISC]</li><li><a href="https://github.com/jedisct1/libhydrogen" target="_blank" rel="noopener">libhydrogen</a> - A lightweight, secure, easy-to-use crypto library suitable for constrained environments. [ISC]</li><li><a href="https://github.com/libtom/libtomcrypt" target="_blank" rel="noopener">LibTomCrypt</a> - A fairly comprehensive, modular and portable cryptographic toolkit. [WTFPL]</li><li><a href="https://github.com/ARMmbed/mbedtls" target="_blank" rel="noopener">mbedTLS</a> - An open source, portable, easy to use, readable and flexible SSL library, previously known as PolarSSL. [Apache2] <a href="https://tls.mbed.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.lysator.liu.se/~nisse/nettle/" target="_blank" rel="noopener">Nettle</a> - A low-level cryptographic library. [LGPL]</li><li><a href="https://github.com/openssl/openssl" target="_blank" rel="noopener">OpenSSL</a> - A robust, commercial-grade, full-featured, and Open Source cryptography library. [Apache] <a href="http://www.openssl.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/MaciejCzyzewski/retter" target="_blank" rel="noopener">retter</a> - A collection of hash functions, ciphers, tools, libraries, and materials related to cryptography.</li><li><a href="https://github.com/awslabs/s2n" target="_blank" rel="noopener">s2n</a> - An implementation of the TLS/SSL protocols. [Apache]</li><li><a href="https://github.com/cr-marcstevens/sha1collisiondetection" target="_blank" rel="noopener">sha1collisiondetection</a> - Library and command line tool to detect SHA-1 collision in a file. [MIT]</li><li><a href="https://github.com/google/tink" target="_blank" rel="noopener">Tink</a> - A multi-language, cross-platform library that provides cryptographic APIs that are secure, easy to use correctly, and hard(er) to misuse. [Apache-2.0]</li><li><a href="https://github.com/kokke/tiny-AES-c" target="_blank" rel="noopener">Tiny AES in C</a> - Small portable AES128/192/256 in C. [PublicDomain]</li><li><a href="https://github.com/cossacklabs/themis" target="_blank" rel="noopener">Themis</a> - crypto library for painless data security, providing symmetric and asymmetric encryption, secure sockets with forward secrecy, for mobile and server platforms. [Apache2]</li></ul><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><p><em>Database Libraries, SQL Servers, ODBC Drivers, and Tools</em></p><ul><li><a href="https://github.com/paulftw/hiberlite" target="_blank" rel="noopener">hiberlite</a> - C++ Object-relational mapping for sqlite3. [BSD]</li><li><a href="https://github.com/redis/hiredis" target="_blank" rel="noopener">Hiredis</a> - A minimalistic C client library for the Redis database. [BSD]</li><li><a href="https://github.com/google/leveldb" target="_blank" rel="noopener">LevelDB</a> - A fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. [BSD]</li><li><a href="http://symas.com/mdb/" target="_blank" rel="noopener">LMDB</a> - Very fast embedded key/value store with full ACID semantics. [OpenLDAP]</li><li><a href="https://github.com/bendiken/lmdbxx" target="_blank" rel="noopener">LMDB++</a> - C++11 wrapper for the LMDB embedded database library. [PublicDomain]</li><li><a href="https://github.com/mongodb/mongo-c-driver" target="_blank" rel="noopener">MongoDB C Driver</a> - MongoDB client library for C. [Apache2]</li><li><a href="https://github.com/mongodb/mongo-cxx-driver" target="_blank" rel="noopener">MongoDB C++ Driver</a> - C++ driver for MongoDB. [Apache2]</li><li><a href="https://github.com/mongodb/libbson" target="_blank" rel="noopener">MongoDB Libbson</a> - A BSON utility library. [Apache2]</li><li><a href="http://www.tangentsoft.net/mysql++/" target="_blank" rel="noopener">MySQL++</a> - A C++ wrapper for MySQL’s C API. [LGPL]</li><li><a href="https://github.com/nanodbc/nanodbc" target="_blank" rel="noopener">nanodbc</a> - A small C++ wrapper for the native C ODBC API. [MIT]</li><li><a href="https://www.codesynthesis.com/products/odb/" target="_blank" rel="noopener">ODB</a> - An open-source, cross-platform, and cross-database object-relational mapping (ORM) system for C++. [GPLv2]</li><li><a href="https://github.com/luca3m/redis3m" target="_blank" rel="noopener">redis3m</a> - Wrapper of hiredis with clean C++ interface, supporting sentinel and ready to use patterns. [Apache2]</li><li><a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">RocksDB</a> - Embedded key-value store for fast storage from facebook. [BSD]</li><li><a href="https://github.com/LiveAsynchronousVisualizedArchitecture/simdb" target="_blank" rel="noopener">SimDB</a> - High performance, shared memory, lock free, cross platform, single file, minimal dependencies, C++11 key-value store [Apache2]</li><li><a href="https://github.com/SOCI/soci" target="_blank" rel="noopener">SOCI</a> - A database abstraction layer for C++. [BSL-1.0]</li><li><a href="http://www.sqlite.org/" target="_blank" rel="noopener">SQLite</a> - A completely embedded, full-featured relational database in a few 100k that you can include right into your project. [PublicDomain]</li><li><a href="https://github.com/SRombauts/SQLiteCpp" target="_blank" rel="noopener">SQLiteC++</a> - SQLiteC++ (SQLiteCpp) is a smart and easy to use C++ SQLite3 wrapper. [MIT]</li><li><a href="https://github.com/SqliteModernCpp/sqlite_modern_cpp" target="_blank" rel="noopener">sqlite_modern_cpp</a> - Header only C++14 wrapper around sqlite library. [MIT]</li><li><a href="https://github.com/fnc12/sqlite_orm" target="_blank" rel="noopener">sqlite_orm</a> - SQLite ORM light header only library for modern C++. [BSD-3-Clause]</li><li><a href="https://github.com/rbock/sqlpp11" target="_blank" rel="noopener">sqlpp11</a> - A type safe embedded domain specific language for SQL queries and results in C++. [BSD-2-Clause]</li><li><a href="https://github.com/TileDB-Inc/TileDB" target="_blank" rel="noopener">TileDB</a> - Fast Dense and Sparse Multidimensional Array DBMS. [MIT] <a href="https://tiledb.io/" target="_blank" rel="noopener">website</a></li><li><a href="https://upscaledb.com" target="_blank" rel="noopener">upscaledb</a> - An embedded “typed” key/value store with a built-in query interface. [GPLv3]</li></ul><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><em>Debugging Libraries, Memory Leak and Resource Leak Detection, Unit Testing</em></p><ul><li><a href="https://github.com/bombela/backward-cpp" target="_blank" rel="noopener">backward-cpp</a> - A beautiful stack trace pretty printer for C++. [MIT]</li><li><a href="https://github.com/google/benchmark" target="_blank" rel="noopener">benchmark</a> - Google provided small microbenchmark support library. [Apache2]</li><li><a href="http://www.boost.org/doc/libs/master/libs/test/doc/html/index.html" target="_blank" rel="noopener">Boost.Test</a> - Boost Test Library. [Boost]</li><li><a href="https://github.com/libcheck/check" target="_blank" rel="noopener">check</a> - Check is a unit testing framework for C. [LGPL-2.1] <a href="https://libcheck.github.io/check/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a> - The lightest feature rich C++ single header testing framework. [MIT]</li><li><a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a> - A modern, C++-native, header-only, framework for unit-tests, TDD and BDD. [Boost]</li><li><a href="https://github.com/catchorg/Catch2" target="_blank" rel="noopener">Catch2</a> - A modern, C++-native, header-only, test framework for unit-tests, TDD and BDD. [BSL-1.0]</li><li><a href="https://github.com/DigitalInBlue/Celero" target="_blank" rel="noopener">Celero</a> - C++ Benchmarking Framework. [Apache2]</li><li><a href="https://github.com/cpputest/cpputest" target="_blank" rel="noopener">CppUTest</a> - Unit testing and mocking framework for C/C++. [BSD-3-clause]</li><li><a href="http://cute-test.com" target="_blank" rel="noopener">CUTE</a> - C++ Unit Testing Easier. [LGPL3]</li><li><a href="https://cmocka.org/" target="_blank" rel="noopener">CMocka</a> - unit testing framework for C with support for mock objects. [Apache2]</li><li><a href="http://www.freedesktop.org/wiki/Software/cppunit/" target="_blank" rel="noopener">CppUnit</a> - C++ port of JUnit. [LGPL2]</li><li><a href="https://cmake.org/cmake/help/v2.8.8/ctest.html" target="_blank" rel="noopener">CTest</a> - The CMake test driver program. [BSD]</li><li><a href="http://www.deleaker.com" target="_blank" rel="noopener">Deleaker</a> - A tool for resource leak detection, including memory, GDI and handle leaks.</li><li><a href="https://github.com/meekrosoft/fff" target="_blank" rel="noopener">fff</a> - A micro-framework for creating fake C functions. [MIT]</li><li><a href="https://github.com/google/googletest/blob/master/googlemock/README.md" target="_blank" rel="noopener">Google Mock</a> - A library for writing and using C++ mock classes. [BSD]</li><li><a href="https://github.com/google/googletest" target="_blank" rel="noopener">Google Test</a> - Google C++ Testing Framework. [BSD]</li><li><a href="https://github.com/deplinenoise/ig-debugheap" target="_blank" rel="noopener">ig-debugheap</a> - Multiplatform debug heap useful for tracking down memory errors. [BSD]</li><li><a href="https://github.com/zorgnax/libtap" target="_blank" rel="noopener">libtap</a> - Write tests in C. [GPL2]</li><li><a href="http://www.almostinfinite.com/memtrack.html" target="_blank" rel="noopener">MemTrack</a> - Tracking memory allocations in C++.</li><li><a href="https://bitbucket.org/jonasmeyer/microprofile/overview" target="_blank" rel="noopener">microprofile</a> - Profiler with web-view for multiple platforms. [PublicDomain]</li><li><a href="https://github.com/siu/minunit" target="_blank" rel="noopener">MinUnit</a> - A minimal unit testing framework for C self-contained in a single header file. [MIT]</li><li><a href="http://www.mockator.com" target="_blank" rel="noopener">Mockator</a> - Eclipse CDT plug-in for C++ Seams and Mock Objects.</li><li><a href="https://github.com/mattreecebentley/plf_nanotimer" target="_blank" rel="noopener">Nanotimer</a> - A simple low-overhead cross-platform timer class for benchmarking. [zLib] <a href="http://www.plflib.org/nanotimer.htm" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/Celtoys/Remotery" target="_blank" rel="noopener">Remotery</a> - Single C File Profiler with Web Viewer. [Apache2]</li><li><a href="https://github.com/unittest-cpp/unittest-cpp" target="_blank" rel="noopener">UnitTest++</a> - A lightweight unit testing framework for C++. [MIT/X Consortium license]</li><li><a href="https://github.com/ThrowTheSwitch/Unity" target="_blank" rel="noopener">Unity</a> - Simple Unit Testing for C. [MIT]</li><li><a href="https://github.com/sheredom/utest.h" target="_blank" rel="noopener">utest.h</a> - Single header unit testing framework for C and C++. [Unlicense]</li><li><a href="http://vld.codeplex.com/" target="_blank" rel="noopener">VLD</a> - Visual Leak Detector. A free, robust, open-source memory leak detection system for Visual C++.</li></ul><h2 id="Game-Engine"><a href="#Game-Engine" class="headerlink" title="Game Engine"></a>Game Engine</h2><ul><li><a href="https://github.com/Equilibrium-Games/Acid" target="_blank" rel="noopener">Acid</a> - A high speed C++17 Vulkan game engine. [MIT]</li><li><a href="http://liballeg.org/" target="_blank" rel="noopener">Allegro</a> - A cross-platform library mainly aimed for video games and multimedia programming. [zlib]</li><li><a href="https://github.com/AtomicGameEngine/AtomicGameEngine" target="_blank" rel="noopener">Atomic Game Engine</a> - A multi-platform 2D and 3D engine with a consistent API in C++, C#, JavaScript, and TypeScript. [Commercial]</li><li><a href="https://github.com/BearishSun/BansheeEngine" target="_blank" rel="noopener">Banshee 3D</a> - Modern C++14 game engine with Vulkan support, fully featured editor and C# scripting. [LGPL3/Commercial]</li><li><a href="http://www.cocos2d-x.org/" target="_blank" rel="noopener">Cocos2d-x</a> - A multi-platform framework for building 2d games, interactive books, demos and other graphical applications. [MIT]</li><li><a href="http://sourceforge.net/projects/delta3d/" target="_blank" rel="noopener">delta3d</a> - A robust simulation platform. [LGPL2]</li><li><a href="https://github.com/skypjack/entt" target="_blank" rel="noopener">EnTT</a> - Gaming meets modern C++. [MIT]</li><li><a href="https://github.com/gameplay3d/GamePlay" target="_blank" rel="noopener">GamePlay</a> - A cross-platform native C++ game framework for creating 2D/3D mobile and desktop games. [Apache2]</li><li><a href="https://github.com/godotengine/godot" target="_blank" rel="noopener">Godot</a> - A fully featured, open source, MIT licensed, game engine. [MIT]</li><li><a href="http://www.gritengine.com/" target="_blank" rel="noopener">Grit</a> - Community project to build a free game engine for implementing open world 3D games. [MIT]</li><li><a href="https://github.com/amzeratul/halley" target="_blank" rel="noopener">Halley</a> - A lightweight game engine written in C++14 with a “true” entity-component system. [Apache 2.0]</li><li><a href="https://github.com/gongminmin/KlayGE" target="_blank" rel="noopener">KlayGE</a> - a cross-platform open source game engine with plugin-based architecture. [GPLv2] <a href="http://www.klayge.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/OpenXRay/xray-16" target="_blank" rel="noopener">OpenXRay</a> - a community-modified X-Ray engine used in S.T.A.L.K.E.R. game series. [Modified BSD/non-commercial only]</li><li><a href="http://oxygine.org/" target="_blank" rel="noopener">Oxygine</a> - A cross-platform 2D C++ game engine. [MIT]</li><li><a href="https://github.com/panda3d/panda3d" target="_blank" rel="noopener">Panda3D</a> - A game engine, a framework for 3D rendering and game development for Python and C++ programs. [Modified BSD] <a href="https://www.panda3d.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/OneLoneCoder/olcPixelGameEngine" target="_blank" rel="noopener">PixelGameEngine</a> - The official distribution of olcPixelGameEngine, a tool used in javidx9’s YouTube videos and projects. [OLC3]</li><li><a href="https://github.com/ivansafrin/Polycode" target="_blank" rel="noopener">Polycode</a> - A cross-platform framework for creative code in C++ (with Lua bindings). [MIT] <a href="http://polycode.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/raysan5/raylib" target="_blank" rel="noopener">raylib</a> - A simple and easy-to-use library to enjoy videogames programming. [zlib/libpng] <a href="http://www.raylib.com/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/spring/spring" target="_blank" rel="noopener">Spring</a> - A powerful free cross-platform RTS game engine. [GPLv2/GPLv3] <a href="https://springrts.com/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/GarageGames/Torque2D" target="_blank" rel="noopener">Torque2D</a> - An open-source and cross-platform C++ engine built for 2D game development. [MIT] <a href="https://www.garagegames.com/products/torque-2d" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/GarageGames/Torque3D" target="_blank" rel="noopener">Torque3D</a> - An open-source C++ engine built for 3D game development. [MIT] <a href="https://www.garagegames.com/products/torque-3d" target="_blank" rel="noopener">website</a></li><li><a href="https://toyengine.io/" target="_blank" rel="noopener">toy engine</a> - toy is a thin and modular c++ game engine and offers simple expressive c++ idioms to design full featured 2D or 3D games in fast iterations.</li><li><a href="https://urho3d.github.io/" target="_blank" rel="noopener">Urho3D</a> - A free lightweight, cross-platform 2D and 3D game engine implemented in C++. Greatly inspired by OGRE and Horde3D. [MIT]</li></ul><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><p><em>Graphic User Interface</em></p><ul><li><a href="http://cegui.org.uk/" target="_blank" rel="noopener">CEGUI</a> - Flexible, cross-platform GUI library.</li><li><a href="http://www.fltk.org/index.php" target="_blank" rel="noopener">FLTK</a> - Fast, light, cross-platform C++ GUI toolkit. [GPL2]</li><li><a href="https://github.com/vczh-libraries/GacUI" target="_blank" rel="noopener">GacUI</a> - GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features. [Ms-PL]</li><li><a href="http://www.gtk.org/" target="_blank" rel="noopener">GTK+</a> - A multi-platform toolkit for creating graphical user interfaces. [LGPL]</li><li><a href="http://www.gtkmm.org/en/" target="_blank" rel="noopener">gtkmm</a> - The official C++ interface for the popular GUI library GTK+. [LGPL]</li><li><a href="https://github.com/ocornut/imgui" target="_blank" rel="noopener">imgui</a> - Immediate Mode Graphical User Interface with minimal dependencies. [MIT]</li><li><a href="https://www.tecgraf.puc-rio.br/iup" target="_blank" rel="noopener">iup</a> - Multi-platform toolkit for building graphical user interfaces. [MIT]</li><li><a href="http://librocket.com/" target="_blank" rel="noopener">libRocket</a> - libRocket is a C++ HTML/CSS game interface middleware. [MIT]</li><li><a href="https://github.com/andlabs/libui" target="_blank" rel="noopener">libui</a> - Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports. [MIT]</li><li><a href="http://mygui.info/" target="_blank" rel="noopener">MyGUI</a> - Fast, flexible and simple GUI. [MIT]</li><li><a href="http://nanapro.org/en-us/" target="_blank" rel="noopener">nana</a> - Nana is a cross-platform library for GUI programming in modern C++ style. [Boost]</li><li><a href="https://github.com/wjakob/nanogui" target="_blank" rel="noopener">NanoGui</a> - A minimalistic cross-platform widget library for OpenGL 3.x or higher. [BSD]</li><li><a href="https://github.com/vurtun/nuklear" target="_blank" rel="noopener">nuklear</a> - A single-header ANSI C gui library. [PublicDomain]</li><li><a href="http://qcustomplot.com/" target="_blank" rel="noopener">QCustomPlot</a> - Qt plotting widget without further dependencies. [GPLv3]</li><li><a href="http://qwt.sourceforge.net/" target="_blank" rel="noopener">Qwt</a> - Qt Widgets for Technical Applications. [Own based on LGPL]</li><li><a href="http://qwtplot3d.sourceforge.net/" target="_blank" rel="noopener">QwtPlot3D</a> - A feature-rich Qt/OpenGL-based C++ programming library, providing essentially a bunch of 3D-widgets. [zlib]</li><li><a href="http://sciter.com/" target="_blank" rel="noopener">Sciter</a> - Sciter is an embeddable HTML/CSS/scripting engine aimed to be used as an UI layer of modern desktop applications. [Free/Commercial]</li><li><a href="http://wxwidgets.org/" target="_blank" rel="noopener">wxWidgets</a> - A C++ library that lets developers create applications for Windows, Mac OS X, Linux and other platforms with a single code base. [Own LGPL]</li><li><a href="https://github.com/yue/yue" target="_blank" rel="noopener">Yue</a> - A library for creating native cross-platform GUI apps. [LGPLv2]</li></ul><h2 id="Graphics"><a href="#Graphics" class="headerlink" title="Graphics"></a>Graphics</h2><ul><li><a href="https://github.com/assimp/assimp" target="_blank" rel="noopener">assimp</a> - Open Asset Import Library (assimp) is a cross-platform 3D model import library which aims to provide a common API for different 3D asset file formats. [BSD-3-Clause] <a href="http://www.assimp.org" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/bkaradzic/bgfx" target="_blank" rel="noopener">bgfx</a> - A cross-platform rendering library. [BSD]</li><li><a href="https://github.com/blend2d/blend2d" target="_blank" rel="noopener">Blend2D</a> - 2D vector graphics engine powered by a JIT compiler. [Zlib] <a href="https://blend2d.com/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/GameFoundry/bsf" target="_blank" rel="noopener">bs::framework</a> - Modern C++14 library for the development of real-time graphical applications. [MIT]</li><li><a href="http://www.cairographics.org/" target="_blank" rel="noopener">Cairo</a> - A 2D graphics library with support for multiple output devices. [LGPL2 or Mozilla MPL]</li><li><a href="https://github.com/DiligentGraphics/DiligentEngine" target="_blank" rel="noopener">Diligent Engine</a> - A modern cross-platform low-level 3D graphics library. [Apache2]</li><li><a href="https://github.com/Microsoft/DirectXTK" target="_blank" rel="noopener">DirectXTK</a> - A collection of helper classes for writing DirectX 11.x code in C++. [MIT]</li><li><a href="https://github.com/glfw/glfw" target="_blank" rel="noopener">GLFW</a> - A simple, cross-platform OpenGL wrangling library. [zlib/libpng]</li><li><a href="https://github.com/kosua20/herebedragons" target="_blank" rel="noopener">herebedragons</a> - A basic 3D scene implemented with various engines, frameworks or APIs. [MIT] <a href="http://simonrodriguez.fr/dragon/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/horde3d/Horde3D" target="_blank" rel="noopener">Horde3D</a> - A small 3D rendering and animation engine. [EPL]</li><li><a href="https://github.com/google/ion" target="_blank" rel="noopener">Ion</a> - A small and efficient set of libraries for building cross-platform client or server applications that use 3D graphics. [Apache2] <a href="https://google.github.io/ion/" target="_blank" rel="noopener">website</a></li><li><a href="http://irrlicht.sourceforge.net/" target="_blank" rel="noopener">Irrlicht</a> - A high performance realtime 3D engine written in C++. [zlib]</li><li><a href="https://github.com/libigl/libigl" target="_blank" rel="noopener">libigl</a> - Simple C++ geometry processing library. [MPL2]</li><li><a href="https://github.com/mosra/magnum" target="_blank" rel="noopener">magnum</a> - Lightweight and modular C++11/C++14 graphics middleware for games and data visualization. [MIT] <a href="http://magnum.graphics" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/memononen/nanovg" target="_blank" rel="noopener">NanoVG</a> - Antialiased 2D vector drawing library on top of OpenGL for UI and visualizations. [Zlib]</li><li><a href="http://www.ogre3d.org/" target="_blank" rel="noopener">Ogre 3D</a> :zap: - A scene-oriented, real-time, flexible 3D rendering engine (as opposed to a game engine) written in C++. [MIT]</li><li><a href="http://www.openscenegraph.org/" target="_blank" rel="noopener">OpenSceneGraph</a> - An open source high performance 3D graphics toolkit. [OSGPL]</li><li><a href="https://github.com/PixarAnimationStudios/OpenSubdiv" target="_blank" rel="noopener">OpenSubdiv</a> - Pixar’s library for evaluating and rendering subdivision surfaces on CPU and GPU. [Modified Apache2]</li><li><a href="http://www.openvdb.org/" target="_blank" rel="noopener">OpenVDB</a> - Library and tools for storing, editing, and rendering volumetric datasets. [MPL2]</li><li><a href="http://www.panda3d.org/" target="_blank" rel="noopener">Panda3D</a> - A framework for 3D rendering and game development for Python and C++. [BSD]</li><li><a href="https://github.com/wdas/partio" target="_blank" rel="noopener">Partio</a> - Library for wrangling particle data, with support for most common file formats. [Modified BSD]</li><li><a href="https://github.com/google/skia" target="_blank" rel="noopener">Skia</a> - A complete 2D graphic library for drawing Text, Geometries, and Images. [BSD] <a href="https://sites.google.com/site/skiadocs/home" target="_blank" rel="noopener">webpage</a></li><li><a href="https://github.com/msteinbeck/tinyspline" target="_blank" rel="noopener">TinySpline</a> - A small, yet powerful ANSI C library for interpolating, transforming, and querying arbitrary NURBS, B-Splines, and Bézier curves. [MIT]</li><li><a href="https://github.com/urho3d/Urho3D" target="_blank" rel="noopener">urho3d</a> - Cross-platform rendering and game engine. [Many different, mostly MIT]</li><li><a href="https://github.com/xelatihy/yocto-gl" target="_blank" rel="noopener">Yocto/GL</a> - Tiny C++ Libraries for Data-Driven Physically-based Graphics. [MIT]</li></ul><h2 id="Image-Processing"><a href="#Image-Processing" class="headerlink" title="Image Processing"></a>Image Processing</h2><ul><li><a href="http://www.boost.org/doc/libs/1_56_0/libs/gil/doc/index.html" target="_blank" rel="noopener">Boost.GIL</a> - Generic Image Library.</li><li><a href="http://cimg.eu/" target="_blank" rel="noopener">CImg</a> - A small, open source, C++ toolkit for image processing. [Own LGPL or GPL]</li><li><a href="https://www.codeproject.com/Articles/1300/CxImage" target="_blank" rel="noopener">CxImage</a> - An image processing and conversion library to load, save, display, transform BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K images. [zlib]</li><li><a href="https://github.com/davisking/dlib" target="_blank" rel="noopener">Dlib</a> :zap: - A modern C++11 machine learning, computer vision, numerical optimization, and deep learning toolkit. [Boost] <a href="http://dlib.net/" target="_blank" rel="noopener">website</a></li><li><a href="http://freeimage.sourceforge.net/" target="_blank" rel="noopener">FreeImage</a> - An open source library that supports popular graphics image formats and others as needed by today’s multimedia applications. [GPL2 or GPL3]</li><li><a href="https://github.com/libgd/libgd" target="_blank" rel="noopener">GD</a> - GD Graphics Library, famously used in PHP for image loading/manipulation &amp; thumbnail generation. [custom permissive license, requires mention in user docs] <a href="http://libgd.github.io/" target="_blank" rel="noopener">website</a></li><li><a href="http://dicom.offis.de/dcmtk.php.en" target="_blank" rel="noopener">DCMTK</a> - DICOM Toolkit.</li><li><a href="http://gdcm.sourceforge.net/wiki/index.php/Main_Page" target="_blank" rel="noopener">GDCM</a> - Grassroots DICOM library.</li><li><a href="http://www.itk.org/" target="_blank" rel="noopener">ITK</a> - An open-source, cross-platform system for image analysis. [Apache2 from ITK 4.0]</li><li><a href="https://github.com/ShiqiYu/libfacedetection" target="_blank" rel="noopener">libfacedetection</a> - Open source library for face detection in images. The face detection speed can reach 1500FPS. [BSD]</li><li><a href="https://github.com/libjpeg-turbo/libjpeg-turbo" target="_blank" rel="noopener">libjpeg-turbo</a> - A JPEG image codec that uses SIMD instructions to accelerate baseline JPEG encoding and decoding. [IJG &amp; BSD-3-Clause &amp; zlib] <a href="https://libjpeg-turbo.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/jcupitt/libvips" target="_blank" rel="noopener">libvips</a> - A fast image processing library with low memory needs. [LGPL] <a href="http://www.vips.ecs.soton.ac.uk/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.imagemagick.org/script/api.php" target="_blank" rel="noopener">Magick++</a> - ImageMagick program interfaces for C++. [Apache2]</li><li><a href="http://www.imagemagick.org/script/api.php" target="_blank" rel="noopener">MagickWnd</a> - ImageMagick program interfaces for C. [Apache2]</li><li><a href="http://opencv.org/" target="_blank" rel="noopener">OpenCV</a> :zap: - Open source computer vision. [BSD]</li><li><a href="http://www.openexr.com/" target="_blank" rel="noopener">OpenEXR</a> - Cross-platform library for high dynamic range imaging. [Modified BSDF]</li><li><a href="https://github.com/OpenImageIO/oiio" target="_blank" rel="noopener">OpenImageIO</a> - Powerful image and texture wrangling library with support for a wide number of common lossy and RAW formats. [Modified BSD]</li><li><a href="https://github.com/ermig1979/Simd" target="_blank" rel="noopener">Simd</a> - C++ image processing library with using of SIMD: SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX-512, VMX(Altivec) and VSX(Power7), NEON for ARM. [MIT]</li><li><a href="https://github.com/nothings/stb/blob/master/stb_image.h" target="_blank" rel="noopener">stb-image</a> - STB single-header image loading library. [Public Domain]</li><li><a href="https://github.com/tesseract-ocr" target="_blank" rel="noopener">tesseract-ocr</a> - An OCR engine. [Apache2]</li><li><a href="https://github.com/cdcseacave/TinyEXIF" target="_blank" rel="noopener">TinyEXIF</a> - Tiny ISO-compliant C++ EXIF and XMP parsing library for JPEG. [MIT]</li><li><a href="https://github.com/matt-42/vpp" target="_blank" rel="noopener">Video++</a> - A C++14 high performance video and image processing library. [MIT]</li><li><a href="https://github.com/ukoethe/vigra" target="_blank" rel="noopener">VIGRA</a> - A generic C++ computer vision library for image analysis. [MIT X11]</li><li><a href="http://www.vtk.org/" target="_blank" rel="noopener">VTK</a> - Open-source, freely available software system for 3D computer graphics, image processing and visualization. [BSD]</li></ul><h2 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h2><ul><li><a href="http://www.gnu.org/software/gettext/" target="_blank" rel="noopener">gettext</a> - GNU ‘gettext’. [GPL2]</li><li><a href="http://site.icu-project.org/" target="_blank" rel="noopener">IBM ICU</a> - A set of C/C++ and Java libraries providing Unicode and Globalization support. [ICU]</li><li><a href="http://www.gnu.org/software/libiconv/" target="_blank" rel="noopener">libiconv</a> - An encoding conversion library between different character encodings. [GPL]</li><li><a href="https://github.com/sheredom/utf8.h" target="_blank" rel="noopener">utf8.h</a> - Single header utf8 string functions for C and C++. [Unlicense]</li></ul><h2 id="Inter-process-communication"><a href="#Inter-process-communication" class="headerlink" title="Inter-process communication"></a>Inter-process communication</h2><ul><li><a href="https://thrift.apache.org/" target="_blank" rel="noopener">Apache Thrift</a> - Efficient cross-language IPC/RPC, works between C++, Java, Python, PHP, C#, and many more other languages. Originally developed by Facebook. [Apache2]</li><li><a href="http://kentonv.github.io/capnproto/" target="_blank" rel="noopener">Cap’n Proto</a> - Fast data interchange format and capability-based RPC system. [MIT]</li><li><a href="https://github.com/grpc/grpc" target="_blank" rel="noopener">gRPC</a> - A high performance, open source, general-purpose RPC framework. [BSD] <a href="http://www.grpc.io/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/zeroc-ice/ice" target="_blank" rel="noopener">Ice</a> - Comprehensive RPC framework with support for C++, C#, Java, JavaScript, Python and more. [GPLv2]</li><li><a href="https://github.com/cinemast/libjson-rpc-cpp" target="_blank" rel="noopener">libjson-rpc-cpp</a> - JSON-RPC framework for C++ servers and clients. [MIT]</li><li><a href="https://github.com/nanomsg/nanomsg" target="_blank" rel="noopener">nanomsg</a> - A simple high-performance implementation of several “scalability protocols”. [MIT] <a href="http://nanomsg.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/nanomsg/nng" target="_blank" rel="noopener">nng</a> - nanomsg-next-generation, a light-weight brokerless messaging library. [MIT] <a href="https://nanomsg.github.io/nng/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/rpclib/rpclib" target="_blank" rel="noopener">rpclib</a> - A modern C++ msgpack-RPC server and client library. [MIT]</li><li><a href="https://github.com/pearu/simple-rpc-cpp" target="_blank" rel="noopener">simple-rpc-cpp</a> - A simple RPC wrapper generator to C/C++ functions. [BSD]</li><li><a href="http://wamp.ws/" target="_blank" rel="noopener">WAMP</a> - Provides RPC and pub/sub messaging patterns. (various implementations, various languages)</li><li><a href="http://xmlrpc-c.sourceforge.net/" target="_blank" rel="noopener">xmlrpc-c</a> - A lightweight RPC library based on XML and HTTP. [BSD]</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li><a href="http://www.boost.org/doc/libs/1_55_0/doc/html/property_tree.html" target="_blank" rel="noopener">Boost.PropertyTree</a> - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost]</li><li><a href="https://github.com/cesanta/frozen" target="_blank" rel="noopener">frozen</a> - JSON parser and generator for C/C++. [GPL &amp; GPL2]</li><li><a href="https://github.com/akheron/jansson" target="_blank" rel="noopener">Jansson</a> - C library for encoding, decoding and manipulating JSON data. [MIT]</li><li><a href="https://github.com/chrismanning/jbson" target="_blank" rel="noopener">jbson</a> - jbson is a library for building &amp; iterating BSON data, and JSON documents in C++14. [Boost]</li><li><a href="https://github.com/jeaye/jeayeson" target="_blank" rel="noopener">JeayeSON</a> - A very sane (header only) C++ JSON library. [BSD]</li><li><a href="https://github.com/zserge/jsmn" target="_blank" rel="noopener">Jsmn</a> - A minimalistic JSON parser in C. [MIT]</li><li><a href="https://github.com/nlohmann/json" target="_blank" rel="noopener">json</a> :zap: - JSON for Modern C++. [MIT]</li><li><a href="https://github.com/hjiang/jsonxx" target="_blank" rel="noopener">JSON++</a> - A JSON parser in C++. [MIT]</li><li><a href="https://github.com/sheredom/json.h" target="_blank" rel="noopener">json.h</a> - A simple one header/one source solution to parsing JSON in C and C++. [Unlicense]</li><li><a href="https://github.com/json-c/json-c" target="_blank" rel="noopener">json-c</a> - A JSON implementation in C. [MIT]</li><li><a href="https://github.com/open-source-parsers/jsoncpp" target="_blank" rel="noopener">JsonCpp</a> - A C++ library for interacting with JSON. [MIT]</li><li><a href="https://github.com/udp/json-parser" target="_blank" rel="noopener">json-parser</a> - Very low footprint JSON parser written in portable ANSI C. [BSD]</li><li><a href="https://github.com/dropbox/json11" target="_blank" rel="noopener">json11</a> - A tiny JSON library for C++11. [MIT]</li><li><a href="https://github.com/tgockel/json-voorhees" target="_blank" rel="noopener">json-voorhees</a> - JSON library for C++. Support for C++11. No dependencies, fast and dev-friendly. [Apache2]</li><li><a href="https://github.com/amir-s/jute" target="_blank" rel="noopener">jute</a> - Very simple C++ JSON Parser. [PublicDomain]</li><li><a href="https://github.com/vincenthz/libjson" target="_blank" rel="noopener">libjson</a> - A JSON parser and printer library in C. easy to integrate with any model. [LGPL]</li><li><a href="http://sourceforge.net/projects/libjson/" target="_blank" rel="noopener">libjson</a> - Lightweight JSON library. [?]</li><li><a href="https://github.com/vstakhov/libucl" target="_blank" rel="noopener">LIBUCL</a> :zap: - Universal configuration library parser [BSD-2-Clause]</li><li><a href="https://github.com/kazuho/picojson" target="_blank" rel="noopener">PicoJSON</a> - A header-file-only, JSON parser serializer in C++. [BSD]</li><li><a href="https://github.com/gaudecker/qt-json" target="_blank" rel="noopener">qt-json</a> - A simple class for parsing JSON data into a QVariant hierarchy and vice versa. [GPLv3]</li><li><a href="https://github.com/flavio/qjson" target="_blank" rel="noopener">QJson</a> - A qt-based library that maps JSON data to QVariant objects. [LGPL2]</li><li><a href="https://github.com/miloyip/rapidjson" target="_blank" rel="noopener">RapidJSON</a> :zap: - A fast JSON parser/generator for C++ with both SAX/DOM style API. [MIT]</li><li><a href="https://github.com/chadaustin/sajson" target="_blank" rel="noopener">sajson</a> - Lightweight, extremely high-performance JSON parser for C++11. [MIT]</li><li><a href="https://bitbucket.org/awangk/ujson" target="_blank" rel="noopener">ujson</a> - µjson is a a small, C++11, UTF-8, JSON library. [MIT]</li><li><a href="https://github.com/lloyd/yajl" target="_blank" rel="noopener">YAJL</a> - A fast streaming JSON parsing library in C. [ISC]</li></ul><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li><a href="https://github.com/3Hren/blackhole" target="_blank" rel="noopener">Blackhole</a> - Attribute-based logging framework, which is designed to be fast, modular and highly customizable. [MIT]</li><li><a href="http://www.boost.org/doc/libs/1_56_0/libs/log/doc/html/index.html" target="_blank" rel="noopener">Boost.Log</a> - Designed to be very modular and extensible. [Boost]</li><li><a href="https://github.com/easylogging/easyloggingpp" target="_blank" rel="noopener">Easylogging++</a> - Single header only, extremely light-weight high performance logging library for C++11 (or higher) applications. [MIT] <a href="https://muflihun.github.io/easyloggingpp" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/KjellKod/g3log" target="_blank" rel="noopener">G3log</a> - Asynchronous logger with Dynamic Sinks. [PublicDomain]</li><li><a href="https://github.com/google/glog" target="_blank" rel="noopener">glog</a> - C++ implementation of the Google logging module.</li><li><a href="http://log4cpp.sourceforge.net/" target="_blank" rel="noopener">Log4cpp</a> - A library of C++ classes for flexible logging to files, syslog, IDSA and other destinations. [LGPL]</li><li><a href="https://github.com/log4cplus/log4cplus" target="_blank" rel="noopener">log4cplus</a> - A simple to use C++ logging API providing thread-safe, flexible, and arbitrarily granular control over log management and configuration. [BSD &amp; Apache2]</li><li><a href="https://github.com/emilk/loguru" target="_blank" rel="noopener">loguru</a> - A lightweight C++ logging library. [PublicDomain]</li><li><a href="https://github.com/SergiusTheBest/plog" target="_blank" rel="noopener">plog</a> - Portable and simple log for C++ in less than 1000 lines of code. [MPL2]</li><li><a href="https://github.com/mattiasflodin/reckless" target="_blank" rel="noopener">reckless</a> - Low-latency, high-throughput, asynchronous logging library for C++. [MIT]</li><li><a href="https://github.com/gabime/spdlog" target="_blank" rel="noopener">spdlog</a> - Super fast, header only, C++ logging library.</li><li><a href="http://www.templog.org/" target="_blank" rel="noopener">templog</a> - A very small and lightweight C++ library which you can use to add logging to your C++ applications. [Boost]</li><li><a href="http://baical.net/p7.html" target="_blank" rel="noopener">P7Baical</a> - An open source and cross-platform library for high-speed sending telemetry &amp; trace data  with minimal usage of CPU and memory. [LGPL]</li></ul><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><ul><li><a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">Caffe</a> - A fast framework for neural networks. [BSD]</li><li><a href="https://github.com/liuliu/ccv" target="_blank" rel="noopener">CCV</a> - C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library. [BSD]</li><li><a href="https://github.com/davisking/dlib" target="_blank" rel="noopener">Dlib</a> :zap: - A modern C++11 machine learning, computer vision, numerical optimization, and deep learning toolkit. [Boost] <a href="http://dlib.net/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/FidoProject/Fido" target="_blank" rel="noopener">Fido</a> - A highly-modular C++ machine learning library for embedded electronics and robotics. [MIT] <a href="http://fidoproject.github.io/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/facebookresearch/flashlight" target="_blank" rel="noopener">flashlight</a> - A fast, flexible machine learning library from Facebook AI Research written entirely in C++ and based on the ArrayFire tensor library. [BSD-3-Clause] <a href="https://fl.readthedocs.io/en/latest/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/meta-toolkit/meta" target="_blank" rel="noopener">MeTA</a> - A modern C++ data sciences toolkit. [MIT] <a href="https://meta-toolkit.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/dmlc/minerva" target="_blank" rel="noopener">Minerva</a> - A fast and flexible system for deep learning. [Apache2]</li><li><a href="https://github.com/mlpack/mlpack" target="_blank" rel="noopener">mlpack</a> - A scalable c++ machine learning library. [LGPLv3] <a href="http://www.mlpack.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/Itseez/opencv" target="_blank" rel="noopener">OpenCV</a> :zap: - Open Source Computer Vision Library. [BSD] <a href="http://opencv.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/GHamrouni/Recommender" target="_blank" rel="noopener">Recommender</a> - C library for product recommendations/suggestions using collaborative filtering (CF). [BSD]</li><li><a href="https://github.com/szcom/rnnlib" target="_blank" rel="noopener">RNNLIB</a> - RNNLIB is a recurrent neural network library for sequence learning problems. [GPLv3]</li><li><a href="https://github.com/shogun-toolbox/shogun" target="_blank" rel="noopener">SHOGUN</a> - The Shogun Machine Learning Toolbox. [GPLv3]</li><li><a href="https://code.google.com/p/sofia-ml/" target="_blank" rel="noopener">sofia-ml</a> - The suite of fast incremental algorithms for machine learning. [Apache2]</li><li><a href="https://github.com/vlfeat/vlfeat" target="_blank" rel="noopener">VLFeat</a> - The VLFeat open source library implements popular computer vision algorithms specialising in image understanding and local featurexs extraction and matching. [BSD-2-Clause] <a href="http://www.vlfeat.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/dmlc/xgboost" target="_blank" rel="noopener">xgboost</a> - Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library, for Python, R, Java, Scala, C++ and more. Runs on single machine, Hadoop, Spark, Flink and DataFlow. [Apache2]</li></ul><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul><li><a href="https://github.com/b-k/apophenia" target="_blank" rel="noopener">Apophenia</a> - A C library for statistical and scientific computing [GPL2]</li><li><a href="https://gitlab.com/conradsnicta/armadillo-code" target="_blank" rel="noopener">Armadillo</a> - Fast C++ library for linear algebra &amp; scientific computing. [Apache2] <a href="http://arma.sourceforge.net/" target="_blank" rel="noopener">website</a></li><li><a href="https://bitbucket.org/blaze-lib/blaze" target="_blank" rel="noopener">blaze</a> - high-performance C++ math library for dense and sparse arithmetic. [BSD]</li><li><a href="http://www.boost.org/doc/libs/master/libs/multiprecision/doc/html/index.html" target="_blank" rel="noopener">Boost.Multiprecision</a> - provides higher-range/precision integer, rational and floating-point types in C++, header-only or with GMP/MPFR/LibTomMath backends. [Boost]</li><li><a href="http://ceres-solver.org/" target="_blank" rel="noopener">ceres-solver</a> - C++ library for modeling and solving large complicated nonlinear least squares problems from google. [BSD]</li><li><a href="https://github.com/CGAL/cgal" target="_blank" rel="noopener">CGAL</a> - Collection of efficient and reliable geometric algorithms. [LGPL&amp;GPL] <a href="http://www.cgal.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://cmldev.net/" target="_blank" rel="noopener">cml</a> - free C++ math library for games and graphics. [Boost]</li><li><a href="https://github.com/davisking/dlib" target="_blank" rel="noopener">Dlib</a> :zap: - A modern C++11 machine learning, computer vision, numerical optimization, and deep learning toolkit. [Boost] <a href="http://dlib.net/" target="_blank" rel="noopener">website</a></li><li><a href="http://eigen.tuxfamily.org/" target="_blank" rel="noopener">Eigen</a> - A high-level C++ library of template headers for linear algebra, matrix and vector operations, numerical solvers and related algorithms. [MPL2]</li><li><a href="http://www.partow.net/programming/exprtk/" target="_blank" rel="noopener">ExprTK</a> - The C++ Mathematical Expression Toolkit Library (ExprTk) is a simple to use, easy to integrate and extremely efficient run-time mathematical expression parser and evaluation engine. [MIT]</li><li><a href="https://www.geometrictools.com" target="_blank" rel="noopener">Geometric Tools</a> - C++ library for computing in the fields of mathematics, graphics, image analysis and physics. [Boost] <a href="https://www.geometrictools.com" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/g-truc/glm" target="_blank" rel="noopener">GLM</a> - Header-only C++ math library that matches and inter-operates with OpenGL’s GLSL math. [MIT]</li><li><a href="http://ggt.sourceforge.net/" target="_blank" rel="noopener">GMTL</a> - Graphics Math Template Library is a collection of tools implementing Graphics primitives in generalized ways. [GPL2]</li><li><a href="https://gmplib.org/" target="_blank" rel="noopener">GMP</a> - A C library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. [LGPL3 &amp; GPL2]</li><li><a href="https://github.com/CertiVox/MIRACL" target="_blank" rel="noopener">MIRACL</a> - A Multiprecision Integer and Rational Arithmetic Cryptographic Library. [AGPL]</li><li><a href="http://beltoforion.de/article.php?a=muparser" target="_blank" rel="noopener">muparser</a> - muParser is an extensible high performance math expression parser library written in C++. [MIT]</li><li><a href="https://github.com/Mathieu-/nt2" target="_blank" rel="noopener">NT2</a> - A SIMD-optimized numerical template library that provides an interface with MATLAB-like syntax. [Boost]</li><li><a href="https://github.com/libtom/libtommath" target="_blank" rel="noopener">LibTomMath</a> - A free open source portable number theoretic multiple-precision integer library written entirely in C. [PublicDomain &amp; WTFPL] <a href="http://www.libtom.net/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/datenwolf/linmath.h" target="_blank" rel="noopener">linmath.h</a> - A lean linear math library, aimed at graphics programming. [WTFPL]</li><li><a href="https://sourceforge.net/projects/lpsolve" target="_blank" rel="noopener">lp_solve</a> - A library used to formulate and solve linear programming problems. [LGPL] <a href="http://lpsolve.sourceforge.net" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/xianyi/OpenBLAS" target="_blank" rel="noopener">OpenBLAS</a> - An optimized BLAS library based on GotoBLAS2 1.13 BSD version. [BSD 3-clause] <a href="http://www.openblas.net/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/lballabio/quantlib" target="_blank" rel="noopener">QuantLib</a> - A free/open-source library for quantitative finance. [Modified BSD] <a href="http://quantlib.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/kthohr/stats" target="_blank" rel="noopener">StatsLib</a> - A C++ header-only library of statistical distribution functions. [Apache2] <a href="https://www.kthohr.com/statslib.html" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/symengine/symengine" target="_blank" rel="noopener">SymEngine</a> - Fast symbolic manipulation library, a rewriting of SymPy’s core in C++. [MIT]</li><li><a href="https://github.com/codeplea/tinyexpr" target="_blank" rel="noopener">TinyExpr</a> - A C library for parsing and evaluating math expressions from strings. [zlib]</li><li><a href="https://github.com/VcDevel/Vc" target="_blank" rel="noopener">Vc</a> - SIMD Vector Classes for C++. [BSD]</li><li><a href="http://versor.mat.ucsb.edu/" target="_blank" rel="noopener">Versor</a> - A (fast) Generic C++ library for Geometric Algebras, including Euclidean, Projective, Conformal, Spacetime (etc).</li><li><a href="http://www.wykobi.com/" target="_blank" rel="noopener">Wykobi</a> - A C++ library of efficient, robust and simple to use C++ 2D/3D oriented computational geometry routines. [MIT]</li><li><a href="https://github.com/QuantStack/xtensor" target="_blank" rel="noopener">xtensor</a> - A C++14 library for numerical analysis with multi-dimensional array expressions, inspired by NumPy syntax. [BSD 3-clause] <a href="http://quantstack.net/xtensor" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/stillwater-sc/universal" target="_blank" rel="noopener">universal</a> - A C++14 header-only library implementing arbitrary posit arithmetic. The posit number system is a tapered floating point that is more efficient than IEEE floating point. Posits enable reproducible computational science. [MIT license] <a href="http://www.stillwater-sc.com/assets/content/stillwater-universal-sw.html" target="_blank" rel="noopener">website</a></li></ul><h2 id="Memory-Allocation"><a href="#Memory-Allocation" class="headerlink" title="Memory Allocation"></a>Memory Allocation</h2><ul><li><a href="https://github.com/ivmai/bdwgc" target="_blank" rel="noopener">Boehm GC</a> - Conservative garbage collector for C and C++. [similar to X11] <a href="http://www.hboehm.info/gc/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/emeryberger/Hoard" target="_blank" rel="noopener">Hoard</a> - Fast, Scalable, and Memory-efficient Malloc for Linux, Windows, and Mac. [GPL, commercial] <a href="http://hoard.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/jemalloc/jemalloc" target="_blank" rel="noopener">jemalloc</a> - General purpose malloc(3) implementation that emphasizes fragmentation avoidance and scalable concurrency support. [BSD] <a href="http://jemalloc.net/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/foonathan/memory" target="_blank" rel="noopener">memory</a> - STL compatible C++ memory allocator library. [ZLib]</li><li><a href="https://github.com/mtrebi/memory-allocators" target="_blank" rel="noopener">memory-allocators</a> - Custom memory allocators to improve the performance of dynamic memory allocation. [MIT]</li></ul><h2 id="Multimedia"><a href="#Multimedia" class="headerlink" title="Multimedia"></a>Multimedia</h2><ul><li><a href="http://gstreamer.freedesktop.org/" target="_blank" rel="noopener">GStreamer</a> - A library for constructing graphs of media-handling components. [LGPL]</li><li><a href="https://github.com/libass/libass" target="_blank" rel="noopener">libass</a> - Portable subtitle renderer for the ASS/SSA subtitle format. [ISC] </li><li><a href="https://github.com/libav/libav" target="_blank" rel="noopener">libav</a> - A collection of libraries and tools to process multimedia content such as audio, video, subtitles and related metadata. [LGPL v2.1+ and others] <a href="https://www.libav.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.live555.com/liveMedia/" target="_blank" rel="noopener">LIVE555 Streaming Media</a> - Multimedia streaming library using open standard protocols (RTP/RTCP, RTSP, SIP). [LGPL]</li><li><a href="https://wiki.videolan.org/LibVLC" target="_blank" rel="noopener">libVLC</a> - libVLC (VLC SDK) media framework. [GPL]</li><li><a href="https://github.com/MediaArea/MediaInfoLib" target="_blank" rel="noopener">MediaInfoLib</a> - Convenient unified display of the most relevant technical and tag data for video and audio files. [BSD]</li><li><a href="https://github.com/wang-bin/QtAV" target="_blank" rel="noopener">QtAv</a> - A multimedia playback framework based on Qt and FFmpeg to write a player easily. [LGPL] <a href="http://wang-bin.github.io/QtAV/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.libsdl.org/" target="_blank" rel="noopener">SDL</a> :zap: - Simple DirectMedia Layer. [zlib]</li><li><a href="https://github.com/SFML/SFML" target="_blank" rel="noopener">SFML</a> :zap: - Simple and Fast Multimedia Library. [zlib] <a href="http://www.sfml-dev.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/taglib/taglib" target="_blank" rel="noopener">TagLib</a> - A library for reading and editing the metadata of several popular audio formats. [LGPL/MPL] <a href="https://taglib.org/" target="_blank" rel="noopener">website</a></li></ul><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><ul><li><a href="http://www.dre.vanderbilt.edu/~schmidt/ACE.html" target="_blank" rel="noopener">ACE</a> - An OO Network Programming Toolkit in C++. [?MIT?]</li><li><a href="http://think-async.com/" target="_blank" rel="noopener">Boost.Asio</a> :zap: - A cross-platform C++ library for network and low-level I/O programming. [Boost]</li><li><a href="https://github.com/boostorg/beast" target="_blank" rel="noopener">Boost.Beast</a> :zap: - HTTP and WebSocket built on Boost.Asio in C++11. [BSL-1.0] <a href="www.boost.org/libs/beast">website</a></li><li><a href="https://github.com/Organic-Code/Breep" target="_blank" rel="noopener">Breep</a> - Event based, high-level C++14 peer-to-peer library. [EUPL-1.1 (OSI approved)]</li><li><a href="https://github.com/Microsoft/cpprestsdk" target="_blank" rel="noopener">C++ REST SDK</a> - C++ REST SDK (previously named Casablanca). [Apache2]</li><li><a href="https://github.com/corvusoft/restbed" target="_blank" rel="noopener">Restbed</a> - C++11 Asynchronous RESTful framework. [AGPL]</li><li><a href="https://github.com/Stiffstream/restinio" target="_blank" rel="noopener">Restinio</a> - A header-only C++14 library that gives you an embedded HTTP/Websocket server. [BSD]</li><li><a href="https://github.com/c-ares/c-ares" target="_blank" rel="noopener">c-ares</a> - A C library for asynchronous DNS requests. [MIT]</li><li><a href="https://github.com/yhirose/cpp-httplib" target="_blank" rel="noopener">cpp-httplib</a> - A single file C++11 header-only HTTP/HTTPS sever library. [MIT]</li><li><a href="http://cpp-netlib.org/" target="_blank" rel="noopener">cpp-netlib</a> - A collection of open-source libraries for high level network programming. [Boost]</li><li><a href="https://github.com/cpp-netlib/uri" target="_blank" rel="noopener">cpp-netlib/uri</a> - URI parser/builder library for C++, compatible with RFC 3986 and RFC 3987. [BSL-1.0]</li><li><a href="https://github.com/whoshuu/cpr" target="_blank" rel="noopener">cpr</a> - A modern C++ HTTP requests library with a simple but powerful interface. Modeled after the Python Requests module. [MIT] <a href="https://whoshuu.github.io/cpr/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/JosephP91/curlcpp" target="_blank" rel="noopener">curlcpp</a> - An object oriented C++ wrapper for CURL(libcurl). [MIT]</li><li><a href="https://github.com/rxi/dyad" target="_blank" rel="noopener">Dyad.c</a> - Asynchronous networking for C. [MIT]</li><li><a href="https://github.com/lsalzman/enet" target="_blank" rel="noopener">ENet</a> - Reliable UDP networking library. [MIT] <a href="http://enet.bespin.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/Qihoo360/evpp" target="_blank" rel="noopener">evpp</a> - C++ high performance networking with TCP/UDP/HTTP protocols. [BSD]</li><li><a href="https://github.com/h2o/h2o" target="_blank" rel="noopener">H2O</a> - An optimized HTTP server with support for HTTP/1.x and HTTP/2. It can also be used as a library. [MIT]</li><li><a href="https://github.com/nodejs/http-parser" target="_blank" rel="noopener">HTTP Parser</a> :zap: - A http request/response parser for C. [MIT]</li><li><a href="http://curl.haxx.se/libcurl/" target="_blank" rel="noopener">libcurl</a> - Multiprotocol file transfer library. [MIT/X derivate license]</li><li><a href="https://code.google.com/p/libjingle/" target="_blank" rel="noopener">libjingle</a> - Google talk voice and P2P interoperability library. [BSD]</li><li><a href="http://www.gnu.org/software/libmicrohttpd/" target="_blank" rel="noopener">Libmicrohttpd</a> - GNU libmicrohttpd is a small C library that is supposed to make it easy to run an HTTP server as part of another application. [LGPL v2.1+]</li><li><a href="https://github.com/the-tcpdump-group/libpcap" target="_blank" rel="noopener">libpcap</a> - A portable C/C++ library for network traffic capture. [BSD] <a href="https://www.tcpdump.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/devsisters/libquic" target="_blank" rel="noopener">libquic</a> - A QUIC protocol library extracted from Chromium’s QUIC Implementation. [BSD]</li><li><a href="https://github.com/edenhill/librdkafka" target="_blank" rel="noopener">librdkafka</a> - Apache Kafka client library for C and C++. [BSD-2-Clause]</li><li><a href="https://github.com/warmcat/libwebsockets" target="_blank" rel="noopener">libwebsockets</a> - A lightweight pure C WebSocket implementation that provides both client and server libraries. [LGPL2.1 + static link exception] <a href="https://libwebsockets.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/cesanta/mongoose" target="_blank" rel="noopener">Mongoose</a> - Extremely lightweight webserver. [GPL2]</li><li><a href="https://github.com/LiamBindle/MQTT-C" target="_blank" rel="noopener">MQTT-C</a> - A portable MQTT C client for embedded systems and PCs alike. [MIT] <a href="https://liambindle.ca/MQTT-C" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/chenshuo/muduo" target="_blank" rel="noopener">Muduo</a> - A C++ non-blocking network library for multi-threaded server in Linux. [BSD]</li><li><a href="https://github.com/nghttp2/nghttp2" target="_blank" rel="noopener">nghttp2</a> - HTTP/2 C Library. [MIT] <a href="https://nghttp2.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/davidmoreno/onion" target="_blank" rel="noopener">Onion</a> - HTTP server library in C designed to be lightweight and easy to use. [Apache2/GPL2]</li><li><a href="https://github.com/h2o/picohttpparser" target="_blank" rel="noopener">PicoHTTPParser</a> - A tiny, primitive, fast HTTP request/response parser. [MIT]</li><li><a href="https://github.com/pocoproject" target="_blank" rel="noopener">POCO</a> :zap: - C++ class libraries and frameworks for building network- and internet-based applications that run on desktop, server, mobile and embedded systems. [Boost] <a href="http://pocoproject.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/facebook/proxygen" target="_blank" rel="noopener">Proxygen</a> - Facebook’s collection of C++ HTTP libraries including an easy to use HTTP server. [BSD]</li><li><a href="https://github.com/OculusVR/RakNet" target="_blank" rel="noopener">RakNet</a> - A cross platform, open source, C++ networking engine for game programmers. [BSD]</li><li><a href="https://github.com/mrtazz/restclient-cpp" target="_blank" rel="noopener">restclient-cpp</a> - Simple REST client for C++. It wraps libcurl for HTTP requests. [MIT]</li><li><a href="https://github.com/mattgodbolt/seasocks" target="_blank" rel="noopener">Seasocks</a> - Simple, small, C++ embeddable webserver with WebSockets support. [BSD]</li><li><a href="http://siliconframework.org" target="_blank" rel="noopener">Silicon</a> - A high performance, middleware oriented C++14 http web framework. [MIT]</li><li><a href="https://github.com/vinipsmaker/tufao" target="_blank" rel="noopener">Tufão</a> - An asynchronous web framework for C++ built on top of Qt. [LGPL2]</li><li><a href="https://github.com/uriparser/uriparser" target="_blank" rel="noopener">uriparser</a> - Strictly RFC 3986 compliant URI parsing and handling library. [BSD-3-Clause]</li><li><a href="https://github.com/uNetworking/uWebSockets" target="_blank" rel="noopener">uWebSockets</a> - µWS is one of the most lightweight, efficient &amp; scalable WebSocket &amp; HTTP server implementations available. [Zlib]</li><li><a href="https://github.com/riolet/WAFer" target="_blank" rel="noopener">WAFer</a> - A C language-based ultra-light software platform for scalable server-side and networking applications. Think node.js for C programmers. [GPL2]</li><li><a href="https://github.com/facebook/wangle" target="_blank" rel="noopener">Wangle</a> - A client/server application framework to build asynchronous, event-driven modern C++ services. [Apache-2.0]</li><li><a href="https://github.com/facebook/wdt" target="_blank" rel="noopener">wdt</a> - An embeddedable library (and command line tool) aiming to transfer data between 2 systems as fast as possible over multiple TCP paths. [BSD-3-Clause]</li><li><a href="https://github.com/zaphoyd/websocketpp" target="_blank" rel="noopener">WebSocket++</a> - C++/Boost Asio based websocket client/server library. [BSD]</li><li><a href="https://github.com/seladb/PcapPlusPlus" target="_blank" rel="noopener">PcapPlusPlus</a> - a multiplatform C++ network sniffing and packet parsing and crafting framework. [Unlicense]</li><li><a href="https://github.com/zeromq/libzmq" target="_blank" rel="noopener">ZeroMQ</a> - High-speed, modular asynchronous communication library. [LGPL] <a href="http://zeromq.org/" target="_blank" rel="noopener">website</a></li></ul><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p><em>Libraries for parsing and manipulating PDF documents.</em></p><ul><li><a href="https://github.com/libharu/libharu" target="_blank" rel="noopener">libharu</a> - A free, cross platform, open-sourced software library for generating PDF. [zlib]</li><li><a href="https://mupdf.com/" target="_blank" rel="noopener">MuPDF</a> - A lightweight PDF, XPS, and E-book viewer. [AGPL/Commercial]</li><li><a href="http://podofo.sourceforge.net/" target="_blank" rel="noopener">PoDoFo</a> - A library to work with the PDF file format. [LGPL]</li><li><a href="https://poppler.freedesktop.org/" target="_blank" rel="noopener">Poppler</a> - Open-source multi-backend PDF rendering library based on the xpdf-3.0 code base. [GPLv2/GPLv3]</li><li><a href="https://www.xpdfreader.com/" target="_blank" rel="noopener">Xpdf</a> - Xpdf is a free PDF viewer and toolkit, including a text extractor, image converter, HTML converter, and more. [GPL v2/GPL v3]</li><li><a href="http://www.dynaforms.com/" target="_blank" rel="noopener">DynaPDF</a> - An easy-to-use PDF generation library. [Commercial]</li></ul><h2 id="Physics"><a href="#Physics" class="headerlink" title="Physics"></a>Physics</h2><p><em>Dynamics simulation engines</em></p><ul><li><a href="https://github.com/erincatto/Box2D" target="_blank" rel="noopener">Box2D</a> - A 2D physics engine for games. [BSD-like]</li><li><a href="https://github.com/bulletphysics/bullet3" target="_blank" rel="noopener">Bullet</a> - A 3D physics engine for games. [zlib] <a href="http://bulletphysics.org" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/slembcke/Chipmunk2D" target="_blank" rel="noopener">Chipmunk</a> - A fast and lightweight 2D game physics library. [MIT] <a href="https://chipmunk-physics.net/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/google/liquidfun" target="_blank" rel="noopener">LiquidFun</a> - A 2D physics engine for games. [BSD-like]</li><li><a href="https://github.com/MADEAPPS/newton-dynamics" target="_blank" rel="noopener">Newton Dynamics</a> - An integrated solution for real time simulation of physics environments. [zlib]</li><li><a href="http://www.ode.org/" target="_blank" rel="noopener">ODE</a> - Open Dynamics Engine - An open source, high performance library for simulating rigid body dynamics. [BSD&amp;LGPL]</li><li><a href="https://github.com/vanderlin/ofxBox2d" target="_blank" rel="noopener">ofxBox2d</a> - openFrameworks wrapper for Box2D. [BSD-like]</li><li><a href="https://github.com/NVIDIAGameWorks/PhysX-3.4" target="_blank" rel="noopener">PhysX</a> - An open-source realtime physics engine middleware SDK developed by Nvidia as a part of Nvidia GameWorks software suite. [BSD-3-Clause] </li><li><a href="https://github.com/projectchrono/chrono" target="_blank" rel="noopener">Project Chrono</a> - An open source multi-physics simulation engine. [BSD-3-Clause] <a href="https://projectchrono.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/simbody/simbody" target="_blank" rel="noopener">Simbody</a> - High-performance C++ multibody dynamics/physics library for simulating articulated biomechanical and mechanical systems like vehicles, robots, and the human skeleton. [Apache2]</li></ul><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><ul><li><a href="https://github.com/aantron/better-enums" target="_blank" rel="noopener">Better Enums</a> - Reflective enums (to string, iteration). Single header. [BSD] <a href="http://aantron.github.io/better-enums/" target="_blank" rel="noopener">website</a></li><li><a href="https://bitbucket.org/dwilliamson/clreflect" target="_blank" rel="noopener">clReflect</a> - C++ Reflection using clang. [MIT]</li><li><a href="https://github.com/cpgf/cpgf" target="_blank" rel="noopener">CPFG</a> - A C++03 library for reflection, callback and script binding. [Apache2] <a href="http://www.cpgf.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/AustinBrunkhorst/CPP-Reflection" target="_blank" rel="noopener">CPP-Reflection</a> - C++ Reflection using clang. [MIT]</li><li><a href="https://github.com/Neargye/magic_enum" target="_blank" rel="noopener">Magic Enum</a> - Header-only C++17 library provides static reflection for enums (to string, from string, iteration), work with any enum type without any macro or boilerplate code. [MIT]</li><li><a href="https://github.com/skypjack/meta" target="_blank" rel="noopener">meta</a> - Header-only, non-intrusive and macro-free runtime reflection system in C++. [MIT]</li><li><a href="https://github.com/Neargye/nameof" target="_blank" rel="noopener">Nameof</a> - Header-only C++17 library provides nameof macros and functions to obtain the simple name of variable, type, function, macro, and enum. [MIT]</li><li><a href="https://github.com/billyquith/ponder" target="_blank" rel="noopener">Ponder</a> - A C++11 library for reflection. [MIT]</li><li><a href="https://github.com/rttrorg/rttr" target="_blank" rel="noopener">RTTR</a> - A C++11 library for reflection. [MIT] <a href="http://www.rttr.org" target="_blank" rel="noopener">website</a></li></ul><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><ul><li><a href="https://github.com/VerbalExpressions/CppVerbalExpressions" target="_blank" rel="noopener">CppVerbalExpressions</a> - C++ regular expressions made easy. [MIT]</li><li><a href="https://github.com/hanickadot/compile-time-regular-expressions" target="_blank" rel="noopener">CTRE</a> - A Compile time PCRE (almost) compatible regular expression matcher. [MIT]</li><li><a href="https://github.com/kkos/oniguruma" target="_blank" rel="noopener">Oniguruma</a> - A modern and flexible regular expressions library that supports a variety of character encodings. [BSD]</li><li><a href="http://pcre.org/" target="_blank" rel="noopener">PCRE</a> - A regular expression C library inspired by the regular expression capabilities in Perl. [BSD]</li><li><a href="https://github.com/google/re2" target="_blank" rel="noopener">RE2</a> - A software library for regular expressions via a finite-state machine using automata theory. [BSD-3-Clause]</li><li><a href="https://github.com/cesanta/slre" target="_blank" rel="noopener">SLRE</a> - Super Light Regexp engine for C/C++. [GPLv2/Commercial]</li><li><a href="https://github.com/openresty/sregex" target="_blank" rel="noopener">sregex</a> - A non-backtracking NFA/DFA-based Perl-compatible regex engine library for matching on large data streams. [BSD]</li></ul><h2 id="Robotics"><a href="#Robotics" class="headerlink" title="Robotics"></a>Robotics</h2><ul><li><a href="http://moos-ivp.org" target="_blank" rel="noopener">MOOS-IvP</a> - A set of open source C++ modules for providing autonomy on robotic platforms, in particular autonomous marine vehicles.</li><li><a href="http://www.mrpt.org/" target="_blank" rel="noopener">MRPT</a> - Mobile Robot Programming Toolkit. [BSD]</li><li><a href="https://github.com/PointCloudLibrary/pcl" target="_blank" rel="noopener">PCL</a> - Point Cloud Library is a standalone, large scale, open project for 2D/3D image and point cloud processing [BSD] <a href="http://www.pointclouds.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.roboticslibrary.org/" target="_blank" rel="noopener">Robotics Library (RL)</a> - A self-contained C++ library for robot kinematics, motion planning and control. [BSD]</li><li><a href="http://www.robwork.dk/apidoc/nightly/rw/index.html" target="_blank" rel="noopener">RobWork</a> - A collection of C++ libraries for simulation and control of robot systems. [Apache2]</li><li><a href="http://wiki.ros.org/" target="_blank" rel="noopener">ROS</a> - Robot Operating System provides libraries and tools to help software developers create robot applications. [BSD]</li></ul><h2 id="Scientific-Computing"><a href="#Scientific-Computing" class="headerlink" title="Scientific Computing"></a>Scientific Computing</h2><ul><li><a href="https://github.com/ddemidov/amgcl" target="_blank" rel="noopener">AMGCL</a> - a header-only C++ library for solving large sparse linear systems with algebraic multigrid. [MIT]</li><li><a href="http://www.fftw.org/" target="_blank" rel="noopener">FFTW</a> - A C library for computing the DFT in one or more dimensions. [GPL]</li><li><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL</a> - GNU scientific library. [GPL]</li><li><a href="https://github.com/TileDB-Inc/TileDB" target="_blank" rel="noopener">TileDB</a> - Fast Dense and Sparse Multidimensional Array DBMS. [MIT] <a href="https://tiledb.io/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/trilinos/Trilinos" target="_blank" rel="noopener">Trilinos</a> - High performance PDE solvers. [BSD]</li><li><a href="https://github.com/torch/torch7" target="_blank" rel="noopener">Torch</a> - A scientific computing framework with wide support for machine learning algorithms that puts GPUs first. [BSD-3-Clause] <a href="http://torch.ch/" target="_blank" rel="noopener">website</a></li></ul><h2 id="Scripting"><a href="#Scripting" class="headerlink" title="Scripting"></a>Scripting</h2><ul><li><a href="https://www.angelcode.com/angelscript/" target="_blank" rel="noopener">AngelScript</a> - AngelScript is a game-oriented interpreted/compiled scripting language. [zlib]</li><li><a href="http://www.boost.org/doc/libs/1_65_1/libs/python/doc/html/index.html" target="_blank" rel="noopener">Boost.Python</a> - A C++ library which enables seamless interoperability between C++ and the Python programming language. [Boost]</li><li><a href="https://github.com/tbenthompson/cppimport" target="_blank" rel="noopener">cppimport</a> - Import C++ files directly from Python! [MIT]</li><li><a href="https://github.com/mono/CppSharp" target="_blank" rel="noopener">CppSharp</a> - Tools and libraries to glue C/C++ APIs to high-level languages. [MIT]</li><li><a href="https://github.com/ChaiScript/ChaiScript/" target="_blank" rel="noopener">ChaiScript</a> - An easy to use embedded scripting language for C++. [BSD] <a href="http://chaiscript.com/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/taviso/ctypes.sh" target="_blank" rel="noopener">ctypes.sh</a> - A foreign function interface for bash. [MIT]</li><li><a href="https://github.com/cython/cython" target="_blank" rel="noopener">Cython</a> - Cython is an optimising static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex). It makes writing C extensions for Python as easy as Python itself. [Apache] <a href="http://cython.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/dropbox/djinni" target="_blank" rel="noopener">djinni</a> - A tool for generating cross-language type declarations and interface bindings. [Apache2]</li><li><a href="https://github.com/svaarala/duktape" target="_blank" rel="noopener">Duktape</a> - An embeddable Javascript engine with compact footprint. [MIT] <a href="http://duktape.org" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/bytedeco/javacpp" target="_blank" rel="noopener">JavaCpp</a> - The missing bridge between Java and native C++. [Apache2]</li><li><a href="https://github.com/libffi/libffi" target="_blank" rel="noopener">libffi</a> - A portable foreign-function interface library. [MIT] <a href="https://sourceware.org/libffi/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.lua.org/" target="_blank" rel="noopener">Lua</a> - A minimal and fast scripting engine for configuration files and basic application scripting. [MIT]</li><li><a href="https://github.com/vinniefalco/LuaBridge" target="_blank" rel="noopener">LuaBridge</a> - A lightweight, dependency-free library for binding Lua to C++. [MIT]</li><li><a href="https://github.com/dafrito/luacxx" target="_blank" rel="noopener">luacxx</a> - C++11 API for creating Lua bindings. [MIT]</li><li><a href="https://github.com/charto/nbind" target="_blank" rel="noopener">nbind</a> - Magical headers that make your C++ library accessible from JavaScript. [MIT]</li><li><a href="https://github.com/CopernicaMarketingSoftware/PHP-CPP" target="_blank" rel="noopener">PHP-CPP</a> - A library to build PHP extensions with C++. [Apache2] <a href="http://www.php-cpp.com/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/pybind/pybind11" target="_blank" rel="noopener">pybind11</a> - Seamless operability between C++11 and Python. [BSD]</li><li><a href="https://riverbankcomputing.com/software/sip/intro" target="_blank" rel="noopener">SIP</a> - C or C++ Bindings Generator for Python v2 and v3. [GPL]</li><li><a href="https://github.com/ThePhD/sol2" target="_blank" rel="noopener">sol2</a> - A C++ <-> Lua API wrapper with advanced features and top notch performance. [MIT]</-></li><li><a href="https://github.com/swig/swig" target="_blank" rel="noopener">SWIG</a> - A wrapper/interface Generator that let you link your c++ code to Javascript, Perl, PHP, Python, Tcl and Ruby. [GPL/Output not licensed] <a href="http://www.swig.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/cesanta/v7" target="_blank" rel="noopener">V7</a> - An embedded JavaScript engine. [GPL2]</li><li><a href="https://v8.dev" target="_blank" rel="noopener">V8</a> - A fast JavaScript engine by Google that can be embedded into any C++ application. [BSD]</li><li><a href="https://github.com/Microsoft/ChakraCore" target="_blank" rel="noopener">ChakraCore</a> -A JavaScript engine by Microsoft that can be embedded into nodejs. [MIT]</li></ul><h2 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h2><ul><li><a href="https://github.com/Microsoft/bond" target="_blank" rel="noopener">Bond</a> - An open source, cross-platform framework for working with schematized data. [MIT]</li><li><a href="https://github.com/USCiLab/cereal" target="_blank" rel="noopener">cereal</a> - A C++11 library for serialization. [BSD]</li><li><a href="https://github.com/tplgy/cppcodec" target="_blank" rel="noopener">cppcodec</a> - Header-only C++11 library to encode/decode base64, base32 and hex with consistent, flexible API. [MIT]</li><li><a href="https://github.com/google/flatbuffers" target="_blank" rel="noopener">FlatBuffers</a> - A Memory efficient serialization library. [Apache2]</li><li><a href="https://github.com/msgpack/msgpack-c" target="_blank" rel="noopener">MessagePack</a> - Efficient binary serialization format “like JSON” for C and C++. [Apache2] <a href="http://msgpack.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/nanopb/nanopb" target="_blank" rel="noopener">nanopb</a> - Small code-size Protocol Buffers implementation in ANSI C. [Zlib]</li><li><a href="https://github.com/google/protobuf" target="_blank" rel="noopener">protobuf</a> - Protocol Buffers - Google’s data interchange format. [BSD]</li><li><a href="https://github.com/protobuf-c/protobuf-c" target="_blank" rel="noopener">protobuf-c</a> - Protocol Buffers implementation in C. [BSD]</li><li><a href="https://github.com/real-logic/simple-binary-encoding" target="_blank" rel="noopener">SimpleBinaryEncoding</a> - encoding and decoding application messages in binary format for low-latency applications. [Apache2]</li><li><a href="https://github.com/google/upb" target="_blank" rel="noopener">upb</a> - A small protobuf implementation in C. [BSD]</li><li><a href="https://github.com/niXman/yas" target="_blank" rel="noopener">YAS</a> - Very fast <strong>Y</strong>et <strong>A</strong>nother <strong>S</strong>erialization library supports the binary/text/json formats. [Boost]</li></ul><h2 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h2><ul><li><a href="https://github.com/orlp/pdqsort" target="_blank" rel="noopener">pdqsort</a> - Pattern-defeating quicksort. [zlib]</li><li><a href="https://github.com/gfx/cpp-TimSort" target="_blank" rel="noopener">Timsort</a> - A templated stable sorting function which outperforms quicksort-based algorithms including std::sort, for reversed or semi-sorted data. [MIT]</li></ul><h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ul><li><a href="http://www.webmproject.org/code/" target="_blank" rel="noopener">libvpx</a> - VP8/VP9 Codec SDK. [BSD]</li><li><a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> - A complete, cross-platform solution to record, convert and stream audio and video. [LGPL2/GPL2]</li><li><a href="https://github.com/strukturag/libde265" target="_blank" rel="noopener">libde265</a> - Open h.265 video codec implementation. [LGPL] <a href="http://www.libde265.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://bitbucket.org/multicoreware/x265/wiki/Home" target="_blank" rel="noopener">x265</a> - Open h.265 video codec implementation. [GPL2] <a href="https://x265.readthedocs.io/en/default/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/cisco/openh264" target="_blank" rel="noopener">OpenH264</a> - Open Source H.264 Codec. [BSD] <a href="http://www.openh264.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.theora.org/" target="_blank" rel="noopener">Theora</a> - A free and open video compression format. [BSD]</li><li><a href="https://github.com/twitter/vireo/" target="_blank" rel="noopener">Vireo</a> - A lightweight and versatile video processing library by Twitter. [MIT]</li></ul><h2 id="Virtual-Machines"><a href="#Virtual-Machines" class="headerlink" title="Virtual Machines"></a>Virtual Machines</h2><ul><li><a href="https://github.com/tekknolagi/carp" target="_blank" rel="noopener">CarpVM</a> - “interesting” VM in C. Let’s see how this goes. [GPLv3]</li><li><a href="https://github.com/micropython/micropython" target="_blank" rel="noopener">MicroPython</a> - Aims to put an implementation of Python 3.x on a microcontroller. [MIT]</li><li><a href="https://github.com/jakogut/tinyvm" target="_blank" rel="noopener">TinyVM</a> - A small, fast, lightweight virtual machine written in pure ANSI C. [MIT]</li></ul><h2 id="Web-Application-Framework"><a href="#Web-Application-Framework" class="headerlink" title="Web Application Framework"></a>Web Application Framework</h2><ul><li><a href="https://github.com/civetweb/civetweb" target="_blank" rel="noopener">Civetweb</a> - Provides easy to use, powerful, C/C++ embeddable web server with optional CGI, SSL and Lua support. [MIT]</li><li><a href="http://cppcms.com/" target="_blank" rel="noopener">CppCMS</a> - A Free High Performance Web Development Framework (not a CMS). [LGPLv3]</li><li><a href="https://github.com/ipkn/crow" target="_blank" rel="noopener">Crow</a> - Crow is C++ micro web framework (inspired by Python Flask). [BSD]</li><li><a href="https://github.com/cutelyst/cutelyst" target="_blank" rel="noopener">Cutelyst</a> - A C++ Web Framework built on top of Qt, using the simple approach of Catalyst (Perl) framework. [LGPLv2.1+] <a href="https://cutelyst.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/boazsegev/facil.io" target="_blank" rel="noopener">facil.io</a> - Evented, high performance C web framework supporting HTTP, WebSockets, SSE and more. [MIT] <a href="http://facil.io" target="_blank" rel="noopener">website</a></li><li><a href="https://kore.io/" target="_blank" rel="noopener">Kore</a> - ultra fast and flexible web server / framework for web applications developed in C. [ISC]</li><li><a href="http://www.coralbits.com/libonion/" target="_blank" rel="noopener">libOnion</a> - lightweight library to help you create webservers in C programming language. [LGPLv3]</li><li><a href="https://github.com/lpereira/lwan" target="_blank" rel="noopener">lwan</a> - Experimental, scalable, high performance HTTP server. [GPL2]</li><li><a href="https://github.com/oatpp/oatpp" target="_blank" rel="noopener">oat++</a> - Light, zero-dependency framework to create high-performance web-services. [Apache-2.0] <a href="https://oatpp.io/" target="_blank" rel="noopener">website</a> </li><li><a href="http://pistache.io/" target="_blank" rel="noopener">Pistache</a> - Pistache is a C++ REST framework written in pure C++11 with no external dependency. [Apache2]</li><li><a href="https://github.com/jlaine/qdjango/" target="_blank" rel="noopener">QDjango</a> - A web framework written in C++ and built on top of the Qt library. Where possible it tries to follow django’s API, hence its name. [LGPL]</li><li><a href="https://github.com/treefrogframework/treefrog-framework" target="_blank" rel="noopener">TreeFrog Framework</a> - High-speed and full-stack web application framework based on C++ and Qt, which supports HTTP and WebSocket protocol (with O/R mapping). [BSD] <a href="http://www.treefrogframework.org/" target="_blank" rel="noopener">website</a></li><li><a href="http://www.webtoolkit.eu/wt" target="_blank" rel="noopener">Wt</a> - A C++ library for developing web applications. [GPL/Commercial]</li></ul><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p><em>XML is crap. Really. There are no excuses. XML is nasty to parse for humans, and it’s a disaster to parse even for computers. There’s just no reason for that horrible crap to exist. - Linus Torvalds</em></p><ul><li><a href="http://www.boost.org/doc/libs/1_55_0/doc/html/property_tree.html" target="_blank" rel="noopener">Boost.PropertyTree</a> - A property tree parser/generator that can be used to parse XML/JSON/INI/Info files. [Boost]</li><li><a href="http://www.libexpat.org/" target="_blank" rel="noopener">Expat</a> - An XML parser library written in C. [MIT]</li><li><a href="http://xmlsoft.org/" target="_blank" rel="noopener">Libxml2</a> - The XML C parser and toolkit of Gnome. [MIT]</li><li><a href="http://libxmlplusplus.sourceforge.net/" target="_blank" rel="noopener">libxml++</a> - An XML Parser for C++. [LGPL2]</li><li><a href="https://github.com/michaelrsweet/mxml" target="_blank" rel="noopener">Mini-XML</a> - A small XML parsing library written in ANSI C. [LGPL2 with exceptions]</li><li><a href="http://pugixml.org/" target="_blank" rel="noopener">PugiXML</a> - A light-weight, simple and fast XML parser for C++ with XPath support. [MIT]</li><li><a href="http://rapidxml.sourceforge.net/" target="_blank" rel="noopener">RapidXml</a> - An attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. [Boost]</li><li><a href="http://sourceforge.net/projects/tinyxml/" target="_blank" rel="noopener">TinyXML</a> - A simple, small, minimal, C++ XML parser that can be easily integrating into other programs. [zlib]</li><li><a href="https://github.com/leethomason/tinyxml2" target="_blank" rel="noopener">TinyXML2</a> - A simple, small, efficient, C++ XML parser that can be easily integrating into other programs. [zlib]</li><li><a href="https://github.com/rjpcomputing/ticpp" target="_blank" rel="noopener">TinyXML++</a> - A completely new interface to TinyXML that uses MANY of the C++ strengths. Templates, exceptions, and much better error handling. [MIT]</li><li><a href="http://xerces.apache.org/xerces-c/" target="_blank" rel="noopener">Xerces-C++</a> - A validating XML parser written in a portable subset of C++. [Apache2]</li></ul><h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><p><em>Useful libraries or tools that don’t fit in the categories above or maybe just not categorised yet</em></p><ul><li><a href="https://github.com/arvidn/access_profiler" target="_blank" rel="noopener">access_profiler</a> - A tool to count accesses to member variables in c++ programs. [GPL3]</li><li><a href="http://lcamtuf.coredump.cx/afl/" target="_blank" rel="noopener">American fuzzy lop</a> a.k.a. afl-fuzz - Crazy fuzzing tool that automatically discovers bugs given time and minimal example input. [Apache2]</li><li><a href="http://bstring.sourceforge.net" target="_blank" rel="noopener">Better String</a> - An alternative to the string library for C which is more functional and does not have buffer overflow overrun problems. Also includes a C++ wrapper. [BSD, GPL2]</li><li><a href="http://www.boost.org/doc/libs/1_56_0/doc/html/signals.html" target="_blank" rel="noopener">Boost.Signals</a> - An implementation of a managed signals and slots system. [Boost]</li><li><a href="https://github.com/ryanhaining/cppitertools" target="_blank" rel="noopener">CPPItertools</a> - Range-based for loop add-ons inspired by the Python builtins and itertools library. [BSD-2-Clause]</li><li><a href="https://github.com/iboB/dynamix" target="_blank" rel="noopener">DynaMix</a> - A library which allows you to compose and modify objects at run time. [MIT]</li><li><a href="https://github.com/fmtlib/fmt" target="_blank" rel="noopener">{fmt}</a> :zap: - Small, safe and fast formatting library for C++. [Simplified BSD]</li><li><a href="http://www.fastformat.org" target="_blank" rel="noopener">FastFormat</a> - Fast, Safe C++ Formatting inspired by log4j and Pantheios [Simplified BSD]</li><li><a href="https://code.google.com/p/casacore/" target="_blank" rel="noopener">casacore</a> - A set of c++ core libraries derived from aips++. [LGPL]</li><li><a href="https://github.com/VerbalExpressions/QtVerbalExpressions" target="_blank" rel="noopener">QtVerbalExpressions</a> - This Qt lib is based off of the C++ VerbalExpressions library. [MIT]</li><li><a href="https://github.com/Snaipe/libcsptr" target="_blank" rel="noopener">c-smart-pointers</a> - Smart pointers for the (GNU) C programming language. [MIT]</li><li><a href="https://github.com/louisdx/cxx-prettyprint" target="_blank" rel="noopener">cxx-prettyprint</a> - A pretty printing library for C++ containers. [Boost]</li><li><a href="https://github.com/renatoGarcia/icecream-cpp" target="_blank" rel="noopener">icecream-cpp</a> - A small printing library for debugging purposes. [MIT]</li><li><a href="https://github.com/leafsr/gcc-poison" target="_blank" rel="noopener">gcc-poison</a> - A simple header file for developers to ban unsafe C/C++ functions from applications.</li><li><a href="https://github.com/gracicot/kangaru" target="_blank" rel="noopener">Kangaru</a> - A dependency injection container for C++11 and C++14. [MIT]</li><li><a href="https://github.com/attractivechaos/klib" target="_blank" rel="noopener">Klib</a> - Small and lightweight implementations of common algorithms and data structures. [MIT]</li><li><a href="http://libsigc.sourceforge.net/" target="_blank" rel="noopener">libsigc++</a> - A typesafe callback system for standard C++. [LGPL]</li><li><a href="https://github.com/anrieff/libcpuid" target="_blank" rel="noopener">libcpuid</a> - A small C library for x86 CPU detection and feature extraction. [BSD]</li><li><a href="https://github.com/avati/libevil" target="_blank" rel="noopener">libevil</a> - The Evil License Manager. [GPLv3]</li><li><a href="https://github.com/keybuk/libnih" target="_blank" rel="noopener">libnih</a> - A lightweight library of C functions and structures. [GPL2.1]</li><li><a href="https://libusb.info/" target="_blank" rel="noopener">libusb</a> - A universal USB library which allows for portable access to USB devices. [LGPL2]</li><li><a href="https://github.com/solodon4/Mach7" target="_blank" rel="noopener">Mach7</a> - A Pattern-matching library for C++. [BSD]</li><li><a href="https://github.com/mandreyel/mio" target="_blank" rel="noopener">mio</a> - Cross-platform C++11 header-only library for memory mapped file IO. [MIT]</li><li><a href="https://github.com/ColinH/PEGTL" target="_blank" rel="noopener">PEGTL</a> - The Parsing Expression Grammar Template Library, a C++11 parser library. [MIT]</li><li><a href="http://www.deltavsoft.com/" target="_blank" rel="noopener">Remote Call Framework</a> - Inter-process communication framework for C++. [GPL2/Commercial]</li><li><a href="http://scintilla.org/" target="_blank" rel="noopener">Scintilla</a> - A free source code editing component. [MIT]</li><li><a href="https://github.com/antirez/sds" target="_blank" rel="noopener">SDS</a> - Simple Dynamic Strings library for C. [BSD]</li><li><a href="https://github.com/h2non/semver.c" target="_blank" rel="noopener">semver.c</a> - A semver parser and render in ANSI C. [MIT]</li><li><a href="https://github.com/wjwwood/serial" target="_blank" rel="noopener">Serial Communication Library</a> - Cross-platform, Serial Port library written in C++. [MIT]</li><li><a href="http://sigslot.sourceforge.net/" target="_blank" rel="noopener">sigslot</a> - C++ Signal/Slot Library. [PublicDomain]</li><li><a href="https://github.com/larspensjo/SimpleSignal" target="_blank" rel="noopener">SimpleSignal</a> - High performance C++11 signals. [PublicDomain]</li><li><a href="https://github.com/rtv/Stage" target="_blank" rel="noopener">Stage</a> - Mobile robot simulator. [GPL2]</li><li><a href="https://github.com/jeaye/stdman" target="_blank" rel="noopener">stdman</a> Formatted C++11/14 stdlib man pages (from cppreference). [MIT]</li><li><a href="https://github.com/nothings/stb" target="_blank" rel="noopener">stb</a> :zap: - A range of single-file libraries for C/C++. [PublicDomain]</li><li><a href="http://www.partow.net/programming/strtk/index.html" target="_blank" rel="noopener">StrTk</a> - A C++ library consisting of high performance string processing routines. [MIT]</li><li><a href="https://tulipindicators.org" target="_blank" rel="noopener">Tulip Indicators</a> - A C library of over 100 financial technical analysis indicators. [LGPL]</li><li><a href="https://github.com/regehr/ub-canaries" target="_blank" rel="noopener">ub-canaries</a> - A collection of C/C++ programs that try to get compilers to exploit undefined behavior.</li><li><a href="https://github.com/jeaye/value-category-cheatsheet" target="_blank" rel="noopener">value-category-cheatsheet</a> A PDF cheatsheet for lvalues, rvalues, and the like. [Jank copyleft]</li><li><a href="https://code.google.com/p/vartypes/" target="_blank" rel="noopener">VarTypes</a> - A feature-rich, object-oriented framework for managing variables in C++ / Qt4. [LGPL]</li><li><a href="http://zbar.sourceforge.net/" target="_blank" rel="noopener">ZBar</a> - A barcode scanner library, which allows to scan photos/images/video streams for barcodes and return their value. [LGPL2]</li><li><a href="https://github.com/zxing/zxing/" target="_blank" rel="noopener">ZXing</a> - An open-source, multi-format 1D/2D barcode image processing library implemented in Java, with ports to other languages. [Apache]</li></ul><h1 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h1><p><em>Software for creating a development environment.</em></p><h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><p><em>List of C or C++ compilers</em></p><ul><li><a href="https://github.com/rui314/8cc" target="_blank" rel="noopener">8cc</a> - A Small C Compiler.</li><li><a href="https://github.com/ryanmjacobs/c" target="_blank" rel="noopener">c</a> - Compile and execute C “scripts” in one go! [MIT]</li><li><a href="http://clang.llvm.org/" target="_blank" rel="noopener">Clang</a> - A C compiler for LLVM. Supports C++11/14/1z C11. Developed by LLVM Team. [NCSA]</li><li><a href="https://gcc.gnu.org/" target="_blank" rel="noopener">GCC</a> - GNU Compiler Collection. Supports C++11/14/1z C11 and OpenMP. [GNU GPL3]</li><li><a href="http://pcc.ludd.ltu.se/" target="_blank" rel="noopener">PCC</a> - A very old C compiler. Supports C99.</li><li><a href="https://software.intel.com/en-us/c-compilers" target="_blank" rel="noopener">Intel C++ Compiler</a> - Developed by Intel.</li><li><a href="http://llvm.org/" target="_blank" rel="noopener">LLVM</a> - Collection of modular and reusable compiler and toolchain technologies.</li><li><a href="https://msdn.microsoft.com/en-us/vstudio/hh386302.aspx" target="_blank" rel="noopener">Microsoft Visual C++</a> - MSVC, developed by Microsoft.</li><li><a href="http://www.openwatcom.org/index.php/Main_Page" target="_blank" rel="noopener">Open WatCom</a> - Watcom C, C++, and Fortran cross compilers and tools. [Sybase Open Watcom Public License]</li><li><a href="http://www.oracle.com/technetwork/server-storage/solarisstudio/overview/index.html" target="_blank" rel="noopener">Oracle Solaris Studio</a> - C, C++ and Fortran compiler for SPARC and x86. Supports C++11. Available on Linux and Solaris. [OTN Developer License]</li><li><a href="http://bellard.org/tcc/" target="_blank" rel="noopener">TCC</a> - Tiny C Compiler. [LGPL]</li></ul><h2 id="Online-Compiler"><a href="#Online-Compiler" class="headerlink" title="Online Compiler"></a>Online Compiler</h2><p><em>List of online C or C++ compilers</em></p><ul><li><a href="http://codepad.org/" target="_blank" rel="noopener">codepad</a> - An online compiler/interpreter, and a simple collaboration tool.</li><li><a href="http://coliru.stacked-crooked.com/" target="_blank" rel="noopener">coliru</a> - Online compiler/shell with support for various C++ compilers.</li><li><a href="http://gcc.godbolt.org/" target="_blank" rel="noopener">Compiler Explorer</a> - An interactive compiler with assembly output available.</li><li><a href="http://www.tutorialspoint.com/codingground.htm" target="_blank" rel="noopener">CompileOnline</a> - Compile and Execute C++ online on Linux.</li><li><a href="http://ideone.com/" target="_blank" rel="noopener">Ideone</a> - An online compiler and debugging tool which allows you to compile source code and execute it online in more than 60 programming languages.</li><li><a href="https://repl.it" target="_blank" rel="noopener">repl.it</a> - A powerful yet simple tools and platforms for educators, learners, and developers.</li><li><a href="http://rextester.com/runcode" target="_blank" rel="noopener">Rextester</a> - Online compiler which provides several compilers(Clang, GCC, MSVC) and several editors.</li><li><a href="http://webcompiler.cloudapp.net/" target="_blank" rel="noopener">Rise4Fun</a> - Online Visual C++ compiler.</li><li><a href="https://tio.run/" target="_blank" rel="noopener">Try It Online</a> - TIO is a family of online interpreters for an evergrowing list of practical and recreational programming languages.</li><li><a href="http://melpon.org/wandbox/" target="_blank" rel="noopener">Wandbox</a> - An online Clang/GCC compiler with Boost available.</li></ul><h2 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h2><p><em>List of C or C++ debuggers</em></p><ul><li><a href="https://en.wikipedia.org/wiki/Comparison_of_debuggers" target="_blank" rel="noopener">Comparison of debuggers</a> - A list of Debuggers from Wikipedia.</li><li><a href="https://www.gnu.org/software/gdb/" target="_blank" rel="noopener">GDB</a> - GNU Debugger.</li><li><a href="http://lldb.llvm.org/" target="_blank" rel="noopener">LLDB</a> - The LLDB Debugger.</li><li><a href="https://metashell.readthedocs.org" target="_blank" rel="noopener">Metashell</a> - An interactive template metaprogramming shell which includes the MDB metadebugger.</li><li><a href="http://valgrind.org/" target="_blank" rel="noopener">Valgrind</a> - A tool for memory debugging, memory leak detection, and profiling.</li><li><a href="http://x64dbg.com/" target="_blank" rel="noopener">x64dbg</a> - An open-source x64/x32 debugger for windows.</li></ul><h2 id="Integrated-Development-Environment"><a href="#Integrated-Development-Environment" class="headerlink" title="Integrated Development Environment"></a>Integrated Development Environment</h2><p><em>List of C or C++ nominal IDEs.</em></p><ul><li><a href="http://anjuta.org/" target="_blank" rel="noopener">Anjuta DevStudio</a> - The GNOME IDE. [GPL3]</li><li><a href="http://www.jetbrains.com/objc/" target="_blank" rel="noopener">AppCode</a> - an IDE for Objective-C, C, C++, and JavaScript development built on JetBrains’ IntelliJ IDEA platform.</li><li><a href="https://www.cevelop.com" target="_blank" rel="noopener">Cevelop</a> - Cross-platform C and C++ IDE based on Eclipse CDT with additional plug-ins.</li><li><a href="http://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a> - Cross-platform C and C++ IDE from JetBrains.</li><li><a href="http://www.codeblocks.org/" target="_blank" rel="noopener">Code::Blocks</a> - A free C, C++ and Fortran IDE.</li><li><a href="http://codelite.org/" target="_blank" rel="noopener">CodeLite</a> - Another cross-plaform, free C and C++ IDE. [GPL2 with an exception for plugins]</li><li><a href="https://github.com/jeaye/color_coded" target="_blank" rel="noopener">color_coded</a> - A vim plugin for libclang-based highlighting. [MIT]</li><li><a href="http://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener">Dev-C++</a> - A portable C/C++/C++11 IDE.</li><li><a href="http://www.eclipse.org/cdt/" target="_blank" rel="noopener">Eclipse CDT</a> - A fully functional C and C++ IDE based on the Eclipse platform.</li><li><a href="http://www.geany.org/" target="_blank" rel="noopener">Geany</a> - Small, fast, cross-platform IDE. [GPL]</li><li><a href="http://www-03.ibm.com/software/products/en/visgen" target="_blank" rel="noopener">IBM VisualAge</a> - A family of computer integrated development environments from IBM.</li><li><a href="https://github.com/Sarcasm/irony-mode" target="_blank" rel="noopener">Irony-mode</a> - A C/C++ minor mode for Emacs powered by libclang.</li><li><a href="https://github.com/cppit/jucipp" target="_blank" rel="noopener">juCi++</a> - Cross-platform, lightweight C++ IDE with libclang integration. [MIT]</li><li><a href="https://www.kdevelop.org/" target="_blank" rel="noopener">KDevelop</a> - A free, open source IDE.</li><li><a href="https://www.visualstudio.com/" target="_blank" rel="noopener">Microsoft Visual Studio</a> - An IDE from Microsoft.</li><li><a href="https://netbeans.org/" target="_blank" rel="noopener">NetBeans</a> - An IDE for developing primarily with Java, but also with other languages, in particular PHP, C/C++, and HTML5.</li><li><a href="http://www.qt.io/developers/" target="_blank" rel="noopener">Qt Creator</a> :zap: - A cross-platform C++, JavaScript and QML IDE which is part of the SDK for Qt.</li><li><a href="https://github.com/Andersbakken/rtags" target="_blank" rel="noopener">rtags</a> - A c/c++ client/server indexer with for integration with emacs based on clang.</li><li><a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a> - Developed by Apple.</li><li><a href="https://valloric.github.io/YouCompleteMe/" target="_blank" rel="noopener">YouCompleteMe</a> - YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim.</li><li><a href="https://github.com/cquery-project/cquery/" target="_blank" rel="noopener">cquery</a> - A C++ code completion engine for vscode, emacs, vim, etc.</li></ul><h2 id="Build-Systems"><a href="#Build-Systems" class="headerlink" title="Build Systems"></a>Build Systems</h2><ul><li><a href="https://bazel.build" target="_blank" rel="noopener">Bazel</a> - A multi-language, fast and scalable build system from Google. [Apache]</li><li><a href="https://github.com/rizsotto/Bear" target="_blank" rel="noopener">Bear</a> - A tool to generate compilation database for clang tooling. [GPLv3]</li><li><a href="https://github.com/clibs/clib" target="_blank" rel="noopener">clib</a> - Package manager for the C programming language. [MIT]</li><li><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> - Cross-platform free and open-source software for managing the build process of software using a compiler-independent method. [BSD]</li><li><a href="https://cppan.org/" target="_blank" rel="noopener">C++ Archive Network</a> - Cross-platform C++ Dependency Manager with a lot of packages available.</li><li><a href="https://github.com/pfultz2/cget" target="_blank" rel="noopener">Cget</a> - Cmake package retrieval. [Boost] <a href="http://cget.readthedocs.io" target="_blank" rel="noopener">website</a></li><li><a href="https://conan.io/" target="_blank" rel="noopener">Conan</a> - C/C++ Package Manager, open sourced. [MIT]</li><li><a href="https://github.com/iauns/cpm" target="_blank" rel="noopener">CPM</a> - A C++ Package Manager based on CMake and Git.</li><li><a href="http://www.fastbuild.org/docs/home.html" target="_blank" rel="noopener">FASTBuild</a> - High performance, open-source build system supporting highly scalable compilation, caching and network distribution.</li><li><a href="https://www.github.com/ruslo/hunter" target="_blank" rel="noopener">Hunter</a> - CMake driven cross-platform package manager for C++. [BSD-2]</li><li><a href="http://mesonbuild.com" target="_blank" rel="noopener">MesonBuild</a> - An open source build system meant to be both extremely fast, and, even more importantly, as user friendly as possible.</li><li><a href="https://ninja-build.org/" target="_blank" rel="noopener">Ninja</a> - A small build system with a focus on speed.</li><li><a href="http://www.scons.org/" target="_blank" rel="noopener">Scons</a> - A software construction tool configured with a Python script.</li><li><a href="http://www.sconsolidator.com/" target="_blank" rel="noopener">Sconsolidator</a> - Scons build system integration for Eclipse CDT.</li><li><a href="https://spack.io/" target="_blank" rel="noopener">Spack</a> - A flexible package manager that supports multiple versions, configurations, platforms, and compilers. [Apache-2.0/MIT]</li><li><a href="https://github.com/deplinenoise/tundra" target="_blank" rel="noopener">tundra</a> - High-performance code build system designed to give the best possible incremental build times even for very large software projects.</li><li><a href="http://gittup.org/tup/" target="_blank" rel="noopener">tup</a> - File-based build system that monitors in the background for changed files.</li><li><a href="http://premake.github.io" target="_blank" rel="noopener">Premake</a> - A tool configured with a Lua script to generate project files for Visual Studio, GNU Make, Xcode, Code::Blocks, and more across Windows, Mac OS X, and Linux.</li><li><a href="https://github.com/microsoft/vcpkg" target="_blank" rel="noopener">Vcpkg</a> - C++ library manager for Windows, Linux, and MacOS. [MIT]</li><li><a href="https://github.com/waf-project/waf" target="_blank" rel="noopener">waf</a> - Python-based framework for configuring, compiling and installing applications. [BSD] <a href="https://waf.io/" target="_blank" rel="noopener">website</a></li><li><a href="https://xmake.io/" target="_blank" rel="noopener">XMake</a> - A C/C++ cross-platform build utility based on Lua. [Apache]</li></ul><h2 id="Static-Code-Analysis"><a href="#Static-Code-Analysis" class="headerlink" title="Static Code Analysis"></a>Static Code Analysis</h2><p><em>List of tools for improving quality and reducing defects by code analysis</em></p><ul><li><a href="http://cppcheck.sourceforge.net/" target="_blank" rel="noopener">Cppcheck</a> - A tool for static C/C++ code analysis. - <a href="https://github.com/danmar/cppcheck" target="_blank" rel="noopener">source</a></li><li><a href="https://www.cppdepend.com/" target="_blank" rel="noopener">CppDepend</a> - Simplifies managing a complex C/C++ code base by analyzing and visualizing code dependencies, by defining design rules, by doing impact analysis, and comparing different versions of the code.</li><li><a href="https://github.com/cpplint/cpplint" target="_blank" rel="noopener">cpplint</a> - A C++ style checker following Google’s C++ style guide.</li><li><a href="http://www.viva64.com/en/pvs-studio/" target="_blank" rel="noopener">PVS-Studio</a> - A tool for bug detection in the source code of programs, written in C, C++ and C#.</li><li><a href="https://github.com/tomtom-international/cpp-dependencies" target="_blank" rel="noopener">cpp-dependencies</a> - Tool to check C++ #include dependencies (dependency graphs created in .dot format). [Apache]</li><li><a href="https://github.com/include-what-you-use/include-what-you-use" target="_blank" rel="noopener">include-what-you-use</a> - A tool for use with clang to analyze includes in C and C++ source files. <a href="https://include-what-you-use.org/" target="_blank" rel="noopener">website</a></li><li><a href="https://github.com/facebook/infer" target="_blank" rel="noopener">Infer</a> - A static analyzer for Java, C and Objective-C. [BSD]</li><li><a href="http://oclint.org/" target="_blank" rel="noopener">OCLint</a> - A static source code analysis tool to improve quality and reduce defects for C, C++ and Objective-C. - <a href="https://github.com/oclint/oclint" target="_blank" rel="noopener">source</a></li><li><a href="http://clang-analyzer.llvm.org/index.html" target="_blank" rel="noopener">Clang Static Analyzer</a> - A source code analysis tool that finds bugs in C, C++, and Objective-C programs.</li><li><a href="http://linticator.com" target="_blank" rel="noopener">Linticator</a> - Eclipse CDT integration of Pc-/FlexeLint.</li><li><a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C.2FC.2B.2B" target="_blank" rel="noopener">List of tools for static code analysis</a> - A list of tools for static code analysis from Wikipedia.</li></ul><h2 id="Coding-Style-Tools"><a href="#Coding-Style-Tools" class="headerlink" title="Coding Style Tools"></a>Coding Style Tools</h2><ul><li><a href="http://astyle.sourceforge.net/" target="_blank" rel="noopener">Artistic Style</a> - A tool to format C/C++/C#/Obj-C/Java code. Also known as astyle.</li><li><a href="http://clang.llvm.org/docs/ClangFormat.html" target="_blank" rel="noopener">ClangFormat</a> - A tool to format C/C++/Obj-C code.</li><li><a href="http://clang.llvm.org/extra/clang-tidy.html" target="_blank" rel="noopener">Clang-Tidy</a> - Clang-based C++ linter tool.</li><li><a href="https://github.com/bengardner/uncrustify" target="_blank" rel="noopener">Uncrustify</a> - Code beautifier.</li></ul><h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><p><em>Various resources, such as books, websites, and articles for improving your C++ development skills and knowledge.</em></p><h2 id="API-Design"><a href="#API-Design" class="headerlink" title="API Design"></a>API Design</h2><ul><li><a href="http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/" target="_blank" rel="noopener">Beautiful Native Libraries</a></li><li><a href="https://doc.qt.io/archives/qq/qq13-apis.html" target="_blank" rel="noopener">Designing Qt-Style C++ APIs</a></li></ul><h2 id="Articles"><a href="#Articles" class="headerlink" title="Articles"></a>Articles</h2><p><em>Fantastic C++ related articles.</em></p><ul><li><a href="https://github.com/CppCon/CppCon2018" target="_blank" rel="noopener">CppCon 2018 Presentation Materials</a> - CppCon 2018 Presentation Materials.</li><li><a href="https://github.com/CppCon/CppCon2017" target="_blank" rel="noopener">CppCon 2017 Presentation Materials</a> - CppCon 2017 Presentation Materials.</li><li><a href="https://github.com/CppCon/CppCon2016" target="_blank" rel="noopener">CppCon 2016 Presentation Materials</a> - CppCon 2016 Presentation Materials.</li><li><a href="https://github.com/CppCon/CppCon2015" target="_blank" rel="noopener">CppCon 2015 Presentation Materials</a> - CppCon 2015 Presentation Materials.</li><li><a href="https://github.com/CppCon/CppCon2014" target="_blank" rel="noopener">CppCon 2014 Presentation Materials</a> - CppCon 2014 Presentation Materials.</li><li><a href="https://github.com/boostcon/cppnow_presentations_2018" target="_blank" rel="noopener">C++Now 2018 Presentations</a> - Presentation materials presented at C++Now 2018.</li><li><a href="https://github.com/boostcon/cppnow_presentations_2017" target="_blank" rel="noopener">C++Now 2017 Presentations</a> - Presentation materials presented at C++Now 2017.</li><li><a href="https://github.com/boostcon/cppnow_presentations_2016" target="_blank" rel="noopener">C++Now 2016 Presentations</a> - Presentation materials presented at C++Now 2016.</li><li><a href="https://github.com/boostcon/cppnow_presentations_2015" target="_blank" rel="noopener">C++Now 2015 Presentations</a> - Presentation materials presented at C++Now 2015.</li><li><a href="https://github.com/boostcon/cppnow_presentations_2014" target="_blank" rel="noopener">C++Now 2014 Presentations</a> - Presentation materials presented at C++Now 2014.</li><li><a href="https://github.com/boostcon/cppnow_presentations_2013" target="_blank" rel="noopener">C++Now 2013 Presentations</a> - Presentation materials presented at C++Now 2013.</li><li><a href="https://github.com/boostcon/cppnow_presentations_2012" target="_blank" rel="noopener">C++Now 2012 Presentations</a> - Presentation materials presented at C++Now 2012.</li></ul><h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><p><em>Fantastic C or C++ related books.</em></p><ul><li><a href="https://github.com/fffaraz/awesome-cpp/blob/master/books.md" target="_blank" rel="noopener">List of Free C or C++ Books</a></li><li><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#c" target="_blank" rel="noopener">Free C Books</a> - vhf/free-programming-books/C.</li><li><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#c-1" target="_blank" rel="noopener">Free C++ Books</a> - vhf/free-programming-books/C++.</li><li><a href="https://github.com/lefticus/cppbestpractices" target="_blank" rel="noopener">cppbestpractices</a> - Collaborative Collection of C++ Best Practices.</li></ul><h2 id="Coding-Style"><a href="#Coding-Style" class="headerlink" title="Coding Style"></a>Coding Style</h2><ul><li><a href="https://github.com/isocpp/CppCoreGuidelines" target="_blank" rel="noopener">C++ Core Guidelines</a> - “Official” set of C++ guidelines, reviewed by the author of C++.</li><li><a href="http://www.chromium.org/developers/coding-style/cpp-dos-and-donts" target="_blank" rel="noopener">C++ Dos and Don’ts</a> - The Chromium Projects &gt; For Developers &gt; Coding Style &gt; C++ Dos and Don’ts.</li><li><a href="https://github.com/google/styleguide" target="_blank" rel="noopener">google-styleguide</a> - Style guides for Google-originated open-source projects.</li><li><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google C++ Style Guide</a></li><li><a href="http://www.gnu.org/prep/standards/standards.html" target="_blank" rel="noopener">GNU Coding Standard</a></li><li><a href="https://www.kernel.org/doc/Documentation/process/coding-style.rst" target="_blank" rel="noopener">Linux kernel coding style</a></li><li><a href="http://llvm.org/docs/CodingStandards.html" target="_blank" rel="noopener">LLVM Coding Standards</a></li></ul><h2 id="Podcasts"><a href="#Podcasts" class="headerlink" title="Podcasts"></a>Podcasts</h2><ul><li><a href="http://cppcast.com" target="_blank" rel="noopener">CppCast</a> - The first podcast by C++ developers for C++ developers.</li><li><a href="http://cpp.chat" target="_blank" rel="noopener">CppChat</a> - A (sometimes) weekly look at what’s going on in the world of C++ chatting with a guest from the community.</li></ul><h2 id="Talks"><a href="#Talks" class="headerlink" title="Talks"></a>Talks</h2><ul><li><a href="https://www.youtube.com/user/CppCon/videos" target="_blank" rel="noopener">CppCon Talks</a> :zap: - The C++ conference.</li><li><a href="https://github.com/SuperV1234/cppcon2014" target="_blank" rel="noopener">Quick game development with C++11/C++14</a> - CppCon 2014 talk by Vittorio Romeo.</li><li><a href="https://github.com/ldionne/hana-cppnow-2015" target="_blank" rel="noopener">Presentation on Hana for C++Now 2015</a></li></ul><h2 id="Videos"><a href="#Videos" class="headerlink" title="Videos"></a>Videos</h2><p><em>Fantastic C or C++ related videos.</em></p><ul><li><a href="https://github.com/fffaraz/awesome-cpp/blob/master/videos.md" target="_blank" rel="noopener">List of C or C++ YouTube Videos</a></li><li><a href="https://www.youtube.com/playlist?list=PLCB9F975ECF01953C" target="_blank" rel="noopener">Awesome C Programming Tutorials in Hi Def [HD]</a> - A collection of detailed C Programming Language Tutorials for Beginners and New Programmers.</li><li><a href="https://www.youtube.com/playlist?list=PL2F919ADECA5E39A6" target="_blank" rel="noopener">C++</a> - by VoidRealms.</li><li><a href="https://www.youtube.com/playlist?list=PL2D1942A4688E9D63" target="_blank" rel="noopener">C++ Qt Programming</a> - by VoidRealms.</li><li><a href="https://www.youtube.com/playlist?list=PLAE85DE8440AA6B83" target="_blank" rel="noopener">C++ Programming Tutorials Playlist</a> - TheNewBoston Official Buckys C++ Programming Tutorials Playlist.</li><li><a href="https://www.youtube.com/playlist?list=PLF541C2C1F671AEF6" target="_blank" rel="noopener">C++ Programming Tutorials from thenewboston</a> - These are all of thenewboston’s C++ programming tutorials.</li><li><a href="https://www.youtube.com/playlist?list=PLD0D54219E5F2544D" target="_blank" rel="noopener">C++ GUI with Qt Playlist</a> - Official Playlist for thenewboston C++ GUI with Qt tutorials.</li><li><a href="https://www.youtube.com/playlist?list=PL78280D6BE6F05D34" target="_blank" rel="noopener">C Programming Tutorials</a> - All of TheNewBoston’s C programming tutorials are right here.</li><li><a href="https://www.youtube.com/user/BoQianTheProgrammer/playlists" target="_blank" rel="noopener">Bo Qian’s playlist</a> - Boost Library, C++ Standard Library, Modern C++, Advanced C++, Advanced STL, …</li></ul><h2 id="Websites"><a href="#Websites" class="headerlink" title="Websites"></a>Websites</h2><p><em>Useful C or C++ related websites.</em></p><ul><li><a href="https://isocpp.org/" target="_blank" rel="noopener">Standard C++</a> :zap: - News, Status &amp; Discussion about Standard C++.</li><li><a href="http://cppcon.org/" target="_blank" rel="noopener">CppCon</a> - The C++ Conference.</li><li><a href="http://cppreference.com/" target="_blank" rel="noopener">C++ reference</a> - C++98, C++03, C++11, C++14 reference.</li><li><a href="http://www.cplusplus.com/" target="_blank" rel="noopener">cplusplus.com</a> - The C++ Resources Network.</li><li><a href="http://c-faq.com/" target="_blank" rel="noopener">C FAQ</a> - C frequently asked questions.</li><li><a href="http://www.parashift.com/c++-faq/" target="_blank" rel="noopener">C++ FAQ</a> - C++ frequently asked questions.</li><li><a href="http://yosefk.com/c++fqa/" target="_blank" rel="noopener">C++ FQA Lite</a> - C++ frequently questioned answers.</li><li><a href="http://www.gotw.ca/gotw/" target="_blank" rel="noopener">Guru of the Week</a> - A regular series of C++ programming problems created and written by Herb Sutter.</li><li><a href="http://meetingcpp.com/" target="_blank" rel="noopener">Meeting C++</a></li><li><a href="http://q.viva64.com/" target="_blank" rel="noopener">C++ Quiz</a> - C++ quiz in which you propose to find errors in code fragments of open source projects.</li><li><a href="https://www.udemy.com/topic/C-plus-plus-tutorials/" target="_blank" rel="noopener">Udemy C++ Courses and Tutorials</a></li><li><a href="http://cpphints.com/" target="_blank" rel="noopener">C++ Hints</a> - Every business day hints about most often C++ mistakes and ways to solve them from PVS-Studio Team.</li><li><a href="https://hackr.io/tutorials/learn-c-plus-plus" target="_blank" rel="noopener">C++ tutorial</a> - A user ranked online tutorial bank site displaying multiple courses to learn C++ from.</li></ul><h2 id="Weblogs"><a href="#Weblogs" class="headerlink" title="Weblogs"></a>Weblogs</h2><p><em>Useful C or C++ related weblogs.</em></p><ul><li><a href="https://codingforspeed.com/" target="_blank" rel="noopener">Coding For Speed</a> - Coding For Speed DOT COM, Less Execution Time.</li><li><a href="http://ericniebler.com/" target="_blank" rel="noopener">Eric Niebler</a></li><li><a href="https://blog.feabhas.com/" target="_blank" rel="noopener">Sticky Bits</a></li><li><a href="http://pfultz2.com/blog/" target="_blank" rel="noopener">Paul Fultz II’s Blog</a></li><li><a href="http://ridiculousfish.com/blog/posts/will-it-optimize.html" target="_blank" rel="noopener">ridiculousfish</a> - Will It Optimize?</li><li><a href="http://blog.regehr.org/" target="_blank" rel="noopener">Embedded in Academia</a></li><li><a href="https://arne-mertz.de/" target="_blank" rel="noopener">Simplify C++</a></li><li><a href="https://www.fluentcpp.com/" target="_blank" rel="noopener">Fluent C++</a> </li><li><a href="https://www.bfilipek.com/?m=1" target="_blank" rel="noopener">Bartek’s Coding Blog</a></li><li><a href="https://kennykerr.ca/articles/" target="_blank" rel="noopener">Kenny Kerr</a></li><li><a href="https://herbsutter.com/gotw/" target="_blank" rel="noopener">Sutter’s Mill</a></li><li><a href="https://thoughts-on-cpp.com/" target="_blank" rel="noopener">thoughts on cpp</a></li><li><a href="https://vorbrodt.blog/" target="_blank" rel="noopener">Vorbrodt’s C++ Blog</a></li><li><a href="https://foonathan.net/index.html" target="_blank" rel="noopener">foonathan::blog()</a></li></ul><h2 id="Other-Awesome-Projects"><a href="#Other-Awesome-Projects" class="headerlink" title="Other Awesome Projects"></a>Other Awesome Projects</h2><p><em>Collection of useful codes, snippets, …</em></p><ul><li><a href="https://github.com/xtaci/algorithms" target="_blank" rel="noopener">algorithms</a> - Algorithms &amp; Data Structures in C++.</li><li><a href="https://github.com/fragglet/c-algorithms" target="_blank" rel="noopener">c-algorithms</a> - C algorithms library.</li><li><a href="https://github.com/juniandotnet/cpp-awesome-pack" target="_blank" rel="noopener">C++ Awesome Pack</a> - Contains some awesome c++ codes, packed in one.</li><li><a href="https://github.com/Bhupesh-V/30-seconds-of-cpp" target="_blank" rel="noopener">30 Seconds of C++</a></li></ul><h1 id="Other-Awesome-Lists"><a href="#Other-Awesome-Lists" class="headerlink" title="Other Awesome Lists"></a>Other Awesome Lists</h1><p><em>Other amazingly awesome lists</em></p><ul><li><a href="https://github.com/jnv/lists" target="_blank" rel="noopener">lists</a> - List of (awesome) lists curated on GitHub.</li><li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="noopener">awesome-awesomeness</a> - A curated list of awesome awesomeness.</li><li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">awesome</a> :zap: - A curated list of awesome lists.</li><li><a href="https://github.com/MattPD/cpplinks" target="_blank" rel="noopener">C++ links</a> - A categorized list of C++ resources.</li><li><a href="https://getawesomeness.herokuapp.com/get/cpp" target="_blank" rel="noopener">Awesome C++</a> - getAwesomeness()’s mirror.</li><li><a href="https://cpp.libhunt.com/" target="_blank" rel="noopener">Awesome C++</a> - LibHunt’s mirror.</li><li><a href="https://notabug.org/koz.ross/awesome-c" target="_blank" rel="noopener">Awesome C</a> 1</li><li><a href="https://github.com/aleksandar-todorovic/awesome-c" target="_blank" rel="noopener">Awesome C</a> 2</li><li><a href="https://github.com/fenbf/AwesomePerfCpp" target="_blank" rel="noopener">AwesomePerfCpp</a> - A curated list of awesome C/C++ performance optimization resources.</li><li><a href="https://github.com/vhf/free-programming-books" target="_blank" rel="noopener">free-programming-books</a> - List of Freely Available Programming Books.</li><li><a href="http://inqlude.org/" target="_blank" rel="noopener">Inqlude</a> - The Qt library archive.</li><li><a href="https://github.com/papers-we-love/papers-we-love" target="_blank" rel="noopener">papers-we-love</a> - Papers from the computer science community to read and discuss.</li><li><a href="https://github.com/tayllan/awesome-algorithms" target="_blank" rel="noopener">awesome-algorithms</a> - A curated list of awesome places to learn and/or practice algorithms.</li><li><a href="https://github.com/JanVanRyswyck/awesome-talks" target="_blank" rel="noopener">awesome-talks</a> - A lot of screencasts, recordings of user group gatherings and conference talks.</li><li><a href="https://github.com/karan/Projects" target="_blank" rel="noopener">Projects</a> - A list of practical projects that anyone can solve in any programming language.</li><li><a href="https://github.com/MaximAbramchuck/awesome-interviews" target="_blank" rel="noopener">Awesome interview questions</a> - A list of lists of interview questions for the most popular technologies, including C and C++.</li><li><a href="https://github.com/nothings/single_file_libs" target="_blank" rel="noopener">nothings/single_file_libs</a> :zap: - List of single-file C/C++ libraries.</li></ul><h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>Please take a quick gander at the <a href="https://github.com/fffaraz/awesome-cpp/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">contribution guidelines</a> for details.<br>Thanks to all <a href="https://github.com/fffaraz/awesome-cpp/graphs/contributors" target="_blank" rel="noopener">contributors</a>; you rock!</p><h4 id="If-you-see-a-project-or-link-here-that-is-no-longer-maintained-or-is-not-a-good-fit-please-submit-a-pull-request-to-improve-this-document-Thank-you"><a href="#If-you-see-a-project-or-link-here-that-is-no-longer-maintained-or-is-not-a-good-fit-please-submit-a-pull-request-to-improve-this-document-Thank-you" class="headerlink" title="If you see a project or link here that is no longer maintained or is not a good fit, please submit a pull request to improve this document. Thank you!"></a><em>If you see a project or link here that is no longer maintained or is not a good fit, please submit a pull request to improve this document. Thank you!</em></h4><ul><li><a href="https://www.youtube.com/watch?v=TJHgp1ugKGM" target="_blank" rel="noopener">Modern C++: What You Need to Know</a> - This talk will give an update on recent progress and near-future directions for C++, both at Microsoft and across the industry. This is a great introduction to the current state of the language, including a glimpse into the future of general purpose, performance-intensive, power-friendly, powerful native programming. [Apr 7, 2014]</li><li><a href="https://www.youtube.com/watch?v=86xWVb4XIyE" target="_blank" rel="noopener">Bjarne Stroustrup - The Essence of C++</a> - Bjarne Stroustrup, creator and developer of C++, delivers his talk entitled, The Essence of C++. Stroustrup has held distinguished posts at Texas A&amp;M University and spent significant time in the Computer Science Departments of Cambridge, Columbia and Princeton. [May 6, 2014]</li></ul><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><ul><li><a href="http://home.netcom.com/~tjensen/ptr/pointers.htm" target="_blank" rel="noopener">A Tutorial on Pointers and Arrays in C</a></li><li><a href="http://www.advancedlinuxprogramming.com/" target="_blank" rel="noopener">Advanced Linux Programming</a></li><li><a href="http://beej.us/guide/bgc/" target="_blank" rel="noopener">Beej’s Guide to C Programming</a></li><li><a href="http://beej.us/guide/bgnet/" target="_blank" rel="noopener">Beej’s Guide to Network Programming</a></li><li><a href="http://www.buildyourownlisp.com/" target="_blank" rel="noopener">Build Your Own Lisp</a></li><li><a href="http://en.wikibooks.org/wiki/Programming%3AC" target="_blank" rel="noopener">C Programming - Wikibooks</a></li><li><a href="http://www.slideshare.net/olvemaudal/deep-c" target="_blank" rel="noopener">Deep C</a></li><li><a href="http://cslibrary.stanford.edu/101/EssentialC.pdf" target="_blank" rel="noopener">Essential C</a> (PDF)</li><li><a href="http://c.learncodethehardway.org/book/" target="_blank" rel="noopener">Learn C the hard way</a></li><li><a href="http://www.planetpdf.com/codecuts/pdfs/ooc.pdf" target="_blank" rel="noopener">Object Oriented Programming in C</a> (PDF)</li><li><a href="http://publications.gbdirect.co.uk/c_book/" target="_blank" rel="noopener">The C book</a></li><li><a href="http://www.finseth.com/craft/" target="_blank" rel="noopener">The Craft of Text Editing or A Cookbook for an Emacs</a> - Craig A. Finseth</li><li><a href="http://www.crasseux.com/books/ctut.pdf" target="_blank" rel="noopener">The GNU C Programming Tutorial</a></li><li><a href="http://www.knosof.co.uk/cbook/cbook.html" target="_blank" rel="noopener">The New C Standard - An Annotated Reference</a></li><li><a href="http://www.coranac.com/tonc/text/toc.htm" target="_blank" rel="noopener">TONC GBA Programming - Game Boy Advance Development</a></li><li><a href="http://www.bitsinthewind.com/about-dac/publications/using-c-on-the-unix-system" target="_blank" rel="noopener">Using C on the UNIX System - David A. Curry</a></li></ul><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><ul><li><a href="http://cppannotations.sourceforge.net/" target="_blank" rel="noopener">C++ Annotations</a> </li><li><a href="http://staff.ppu.edu/dkhalid/O&#39;Reilly%20-%20C++%20Cookbook%20%282007%29.pdf" target="_blank" rel="noopener">C++ Cookbook</a> (PDF)</li><li><a href="http://www.computer-books.us/cpp_0010.php" target="_blank" rel="noopener">C++ GUI Programming With Qt 3</a></li><li><a href="http://www.syncfusion.com/resources/techportal/ebooks/cplusplus" target="_blank" rel="noopener">C++ Succinctly, Syncfusion</a> (PDF, Kindle) <em>(Just fill the fields with any values)</em></li><li><a href="http://www.stanford.edu/class/cs106x/" target="_blank" rel="noopener">CS106X Programming Abstractions in C++</a></li><li><a href="http://www.brpreiss.com/books/opus4/index.html" target="_blank" rel="noopener">Data Structures and Algorithms with Object-Oriented Design Patterns in C++</a></li><li><a href="http://finance.bi.no/~bernt/gcc_prog/recipes/" target="_blank" rel="noopener">Financial Numerical Recipes in C++</a> - Bernt Arne Ødegaard</li><li><a href="http://gameprogrammingpatterns.com/" target="_blank" rel="noopener">Game Programming Patterns</a></li><li><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">Google’s C++ Style Guide</a></li><li><a href="http://greenteapress.com/thinkcpp/index.html" target="_blank" rel="noopener">How To Think Like a Computer Scientist: C++ Version</a> - Allen B. Downey</li><li><a href="http://ptgmedia.pearsoncmg.com/images/9780131879058/downloads/0131879057_Ezust_book.pdf" target="_blank" rel="noopener">Introduction to Design Patterns in C++ with Qt</a></li><li><a href="http://www.learncpp.com/" target="_blank" rel="noopener">Learn C++.</a> (PDF, Online)</li><li><a href="http://www.jjj.de/fxt/fxtbook.pdf" target="_blank" rel="noopener">Matters Computational: Ideas, Algorithms, Source Code, by Jorg Arndt</a> (PDF)</li><li><a href="http://opendatastructures.org/ods-cpp.pdf" target="_blank" rel="noopener">Open Data Structures (In C++)</a> (PDF)</li><li><a href="http://cis.stvincent.edu/html/tutorials/swd/" target="_blank" rel="noopener">Software Design Using C++</a> - Br. David Carlson and Br. Isidore Minerd</li><li><a href="http://www.agner.org/optimize/" target="_blank" rel="noopener">Software optimization resources by Agner Fog</a></li><li><a href="http://en.highscore.de/cpp/boost" target="_blank" rel="noopener">The Boost C++ libraries</a></li><li><a href="http://rooksguide.org/2013/11/26/version-1-0-is-out/" target="_blank" rel="noopener">The Rook’s Guide to C++</a> (PDF)</li><li><a href="http://www.mindviewinc.com/downloads/TICPP-2nd-ed-Vol-one.zip" target="_blank" rel="noopener">Thinking in C++, Second Edition, Vol. 1.</a> <a href="http://www.mindviewinc.com/downloads/TICPP-2nd-ed-Vol-two.zip" target="_blank" rel="noopener">(Vol. 2)</a> - Bruce Eckel</li><li>Also see: <a href="https://stackoverflow.com/a/388282" target="_blank" rel="noopener">The Definitive C++ Book Guide and List</a></li><li><a href="https://www.javatpoint.com/cpp-oops-concepts" target="_blank" rel="noopener">Object Oriented Programmming</a></li></ul><h2 id="Minor-projects"><a href="#Minor-projects" class="headerlink" title="Minor projects"></a>Minor projects</h2><p>A list of lesser-known C or C++ libraries, tools, and resources.</p><ul><li><a href="https://github.com/jeaye/jest" target="_blank" rel="noopener">jest</a> - A sane and minimal C++14 unit test framework. [MIT]</li><li><a href="https://github.com/PetteriAimonen/libfixmath" target="_blank" rel="noopener">libfixmath</a> - A Cross Platform Fixed Point (Q16.16) Maths Library. [MIT]</li><li><a href="https://github.com/badair/callable_traits" target="_blank" rel="noopener">CallableTraits</a> - Traits and metafunctions for callable types. [Boost]</li></ul><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul><li><a href="#Talks">Talks</a></li><li><a href="#articles">Articles</a></li><li><a href="#sitesblogs">Sites/Blogs</a></li><li><a href="#tools">Tools</a></li><li><a href="#libraries">Libraries</a></li><li><a href="#books">Books</a></li><li><a href="#about">About</a></li></ul><h2 id="Talks-1"><a href="#Talks-1" class="headerlink" title="Talks"></a>Talks</h2><p>2013:</p><ul><li>Going Native 2013 - <a href="https://www.youtube.com/watch?v=MvFj8qo1iuA" target="_blank" rel="noopener">Andrei Alexandrescu, Writing Quick Code in C++, Quickly</a></li><li>Going Native 2013 - <a href="https://www.youtube.com/watch?v=LDPMpc-ENqY" target="_blank" rel="noopener">Stephan T. Lavavej, rand() Considered Harmful</a></li><li>Going Native 2013 - <a href="https://www.youtube.com/watch?v=qH6sSOr-yk8" target="_blank" rel="noopener">Sean Parent, C++ Seasoning</a></li></ul><p>2014:</p><ul><li>code::dive conference 2014 <a href="https://www.youtube.com/watch?v=WDIkqP4JbkE" target="_blank" rel="noopener">Scott Meyers: Cpu Caches and Why You Care</a>(<a href="http://www.aristeia.com/TalkNotes/codedive-CPUCachesHandouts.pdf" target="_blank" rel="noopener">slides</a>)</li><li>CppCon 2014 <a href="https://www.youtube.com/watch?v=Qq_WaiwzOtI" target="_blank" rel="noopener">Andrei Alexandrescu “Optimization Tips - Mo’ Hustle Mo’ Problems”</a></li><li>CppCon 2014 <a href="https://www.youtube.com/watch?v=rX0ItVEVjHc" target="_blank" rel="noopener">Mike Acton “Data-Oriented Design and C++” </a></li><li>CppCon 2014 <a href="https://www.youtube.com/watch?v=fHNmRkzxHWs" target="_blank" rel="noopener">Chandler Carruth “Efficiency with Algorithms, Performance with Data Structures”</a></li></ul><p>2015:</p><ul><li>code::dive conference 2015 <a href="https://www.youtube.com/watch?v=vrfYLlR8X8k" target="_blank" rel="noopener">Andrei Alexandrescu - Writing Fast Code I</a> (<a href="http://codedive.pl/wp-content/uploads/2016/01/FastCode-handouts.pdf" target="_blank" rel="noopener">slides</a>)</li><li>code::dive conference 2015 <a href="https://www.youtube.com/watch?v=9tvbz8CSI8M" target="_blank" rel="noopener">Andrei Alexandrescu - Writing Fast Code II</a> (<a href="http://codedive.pl/wp-content/uploads/2016/01/FastCode-handouts.pdf" target="_blank" rel="noopener">slides</a>)</li><li>CppCon 2015 <a href="https://www.youtube.com/watch?v=nXaxk27zwlk" target="_blank" rel="noopener">Chandler Carruth, “Tuning C++: Benchmarks, and CPUs, and Compilers! Oh My!”</a></li><li>CppCon 2015 <a href="https://www.youtube.com/watch?v=zWxSZcpeS8Q" target="_blank" rel="noopener">Bryce Adelstein-Lelbach “Benchmarking C++ Code”</a></li><li>Meeting C++ 2015 <a href="https://www.youtube.com/watch?v=FnGCDLhaxKU" target="_blank" rel="noopener">Understanding Compiler Optimization - Chandler Carruth - Opening Keynote</a></li></ul><p>2016:</p><ul><li>ACCU 2016 <a href="https://www.youtube.com/watch?v=AxnotgLql0k" target="_blank" rel="noopener">‘Fastware’ - Andrei Alexandrescu</a></li><li>C++Now 2016 <a href="https://www.youtube.com/watch?v=c-hZpChQKe0" target="_blank" rel="noopener">Timur Doumler: C++ Performance in Practice: Align, Vectorise, Cache, Jump!</a> (<a href="https://github.com/boostcon/cppnow_presentations_2016/blob/master/03_friday/cpp_performance_in_practice_align_vectorise_cache_jump.pdf" target="_blank" rel="noopener">slides</a>)</li><li>C++Now 2016 <a href="https://www.youtube.com/watch?v=0_FQIDEf7_Q" target="_blank" rel="noopener">David Stone: Exceptional Performance</a></li><li>C++Now 2016 <a href="https://www.youtube.com/watch?v=lNnBExDoNSQ" target="_blank" rel="noopener">Jason Turner: Practical Performance Practices</a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=BP6NxVxDQIs" target="_blank" rel="noopener">Timur Doumler “Want fast C++? Know your hardware!” </a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=uzF4u9KgUWI" target="_blank" rel="noopener">Jason Turner “Practical Performance Practices” </a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=vElZc6zSIXM" target="_blank" rel="noopener">Chandler Carruth “High Performance Code 201: Hybrid Data Structures” </a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=qcD2Zj9GgI4" target="_blank" rel="noopener">McKenney “Beyond the Issaquah Challenge: High-Performance Scalable Complex Updates”</a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=uDNb8JL0vv8" target="_blank" rel="noopener">D. Dechev &amp; D. Zhang “High Performance C++ Concurrent Transactional Data Structures”</a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=wBER1R8YyGY" target="_blank" rel="noopener">Matthew Bentley “Colonies, performance and why you should care” </a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=aXj_DsIx1xs" target="_blank" rel="noopener">Christiaan Pretorius “Cache Optimized Hash Tables” </a></li><li>CppCon 2016 <a href="https://www.youtube.com/watch?v=w5Z4JlMJ1VQ" target="_blank" rel="noopener">Tim Haines “Improving Performance Through Compiler Switches…” </a></li></ul><h2 id="Articles-1"><a href="#Articles-1" class="headerlink" title="Articles"></a>Articles</h2><ul><li><a href="https://www.facebook.com/notes/facebook-engineering/three-optimization-tips-for-c/10151361643253920/" target="_blank" rel="noopener">Three Optimization Tips for C++</a>, by Andrei Alexandrescu, @Facebook Engineering</li><li><a href="https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html" target="_blank" rel="noopener">why GNU grep is fast</a></li><li><a href="http://aras-p.info/blog/2016/08/02/Hash-Functions-all-the-way-down/" target="_blank" rel="noopener">Hash Functions all the way down</a> from Aras-P, and the follow up <a href="http://aras-p.info/blog/2016/08/09/More-Hash-Function-Tests/" target="_blank" rel="noopener">here</a></li><li><a href="https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels/" target="_blank" rel="noopener">Why do CPUs have multiple cache levels?</a></li><li><a href="https://randomascii.wordpress.com/2015/09/24/etw-central/" target="_blank" rel="noopener">ETW Central</a> - by RandomASCII</li><li><a href="http://www.bfilipek.com/2016/01/micro-benchmarking-libraries-for-c.html" target="_blank" rel="noopener">Micro benchmarking libraries for C++ </a> - on Bartek’s blog</li><li><a href="http://www.bfilipek.com/2014/07/flexible-particle-system-how-to-start.html" target="_blank" rel="noopener">How to start with Software Optimization</a>, from Flexible Particle Experiments series, Bartek’s blog.</li><li><a href="http://supercomputingblog.com/optimization/taking-advantage-of-cache-coherence-in-your-programs/" target="_blank" rel="noopener">Taking advantage of cache coherence in your programs</a></li><li><a href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener">Gallery of Processor Cache Effects, C#</a></li><li><a href="https://realm.io/news/how-we-beat-cpp-stl-binary-search/" target="_blank" rel="noopener">How We Beat C++ STL Binary Search</a></li><li><a href="http://baptiste-wicht.com/posts/2012/12/cpp-benchmark-vector-list-deque.html" target="_blank" rel="noopener">C++ benchmark – std::vector VS std::list VS std::deque</a></li><li><a href="http://www.joshbarczak.com/blog/?p=525" target="_blank" rel="noopener">Container Study</a></li><li><a href="https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/assoc_performance_tests.html" target="_blank" rel="noopener">Associative-Container Performance Tests</a></li><li><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-performance" target="_blank" rel="noopener">C++ Core Guidelines, Performance section</a></li><li><a href="https://lefticus.gitbooks.io/cpp-best-practices/content/08-Considering_Performance.html" target="_blank" rel="noopener">C++ Best Practices, Performance section</a></li><li><a href="https://randomascii.wordpress.com/2012/05/20/thats-not-normalthe-performance-of-odd-floats/" target="_blank" rel="noopener">That’s Not Normal–the Performance of Odd Floats</a></li><li><a href="http://gernotklingler.com/blog/gprof-valgrind-gperftools-evaluation-tools-application-level-cpu-profiling-linux/" target="_blank" rel="noopener">gprof, Valgrind and gperftools – an evaluation of some tools for application level CPU profiling on Linux</a></li><li><a href="http://icl.cs.utk.edu/papi/overview/index.html" target="_blank" rel="noopener">The Performance API (PAPI) project</a></li><li><a href="https://crd.lbl.gov/departments/computer-science/PAR/research/roofline/" target="_blank" rel="noopener">Roofline Performance Model</a></li><li><a href="http://baremetalcode.blogspot.com/2011/10/c-timing-strategies-compared-in-windows.html" target="_blank" rel="noopener">C++ timing strategies compared (in Windows) </a> - from baremetalcode blog.</li><li><a href="https://nikitablack.github.io/2017/02/02/Data-Oriented-Design-by-example.html" target="_blank" rel="noopener">Simply about complex - Data Oriented Design by example</a></li><li><a href="http://bisqwit.iki.fi/story/howto/openmp/" target="_blank" rel="noopener">Guide into OpenMP: Easy multithreading programming for C++</a></li><li><a href="http://oldhandsblog.blogspot.bg/2016/09/c-optimization-bibliography.html" target="_blank" rel="noopener">C++ Optimization Bibliography - Kurt Guntheroth’s</a></li></ul><p>Manuals:</p><ul><li><a href="http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-optimization-manual.html" target="_blank" rel="noopener">Intel® 64 and IA-32 Architectures Optimization Reference Manual</a></li></ul><h2 id="Sites-Blogs"><a href="#Sites-Blogs" class="headerlink" title="Sites/Blogs"></a>Sites/Blogs</h2><ul><li><a href="http://www.agner.org/optimize/blog/" target="_blank" rel="noopener">Agner`s CPU blog</a></li><li><a href="http://www.agner.org/optimize/" target="_blank" rel="noopener">Agner’s Software optimization resources</a></li><li><a href="https://fgiesen.wordpress.com/" target="_blank" rel="noopener">The ryg blog</a></li><li><a href="https://randomascii.wordpress.com/" target="_blank" rel="noopener">Random ASCII</a></li><li><a href="https://rwwescott.wordpress.com/" target="_blank" rel="noopener">The Every Computer Performance Blog</a></li><li><a href="http://supercomputingblog.com/" target="_blank" rel="noopener">The Supercomputing Blog</a></li><li><a href="http://lemire.me/blog/" target="_blank" rel="noopener">Daniel Lemire’s blog</a></li><li><a href="http://0x80.pl/articles/index.html" target="_blank" rel="noopener">Wojciech Mula’s site: 0x80.pl - articles on performance, SIMD</a></li><li><a href="http://www.bfilipek.com" target="_blank" rel="noopener">Bartek’s programming blog</a></li></ul><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h3><ul><li><a href="http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/" target="_blank" rel="noopener">AMD Code XL</a></li><li><a href="http://www.codersnotes.com/sleepy/" target="_blank" rel="noopener">Very Sleepy</a></li><li><a href="http://www.pauldoo.com/proffy/" target="_blank" rel="noopener">Proffy</a></li><li><a href="https://msdn.microsoft.com/en-us/library/hh162945.aspx" target="_blank" rel="noopener">Windows Performance Toolkit - XPERF</a></li><li><a href="https://msdn.microsoft.com/en-us/magazine/dn973013.aspx" target="_blank" rel="noopener">Performance and Diagnostic Tools in Visual Studio 2015</a></li><li><a href="http://valgrind.org/" target="_blank" rel="noopener">Valgrind</a></li><li><a href="http://www.cs.uoregon.edu/research/tau/home.php" target="_blank" rel="noopener">TAU Performance System</a></li><li><a href="https://github.com/gperftools/gperftools" target="_blank" rel="noopener">Google Performance Tools (gperftools)</a></li><li><a href="https://perf.wiki.kernel.org/index.php/Tutorial" target="_blank" rel="noopener">Linux perf tools</a></li><li><a href="https://developer.nvidia.com/nvidia-visual-profiler" target="_blank" rel="noopener">NVIDIA Visual Profiler</a></li><li><a href="https://developer.qualcomm.com/software/snapdragon-profiler" target="_blank" rel="noopener">Qualcomm Snapdragon Profiler</a></li><li><a href="http://www.oracle.com/technetwork/server-storage/solarisstudio/features/performance-analyzer-2292312.html" target="_blank" rel="noopener">Oracle Solaris Studio Performance Analyzer</a></li><li><a href="http://oprofile.sourceforge.net/about/" target="_blank" rel="noopener">OProfile</a> for Linux</li></ul><h3 id="Paid"><a href="#Paid" class="headerlink" title="Paid"></a>Paid</h3><ul><li><a href="https://software.intel.com/en-us/intel-vtune-amplifier-xe" target="_blank" rel="noopener">Intel® VTune™</a></li><li><a href="https://software.intel.com/en-us/intel-advisor-xe" target="_blank" rel="noopener">Intel® Vectorization and Threading Advisor</a></li><li><a href="https://smartbear.com/product/aqtime-pro/overview/" target="_blank" rel="noopener">AQtime Pro, from SmartBear</a></li><li><a href="http://www.glowcode.com/summary1_gc.htm" target="_blank" rel="noopener">GlowCode</a></li></ul><h2 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h2><ul><li><a href="https://github.com/DigitalInBlue/Celero" target="_blank" rel="noopener">Celero micro-benchmarking library</a></li><li><a href="https://nonius.io" target="_blank" rel="noopener">Nonius library</a></li><li><a href="https://github.com/nickbruun/hayai" target="_blank" rel="noopener">Hayai micro benchmarking library</a>, <a href="https://bruun.co/2012/02/07/easy-cpp-benchmarking" target="_blank" rel="noopener">into article</a></li><li><a href="https://github.com/google/benchmark" target="_blank" rel="noopener">Google benchmark library</a></li></ul><h2 id="Books-1"><a href="#Books-1" class="headerlink" title="Books"></a>Books</h2><ul><li><a href="http://www.agner.org/optimize/optimizing_cpp.pdf" target="_blank" rel="noopener">PDF: optimizing C++</a> - by Agner Fog. FREE</li><li><a href="https://en.wikibooks.org/wiki/Optimizing_C%2B%2B" target="_blank" rel="noopener">Optimizing C++, WikiBooks</a> - FREE</li><li>The Software Optimization Cookbook: High Performance Recipes for IA-32 Platforms, 2nd Edition</li><li>Video Game Optimization, Eric Preisz</li><li>Optimized C++: Proven Techniques for Heightened Performance, Kurt Guntheroth</li><li>Power and Performance: Software Analysis and Optimization, Jim Kukunas</li><li>Systems Performance: Enterprise and the Cloud, Brendan Gregg </li><li>Every Computer Performance Book, Bob Wescott </li><li>C++ Concurrency in Action, Second Edition, Anthony Williams</li></ul><ul><li><p><a href></a> - .</p></li><li><p><a href="http://www.opengl.org/" target="_blank" rel="noopener">OpenGL</a> - (Open Graphics Library) is a cross-language, multi-platform application programming interface (API) for rendering 2D and 3D vector graphics.</p></li><li><p><a href="http://msdn.microsoft.com/en-us/library/bb384840.aspx" target="_blank" rel="noopener">DirectX</a> - Microsoft DirectX.</p></li><li><p><a href="http://www.chromium.org/blink" target="_blank" rel="noopener">Blink</a> - A web browser engine developed as part of the Chromium project.</p></li><li><p><a href="http://www.webkit.org/" target="_blank" rel="noopener">WebKit</a> - A layout engine software component for rendering web pages in web browsers.</p></li><li><p><a href="https://github.com/google/fruit" target="_blank" rel="noopener">Fruit</a> - A dependency injection framework for C++.</p></li><li><p><a href="https://mariadb.com/" target="_blank" rel="noopener">MariaDB</a> - A robust, scalable and reliable SQL server, designed to be a drop-in replacement for MySQL. [BSD]</p></li><li><a href>PostgreSQL</a> - A powerful object-relational database system. [PostgreSQL licence]</li><li><a href>Redis</a> - An advanced key-value store. [3-clause BSD].</li><li><a href>UnQLite</a> - A self-contained, serverless, zero-configuration, transactional NoSQL engine with a C interface. [FreeBSD]</li></ul><p><a href="http://www.cs.colorado.edu/~main/cs1300/doc/bgi/" target="_blank" rel="noopener">http://www.cs.colorado.edu/~main/cs1300/doc/bgi/</a></p><p><a href="https://www.enlightenment.org/p.php?p=about/efl" target="_blank" rel="noopener">https://www.enlightenment.org/p.php?p=about/efl</a><br><a href="https://github.com/stefanct/sglib" target="_blank" rel="noopener">https://github.com/stefanct/sglib</a><br><a href="http://itpp.sourceforge.net/" target="_blank" rel="noopener">http://itpp.sourceforge.net/</a></p><p><a href="http://www.catb.org/esr/structure-packing/" target="_blank" rel="noopener">http://www.catb.org/esr/structure-packing/</a><br><a href="http://books.cat-v.org/computer-science/c-programming-language/The.C.Programming.Language.2nd.Edition.pdf" target="_blank" rel="noopener">http://books.cat-v.org/computer-science/c-programming-language/The.C.Programming.Language.2nd.Edition.pdf</a><br><a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">https://graphics.stanford.edu/~seander/bithacks.html</a><br><a href="http://faculty.euc.ac.cy/scharalambous/csc131/books/C%20book%201.pdf" target="_blank" rel="noopener">http://faculty.euc.ac.cy/scharalambous/csc131/books/C%20book%201.pdf</a><br><a href="http://www.planetpdf.com/codecuts/pdfs/ooc.pdf" target="_blank" rel="noopener">http://www.planetpdf.com/codecuts/pdfs/ooc.pdf</a><br><a href="http://www.codeproject.com/Articles/6154/Writing-Efficient-C-and-C-Code-Optimization" target="_blank" rel="noopener">http://www.codeproject.com/Articles/6154/Writing-Efficient-C-and-C-Code-Optimization</a></p><hr><p>All libs in:<br><a href="https://github.com/Alexpux/MINGW-packages" target="_blank" rel="noopener">https://github.com/Alexpux/MINGW-packages</a><br><a href="http://en.cppreference.com/w/cpp/links/libs" target="_blank" rel="noopener">http://en.cppreference.com/w/cpp/links/libs</a></p><p><a href="https://github.com/clibs" target="_blank" rel="noopener">https://github.com/clibs</a><br><a href="https://github.com/clibs/clib/wiki/Packages" target="_blank" rel="noopener">https://github.com/clibs/clib/wiki/Packages</a></p><p><a href="https://github.com/rampantpixels" target="_blank" rel="noopener">https://github.com/rampantpixels</a><br><a href="https://github.com/rampantpixels/foundation_lib" target="_blank" rel="noopener">https://github.com/rampantpixels/foundation_lib</a><br><a href="https://github.com/rampantpixels/network_lib" target="_blank" rel="noopener">https://github.com/rampantpixels/network_lib</a></p><p><a href="https://github.com/stephenmathieson/http-get.c" target="_blank" rel="noopener">https://github.com/stephenmathieson/http-get.c</a><br><a href="https://github.com/Constellation/console-colors.c" target="_blank" rel="noopener">https://github.com/Constellation/console-colors.c</a><br><a href="https://github.com/jwerle/strsplit.c" target="_blank" rel="noopener">https://github.com/jwerle/strsplit.c</a></p><p><a href="https://github.com/psi-im" target="_blank" rel="noopener">https://github.com/psi-im</a><br><a href="https://github.com/psi-im/iris" target="_blank" rel="noopener">https://github.com/psi-im/iris</a><br><a href="https://github.com/psi-im/jdns" target="_blank" rel="noopener">https://github.com/psi-im/jdns</a><br><a href="https://github.com/psi-im/libpsi" target="_blank" rel="noopener">https://github.com/psi-im/libpsi</a></p><p>QUIC &amp; UDT</p><hr><p><a href="https://github.com/ellisonleao/magictools" target="_blank" rel="noopener">https://github.com/ellisonleao/magictools</a></p><p><a href="https://github.com/robbinfan/claire-protorpc" target="_blank" rel="noopener">https://github.com/robbinfan/claire-protorpc</a><br><a href="https://github.com/chen3feng/typhoon-blade" target="_blank" rel="noopener">https://github.com/chen3feng/typhoon-blade</a> - Buildsystem<br><a href="http://glm.g-truc.net/0.9.5/index.html" target="_blank" rel="noopener">http://glm.g-truc.net/0.9.5/index.html</a> - Math<br><a href="https://code.google.com/p/distcc/" target="_blank" rel="noopener">https://code.google.com/p/distcc/</a><br><a href="http://omniorb.sourceforge.net/" target="_blank" rel="noopener">http://omniorb.sourceforge.net/</a><br><a href="http://www.h323plus.org/" target="_blank" rel="noopener">http://www.h323plus.org/</a><br><a href="http://ufmod.sourceforge.net/" target="_blank" rel="noopener">http://ufmod.sourceforge.net/</a><br><a href="https://github.com/almalk454/wGUI" target="_blank" rel="noopener">https://github.com/almalk454/wGUI</a><br><a href="http://www.cs.fsu.edu/~engelen/soap.html" target="_blank" rel="noopener">http://www.cs.fsu.edu/~engelen/soap.html</a><br><a href="https://github.com/broadinstitute/gamgee" target="_blank" rel="noopener">https://github.com/broadinstitute/gamgee</a></p><p><a href="http://www.reddit.com/r/programming/" target="_blank" rel="noopener">http://www.reddit.com/r/programming/</a><br><a href="https://www.reddit.com/r/cprog/" target="_blank" rel="noopener">https://www.reddit.com/r/cprog/</a><br><a href="https://game-development.zeef.com/ellison.leao" target="_blank" rel="noopener">https://game-development.zeef.com/ellison.leao</a></p><p><a href="http://www.digilife.be/quickreferences/qrc/c%20reference%20card%20(ansi)%202.2.pdf" target="_blank" rel="noopener">http://www.digilife.be/quickreferences/qrc/c%20reference%20card%20(ansi)%202.2.pdf</a><br><a href="http://www.dreamincode.net/downloads/ref_sheets/cpp_reference_sheet.pdf" target="_blank" rel="noopener">http://www.dreamincode.net/downloads/ref_sheets/cpp_reference_sheet.pdf</a><br><a href="http://cpprocks.com/regex-cheatsheet/" target="_blank" rel="noopener">http://cpprocks.com/regex-cheatsheet/</a><br><a href="http://isocpp.org/blog/2012/12/c11-a-cheat-sheet-alex-sinyakov" target="_blank" rel="noopener">http://isocpp.org/blog/2012/12/c11-a-cheat-sheet-alex-sinyakov</a></p><p><a href="https://github.com/Tuplanolla/cheat" target="_blank" rel="noopener">https://github.com/Tuplanolla/cheat</a><br><a href="https://github.com/vgvassilev/cling" target="_blank" rel="noopener">https://github.com/vgvassilev/cling</a></p><p><a href="https://github.com/Yelp/MOE" target="_blank" rel="noopener">https://github.com/Yelp/MOE</a><br><a href="https://github.com/ideawu/ssdb" target="_blank" rel="noopener">https://github.com/ideawu/ssdb</a><br><a href="https://github.com/cms-sw/cmssw" target="_blank" rel="noopener">https://github.com/cms-sw/cmssw</a></p><p><a href="http://sourceforge.net/projects/libcrn/" target="_blank" rel="noopener">http://sourceforge.net/projects/libcrn/</a></p><p><a href="http://glm.g-truc.net/" target="_blank" rel="noopener">http://glm.g-truc.net/</a></p><p><a href="http://www.shoup.net/ntl/" target="_blank" rel="noopener">http://www.shoup.net/ntl/</a></p><hr><p><a href="http://www.efytimes.com/e1/fullnews.asp?edid=117053" target="_blank" rel="noopener">http://www.efytimes.com/e1/fullnews.asp?edid=117053</a><br><a href="http://www.efytimes.com/e1/fullnews.asp?edid=123439" target="_blank" rel="noopener">http://www.efytimes.com/e1/fullnews.asp?edid=123439</a></p><p><a href="http://scripts.mit.edu/~6.270/contestants/workshops/awesomec.pdf" target="_blank" rel="noopener">http://scripts.mit.edu/~6.270/contestants/workshops/awesomec.pdf</a></p><p>Oracle Template Library<br><a href="http://otl.sourceforge.net/" target="_blank" rel="noopener">http://otl.sourceforge.net/</a></p><p>Intel Parallel Building Blocks<br>Intel Array Building Blocks<br>Intel Cilk Plus</p><p><a href="http://www.alhem.net/Sockets/" target="_blank" rel="noopener">http://www.alhem.net/Sockets/</a><br><a href="http://www.tntnet.org/" target="_blank" rel="noopener">http://www.tntnet.org/</a></p><p><a href="http://en.wikiversity.org/wiki/Introduction_to_C++" target="_blank" rel="noopener">http://en.wikiversity.org/wiki/Introduction_to_C++</a></p><p><a href="http://blogs.msdn.com/b/nativeconcurrency/" target="_blank" rel="noopener">http://blogs.msdn.com/b/nativeconcurrency/</a></p><hr><p><a href="http://en.wikipedia.org/wiki/Comparison_of_TLS_implementations" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Comparison_of_TLS_implementations</a></p><p><a href="http://en.wikipedia.org/wiki/Cryptlib" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Cryptlib</a><br><a href="http://en.wikipedia.org/wiki/MatrixSSL" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/MatrixSSL</a><br><a href="http://en.wikipedia.org/wiki/PolarSSL" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/PolarSSL</a><br><a href="http://en.wikipedia.org/wiki/CyaSSL" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/CyaSSL</a><br><a href="http://en.wikipedia.org/wiki/GnuTLS" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/GnuTLS</a></p><hr><p><a href="https://github.com/mozilla/mozjpeg" target="_blank" rel="noopener">https://github.com/mozilla/mozjpeg</a><br><a href="https://github.com/tinfoilboy/Explodable" target="_blank" rel="noopener">https://github.com/tinfoilboy/Explodable</a><br><a href="https://github.com/thrust/thrust" target="_blank" rel="noopener">https://github.com/thrust/thrust</a><br><a href="https://github.com/shaih/HElib" target="_blank" rel="noopener">https://github.com/shaih/HElib</a><br><a href="https://github.com/jlnr/gosu" target="_blank" rel="noopener">https://github.com/jlnr/gosu</a><br><a href="https://github.com/vinniefalco/DSPFilters" target="_blank" rel="noopener">https://github.com/vinniefalco/DSPFilters</a><br><a href="https://github.com/m-ou-se/moggle" target="_blank" rel="noopener">https://github.com/m-ou-se/moggle</a></p><p><a href="https://github.com/Hawstein/cracking-the-coding-interview" target="_blank" rel="noopener">https://github.com/Hawstein/cracking-the-coding-interview</a></p><hr><p>“libc++” C++ Standard Library<br><a href="http://libcxx.llvm.org/" target="_blank" rel="noopener">http://libcxx.llvm.org/</a></p><p><a href="https://github.com/TrinityCore/TrinityCore" target="_blank" rel="noopener">https://github.com/TrinityCore/TrinityCore</a><br><a href="https://github.com/sass/libsass" target="_blank" rel="noopener">https://github.com/sass/libsass</a></p><p><a href="https://github.com/blackberry/GamePlay" target="_blank" rel="noopener">https://github.com/blackberry/GamePlay</a><br><a href="https://github.com/apache/thrift" target="_blank" rel="noopener">https://github.com/apache/thrift</a><br><a href="https://github.com/biometrics/openbr" target="_blank" rel="noopener">https://github.com/biometrics/openbr</a><br><a href="https://github.com/MailCore/mailcore2" target="_blank" rel="noopener">https://github.com/MailCore/mailcore2</a><br><a href="https://github.com/beark/ftl" target="_blank" rel="noopener">https://github.com/beark/ftl</a><br><a href="https://github.com/opencog/opencog" target="_blank" rel="noopener">https://github.com/opencog/opencog</a><br><a href="https://github.com/GraphChi/graphchi-cpp" target="_blank" rel="noopener">https://github.com/GraphChi/graphchi-cpp</a><br><a href="https://github.com/webcoyote/coho" target="_blank" rel="noopener">https://github.com/webcoyote/coho</a><br><a href="https://github.com/facebook/fbthrift" target="_blank" rel="noopener">https://github.com/facebook/fbthrift</a><br><a href="https://github.com/alecthomas/entityx" target="_blank" rel="noopener">https://github.com/alecthomas/entityx</a><br><a href="https://github.com/chenshuo/recipes" target="_blank" rel="noopener">https://github.com/chenshuo/recipes</a><br><a href="https://github.com/HeliumProject/Helium" target="_blank" rel="noopener">https://github.com/HeliumProject/Helium</a><br><a href="https://github.com/imvu-open/istatd" target="_blank" rel="noopener">https://github.com/imvu-open/istatd</a><br><a href="https://github.com/bytefish/libfacerec" target="_blank" rel="noopener">https://github.com/bytefish/libfacerec</a><br><a href="https://github.com/esnme/ultramemcache" target="_blank" rel="noopener">https://github.com/esnme/ultramemcache</a><br><a href="https://github.com/simonask/fatso" target="_blank" rel="noopener">https://github.com/simonask/fatso</a></p><hr><p><a href="https://github.com/Kosta-Github/http-cpp" target="_blank" rel="noopener">https://github.com/Kosta-Github/http-cpp</a><br><a href="https://github.com/adafruit/Adafruit-GFX-Library" target="_blank" rel="noopener">https://github.com/adafruit/Adafruit-GFX-Library</a><br><a href="https://github.com/lsegal/my_toy_compiler" target="_blank" rel="noopener">https://github.com/lsegal/my_toy_compiler</a><br><a href="https://github.com/openexr/openexr" target="_blank" rel="noopener">https://github.com/openexr/openexr</a><br><a href="https://github.com/spesmilo/libbitcoin" target="_blank" rel="noopener">https://github.com/spesmilo/libbitcoin</a><br><a href="https://github.com/gwaldron/osgearth" target="_blank" rel="noopener">https://github.com/gwaldron/osgearth</a><br><a href="https://github.com/xiw/stack" target="_blank" rel="noopener">https://github.com/xiw/stack</a><br><a href="https://github.com/mozy/mordor" target="_blank" rel="noopener">https://github.com/mozy/mordor</a><br><a href="https://github.com/jeremyong/Selene" target="_blank" rel="noopener">https://github.com/jeremyong/Selene</a><br><a href="https://github.com/cppformat/cppformat" target="_blank" rel="noopener">https://github.com/cppformat/cppformat</a><br><a href="https://github.com/otland/forgottenserver/tree/master/src" target="_blank" rel="noopener">https://github.com/otland/forgottenserver/tree/master/src</a><br><a href="https://github.com/matt-42/iod" target="_blank" rel="noopener">https://github.com/matt-42/iod</a><br><a href="https://github.com/geometer/FBReader" target="_blank" rel="noopener">https://github.com/geometer/FBReader</a><br><a href="https://github.com/lastfm/libmoost" target="_blank" rel="noopener">https://github.com/lastfm/libmoost</a><br><a href="https://github.com/jscheiny/Streams" target="_blank" rel="noopener">https://github.com/jscheiny/Streams</a><br><a href="https://github.com/lemire/FastPFor" target="_blank" rel="noopener">https://github.com/lemire/FastPFor</a><br><a href="https://github.com/pennyliang/MachineLearning-C---code" target="_blank" rel="noopener">https://github.com/pennyliang/MachineLearning-C---code</a><br><a href="https://github.com/zeromq/cppzmq" target="_blank" rel="noopener">https://github.com/zeromq/cppzmq</a><br><a href="https://github.com/bytefish/opencv" target="_blank" rel="noopener">https://github.com/bytefish/opencv</a><br><a href="https://github.com/jverkoey/liteqr" target="_blank" rel="noopener">https://github.com/jverkoey/liteqr</a><br><a href="https://github.com/mli/parameter_server" target="_blank" rel="noopener">https://github.com/mli/parameter_server</a><br><a href="https://github.com/progschj/ThreadPool" target="_blank" rel="noopener">https://github.com/progschj/ThreadPool</a><br><a href="https://github.com/antinucleon/cxxnet" target="_blank" rel="noopener">https://github.com/antinucleon/cxxnet</a><br><a href="https://github.com/kylemcdonald/FaceTracker" target="_blank" rel="noopener">https://github.com/kylemcdonald/FaceTracker</a><br><a href="https://github.com/miguelmartin75/anax" target="_blank" rel="noopener">https://github.com/miguelmartin75/anax</a><br><a href="https://github.com/arq5x/bedtools2" target="_blank" rel="noopener">https://github.com/arq5x/bedtools2</a><br><a href="https://github.com/vinova/Artemis-Cpp" target="_blank" rel="noopener">https://github.com/vinova/Artemis-Cpp</a><br><a href="https://github.com/pfi/pficommon" target="_blank" rel="noopener">https://github.com/pfi/pficommon</a><br><a href="https://github.com/juj/MathGeoLib" target="_blank" rel="noopener">https://github.com/juj/MathGeoLib</a></p><p><a href="https://github.com/watashi/AlgoSolution" target="_blank" rel="noopener">https://github.com/watashi/AlgoSolution</a><br><a href="https://github.com/marioyc/Online-Judge-Solutions" target="_blank" rel="noopener">https://github.com/marioyc/Online-Judge-Solutions</a></p><hr><p><a href="https://github.com/TTimo/doom3.gpl" target="_blank" rel="noopener">https://github.com/TTimo/doom3.gpl</a><br><a href="https://github.com/phusion/passenger" target="_blank" rel="noopener">https://github.com/phusion/passenger</a><br><a href="https://github.com/id-Software/DOOM-3-BFG" target="_blank" rel="noopener">https://github.com/id-Software/DOOM-3-BFG</a><br><a href="https://github.com/ideawu/ssdb" target="_blank" rel="noopener">https://github.com/ideawu/ssdb</a><br><a href="https://github.com/OpenNI/OpenNI" target="_blank" rel="noopener">https://github.com/OpenNI/OpenNI</a><br><a href="https://github.com/ceph/ceph" target="_blank" rel="noopener">https://github.com/ceph/ceph</a><br><a href="https://github.com/rescrv/HyperDex" target="_blank" rel="noopener">https://github.com/rescrv/HyperDex</a><br><a href="https://github.com/libRocket/libRocket" target="_blank" rel="noopener">https://github.com/libRocket/libRocket</a><br><a href="https://github.com/bro/bro" target="_blank" rel="noopener">https://github.com/bro/bro</a><br><a href="https://github.com/Razor-qt/razor-qt" target="_blank" rel="noopener">https://github.com/Razor-qt/razor-qt</a><br><a href="https://github.com/ideawu/icomet" target="_blank" rel="noopener">https://github.com/ideawu/icomet</a><br><a href="https://github.com/gigablast/open-source-search-engine" target="_blank" rel="noopener">https://github.com/gigablast/open-source-search-engine</a><br><a href="https://github.com/clMathLibraries/clFFT" target="_blank" rel="noopener">https://github.com/clMathLibraries/clFFT</a></p><p><a href="https://github.com/simsong/tcpflow" target="_blank" rel="noopener">https://github.com/simsong/tcpflow</a><br><a href="https://github.com/stealth/sshttp" target="_blank" rel="noopener">https://github.com/stealth/sshttp</a><br><a href="https://github.com/munificent/game-programming-patterns" target="_blank" rel="noopener">https://github.com/munificent/game-programming-patterns</a></p><hr><p><a href="http://libcxx.llvm.org/" target="_blank" rel="noopener">http://libcxx.llvm.org/</a><br><a href="http://www.ijg.org/" target="_blank" rel="noopener">http://www.ijg.org/</a><br><a href="http://libpng.org/" target="_blank" rel="noopener">http://libpng.org/</a><br><a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html" target="_blank" rel="noopener">http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html</a><br><a href="https://code.google.com/p/sfntly/" target="_blank" rel="noopener">https://code.google.com/p/sfntly/</a><br><a href="http://www.netlib.org/fdlibm/" target="_blank" rel="noopener">http://www.netlib.org/fdlibm/</a></p><hr><p><a href="http://en.wikipedia.org/wiki/Category:C%2B%2B_libraries" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Category:C%2B%2B_libraries</a><br><a href="http://en.wikipedia.org/wiki/List_of_C%2B%2B_template_libraries" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/List_of_C%2B%2B_template_libraries</a></p><hr><p><a href="http://www.csie.ntu.edu.tw/~cjlin/liblinear/" target="_blank" rel="noopener">http://www.csie.ntu.edu.tw/~cjlin/liblinear/</a><br><a href="http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/" target="_blank" rel="noopener">http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/</a></p><hr><p><a href="https://cryptocoding.net/index.php/Coding_rules#Clean_memory_of_secret_data" target="_blank" rel="noopener">https://cryptocoding.net/index.php/Coding_rules#Clean_memory_of_secret_data</a></p><hr><p><a href="https://www.youtube.com/watch?v=mVbDzTM21BQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=mVbDzTM21BQ</a></p><p><a href="http://en.wikibooks.org/wiki/Optimizing_C%2B%2B/Code_optimization" target="_blank" rel="noopener">http://en.wikibooks.org/wiki/Optimizing_C%2B%2B/Code_optimization</a><br><a href="http://en.wikibooks.org/wiki/Optimizing_C++/Code_optimization/Faster_operations" target="_blank" rel="noopener">http://en.wikibooks.org/wiki/Optimizing_C++/Code_optimization/Faster_operations</a></p><p><a href="https://mattmccutchen.net/bigint/" target="_blank" rel="noopener">https://mattmccutchen.net/bigint/</a><br><a href="https://code.google.com/p/infint/" target="_blank" rel="noopener">https://code.google.com/p/infint/</a><br><a href="http://cpp-bigint.sourceforge.net/" target="_blank" rel="noopener">http://cpp-bigint.sourceforge.net/</a></p><p><a href="https://github.com/RuntimeCompiledCPlusPlus/RuntimeCompiledCPlusPlus" target="_blank" rel="noopener">https://github.com/RuntimeCompiledCPlusPlus/RuntimeCompiledCPlusPlus</a></p><hr><p><a href="http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-" target="_blank" rel="noopener">http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-</a><br><a href="http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Standard-Template-Library-STL-" target="_blank" rel="noopener">http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Standard-Template-Library-STL-</a><br><a href="https://www.youtube.com/user/handmadeheroarchive/videos" target="_blank" rel="noopener">https://www.youtube.com/user/handmadeheroarchive/videos</a><br><a href="https://www.youtube.com/playlist?list=PL3R9mYgM4NVw4m0PTXBzQZBV2DzCt92Sp" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PL3R9mYgM4NVw4m0PTXBzQZBV2DzCt92Sp</a></p><hr><p><a href="https://github.com/dbohdan/compilers-targeting-c" target="_blank" rel="noopener">https://github.com/dbohdan/compilers-targeting-c</a><br><a href="https://github.com/Microsoft/GSL" target="_blank" rel="noopener">https://github.com/Microsoft/GSL</a><br><a href="https://github.com/scylladb/seastar" target="_blank" rel="noopener">https://github.com/scylladb/seastar</a><br><a href="https://github.com/google/zopfli" target="_blank" rel="noopener">https://github.com/google/zopfli</a><br><a href="https://github.com/WhisperSystems/libaxolotl-c" target="_blank" rel="noopener">https://github.com/WhisperSystems/libaxolotl-c</a></p><p><a href="http://gameprogrammingpatterns.com/" target="_blank" rel="noopener">http://gameprogrammingpatterns.com/</a></p><p><a href="http://www.yeppp.info/" target="_blank" rel="noopener">http://www.yeppp.info/</a></p><p><a href="https://github.com/AnthonyCalandra/modern-cpp-features" target="_blank" rel="noopener">https://github.com/AnthonyCalandra/modern-cpp-features</a></p><p><a href="https://github.com/vurtun/mmx" target="_blank" rel="noopener">https://github.com/vurtun/mmx</a><br><a href="https://github.com/johnezang/pithy" target="_blank" rel="noopener">https://github.com/johnezang/pithy</a></p><p>A simple Minecraft clone written in C using modern OpenGL (shaders).<br><a href="https://github.com/fogleman/Craft" target="_blank" rel="noopener">https://github.com/fogleman/Craft</a></p><p><a href="https://github.com/agauniyal/rang" target="_blank" rel="noopener">https://github.com/agauniyal/rang</a></p><p><a href="https://github.com/tomtom-international/cpp-dependencies" target="_blank" rel="noopener">https://github.com/tomtom-international/cpp-dependencies</a></p><p><a href="https://github.com/inkooboo/thread-pool-cpp" target="_blank" rel="noopener">https://github.com/inkooboo/thread-pool-cpp</a></p><p><a href="http://www-304.ibm.com/webapp/set2/sas/f/lopdiags/sdklop.html" target="_blank" rel="noopener">http://www-304.ibm.com/webapp/set2/sas/f/lopdiags/sdklop.html</a></p><p><a href="https://en.wikipedia.org/wiki/Integrated_Performance_Primitives" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Integrated_Performance_Primitives</a><br><a href="https://en.wikipedia.org/wiki/Intel_Parallel_Building_Blocks" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Intel_Parallel_Building_Blocks</a><br><a href="https://en.wikipedia.org/wiki/Intel_Array_Building_Blocks" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Intel_Array_Building_Blocks</a><br><a href="https://en.wikipedia.org/wiki/Cilk" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cilk</a><br><a href="https://en.wikipedia.org/wiki/Concurrent_Collections" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Concurrent_Collections</a><br><a href="https://en.wikipedia.org/wiki/Intel_Parallel_Studio" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Intel_Parallel_Studio</a><br><a href="https://en.wikipedia.org/wiki/Parallel_Patterns_Library" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Parallel_Patterns_Library</a><br><a href="https://en.wikipedia.org/wiki/Parallel_Extensions#Task_Parallel_Library" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Parallel_Extensions#Task_Parallel_Library</a><br><a href="https://en.wikipedia.org/wiki/OpenMP" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/OpenMP</a><br><a href="https://en.wikipedia.org/wiki/Math_Kernel_Library" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Math_Kernel_Library</a><br><a href="https://en.wikipedia.org/wiki/VTune" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/VTune</a><br><a href="https://en.wikipedia.org/wiki/List_of_performance_analysis_tools" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_performance_analysis_tools</a></p><hr><p>Torrent:<br><a href="https://github.com/libragnar/ragnar" target="_blank" rel="noopener">https://github.com/libragnar/ragnar</a><br><a href="https://github.com/Rudde/mktorrent" target="_blank" rel="noopener">https://github.com/Rudde/mktorrent</a><br><a href="https://github.com/hrkfdn/hrktorrent" target="_blank" rel="noopener">https://github.com/hrkfdn/hrktorrent</a><br><a href="https://github.com/rakshasa/rtorrent" target="_blank" rel="noopener">https://github.com/rakshasa/rtorrent</a><br><a href="https://github.com/svn2github/libtorrent-rasterbar" target="_blank" rel="noopener">https://github.com/svn2github/libtorrent-rasterbar</a><br><a href="https://github.com/svn2github/libtorrent-rasterbar-trunk" target="_blank" rel="noopener">https://github.com/svn2github/libtorrent-rasterbar-trunk</a><br><a href="https://github.com/qbittorrent/qBittorrent" target="_blank" rel="noopener">https://github.com/qbittorrent/qBittorrent</a><br><a href="https://github.com/svn2github/libtorrent-trunk" target="_blank" rel="noopener">https://github.com/svn2github/libtorrent-trunk</a><br><a href="http://sourceforge.net/projects/libtorrent/files/libtorrent/" target="_blank" rel="noopener">http://sourceforge.net/projects/libtorrent/files/libtorrent/</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uvm_re_match和uvm_glob_to_re的使用</title>
      <link href="/2019/04/25/uvm-re-match%E5%92%8Cuvm-glob-to-re%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/25/uvm-re-match%E5%92%8Cuvm-glob-to-re%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="uvm-re-match和uvm-glob-to-re使用方法"><a href="#uvm-re-match和uvm-glob-to-re使用方法" class="headerlink" title="uvm_re_match和uvm_glob_to_re使用方法"></a>uvm_re_match和uvm_glob_to_re使用方法</h3><p>首先，您必须确保将uvm与其dpi代码一起使用，也就是说，uvm_no_dpi未定义。通过将uvm_glob_to_re（“abc”）的结果打印出来，可以很容易地检查这一点。如果结果仍然是“abc”，那么您使用的是函数的systemverilog版本（只返回参数），而不是dpi-c实现。有关代码，请参阅dpi/uvm_regex.svh。<br>假设您使用的是dpi函数，那么您的glob表达式就出错了。“abc”的glob表达式不应该与字符串匹配。您需要使用“<em>abc</em>”（glob）来匹配它。通过查看这两个表达式的regex版本，可以看到这不起作用：<br>您将看到RE1包含“/^abc$/”，它只能与“abc”匹配。RE2包含/^.<em>abc.</em>$/，它匹配字符串中的任何“abc”子字符串。您可以忽略开头和结尾的/字符，因为这些字符将被剥离（不确定它们为什么存在）。<br>如果你试图匹配这两个表达式，你会发现第一个表达式不匹配，而第二个表达式不匹配。<br>另外：另一个与字符串匹配的正则表达式是“abc”，您可以看到它也适用于uvm_re_match（…）<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">module tb;<br><br>    import uvm_pkg::*;<br><br>    initial begin<br>        static string re1 = uvm_glob_to_re(&quot;abc&quot;);<br>        static string re2 = uvm_glob_to_re(&quot;*abc*&quot;);<br>        $display(re1);<br>        $display(re2);<br>        if (!uvm_re_match(re1, &quot;top.mydut_abc_comp_inst&quot;))<br>            $display(&quot;matches re1&quot;);<br><br>        if (!uvm_re_match(re2, &quot;top.mydut_abc_comp_inst&quot;))<br>            $display(&quot;matches re2&quot;);<br>        if (!uvm_re_match(&quot;abc&quot;, &quot;top.mydut_abc_comp_inst&quot;))<br>            $display(&quot;matches re3&quot;);<br>    end<br><br>endmodule<br></code></pre></td></tr></table></figure></p><h3 id="NCsim输出"><a href="#NCsim输出" class="headerlink" title="NCsim输出"></a>NCsim输出</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">/^abc$/<br>/^.*abc.*$/<br>matches re2<br>matches re3<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权利的游戏:冰与火之歌</title>
      <link href="/2019/04/24/%E6%9D%83%E5%88%A9%E7%9A%84%E6%B8%B8%E6%88%8F-%E5%86%B0%E4%B8%8E%E7%81%AB%E4%B9%8B%E6%AD%8C/"/>
      <url>/2019/04/24/%E6%9D%83%E5%88%A9%E7%9A%84%E6%B8%B8%E6%88%8F-%E5%86%B0%E4%B8%8E%E7%81%AB%E4%B9%8B%E6%AD%8C/</url>
      
        <content type="html"><![CDATA[<p><iframe width="100%" height="350" src="//player.bilibili.com/player.html?aid=50161560&cid=87808970&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作总结</title>
      <link href="/2019/04/23/git%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/23/git%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-工作原理："><a href="#1-工作原理：" class="headerlink" title="1.工作原理："></a>1.工作原理：</h1><p><img src="/2019/04/23/git操作总结/git操作总结.png" alt="git"></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="1-新建代码库"><a href="#1-新建代码库" class="headerlink" title="1.新建代码库"></a>1.新建代码库</h2><h3 id="在当前目录新建一个Git代码库"><a href="#在当前目录新建一个Git代码库" class="headerlink" title="在当前目录新建一个Git代码库"></a>在当前目录新建一个Git代码库</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git init<br></code></pre></td></tr></table></figure><h3 id="新建一个目录，将其初始化为Git代码库"><a href="#新建一个目录，将其初始化为Git代码库" class="headerlink" title="新建一个目录，将其初始化为Git代码库"></a>新建一个目录，将其初始化为Git代码库</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git init [project-name]<br></code></pre></td></tr></table></figure><h4 id="下载一个项目和它的整个代码历史"><a href="#下载一个项目和它的整个代码历史" class="headerlink" title="下载一个项目和它的整个代码历史"></a>下载一个项目和它的整个代码历史</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clone [url]<br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><h3 id="显示当前的Git配置"><a href="#显示当前的Git配置" class="headerlink" title="显示当前的Git配置"></a>显示当前的Git配置</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git config --list<br></code></pre></td></tr></table></figure><h3 id="编辑Git配置文件"><a href="#编辑Git配置文件" class="headerlink" title="编辑Git配置文件"></a>编辑Git配置文件</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git config -e [--global]<br></code></pre></td></tr></table></figure><h3 id="设置提交代码时的用户信息"><a href="#设置提交代码时的用户信息" class="headerlink" title="设置提交代码时的用户信息"></a>设置提交代码时的用户信息</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git config [--global] user.name &quot;[name]&quot;<br>git config [--global] user.email &quot;[email address]&quot;<br></code></pre></td></tr></table></figure><h2 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3.增加/删除文件"></a>3.增加/删除文件</h2><h3 id="添加指定文件到暂存区"><a href="#添加指定文件到暂存区" class="headerlink" title="添加指定文件到暂存区"></a>添加指定文件到暂存区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git add [file1] [file2] ...<br></code></pre></td></tr></table></figure><h3 id="添加指定目录到暂存区，包括子目录"><a href="#添加指定目录到暂存区，包括子目录" class="headerlink" title="添加指定目录到暂存区，包括子目录"></a>添加指定目录到暂存区，包括子目录</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git add [dir]<br></code></pre></td></tr></table></figure><h3 id="添加当前目录的所有文件到暂存区"><a href="#添加当前目录的所有文件到暂存区" class="headerlink" title="添加当前目录的所有文件到暂存区"></a>添加当前目录的所有文件到暂存区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git add .<br></code></pre></td></tr></table></figure><h3 id="添加每个变化前，都会要求确认-对于同一个文件的多处变化，可以实现分次提交"><a href="#添加每个变化前，都会要求确认-对于同一个文件的多处变化，可以实现分次提交" class="headerlink" title="添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交"></a>添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git add -p<br></code></pre></td></tr></table></figure><h3 id="删除工作区文件，并且将这次删除放入暂存区"><a href="#删除工作区文件，并且将这次删除放入暂存区" class="headerlink" title="删除工作区文件，并且将这次删除放入暂存区"></a>删除工作区文件，并且将这次删除放入暂存区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git rm [file1] [file2] ...<br></code></pre></td></tr></table></figure><h3 id="停止追踪指定文件，但该文件会保留在工作区"><a href="#停止追踪指定文件，但该文件会保留在工作区" class="headerlink" title="停止追踪指定文件，但该文件会保留在工作区"></a>停止追踪指定文件，但该文件会保留在工作区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git rm --cached [file]<br></code></pre></td></tr></table></figure><h3 id="改名文件，并且将这个改名放入暂存区"><a href="#改名文件，并且将这个改名放入暂存区" class="headerlink" title="改名文件，并且将这个改名放入暂存区"></a>改名文件，并且将这个改名放入暂存区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git mv [file-original] [file-renamed]<br></code></pre></td></tr></table></figure><h2 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h2><h3 id="提交暂存区到仓库区"><a href="#提交暂存区到仓库区" class="headerlink" title="提交暂存区到仓库区"></a>提交暂存区到仓库区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git commit -m [message]<br></code></pre></td></tr></table></figure><h3 id="提交暂存区的指定文件到仓库区"><a href="#提交暂存区的指定文件到仓库区" class="headerlink" title="提交暂存区的指定文件到仓库区"></a>提交暂存区的指定文件到仓库区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git commit [file1] [file2] ... -m [message]<br></code></pre></td></tr></table></figure><h3 id="提交工作区自上次commit之后的变化，直接到仓库区"><a href="#提交工作区自上次commit之后的变化，直接到仓库区" class="headerlink" title="提交工作区自上次commit之后的变化，直接到仓库区"></a>提交工作区自上次commit之后的变化，直接到仓库区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git commit -a<br></code></pre></td></tr></table></figure><h3 id="提交时显示所有diff信息"><a href="#提交时显示所有diff信息" class="headerlink" title="提交时显示所有diff信息"></a>提交时显示所有diff信息</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git commit -v<br></code></pre></td></tr></table></figure><h3 id="使用一次新的commit，替代上一次提交-如果代码没有任何新变化，则用来改写上一次commit的提交信息"><a href="#使用一次新的commit，替代上一次提交-如果代码没有任何新变化，则用来改写上一次commit的提交信息" class="headerlink" title="使用一次新的commit，替代上一次提交,如果代码没有任何新变化，则用来改写上一次commit的提交信息"></a>使用一次新的commit，替代上一次提交,如果代码没有任何新变化，则用来改写上一次commit的提交信息</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git commit --amend -m [message]<br></code></pre></td></tr></table></figure><h3 id="重做上一次commit，并包括指定文件的新变化"><a href="#重做上一次commit，并包括指定文件的新变化" class="headerlink" title="重做上一次commit，并包括指定文件的新变化"></a>重做上一次commit，并包括指定文件的新变化</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git commit --amend [file1] [file2] ...<br></code></pre></td></tr></table></figure><h2 id="5-分支"><a href="#5-分支" class="headerlink" title="5.分支"></a>5.分支</h2><h3 id="列出所有本地分支"><a href="#列出所有本地分支" class="headerlink" title="列出所有本地分支"></a>列出所有本地分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch<br></code></pre></td></tr></table></figure><h3 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch -r<br></code></pre></td></tr></table></figure><h3 id="列出所有本地分支和远程分支"><a href="#列出所有本地分支和远程分支" class="headerlink" title="列出所有本地分支和远程分支"></a>列出所有本地分支和远程分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch -a<br></code></pre></td></tr></table></figure><h3 id="新建一个分支，但依然停留在当前分支"><a href="#新建一个分支，但依然停留在当前分支" class="headerlink" title="新建一个分支，但依然停留在当前分支"></a>新建一个分支，但依然停留在当前分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch [branch-name]<br></code></pre></td></tr></table></figure><h3 id="新建一个分支，并切换到该分支"><a href="#新建一个分支，并切换到该分支" class="headerlink" title="新建一个分支，并切换到该分支"></a>新建一个分支，并切换到该分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git checkout -b [branch]<br></code></pre></td></tr></table></figure><h3 id="新建一个分支，指向指定commit"><a href="#新建一个分支，指向指定commit" class="headerlink" title="新建一个分支，指向指定commit"></a>新建一个分支，指向指定commit</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch [branch] [commit]<br></code></pre></td></tr></table></figure><h3 id="新建一个分支，与指定的远程分支建立追踪关系"><a href="#新建一个分支，与指定的远程分支建立追踪关系" class="headerlink" title="新建一个分支，与指定的远程分支建立追踪关系"></a>新建一个分支，与指定的远程分支建立追踪关系</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch --track [branch] [remote-branch]<br></code></pre></td></tr></table></figure><h3 id="切换到指定分支，并更新工作区"><a href="#切换到指定分支，并更新工作区" class="headerlink" title="切换到指定分支，并更新工作区"></a>切换到指定分支，并更新工作区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git checkout [branch-name]<br></code></pre></td></tr></table></figure><h3 id="切换到上一个分支"><a href="#切换到上一个分支" class="headerlink" title="切换到上一个分支"></a>切换到上一个分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git checkout -<br></code></pre></td></tr></table></figure><h3 id="建立追踪关系，在现有分支与指定的远程分支之间"><a href="#建立追踪关系，在现有分支与指定的远程分支之间" class="headerlink" title="建立追踪关系，在现有分支与指定的远程分支之间"></a>建立追踪关系，在现有分支与指定的远程分支之间</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch --set-upstream [branch] [remote-branch]<br></code></pre></td></tr></table></figure><h3 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git merge [branch]<br></code></pre></td></tr></table></figure><h3 id="选择一个commit，合并进当前分支"><a href="#选择一个commit，合并进当前分支" class="headerlink" title="选择一个commit，合并进当前分支"></a>选择一个commit，合并进当前分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git cherry-pick [commit]<br></code></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch -d [branch-name]<br></code></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push origin --delete [branch-name]<br>git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><h2 id="6-标签"><a href="#6-标签" class="headerlink" title="6.标签"></a>6.标签</h2><h3 id="列出所有tag"><a href="#列出所有tag" class="headerlink" title="列出所有tag"></a>列出所有tag</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git tag<br></code></pre></td></tr></table></figure><h3 id="新建一个tag在当前commit"><a href="#新建一个tag在当前commit" class="headerlink" title="新建一个tag在当前commit"></a>新建一个tag在当前commit</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git tag [tag]<br></code></pre></td></tr></table></figure><h3 id="新建一个tag在指定commit"><a href="#新建一个tag在指定commit" class="headerlink" title="新建一个tag在指定commit"></a>新建一个tag在指定commit</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git tag [tag] [commit]<br></code></pre></td></tr></table></figure><h3 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git tag -d [tag]<br></code></pre></td></tr></table></figure><h3 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push origin :refs/tags/[tagName]<br></code></pre></td></tr></table></figure><h3 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看tag信息</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git show [tag]<br></code></pre></td></tr></table></figure><h3 id="提交指定tag"><a href="#提交指定tag" class="headerlink" title="提交指定tag"></a>提交指定tag</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push [remote] [tag]<br></code></pre></td></tr></table></figure><h3 id="提交所有tag"><a href="#提交所有tag" class="headerlink" title="提交所有tag"></a>提交所有tag</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push [remote] --tags<br></code></pre></td></tr></table></figure><h3 id="新建一个分支，指向某个tag"><a href="#新建一个分支，指向某个tag" class="headerlink" title="新建一个分支，指向某个tag"></a>新建一个分支，指向某个tag</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git checkout -b [branch] [tag]<br></code></pre></td></tr></table></figure><h2 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h2><h3 id="显示有变更的文件"><a href="#显示有变更的文件" class="headerlink" title="显示有变更的文件"></a>显示有变更的文件</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git status<br></code></pre></td></tr></table></figure><h3 id="显示当前分支的版本历史"><a href="#显示当前分支的版本历史" class="headerlink" title="显示当前分支的版本历史"></a>显示当前分支的版本历史</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log<br></code></pre></td></tr></table></figure><h3 id="显示commit历史，以及每次commit发生变更的文件"><a href="#显示commit历史，以及每次commit发生变更的文件" class="headerlink" title="显示commit历史，以及每次commit发生变更的文件"></a>显示commit历史，以及每次commit发生变更的文件</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log --stat<br></code></pre></td></tr></table></figure><h3 id="搜索提交历史，根据关键词"><a href="#搜索提交历史，根据关键词" class="headerlink" title="搜索提交历史，根据关键词"></a>搜索提交历史，根据关键词</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log -S [keyword]<br></code></pre></td></tr></table></figure><h3 id="显示某个commit之后的所有变动，每个commit占据一行"><a href="#显示某个commit之后的所有变动，每个commit占据一行" class="headerlink" title="显示某个commit之后的所有变动，每个commit占据一行"></a>显示某个commit之后的所有变动，每个commit占据一行</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log [tag] HEAD --pretty=format:%s<br></code></pre></td></tr></table></figure><h3 id="显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件"><a href="#显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件" class="headerlink" title="显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件"></a>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log [tag] HEAD --grep feature<br></code></pre></td></tr></table></figure><h3 id="显示某个文件的版本历史，包括文件改名"><a href="#显示某个文件的版本历史，包括文件改名" class="headerlink" title="显示某个文件的版本历史，包括文件改名"></a>显示某个文件的版本历史，包括文件改名</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log --follow [file]<br>git whatchanged [file]<br></code></pre></td></tr></table></figure><h3 id="显示指定文件相关的每一次diff"><a href="#显示指定文件相关的每一次diff" class="headerlink" title="显示指定文件相关的每一次diff"></a>显示指定文件相关的每一次diff</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log -p [file]<br></code></pre></td></tr></table></figure><h3 id="显示过去5次提交"><a href="#显示过去5次提交" class="headerlink" title="显示过去5次提交"></a>显示过去5次提交</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log -5 --pretty --oneline<br></code></pre></td></tr></table></figure><h3 id="显示所有提交过的用户，按提交次数排序"><a href="#显示所有提交过的用户，按提交次数排序" class="headerlink" title="显示所有提交过的用户，按提交次数排序"></a>显示所有提交过的用户，按提交次数排序</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git shortlog -sn<br></code></pre></td></tr></table></figure><h3 id="显示指定文件是什么人在什么时间修改过"><a href="#显示指定文件是什么人在什么时间修改过" class="headerlink" title="显示指定文件是什么人在什么时间修改过"></a>显示指定文件是什么人在什么时间修改过</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git blame [file]<br></code></pre></td></tr></table></figure><h3 id="显示暂存区和工作区的差异"><a href="#显示暂存区和工作区的差异" class="headerlink" title="显示暂存区和工作区的差异"></a>显示暂存区和工作区的差异</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff<br></code></pre></td></tr></table></figure><h3 id="显示暂存区和上一个commit的差异"><a href="#显示暂存区和上一个commit的差异" class="headerlink" title="显示暂存区和上一个commit的差异"></a>显示暂存区和上一个commit的差异</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff --cached [file]<br></code></pre></td></tr></table></figure><h3 id="显示工作区与当前分支最新commit之间的差异"><a href="#显示工作区与当前分支最新commit之间的差异" class="headerlink" title="显示工作区与当前分支最新commit之间的差异"></a>显示工作区与当前分支最新commit之间的差异</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff HEAD<br></code></pre></td></tr></table></figure><h3 id="显示两次提交之间的差异"><a href="#显示两次提交之间的差异" class="headerlink" title="显示两次提交之间的差异"></a>显示两次提交之间的差异</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff [first-branch]...[second-branch]<br></code></pre></td></tr></table></figure><h3 id="显示今天你写了多少行代码"><a href="#显示今天你写了多少行代码" class="headerlink" title="显示今天你写了多少行代码"></a>显示今天你写了多少行代码</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;<br></code></pre></td></tr></table></figure><h3 id="查看某个版本提交了哪些文件，其实就是查看该版本与其上一个版本之间的差异-如果不加上-–stat-参数会显示每个文件内容的两个版本之间的差异，加上该参数后就只显示发生变更的文件名了。"><a href="#查看某个版本提交了哪些文件，其实就是查看该版本与其上一个版本之间的差异-如果不加上-–stat-参数会显示每个文件内容的两个版本之间的差异，加上该参数后就只显示发生变更的文件名了。" class="headerlink" title="查看某个版本提交了哪些文件，其实就是查看该版本与其上一个版本之间的差异,如果不加上 –stat 参数会显示每个文件内容的两个版本之间的差异，加上该参数后就只显示发生变更的文件名了。"></a>查看某个版本提交了哪些文件，其实就是查看该版本与其上一个版本之间的差异,如果不加上 –stat 参数会显示每个文件内容的两个版本之间的差异，加上该参数后就只显示发生变更的文件名了。</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff hash1 hash2 --stat<br></code></pre></td></tr></table></figure><h3 id="显示某次提交的元数据和内容变化"><a href="#显示某次提交的元数据和内容变化" class="headerlink" title="显示某次提交的元数据和内容变化"></a>显示某次提交的元数据和内容变化</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git show [commit]<br></code></pre></td></tr></table></figure><h3 id="显示某次提交发生变化的文件"><a href="#显示某次提交发生变化的文件" class="headerlink" title="显示某次提交发生变化的文件"></a>显示某次提交发生变化的文件</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git show --name-only [commit]<br></code></pre></td></tr></table></figure><h3 id="显示某次提交时，某个文件的内容"><a href="#显示某次提交时，某个文件的内容" class="headerlink" title="显示某次提交时，某个文件的内容"></a>显示某次提交时，某个文件的内容</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git show [commit]:[filename]<br></code></pre></td></tr></table></figure><h3 id="显示当前分支的最近几次提交"><a href="#显示当前分支的最近几次提交" class="headerlink" title="显示当前分支的最近几次提交"></a>显示当前分支的最近几次提交</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reflog<br></code></pre></td></tr></table></figure><h3 id="查看哪些文件是在版本控制下"><a href="#查看哪些文件是在版本控制下" class="headerlink" title="查看哪些文件是在版本控制下"></a>查看哪些文件是在版本控制下</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git ls-files<br></code></pre></td></tr></table></figure><p>八、远程同步</p><h3 id="下载远程仓库的所有变动"><a href="#下载远程仓库的所有变动" class="headerlink" title="下载远程仓库的所有变动"></a>下载远程仓库的所有变动</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git fetch [remote]<br></code></pre></td></tr></table></figure><h3 id="显示所有远程仓库"><a href="#显示所有远程仓库" class="headerlink" title="显示所有远程仓库"></a>显示所有远程仓库</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git remote -v<br></code></pre></td></tr></table></figure><h3 id="显示某个远程仓库的信息"><a href="#显示某个远程仓库的信息" class="headerlink" title="显示某个远程仓库的信息"></a>显示某个远程仓库的信息</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git remote show [remote]<br></code></pre></td></tr></table></figure><h3 id="增加一个新的远程仓库，并命名"><a href="#增加一个新的远程仓库，并命名" class="headerlink" title="增加一个新的远程仓库，并命名"></a>增加一个新的远程仓库，并命名</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git remote add [shortname] [url]<br></code></pre></td></tr></table></figure><h3 id="取回远程仓库的变化，并与本地分支合并"><a href="#取回远程仓库的变化，并与本地分支合并" class="headerlink" title="取回远程仓库的变化，并与本地分支合并"></a>取回远程仓库的变化，并与本地分支合并</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git pull [remote] [branch]<br></code></pre></td></tr></table></figure><h3 id="上传本地指定分支到远程仓库"><a href="#上传本地指定分支到远程仓库" class="headerlink" title="上传本地指定分支到远程仓库"></a>上传本地指定分支到远程仓库</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push [remote] [branch]<br></code></pre></td></tr></table></figure><h3 id="强行推送当前分支到远程仓库，即使有冲突"><a href="#强行推送当前分支到远程仓库，即使有冲突" class="headerlink" title="强行推送当前分支到远程仓库，即使有冲突"></a>强行推送当前分支到远程仓库，即使有冲突</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push [remote] --force<br></code></pre></td></tr></table></figure><h3 id="推送所有分支到远程仓库"><a href="#推送所有分支到远程仓库" class="headerlink" title="推送所有分支到远程仓库"></a>推送所有分支到远程仓库</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push [remote] --all<br></code></pre></td></tr></table></figure><h2 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9.撤销"></a>9.撤销</h2><h3 id="恢复暂存区的指定文件到工作区"><a href="#恢复暂存区的指定文件到工作区" class="headerlink" title="恢复暂存区的指定文件到工作区"></a>恢复暂存区的指定文件到工作区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git checkout [file]<br></code></pre></td></tr></table></figure><h3 id="恢复某个commit的指定文件到暂存区和工作区"><a href="#恢复某个commit的指定文件到暂存区和工作区" class="headerlink" title="恢复某个commit的指定文件到暂存区和工作区"></a>恢复某个commit的指定文件到暂存区和工作区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git checkout [commit] [file]<br></code></pre></td></tr></table></figure><h3 id="恢复暂存区的所有文件到工作区"><a href="#恢复暂存区的所有文件到工作区" class="headerlink" title="恢复暂存区的所有文件到工作区"></a>恢复暂存区的所有文件到工作区</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git checkout .<br></code></pre></td></tr></table></figure><h3 id="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"><a href="#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变" class="headerlink" title="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"></a>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reset [file]<br></code></pre></td></tr></table></figure><h3 id="重置暂存区与工作区，与上一次commit保持一致"><a href="#重置暂存区与工作区，与上一次commit保持一致" class="headerlink" title="重置暂存区与工作区，与上一次commit保持一致"></a>重置暂存区与工作区，与上一次commit保持一致</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reset --hard<br></code></pre></td></tr></table></figure><h3 id="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"><a href="#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变" class="headerlink" title="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"></a>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reset [commit]<br></code></pre></td></tr></table></figure><h3 id="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"><a href="#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致" class="headerlink" title="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"></a>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reset --hard [commit]<br></code></pre></td></tr></table></figure><h3 id="重置当前HEAD为指定commit，但保持暂存区和工作区不变"><a href="#重置当前HEAD为指定commit，但保持暂存区和工作区不变" class="headerlink" title="重置当前HEAD为指定commit，但保持暂存区和工作区不变"></a>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reset --keep [commit]<br></code></pre></td></tr></table></figure><h3 id="新建一个commit，用来撤销指定commit-后者的所有变化都将被前者抵消，并且应用到当前分支"><a href="#新建一个commit，用来撤销指定commit-后者的所有变化都将被前者抵消，并且应用到当前分支" class="headerlink" title="新建一个commit，用来撤销指定commit,后者的所有变化都将被前者抵消，并且应用到当前分支"></a>新建一个commit，用来撤销指定commit,后者的所有变化都将被前者抵消，并且应用到当前分支</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git revert [commit]<br></code></pre></td></tr></table></figure><h3 id="暂时将未提交的变化移除，稍后再移入"><a href="#暂时将未提交的变化移除，稍后再移入" class="headerlink" title="暂时将未提交的变化移除，稍后再移入"></a>暂时将未提交的变化移除，稍后再移入</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git stash<br>git stash pop<br></code></pre></td></tr></table></figure><h1 id="2-git技巧"><a href="#2-git技巧" class="headerlink" title="2.git技巧"></a>2.git技巧</h1><h2 id="1-gitconfig全局配置文件"><a href="#1-gitconfig全局配置文件" class="headerlink" title="1.~/.gitconfig全局配置文件"></a>1.~/.gitconfig全局配置文件</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[alias]<br>lg = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit<br>st = status<br>co = checkout<br>ci = commit<br>br = branch<br>unstage = reset HEAD<br>last = log -1<br>lpo = log --pretty=oneline --abbrev-commit<br></code></pre></td></tr></table></figure><h2 id="2-git查询对比远程和本地仓库内容信息有什么不同"><a href="#2-git查询对比远程和本地仓库内容信息有什么不同" class="headerlink" title="2.git查询对比远程和本地仓库内容信息有什么不同"></a>2.git查询对比远程和本地仓库内容信息有什么不同</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff &lt;local branch&gt; &lt;remote&gt;/&lt;remote branch&gt;<br></code></pre></td></tr></table></figure><h2 id="3-git中从远程的分支获取最新的版本到本地"><a href="#3-git中从远程的分支获取最新的版本到本地" class="headerlink" title="3.git中从远程的分支获取最新的版本到本地"></a>3.git中从远程的分支获取最新的版本到本地</h2><h3 id="Git中从远程的分支获取最新的版本到本地有这样2个命令："><a href="#Git中从远程的分支获取最新的版本到本地有这样2个命令：" class="headerlink" title="Git中从远程的分支获取最新的版本到本地有这样2个命令："></a>Git中从远程的分支获取最新的版本到本地有这样2个命令：</h3><ul><li>git fetch：相当于是从远程获取最新版本到本地，不会自动merge。<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git fetch origin master<br>git log -p master..origin/master<br>git merge origin/master<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>以上命令的含义：首先从远程的origin的master主分支下载最新的版本到origin/master分支上,然后比较本地的master分支和origin/master分支的差别最后进行合并。上述过程其实可以用以下更清晰的方式来进行：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git fetch origin master:tmp<br>git diff tmp <br>git merge tmp<br></code></pre></td></tr></table></figure></li><li><p>从远程获取最新的版本到本地的test分支上之后再进行比较合并</p></li></ul><ul><li>git pull：相当于是从远程获取最新版本并merge到本地<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git pull origin master<br></code></pre></td></tr></table></figure></li></ul><ul><li>上述命令其实相当于git fetch 和 git merge,在实际使用中，git fetch更安全一些因为在merge前，我们可以查看更新情况，然后再决定是否合并结束。<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git lg &lt;local branch&gt; &lt;remote&gt;/&lt;remote branch&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-git本地版本落后仓库几个版本pull冲突相关"><a href="#3-git本地版本落后仓库几个版本pull冲突相关" class="headerlink" title="3.git本地版本落后仓库几个版本pull冲突相关"></a>3.git本地版本落后仓库几个版本pull冲突相关</h2><ul><li>git中本地落后仓库几个版本pull冲突,但是自己又不想提交本地的代码到远程仓库，可以尝试使用下面的方法： </li></ul><ul><li>一种是使用git fetch，但是自己这个用得少 </li><li>另外就是使用git pull,git pull = git fetch + git merch,解决冲突时利用git stash 把本地代码保存起来 </li></ul><ul><li>1.git pull origin master //报错：有冲突 不能拉取下来（本地和远程在同地方都有改动 ）</li><li>2.git stash</li><li>3.git pull origin master //这个时候一直报下面错误说明xxx这个文件没有stash进去 </li><li>4.使用 git stash -a //成功 </li><li>5.使用 git pull origin master //把主干拉下来</li><li>6.使用git stash list 找//到你刚刚stash的id</li><li>7.使用git stash pop stash@{0} //取出刚刚存入代码 如果无冲突将会自动合并 如果有冲突需要你进入文件手动解决冲突，冲突在冲突文件夹里会有明显标注你本地代码和仓库代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github回退代码到历史指定版本</title>
      <link href="/2019/04/22/github%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81%E5%88%B0%E5%8E%86%E5%8F%B2%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/"/>
      <url>/2019/04/22/github%E5%9B%9E%E9%80%80%E4%BB%A3%E7%A0%81%E5%88%B0%E5%8E%86%E5%8F%B2%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<ul><li><p>前提是本地已经有了git的origin master库或者克隆需要回退的代码到本地。</p></li><li><p>查询历史对应不同版本的ID,用于回退使用。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git log --pretty=oneline<br></code></pre></td></tr></table></figure></li><li><p>使用git log命令查看所有的历史版本，获取你git的某个历史版本的id。</p><ul><li>假设查到历史版本的id是fae6966548e3ae76cfa7f38a461c438cf75ba965。</li></ul></li><li><p>恢复到历史版本。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reset --hard fae6966548e3ae76cfa7f38a461c438cf75ba965<br></code></pre></td></tr></table></figure></li><li><p>把修改推到远程服务器。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git push -f -u origin master<br></code></pre></td></tr></table></figure></li><li><p>重新更新本地代码。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git pull<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用synopsys uvmgen快速生成uvm环境</title>
      <link href="/2019/04/19/%E4%BD%BF%E7%94%A8synopsys%20uvmgen%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90uvm%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/04/19/%E4%BD%BF%E7%94%A8synopsys%20uvmgen%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90uvm%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="通过vcs-uvmgen模板生成UVM环境"><a href="#通过vcs-uvmgen模板生成UVM环境" class="headerlink" title="通过vcs uvmgen模板生成UVM环境"></a>通过vcs uvmgen模板生成UVM环境</h3><ul><li>命令行：<br><img src="/2019/04/19/使用synopsys uvmgen快速生成uvm环境/uvmgen1.png" alt="uvmgen-cmd"></li><li>树形结构：<br><img src="/2019/04/19/使用synopsys uvmgen快速生成uvm环境/uvmgen2.png" alt="uvmgen-tree"></li><li>代码样例：<br><img src="/2019/04/19/使用synopsys uvmgen快速生成uvm环境/uvmgen3.png" alt="uvmgen-demo"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> EDA </tag>
            
            <tag> Synopsys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用脚本收集</title>
      <link href="/2019/04/19/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/"/>
      <url>/2019/04/19/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="常用脚本收集"><a href="#常用脚本收集" class="headerlink" title="常用脚本收集"></a>常用脚本收集</h3><ul><li><p>Sed</p><ul><li><p>直接对文本文件进行行替代操作</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sed -i &apos;s/原字符串/新字符串/&apos; file<br>sed -i &apos;s/原字符串/新字符串/g&apos; file<br></code></pre></td></tr></table></figure></li><li><p>去掉 “行首” 带“@”的首字母@的行</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sed -i &apos;s/^@//&apos; file<br></code></pre></td></tr></table></figure></li><li><p>在含有特定字符串的行前插入新行</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sed -i &apos;/特定字符串/i 新行字符串&apos; file<br></code></pre></td></tr></table></figure></li><li><p>在含有特定字符串的行后插入新行</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sed -i &apos;/特定字符串/a 新行字符串&apos; file<br></code></pre></td></tr></table></figure></li><li><p>删除含有特定字符串的行</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sed -i &apos;/字符串/d&apos; file<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li>python</li></ul><hr><ul><li>Perl</li></ul><hr><ul><li><p>Shell</p><ul><li><p>列出所有目录使用量，并按大小排序。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ls|xargs du -h|sort -rn <br>#不递归下级目录使用du -sh<br></code></pre></td></tr></table></figure></li><li><p>查看文件排除以#开关和空白行。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">egrep -v &quot;^#|^$&quot;  filename<br>sed &apos;/#.*$/d; /^ *$/d&apos;<br></code></pre></td></tr></table></figure></li><li><p>查删除空格和空行。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sed &apos;/^$/d&apos; filename #删除空行<br>sed &apos;s/ //g&apos; filename<br>sed &apos;s/[[:space:]]//g&apos; filename<br></code></pre></td></tr></table></figure></li><li><p>删除#后的注释。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sed -i &apos;s/#.*$//g&apos; filename<br></code></pre></td></tr></table></figure></li><li><p>删除空文件。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">find / -type f -size 0 -exec rm -rf &#123;&#125; \;<br></code></pre></td></tr></table></figure></li><li><p>查找进程pid并kill。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">pgrep nginx|xargs kill <br>pidof nginx|xargs kill<br></code></pre></td></tr></table></figure></li><li><p>取当前IP地址。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ifconfig |awk -F&quot;[ ]+|[:]&quot; &apos;NR==2 &#123;print $4&#125;&apos;<br></code></pre></td></tr></table></figure></li><li><p>shell下新建文件夹并进入，以下加入bashrc。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">mkcd ( )&#123;<br>   mkdir $1<br>       cd $1<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>Kill整个进程树。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">pstree -ap 10277|grep -oP &apos;[0-9]&#123;4,6&#125;&apos;|xargs kill -9<br></code></pre></td></tr></table></figure></li><li><p>目录中大量文件删除。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ls | xargs rm<br></code></pre></td></tr></table></figure></li><li><p>监控命令(每2秒运行一次)</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">watch &quot;ls -larth&quot;<br></code></pre></td></tr></table></figure></li><li><p>限制以下命令的内存使用</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ulimit -Sv 1000 # 1000 KBs = 1 MB<br>ulimit -Sv unlimited # Remove limit<br></code></pre></td></tr></table></figure></li><li><p>使用正则表达式重命名所选文件</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">rename &apos;s/.bak$/.txt/&apos; *.bak<br></code></pre></td></tr></table></figure></li><li><p>获得完整的文件路径</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">readlink -f file.txt<br></code></pre></td></tr></table></figure></li><li><p>检查每个目录中的文件的的权限</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">namei -l /path/to/file.txt<br></code></pre></td></tr></table></figure></li><li><p>创建给定大小的空文件</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">fallocate -l 1G test.img<br></code></pre></td></tr></table></figure></li><li><p>在文件中分割长文件，使用相同数量的行</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">split -l LINES -d file.txt output_prefix<br></code></pre></td></tr></table></figure></li><li><p>刷新交换分区</p></li></ul><ul><li>如果一个程序消耗了太多的内存，交换分区就会被剩余的内存填满，当你回到正常的时候，一切都是缓慢的。只需重新启动交换分区来修复它<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo swapoff -a<br>sudo swapon -a<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>列出tar.gz文件的内容，并只提取一个文件</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">tar tf file.tgz<br>tar xf file.tgz filename<br></code></pre></td></tr></table></figure></li><li><p>Cat命令反向输出(从末端开始)</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">tac file<br></code></pre></td></tr></table></figure></li><li><p>文件的随机行</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">shuf file.txt<br></code></pre></td></tr></table></figure></li><li><p>在有限的时间内运行命令</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">timeout 10s ./script.sh<br>Restart every 30 minutes<br>while true; do timeout 30m ./script.sh; done<br></code></pre></td></tr></table></figure></li><li><p>从两个排序文件中合并行</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">comm file1 file2<br>打印这三列：<br><br>行file1独有。<br>行file2独有。<br>在行file1和行file2中都有。<br>使用选项-1、-2、-3，可以删除这些列。<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layer-Sequence结构图</title>
      <link href="/2019/04/19/Layer-Sequence%E7%BB%93%E6%9E%84%E5%9B%BE/"/>
      <url>/2019/04/19/Layer-Sequence%E7%BB%93%E6%9E%84%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="UVM-Layer-Sequence结构图"><a href="#UVM-Layer-Sequence结构图" class="headerlink" title="UVM Layer Sequence结构图"></a>UVM Layer Sequence结构图</h3><p><img src="/2019/04/19/Layer-Sequence结构图/Layer-Sequence结构图.png" alt="Layer-Sequence结构图"></p><font color="blue"><br><br> 1.可以1:1，1：N，N:N进行堆叠。<br><br> 2.堆叠指针必须指向对应的sequencer。<br><br></font>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查找指定名称的进程并显示进程详细信息</title>
      <link href="/2019/04/19/Linux%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/04/19/Linux%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="给定一个进程名称特征串，查找所有匹配该进程名称的进程的详细信息。"><a href="#给定一个进程名称特征串，查找所有匹配该进程名称的进程的详细信息。" class="headerlink" title="给定一个进程名称特征串，查找所有匹配该进程名称的进程的详细信息。"></a>给定一个进程名称特征串，查找所有匹配该进程名称的进程的详细信息。</h3><font color="blue"><p>(1) 先用pgrep [str] 命令进行模糊匹配，找到匹配该特征串的进程ID；</p><p>(2) 其次根据进程ID显示指定的进程信息，ps –pid [pid]；</p><p>(3) 因为查找出来的进程ID需要被作为参数传递给ps命令，故使用xargs命令，通过管道符号连接；</p><p>(4) 最后显示进程详细信息，需要加上-u参数。</p><p>最终命令形如:</p><p>pgrep ncsim | xargs ps -u –pid<br></p></font>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCS Crash如何定位？</title>
      <link href="/2019/04/18/VCS-Crash%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%EF%BC%9F/"/>
      <url>/2019/04/18/VCS-Crash%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="~友情QQ红包，发送密码~" />    <label for="pass">~友情QQ红包，发送密码~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19pm7iHp9kCcrumaMonfJEmHOP4nOoFN/HdqsqabB2pwfZIPcM8og/rWtmpcgAWRM+Z9nNqdBGIcy3/sPVWsz/PAuxnAh8uNuwxdPsRRqDTu4e5+3hMFPs/eYG9CisNTUhUCAfq00k06xAuyqVQk0hqGAIK3+rHwnHkzjTNysogGUn9fMOASwFwsfzhBKvyD0a+qJNNKh9mAwLm/wJEgpsDvV1aH3BjcLZ4aERZYG074O9uSKjl3u89aFO3KbdlJDptOvI39Rk1JnhRG/zoGP+DxGVPzp/RxoTY3lE8ozKZISI3aM1GtRijQIE2YHHzrbjD/CRFcGes9JLGyNpWV8y5fNROxi8K3LtZNITonYs5/pqGbZsxcKpG6Oh8mZl6uvMskL18yXYXmRUSrwnxpGN1axzOTYg4DjGY1TVzvO29voNYfd0QsFmBhvujrJ+ozj4E8UAirPtjpiUO4M44Pg0s57A3KmkqEy4MUQ1/GQG0vIt//Y3oz4QzpTy1YDds4D4Suf3R0p9fjpRhQf7BsMlOL2jr1cxA/YNJm+sghO4YO5jqfu8Bnsl8EWlpNRG37ZmljVZOkz8l55QvSaUGR1NB4m/KtlDMsz+IiLB/oD2z7nhcnXqIWgL51vAuARxaYrBQF63B6VqCYacac4xPe3xz5FjHX1sSMRxugEmrYGrRrLx5YS/yIEFFpA8/y517q3M5E8qZ+hzG33KjH6AHgiC4kSdKVqN7Wa8q/e1czrmNVZAk++zPkweHeVh63YimelTB5Pp2Oxk6cl5T9GZHJH7dWLPOtkFxBQCPhVvdByORGzxx7nH6BohnfBacW+eHS2J+ApialWJ5ZZzyMsXPOMCHcZq8pa5nKh9zMXcmmuN5skopryPggvaw</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EDA </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clocking块为什么能保证race free?</title>
      <link href="/2019/04/18/clocking%E5%9D%97%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E4%BF%9D%E8%AF%81race-free/"/>
      <url>/2019/04/18/clocking%E5%9D%97%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E4%BF%9D%E8%AF%81race-free/</url>
      
        <content type="html"><![CDATA[<h2 id="为啥要推荐使用clocking块？"><a href="#为啥要推荐使用clocking块？" class="headerlink" title="为啥要推荐使用clocking块？"></a>为啥要推荐使用clocking块？</h2><font color="red"><br>代码例子：<br><pre name="code" class="systemverilog"><br><br>clocking cb @(negedge clk);<br>  input v;<br>endclocking<br><br>always @(cb) $display(cb.v);//采样old值<br><br>always @(negedge clk) $display(cb.v);//采样old or new值和仿真器相关。<br><br></pre><br><br>主要原因是clocking块中默认为1step采样，在clk下降沿发生时（@(cb)触发），数据已经采样了。<br>而第二条always语句直接(@(negedge clk))和（@(cb)）并发，所以就有race glitch。<br><br></font> ]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM寄存器模型中soft和hard reset有什么区别？</title>
      <link href="/2019/04/18/UVM%E5%AF%84%E5%AD%98%E5%99%A8%E6%A8%A1%E5%9E%8B%E4%B8%ADsoft%E5%92%8Chard-reset%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
      <url>/2019/04/18/UVM%E5%AF%84%E5%AD%98%E5%99%A8%E6%A8%A1%E5%9E%8B%E4%B8%ADsoft%E5%92%8Chard-reset%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Kind-“HARD”-or-“SOFT”"><a href="#1-Kind-“HARD”-or-“SOFT”" class="headerlink" title="1.Kind = “HARD” or “SOFT”"></a>1.Kind = “HARD” or “SOFT”</h2><p>寄存器模型中复位操作这个到底有什么作用呢？源码如下：</p><font color="red"><br>代码例子：<br><pre name="code" class="systemverilog"><br>function void uvm_reg_xxx::reset(string kind = “HARD”);<br>    if (!m_reset.exists(kind))<br>          return;<br>    m_mirrored = m_reset[kind];<br>    m_desired  = m_mirrored;<br>    value      = m_mirrored;<br>    if (kind == “HARD”)<br>        m_written  = 0;<br>endfunction: reset<br></pre><br></font><br><font color="blue"><br>其实是作为特别处理用的，如果所有的寄存器都只有一个复位的时候默认一个HARD值统一复位。<br>如果某个寄存器需要特殊的复位，则可以重写该类中的reset（…）方法：<br>代码例子：<br><pre name="code" class="systemverilog"><br>class some_reg extends uvm_reg;<br>    …<br>    function void reset(string kind = “HARD”);<br>        if (kind != “SOFT”)<br>            super.reset(kind);<br>    endfunction<br><br>endclass<br></pre><br></font> ]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
          <category> UVM-RAL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> RAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVM-Register-Model</title>
      <link href="/2019/04/17/UVM-Register-Model/"/>
      <url>/2019/04/17/UVM-Register-Model/</url>
      
        <content type="html"><![CDATA[<h1 id="1-UVM寄存器模型相关操作引起的一些关键变化"><a href="#1-UVM寄存器模型相关操作引起的一些关键变化" class="headerlink" title="1.UVM寄存器模型相关操作引起的一些关键变化"></a>1.UVM寄存器模型相关操作引起的一些关键变化</h1><h1 id="缩写词"><a href="#缩写词" class="headerlink" title="缩写词"></a><strong>缩写词</strong></h1><p>UMV –  Update Main Variable,<br>UMrV – Update Mirror Variable,<br>AP – Auto predict<br>RDR – Read DUT Register,<br>UDR – Update DUT Register,<br>RMV – Read Main Variable<br>FD – frontdoor,<br>BD – Backdoor,   <em>  – check if UVM_CHEK is used,   NA – Not Applicable</em></p><p><img src="https://github.com/275244143/picBed/blob/master/uvm-reg-access.jpg?raw=true" alt></p>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>形式验证</title>
      <link href="/2019/04/17/%E5%BD%A2%E5%BC%8F%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/04/17/%E5%BD%A2%E5%BC%8F%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么时候需要使用形式验证（Formal-Verification：FV）"><a href="#1-什么时候需要使用形式验证（Formal-Verification：FV）" class="headerlink" title="1.什么时候需要使用形式验证（Formal Verification：FV）"></a>1.什么时候需要使用形式验证（Formal Verification：FV）</h2><p>1.1 <strong>FV FOR COMPLETE COVERAGE：</strong></p><pre><code>When you want to get complete coverage of design behaviors, consider using FV as your primary validation method.注释：    当你需要100%覆盖功能时。例如：32bit * 32bit 乘法器，需要每个数字都要进行cover。</code></pre><p>1.2 <strong>FV for Bug Hunting：</strong></p><pre><code>When you have a design with nontrivial logic and are worried that you will not be able to get sufficient coverage with simulation tests, think about FV as a supplement to simulation.注释：    担心无法获得足够的仿真测试覆盖时，可以考虑将FV作为补充，增强tapout信心。</code></pre><p>1.3 <strong>FV for Exploring Designs：</strong></p><pre><code>When you have a design where you can easily specify interesting states or outputs, but it is difficult or time-consuming to specify the sequence of inputs needed to get there, think about using FV.注释：    虽然设计简单，如一些MUX组合，但很难或费时地指定需要的输入序列，可以考虑使用FV。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SystemVerilog </tag>
            
            <tag> ABV </tag>
            
            <tag> FV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ红包打赏,验证技术微信公众号，扫码即可，你的支持，就是技术的不断前进！</title>
      <link href="/2019/04/16/QQ%E7%BA%A2%E5%8C%85%E6%89%93%E8%B5%8F,%E9%AA%8C%E8%AF%81%E6%8A%80%E6%9C%AF%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%8C%E6%89%AB%E7%A0%81%E5%8D%B3%E5%8F%AF%EF%BC%8C%E4%BD%A0%E7%9A%84%E6%94%AF%E6%8C%81%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8A%80%E6%9C%AF%E7%9A%84%E4%B8%8D%E6%96%AD%E5%89%8D%E8%BF%9B%EF%BC%81/"/>
      <url>/2019/04/16/QQ%E7%BA%A2%E5%8C%85%E6%89%93%E8%B5%8F,%E9%AA%8C%E8%AF%81%E6%8A%80%E6%9C%AF%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%8C%E6%89%AB%E7%A0%81%E5%8D%B3%E5%8F%AF%EF%BC%8C%E4%BD%A0%E7%9A%84%E6%94%AF%E6%8C%81%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8A%80%E6%9C%AF%E7%9A%84%E4%B8%8D%E6%96%AD%E5%89%8D%E8%BF%9B%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="谢谢打赏"><a href="#谢谢打赏" class="headerlink" title="谢谢打赏"></a>谢谢打赏</h1><p><img src="https://github.com/275244143/picBed/blob/master/QQ%E5%9B%BE%E7%89%8720190416222833.png?raw=true" alt="QQ"></p><h1 id="验证技术公众号（Ricky友情支持）"><a href="#验证技术公众号（Ricky友情支持）" class="headerlink" title="验证技术公众号（Ricky友情支持）"></a>验证技术公众号（Ricky友情支持）</h1><p><img src="https://github.com/275244143/picBed/blob/master/QQ%E5%9B%BE%E7%89%8720190416224606.jpg?raw=true" alt="WEBCHAT"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SystemVerilog语法释义</title>
      <link href="/2019/04/16/SystemVerilog%E8%AF%AD%E6%B3%95%E9%87%8A%E4%B9%89/"/>
      <url>/2019/04/16/SystemVerilog%E8%AF%AD%E6%B3%95%E9%87%8A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-浮点数转换"><a href="#1-浮点数转换" class="headerlink" title="1.浮点数转换"></a>1.浮点数转换</h2><h3 id="ieee1800-2017解释："><a href="#ieee1800-2017解释：" class="headerlink" title="ieee1800-2017解释："></a>ieee1800-2017解释：</h3><pre><code>Real numbers shall be converted to integers by rounding the real number to the nearest integer, rather than by truncating it. Implicit conversion shall take place when a real number is assigned to an integer. If the fractional part of the real number is exactly 0.5, it shall be rounded away from zero.</code></pre><font color="blue"><br>代码例子：<br><pre name="code" class="systemverilog"><br>int x_int;<br>x_int = 2.4;//x_int –&gt; 2<br>x_int = 2.5;//x_int –&gt; 3<br>x_int = int’(2.5);//x_int –&gt; 2<br></pre><br></font> <h2 id="2-数据比特位快速反转"><a href="#2-数据比特位快速反转" class="headerlink" title="2.数据比特位快速反转"></a>2.数据比特位快速反转</h2><font color="blue"><br>代码例子：<br><pre name="code" class="systemverilog"><br>bit [15:0] x = 16’b0000_1011_0000_0011;<br>x= { &lt;&lt; {x} }; //x –&gt; 16’b1100_0000_1101_0000;<br></pre><br></font> <h2 id="3-super-super如何解决无法支持问题？"><a href="#3-super-super如何解决无法支持问题？" class="headerlink" title="3.super.super如何解决无法支持问题？"></a>3.super.super如何解决无法支持问题？</h2><font color="blue"><br>代码例子：<br><pre name="code" class="systemverilog"><br>module tb;<br><br>class A;<br>    virtual function void test();<br>        $display(“%m”);<br>    endfunction<br>endclass<br><br>class B extends A;<br>    virtual function void test();<br>        $display(“%m”);<br>    endfunction<br>endclass<br><br>class C extends B;<br>    virtual function void test();<br>        super.test();//Call B test()<br>        //super.super.test();//error!Can not support！<br>        //use follow<br>        A::test();//Call A test()<br>        $display(“%m”);<br>    endfunction<br>endclass<br><br>initial begin<br>    C cinst = new();<br>    cinst.test();<br>end<br><br>endmodule<br><br>仿真执行结果：<br>tb.B.test<br>tb.A.test<br>tb.C.test<br><br></pre><br></font> ]]></content>
      
      
      <categories>
          
          <category> 验证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UVM </tag>
            
            <tag> SystemVerilog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/google4519dd1ba112d3c3.html"/>
      <url>/google4519dd1ba112d3c3.html</url>
      
        <content type="html"><![CDATA[google-site-verification: google4519dd1ba112d3c3.html]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>常用技术链接</title>
      <link href="/hyperlink/index.html"/>
      <url>/hyperlink/index.html</url>
      
        <content type="html"><![CDATA[<ul><li>Git教程<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="Git教程" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li><li>GitForWinows<br><a href="https://gitforwindows.org/" title="GitForWinows" target="_blank" rel="noopener">https://gitforwindows.org/</a></li><li>Python<br><a href="https://www.python.org/" title="Python" target="_blank" rel="noopener">https://www.python.org/</a></li><li>C++ 参考手册<br><a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5" title="C++ 参考手册" target="_blank" rel="noopener">https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5</a></li><li>Cadence<br><a href="https://www.cadence.com/" title="Cadence" target="_blank" rel="noopener">https://www.cadence.com/</a></li><li>Synopsys<br><a href="https://www.synopsys.com/" title="Synopsys" target="_blank" rel="noopener">https://www.synopsys.com/</a></li><li>Mentor<br><a href="https://www.mentor.com/" title="Mentor" target="_blank" rel="noopener">https://www.mentor.com/</a></li><li>Accellera组织<br><a href="https://accellera.org/" title="Accellera" target="_blank" rel="noopener">https://accellera.org/</a></li><li>shell命令解释器<br><a href="https://explainshell.com/" target="_blank" rel="noopener">https://explainshell.com/</a></li><li>shell语法检查<br><a href="https://www.shellcheck.net/" target="_blank" rel="noopener">https://www.shellcheck.net/</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>有问必答</title>
      <link href="/guessbook/index.html"/>
      <url>/guessbook/index.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>~有什么话要对我说吗？这里是你畅所欲言的地方，可以咨询，可以交流，可以感叹~</strong><br><img src="/guessbook/index/message.jpg" alt="留言"></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
