{"meta":{"title":"验证技术博客@神秘人","subtitle":"人的智慧不用就会枯萎。","description":"在人生中最艰难的是选择。","author":"神秘人","url":"https://275244143.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-04-18T01:15:37.000Z","updated":"2019-04-24T03:19:37.437Z","comments":false,"path":"categories/index.html","permalink":"https://275244143.github.io/categories/index.html","excerpt":"","text":""},{"title":"有问必答","date":"2019-04-22T09:41:36.000Z","updated":"2019-04-24T03:19:37.440Z","comments":true,"path":"guessbook/index.html","permalink":"https://275244143.github.io/guessbook/index.html","excerpt":"","text":""},{"title":"常用技术链接","date":"2019-04-23T01:46:46.000Z","updated":"2019-04-24T03:19:37.443Z","comments":false,"path":"hyperlink/index.html","permalink":"https://275244143.github.io/hyperlink/index.html","excerpt":"","text":"Git教程https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 GitForWinowshttps://gitforwindows.org/ Pythonhttps://www.python.org/ C++ 参考手册https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5 Cadencehttps://www.cadence.com/ Synopsyshttps://www.synopsys.com/ Mentorhttps://www.mentor.com/ Accellera组织https://accellera.org/"},{"title":"tags","date":"2019-04-18T01:15:22.000Z","updated":"2019-04-24T03:19:37.445Z","comments":false,"path":"tags/index.html","permalink":"https://275244143.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"git操作总结","slug":"git操作总结","date":"2019-04-23T09:13:15.000Z","updated":"2019-04-24T03:19:37.425Z","comments":true,"path":"2019/04/23/git操作总结/","link":"","permalink":"https://275244143.github.io/2019/04/23/git操作总结/","excerpt":"","text":"工作原理： Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 1.新建代码库在当前目录新建一个Git代码库1git init 新建一个目录，将其初始化为Git代码库1git init [project-name] 下载一个项目和它的整个代码历史1git clone [url] 2.配置显示当前的Git配置1git config --list 编辑Git配置文件1git config -e [--global] 设置提交代码时的用户信息12git config [--global] user.name \"[name]\"git config [--global] user.email \"[email address]\" 3.增加/删除文件添加指定文件到暂存区1git add [file1] [file2] ... 添加指定目录到暂存区，包括子目录1git add [dir] 添加当前目录的所有文件到暂存区1git add . 添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交1git add -p 删除工作区文件，并且将这次删除放入暂存区1git rm [file1] [file2] ... 停止追踪指定文件，但该文件会保留在工作区1git rm --cached [file] 改名文件，并且将这个改名放入暂存区1git mv [file-original] [file-renamed] 4.代码提交提交暂存区到仓库区1git commit -m [message] 提交暂存区的指定文件到仓库区1git commit [file1] [file2] ... -m [message] 提交工作区自上次commit之后的变化，直接到仓库区1git commit -a 提交时显示所有diff信息1git commit -v 使用一次新的commit，替代上一次提交,如果代码没有任何新变化，则用来改写上一次commit的提交信息1git commit --amend -m [message] 重做上一次commit，并包括指定文件的新变化1git commit --amend [file1] [file2] ... 5.分支列出所有本地分支1git branch 列出所有远程分支1git branch -r 列出所有本地分支和远程分支1git branch -a 新建一个分支，但依然停留在当前分支1git branch [branch-name] 新建一个分支，并切换到该分支1git checkout -b [branch] 新建一个分支，指向指定commit1git branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系1git branch --track [branch] [remote-branch] 切换到指定分支，并更新工作区1git checkout [branch-name] 切换到上一个分支1git checkout - 建立追踪关系，在现有分支与指定的远程分支之间1git branch --set-upstream [branch] [remote-branch] 合并指定分支到当前分支1git merge [branch] 选择一个commit，合并进当前分支1git cherry-pick [commit] 删除分支1git branch -d [branch-name] 删除远程分支12git push origin --delete [branch-name]git branch -dr [remote/branch] 6.标签列出所有tag1git tag 新建一个tag在当前commit1git tag [tag] 新建一个tag在指定commit1git tag [tag] [commit] 删除本地tag1git tag -d [tag] 删除远程tag1git push origin :refs/tags/[tagName] 查看tag信息1git show [tag] 提交指定tag1git push [remote] [tag] 提交所有tag1git push [remote] --tags 新建一个分支，指向某个tag1git checkout -b [branch] [tag] 7.查看信息显示有变更的文件1git status 显示当前分支的版本历史1git log 显示commit历史，以及每次commit发生变更的文件1git log --stat 搜索提交历史，根据关键词1git log -S [keyword] 显示某个commit之后的所有变动，每个commit占据一行1git log [tag] HEAD --pretty=format:%s 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件1git log [tag] HEAD --grep feature 显示某个文件的版本历史，包括文件改名12git log --follow [file]git whatchanged [file] 显示指定文件相关的每一次diff1git log -p [file] 显示过去5次提交1git log -5 --pretty --oneline 显示所有提交过的用户，按提交次数排序1git shortlog -sn 显示指定文件是什么人在什么时间修改过1git blame [file] 显示暂存区和工作区的差异1git diff 显示暂存区和上一个commit的差异1git diff --cached [file] 显示工作区与当前分支最新commit之间的差异1git diff HEAD 显示两次提交之间的差异1git diff [first-branch]...[second-branch] 显示今天你写了多少行代码1git diff --shortstat \"@&#123;0 day ago&#125;\" 显示某次提交的元数据和内容变化1git show [commit] 显示某次提交发生变化的文件1git show --name-only [commit] 显示某次提交时，某个文件的内容1git show [commit]:[filename] 显示当前分支的最近几次提交1git reflog 八、远程同步 下载远程仓库的所有变动1git fetch [remote] 显示所有远程仓库1git remote -v 显示某个远程仓库的信息1git remote show [remote] 增加一个新的远程仓库，并命名1git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并1git pull [remote] [branch] 上传本地指定分支到远程仓库1git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突1git push [remote] --force 推送所有分支到远程仓库1git push [remote] --all 9.撤销恢复暂存区的指定文件到工作区1git checkout [file] 恢复某个commit的指定文件到暂存区和工作区1git checkout [commit] [file] 恢复暂存区的所有文件到工作区1git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变1git reset [file] 重置暂存区与工作区，与上一次commit保持一致1git reset --hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变1git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致1git reset --hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变1git reset --keep [commit] 新建一个commit，用来撤销指定commit,后者的所有变化都将被前者抵消，并且应用到当前分支1git revert [commit] 暂时将未提交的变化移除，稍后再移入12git stashgit stash pop","categories":[{"name":"Linux","slug":"Linux","permalink":"https://275244143.github.io/categories/Linux/"},{"name":"git","slug":"Linux/git","permalink":"https://275244143.github.io/categories/Linux/git/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://275244143.github.io/tags/shell/"},{"name":"git","slug":"git","permalink":"https://275244143.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://275244143.github.io/tags/github/"}]},{"title":"github回退代码到历史指定版本","slug":"github回退代码到历史指定版本","date":"2019-04-22T10:51:16.000Z","updated":"2019-04-24T03:19:37.423Z","comments":true,"path":"2019/04/22/github回退代码到历史指定版本/","link":"","permalink":"https://275244143.github.io/2019/04/22/github回退代码到历史指定版本/","excerpt":"","text":"前提是本地已经有了git的origin master库或者克隆需要回退的代码到本地。 查询历史对应不同版本的ID,用于回退使用。 1git log --pretty=oneline 使用git log命令查看所有的历史版本，获取你git的某个历史版本的id。 假设查到历史版本的id是fae6966548e3ae76cfa7f38a461c438cf75ba965。 恢复到历史版本。 1git reset --hard fae6966548e3ae76cfa7f38a461c438cf75ba965 把修改推到远程服务器。 1git push -f -u origin master 重新更新本地代码。 1git pull","categories":[{"name":"Linux","slug":"Linux","permalink":"https://275244143.github.io/categories/Linux/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://275244143.github.io/tags/shell/"},{"name":"git","slug":"git","permalink":"https://275244143.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://275244143.github.io/tags/github/"}]},{"title":"使用synopsys uvmgen快速生成uvm环境","slug":"使用synopsys uvmgen快速生成uvm环境","date":"2019-04-19T11:09:00.000Z","updated":"2019-04-24T03:19:37.429Z","comments":true,"path":"2019/04/19/使用synopsys uvmgen快速生成uvm环境/","link":"","permalink":"https://275244143.github.io/2019/04/19/使用synopsys uvmgen快速生成uvm环境/","excerpt":"","text":"通过vcs uvmgen模板生成UVM环境 命令行： 树形结构： 代码样例：","categories":[{"name":"验证","slug":"验证","permalink":"https://275244143.github.io/categories/验证/"}],"tags":[{"name":"UVM","slug":"UVM","permalink":"https://275244143.github.io/tags/UVM/"},{"name":"EDA","slug":"EDA","permalink":"https://275244143.github.io/tags/EDA/"},{"name":"synopsys","slug":"synopsys","permalink":"https://275244143.github.io/tags/synopsys/"}]},{"title":"常用脚本收集","slug":"常用脚本收集","date":"2019-04-19T08:38:00.000Z","updated":"2019-04-24T03:19:37.434Z","comments":true,"path":"2019/04/19/常用脚本收集/","link":"","permalink":"https://275244143.github.io/2019/04/19/常用脚本收集/","excerpt":"","text":"常用脚本收集 Sed 直接对文本文件进行行替代操作 12sed -i 's/原字符串/新字符串/' filesed -i 's/原字符串/新字符串/g' file 去掉 “行首” 带“@”的首字母@的行 1sed -i 's/^@//' file 在含有特定字符串的行前插入新行 1sed -i '/特定字符串/i 新行字符串' file 在含有特定字符串的行后插入新行 1sed -i '/特定字符串/a 新行字符串' file 删除含有特定字符串的行 1sed -i '/字符串/d' file python Perl Shell 列出所有目录使用量，并按大小排序。 12ls|xargs du -h|sort -rn #不递归下级目录使用du -sh 查看文件排除以#开关和空白行。 12egrep -v \"^#|^$\" filenamesed '/#.*$/d; /^ *$/d' 查删除空格和空行。 123sed '/^$/d' filename #删除空行sed 's/ //g' filenamesed 's/[[:space:]]//g' filename 删除#后的注释。 1sed -i 's/#.*$//g' filename 删除空文件。 1find / -type f -size 0 -exec rm -rf &#123;&#125; \\; 查找进程pid并kill。 12pgrep nginx|xargs kill pidof nginx|xargs kill 取当前IP地址。 1ifconfig |awk -F\"[ ]+|[:]\" 'NR==2 &#123;print $4&#125;' shell下新建文件夹并进入，以下加入bashrc。 1234mkcd ( )&#123; mkdir $1 cd $1 &#125; Kill整个进程树。 1pstree -ap 10277|grep -oP '[0-9]&#123;4,6&#125;'|xargs kill -9 目录中大量文件删除。 1ls | xargs rm","categories":[{"name":"脚本","slug":"脚本","permalink":"https://275244143.github.io/categories/脚本/"}],"tags":[{"name":"脚本","slug":"脚本","permalink":"https://275244143.github.io/tags/脚本/"}],"author":"神秘人"},{"title":"Layer-Sequence结构图","slug":"Layer-Sequence结构图","date":"2019-04-19T06:53:55.000Z","updated":"2019-04-24T03:19:37.411Z","comments":true,"path":"2019/04/19/Layer-Sequence结构图/","link":"","permalink":"https://275244143.github.io/2019/04/19/Layer-Sequence结构图/","excerpt":"","text":"UVM Layer Sequence结构图 1.可以1:1，1：N，N:N进行堆叠。 2.堆叠指针必须指向对应的sequencer。","categories":[{"name":"验证","slug":"验证","permalink":"https://275244143.github.io/categories/验证/"}],"tags":[{"name":"UVM","slug":"UVM","permalink":"https://275244143.github.io/tags/UVM/"},{"name":"SystemVerilog","slug":"SystemVerilog","permalink":"https://275244143.github.io/tags/SystemVerilog/"}],"author":"神秘人"},{"title":"Linux 查找指定名称的进程并显示进程详细信息","slug":"Linux相关操作","date":"2019-04-19T03:10:00.000Z","updated":"2019-04-24T03:19:37.413Z","comments":true,"path":"2019/04/19/Linux相关操作/","link":"","permalink":"https://275244143.github.io/2019/04/19/Linux相关操作/","excerpt":"","text":"给定一个进程名称特征串，查找所有匹配该进程名称的进程的详细信息。 (1) 先用pgrep [str] 命令进行模糊匹配，找到匹配该特征串的进程ID； (2) 其次根据进程ID显示指定的进程信息，ps –pid [pid]； (3) 因为查找出来的进程ID需要被作为参数传递给ps命令，故使用xargs命令，通过管道符号连接； (4) 最后显示进程详细信息，需要加上-u参数。 最终命令形如: pgrep ncsim | xargs ps -u –pid","categories":[{"name":"Linux","slug":"Linux","permalink":"https://275244143.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://275244143.github.io/tags/Linux/"},{"name":"shell","slug":"shell","permalink":"https://275244143.github.io/tags/shell/"}],"author":"神秘人"},{"title":"clocking块为什么能保证race free?","slug":"clocking块为什么能保证race-free","date":"2019-04-18T09:19:13.000Z","updated":"2019-04-24T03:19:37.422Z","comments":true,"path":"2019/04/18/clocking块为什么能保证race-free/","link":"","permalink":"https://275244143.github.io/2019/04/18/clocking块为什么能保证race-free/","excerpt":"","text":"为啥要推荐使用clocking块？代码例子：clocking cb @(negedge clk); input v;endclockingalways @(cb) $display(cb.v);//采样old值always @(negedge clk) $display(cb.v);//采样old or new值和仿真器相关。主要原因是clocking块中默认为1step采样，在clk下降沿发生时（@(cb)触发），数据已经采样了。而第二条always语句直接(@(negedge clk))和（@(cb)）并发，所以就有race glitch。","categories":[{"name":"验证","slug":"验证","permalink":"https://275244143.github.io/categories/验证/"}],"tags":[{"name":"SystemVerilog","slug":"SystemVerilog","permalink":"https://275244143.github.io/tags/SystemVerilog/"}]},{"title":"UVM寄存器模型中soft和hard reset有什么区别？","slug":"UVM寄存器模型中soft和hard-reset有什么区别？","date":"2019-04-18T01:39:46.000Z","updated":"2019-04-24T03:19:37.419Z","comments":true,"path":"2019/04/18/UVM寄存器模型中soft和hard-reset有什么区别？/","link":"","permalink":"https://275244143.github.io/2019/04/18/UVM寄存器模型中soft和hard-reset有什么区别？/","excerpt":"","text":"1.Kind = “HARD” or “SOFT”寄存器模型中复位操作这个到底有什么作用呢？源码如下： 代码例子：function void uvm_reg_xxx::reset(string kind = “HARD”); if (!m_reset.exists(kind)) return; m_mirrored = m_reset[kind]; m_desired = m_mirrored; value = m_mirrored; if (kind == “HARD”) m_written = 0;endfunction: reset其实是作为特别处理用的，如果所有的寄存器都只有一个复位的时候默认一个HARD值统一复位。如果某个寄存器需要特殊的复位，则可以重写该类中的reset（…）方法：代码例子：class some_reg extends uvm_reg; … function void reset(string kind = “HARD”); if (kind != “SOFT”) super.reset(kind); endfunctionendclass","categories":[{"name":"验证","slug":"验证","permalink":"https://275244143.github.io/categories/验证/"},{"name":"UVM-RAL","slug":"验证/UVM-RAL","permalink":"https://275244143.github.io/categories/验证/UVM-RAL/"}],"tags":[{"name":"UVM","slug":"UVM","permalink":"https://275244143.github.io/tags/UVM/"},{"name":"SystemVerilog","slug":"SystemVerilog","permalink":"https://275244143.github.io/tags/SystemVerilog/"},{"name":"RAL","slug":"RAL","permalink":"https://275244143.github.io/tags/RAL/"}]},{"title":"UVM-Register-Model","slug":"UVM-Register-Model","date":"2019-04-17T06:03:12.000Z","updated":"2019-04-24T03:19:37.419Z","comments":true,"path":"2019/04/17/UVM-Register-Model/","link":"","permalink":"https://275244143.github.io/2019/04/17/UVM-Register-Model/","excerpt":"","text":"1.UVM寄存器模型相关操作引起的一些关键变化缩写词UMV – Update Main Variable,UMrV – Update Mirror Variable,AP – Auto predictRDR – Read DUT Register,UDR – Update DUT Register,RMV – Read Main VariableFD – frontdoor,BD – Backdoor, – check if UVM_CHEK is used, NA – Not Applicable","categories":[{"name":"验证","slug":"验证","permalink":"https://275244143.github.io/categories/验证/"}],"tags":[{"name":"UVM","slug":"UVM","permalink":"https://275244143.github.io/tags/UVM/"},{"name":"SystemVerilog","slug":"SystemVerilog","permalink":"https://275244143.github.io/tags/SystemVerilog/"}]},{"title":"形式验证","slug":"形式验证","date":"2019-04-17T03:15:24.000Z","updated":"2019-04-24T03:19:37.435Z","comments":true,"path":"2019/04/17/形式验证/","link":"","permalink":"https://275244143.github.io/2019/04/17/形式验证/","excerpt":"","text":"1.什么时候需要使用形式验证（Formal Verification：FV）1.1 FV FOR COMPLETE COVERAGE： When you want to get complete coverage of design behaviors, consider using FV as your primary validation method. 注释： 当你需要100%覆盖功能时。例如：32bit * 32bit 乘法器，需要每个数字都要进行cover。 1.2 FV for Bug Hunting： When you have a design with nontrivial logic and are worried that you will not be able to get sufficient coverage with simulation tests, think about FV as a supplement to simulation. 注释： 担心无法获得足够的仿真测试覆盖时，可以考虑将FV作为补充，增强tapout信心。 1.3 FV for Exploring Designs： When you have a design where you can easily specify interesting states or outputs, but it is difficult or time-consuming to specify the sequence of inputs needed to get there, think about using FV. 注释： 虽然设计简单，如一些MUX组合，但很难或费时地指定需要的输入序列，可以考虑使用FV。","categories":[{"name":"验证","slug":"验证","permalink":"https://275244143.github.io/categories/验证/"}],"tags":[{"name":"SystemVerilog","slug":"SystemVerilog","permalink":"https://275244143.github.io/tags/SystemVerilog/"},{"name":"ABV","slug":"ABV","permalink":"https://275244143.github.io/tags/ABV/"},{"name":"FV","slug":"FV","permalink":"https://275244143.github.io/tags/FV/"}]},{"title":"QQ红包打赏,验证技术微信公众号，扫码即可，你的支持，就是技术的不断前进！","slug":"QQ红包打赏,验证技术微信公众号，扫码即可，你的支持，就是技术的不断前进！","date":"2019-04-16T08:52:08.000Z","updated":"2019-04-24T03:19:37.414Z","comments":true,"path":"2019/04/16/QQ红包打赏,验证技术微信公众号，扫码即可，你的支持，就是技术的不断前进！/","link":"","permalink":"https://275244143.github.io/2019/04/16/QQ红包打赏,验证技术微信公众号，扫码即可，你的支持，就是技术的不断前进！/","excerpt":"","text":"谢谢打赏 验证技术公众号（Ricky友情支持）","categories":[],"tags":[]},{"title":"SystemVerilog语法释义","slug":"SystemVerilog语法释义","date":"2019-04-16T08:08:43.000Z","updated":"2019-04-24T03:19:37.417Z","comments":true,"path":"2019/04/16/SystemVerilog语法释义/","link":"","permalink":"https://275244143.github.io/2019/04/16/SystemVerilog语法释义/","excerpt":"","text":"1.浮点数转换ieee1800-2017解释：Real numbers shall be converted to integers by rounding the real number to the nearest integer, rather than by truncating it. Implicit conversion shall take place when a real number is assigned to an integer. If the fractional part of the real number is exactly 0.5, it shall be rounded away from zero. 代码例子：int x_int;x_int = 2.4;//x_int –&gt; 2x_int = 2.5;//x_int –&gt; 3x_int = int’(2.5);//x_int –&gt; 2 2.数据比特位快速反转代码例子：bit [15:0] x = 16’b0000_1011_0000_0011;x= { &lt;&lt; {x} }; //x –&gt; 16’b1100_0000_1101_0000; 3.super.super如何解决无法支持问题？代码例子：module tb;class A; virtual function void test(); $display(“%m”); endfunctionendclassclass B extends A; virtual function void test(); $display(“%m”); endfunctionendclassclass C extends B; virtual function void test(); super.test();//Call B test() //super.super.test();//error!Can not support！ //use follow A::test();//Call A test() $display(“%m”); endfunctionendclassinitial begin C cinst = new(); cinst.test();endendmodule仿真执行结果：tb.B.testtb.A.testtb.C.test","categories":[{"name":"验证","slug":"验证","permalink":"https://275244143.github.io/categories/验证/"}],"tags":[{"name":"UVM","slug":"UVM","permalink":"https://275244143.github.io/tags/UVM/"},{"name":"SystemVerilog","slug":"SystemVerilog","permalink":"https://275244143.github.io/tags/SystemVerilog/"}]}]}